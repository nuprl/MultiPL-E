name: HumanEval_74_total_match
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9319a2j.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpq9319a2j.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpq9319a2j.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2b173554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp6o761l7.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpp6o761l7.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpp6o761l7.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x76cab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxn9no6z5.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpxn9no6z5.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpxn9no6z5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa7d30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5k_vyqe6.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp5k_vyqe6.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp5k_vyqe6.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe460a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvkmdin0i.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpvkmdin0i.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpvkmdin0i.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2b679554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum2 < sum1)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprpphmt62.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmprpphmt62.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmprpphmt62.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xdfba1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int lst1_total = 0;\n\
    \        int lst2_total = 0;\n        foreach (string s; lst1)\n            lst1_total\
    \ += s.length;\n        foreach (string s; lst2)\n            lst2_total += s.length;\n\
    \        if (lst1_total < lst2_total)\n            return lst1;\n        else\
    \ if (lst1_total > lst2_total)\n            return lst2;\n        else\n     \
    \       return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqari7__c.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429545]\\n??:? void tmpqari7__c.__unittest_L47_C1()\
    \ [0x428577]\\n??:? void tmpqari7__c.__modtest() [0x4287b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42de1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42929e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42accd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac59]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429275]\\n??:? runModuleUnitTests [0x42dbf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429994]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42991b]\\n??:? _d_run_main [0x429886]\\n??:? main [0x4287c3]\\\
    n??:? __libc_start_main [0x8c4bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp586dk22g.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp586dk22g.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp586dk22g.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc2ede554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptobuw4nr.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmptobuw4nr.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmptobuw4nr.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xf3b75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo8nco674.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpo8nco674.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpo8nco674.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x7906e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp05dqa283.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp05dqa283.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp05dqa283.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc4c03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n    \
    \    total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 < total2)\n        return lst1;\n    else\n        return lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt24q20a_.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429505]\\n??:? void tmpt24q20a_.__unittest_L38_C1()\
    \ [0x42848c]\\n??:? void tmpt24q20a_.__modtest() [0x42876c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dddf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42925e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac8d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac19]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429235]\\n??:? runModuleUnitTests [0x42dbb5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429954]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298db]\\n??:? _d_run_main [0x429846]\\n??:? main [0x42877f]\\\
    n??:? __libc_start_main [0x6c7ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwoy3o42v.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpwoy3o42v.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpwoy3o42v.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x310ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo23k5o3h.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpo23k5o3h.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpo23k5o3h.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xb2a7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4kl38k9j.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp4kl38k9j.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp4kl38k9j.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xda369554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk4q4k47g.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpk4q4k47g.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpk4q4k47g.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x92d2e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ == total_chars2)\n    {\n        return lst1;\n    }\n    else if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_lx_q3_l.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp_lx_q3_l.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp_lx_q3_l.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x7e03c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb9ceqfo1.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpb9ceqfo1.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpb9ceqfo1.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x1ab4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4t8aw4mw.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp4t8aw4mw.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp4t8aw4mw.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x5f70f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n     \
    \   total1 += s.length;\n    foreach(string s; lst2)\n        total2 += s.length;\n\
    \    if(total1 < total2)\n        return lst1;\n    else if(total2 < total1)\n\
    \        return lst2;\n    else\n        return lst1;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n \
    \   {\n        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      l2 += s.length;\n    }\n    if(l1 < l2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpityq7ycb.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpityq7ycb.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpityq7ycb.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd08cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk3yo1t0k.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpk3yo1t0k.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpk3yo1t0k.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x22dc0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int total1 = 0;\n    \
    \    int total2 = 0;\n        foreach (string s; lst1)\n            total1 +=\
    \ s.length;\n        foreach (string s; lst2)\n            total2 += s.length;\n\
    \        if (total1 < total2)\n            return lst1;\n        else if (total2\
    \ < total1)\n            return lst2;\n        else\n            return lst1;\n\
    \    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph0k_4427.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429545]\\n??:? void tmph0k_4427.__unittest_L47_C1()\
    \ [0x428577]\\n??:? void tmph0k_4427.__modtest() [0x4287b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42de1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42929e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42accd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac59]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429275]\\n??:? runModuleUnitTests [0x42dbf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429994]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42991b]\\n??:? _d_run_main [0x429886]\\n??:? main [0x4287c3]\\\
    n??:? __libc_start_main [0x72391554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpphcvtym5.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpphcvtym5.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpphcvtym5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x95d43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv8kg3jdz.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpv8kg3jdz.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpv8kg3jdz.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2f187554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplu8afzu8.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmplu8afzu8.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmplu8afzu8.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9ae9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps8mj1dwy.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmps8mj1dwy.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmps8mj1dwy.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x4ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n \
    \   {\n        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      l2 += s.length;\n    }\n    if(l1 == l2)\n    {\n        return lst1;\n\
    \    }\n    else if(l1 < l2)\n    {\n        return lst1;\n    }\n    else\n \
    \   {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnjzh_i32.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpnjzh_i32.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpnjzh_i32.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa9e51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc7km_ltq.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpc7km_ltq.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpc7km_ltq.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x21d7e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi7q00z_0.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpi7q00z_0.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpi7q00z_0.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe5f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnlpctxxw.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpnlpctxxw.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpnlpctxxw.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x249cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvho980_k.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpvho980_k.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpvho980_k.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x7e089554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0g_awn5c.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp0g_awn5c.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp0g_awn5c.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xeec00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_75hrro3.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp_75hrro3.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp_75hrro3.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x91caa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv2j422v6.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpv2j422v6.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpv2j422v6.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd7a21554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcgpghk2d.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpcgpghk2d.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpcgpghk2d.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x7c896554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcdcz5tkz.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpcdcz5tkz.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpcdcz5tkz.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x5fb91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnnj3pnie.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpnnj3pnie.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpnnj3pnie.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x3d52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkakxyb2s.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpkakxyb2s.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpkakxyb2s.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe21dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiiu0jcck.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpiiu0jcck.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpiiu0jcck.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x19366554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n    \
    \    total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 == total2)\n        return lst1;\n    else if (total1 < total2)\n\
    \        return lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxpk7hqrg.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpxpk7hqrg.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpxpk7hqrg.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x2852e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n    \
    \    total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 < total2)\n        return lst1;\n    else\n        return lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqrwuo2hk.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429505]\\n??:? void tmpqrwuo2hk.__unittest_L38_C1()\
    \ [0x42848c]\\n??:? void tmpqrwuo2hk.__modtest() [0x42876c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dddf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42925e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac8d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac19]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429235]\\n??:? runModuleUnitTests [0x42dbb5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429954]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298db]\\n??:? _d_run_main [0x429846]\\n??:? main [0x42877f]\\\
    n??:? __libc_start_main [0x37496554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppxln3usv.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmppxln3usv.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmppxln3usv.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xd333d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpno3emyda.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpno3emyda.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpno3emyda.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x1909f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5oksrq6o.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp5oksrq6o.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp5oksrq6o.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x715f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpauq92w1r.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpauq92w1r.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpauq92w1r.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x309c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5vuflbsu.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp5vuflbsu.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp5vuflbsu.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc0cea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0bu5eba7.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp0bu5eba7.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp0bu5eba7.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9ea6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj0tkl3hj.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpj0tkl3hj.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpj0tkl3hj.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd75c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3t3hy9id.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp3t3hy9id.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp3t3hy9id.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xbab9c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr08lnh4x.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpr08lnh4x.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpr08lnh4x.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x70836554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69s839nw.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp69s839nw.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp69s839nw.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc3ebf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3llgeb2v.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp3llgeb2v.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp3llgeb2v.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x15101554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo60um5fx.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpo60um5fx.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpo60um5fx.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x95a27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuyuy98vo.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpuyuy98vo.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpuyuy98vo.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x46f43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1x2ur_p5.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp1x2ur_p5.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp1x2ur_p5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa96af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj16nv0lm.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpj16nv0lm.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpj16nv0lm.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x7460d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfd5hkhzp.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpfd5hkhzp.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpfd5hkhzp.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x18af9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(string s; lst1)\n \
    \   {\n        l1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      l2 += s.length;\n    }\n    return l1 < l2 ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpktlr_h2s.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpktlr_h2s.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpktlr_h2s.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x8e6e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptzkk7085.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmptzkk7085.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmptzkk7085.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x4dea3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        total1 += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        total2 += str.length;\n    }\n    if(total1 < total2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps4vr28qe.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmps4vr28qe.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmps4vr28qe.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x935d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps1ahq7uf.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmps1ahq7uf.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmps1ahq7uf.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9e609554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2wxo56cb.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp2wxo56cb.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp2wxo56cb.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xae362554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n    \
    \    total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 < total2)\n        return lst1;\n    else\n        return lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpglp6m9tk.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294f5]\\n??:? void tmpglp6m9tk.__unittest_L38_C1()\
    \ [0x428480]\\n??:? void tmpglp6m9tk.__modtest() [0x428760]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddcf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42924e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac7d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac09]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429225]\\n??:? runModuleUnitTests [0x42dba5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429944]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298cb]\\n??:? _d_run_main [0x429836]\\n??:? main [0x428773]\\\
    n??:? __libc_start_main [0x8c80a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsa62qsiz.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpsa62qsiz.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpsa62qsiz.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x59799554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return lst1.length < lst2.length ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnsolbzd8.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293fd]\\n??:? void tmpnsolbzd8.__unittest_L27_C1()\
    \ [0x42826b]\\n??:? void tmpnsolbzd8.__modtest() [0x428664]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dcd7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429156]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ab85]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ac14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ab11]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42912d]\\n??:? runModuleUnitTests [0x42daad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42984c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297d3]\\n??:? _d_run_main [0x42973e]\\n??:? main [0x428677]\\\
    n??:? __libc_start_main [0xc78f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2e0f7zu3.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp2e0f7zu3.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp2e0f7zu3.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x58b5c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum2 < sum1)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwspt20c_.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpwspt20c_.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpwspt20c_.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xceaa4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfre91zus.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpfre91zus.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpfre91zus.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x36b61554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 == total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else if(total_chars_lst1 < total_chars_lst2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        total1 += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        total2 += str.length;\n    }\n    return (total1 < total2)\
    \ ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph11fsg4u.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmph11fsg4u.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmph11fsg4u.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb30a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7z1uul20.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp7z1uul20.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp7z1uul20.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x4ed25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_chars = 0;\n    int lst2_total_chars = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        lst1_total_chars += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        lst2_total_chars += s.length;\n\
    \    }\n    return lst1_total_chars < lst2_total_chars ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpehv98skx.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpehv98skx.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpehv98skx.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x54958554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxjbxj981.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpxjbxj981.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpxjbxj981.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x316b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl24b_sso.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpl24b_sso.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpl24b_sso.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xca494554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else if(total_chars_lst1 > total_chars_lst2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        total1 += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        total2 += str.length;\n    }\n    if(total1 < total2)\n\
    \    {\n        return lst1;\n    }\n    else if(total2 < total1)\n    {\n   \
    \     return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdkxtibom.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpdkxtibom.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpdkxtibom.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5f5a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq1tblbak.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpq1tblbak.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpq1tblbak.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xcbd3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgz25w6ka.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpgz25w6ka.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpgz25w6ka.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x75e6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt5t8i62q.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpt5t8i62q.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpt5t8i62q.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x5241c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 == total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else if(total_chars_lst1 < total_chars_lst2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int total1 = 0;\n    int total2 = 0;\n    foreach (string s; lst1)\n    \
    \    total1 += s.length;\n    foreach (string s; lst2)\n        total2 += s.length;\n\
    \    if (total1 == total2)\n        return lst1;\n    else if (total1 < total2)\n\
    \        return lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0iw9qud7.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp0iw9qud7.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp0iw9qud7.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x609ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 ==\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt1vddn9l.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpt1vddn9l.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpt1vddn9l.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xdab29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpucv2n7kl.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpucv2n7kl.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpucv2n7kl.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x4d77d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsrne5ztf.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpsrne5ztf.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpsrne5ztf.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x567ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1urepkud.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp1urepkud.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmp1urepkud.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x3d928554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int total_chars_lst1 =\
    \ 0;\n        int total_chars_lst2 = 0;\n        foreach (string s; lst1)\n  \
    \          total_chars_lst1 += s.length;\n        foreach (string s; lst2)\n \
    \           total_chars_lst2 += s.length;\n        if (total_chars_lst1 < total_chars_lst2)\n\
    \            return lst1;\n        else if (total_chars_lst1 > total_chars_lst2)\n\
    \            return lst2;\n        else\n            return lst1;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl1sjhmui.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429545]\\n??:? void tmpl1sjhmui.__unittest_L47_C1()\
    \ [0x428577]\\n??:? void tmpl1sjhmui.__modtest() [0x4287b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42de1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42929e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42accd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac59]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429275]\\n??:? runModuleUnitTests [0x42dbf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429994]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42991b]\\n??:? _d_run_main [0x429886]\\n??:? main [0x4287c3]\\\
    n??:? __libc_start_main [0x3f350554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiur_l8df.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpiur_l8df.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpiur_l8df.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd3f1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5idrnw9b.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp5idrnw9b.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp5idrnw9b.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x706bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_25_pr5.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp7_25_pr5.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp7_25_pr5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc3aee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 == total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else if(total_chars_lst1 < total_chars_lst2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpntxm2b93.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpntxm2b93.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpntxm2b93.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x668aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6d8jjpbi.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6d8jjpbi.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp6d8jjpbi.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x5797b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvdbi7zqn.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpvdbi7zqn.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpvdbi7zqn.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x63971554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmb877hk2.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpmb877hk2.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpmb877hk2.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x7ff66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp71jimo5t.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp71jimo5t.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp71jimo5t.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xea7f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd62wvkoi.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpd62wvkoi.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpd62wvkoi.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe2b38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else if(total_lst1 > total_lst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 == total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else if(total_chars_lst1 < total_chars_lst2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int total_lst1 = 0;\n\
    \        int total_lst2 = 0;\n        foreach (string s; lst1)\n            total_lst1\
    \ += s.length;\n        foreach (string s; lst2)\n            total_lst2 += s.length;\n\
    \        if (total_lst1 == total_lst2)\n            return lst1;\n        else\
    \ if (total_lst1 < total_lst2)\n            return lst1;\n        else\n     \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5xxmkkpv.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429545]\\n??:? void tmp5xxmkkpv.__unittest_L47_C1()\
    \ [0x428577]\\n??:? void tmp5xxmkkpv.__modtest() [0x4287b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42de1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42929e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42accd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac59]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429275]\\n??:? runModuleUnitTests [0x42dbf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429994]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42991b]\\n??:? _d_run_main [0x429886]\\n??:? main [0x4287c3]\\\
    n??:? __libc_start_main [0x2c20e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr9syiswd.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpr9syiswd.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpr9syiswd.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x3abe2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmyx6x_s9.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpmyx6x_s9.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpmyx6x_s9.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xf785d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7zunrcgs.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp7zunrcgs.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp7zunrcgs.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x5acc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        total1 += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        total2 += str.length;\n    }\n    if(total1 == total2)\n\
    \    {\n        return lst1;\n    }\n    else if(total1 < total2)\n    {\n   \
    \     return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaqvich0h.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpaqvich0h.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpaqvich0h.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa3811554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(str;\
    \ lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(str; lst2)\n\
    \    {\n        lst2_total += str.length;\n    }\n    if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else if(lst1_total < lst2_total)\n  \
    \  {\n        return lst1;\n    }\n    else\n    {\n        return lst1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj4rq3qca.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpj4rq3qca.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpj4rq3qca.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x98231554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2f3ixplf.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp2f3ixplf.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp2f3ixplf.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xf6898554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp44s2o4w4.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp44s2o4w4.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp44s2o4w4.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x676d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpud5ocbg3.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpud5ocbg3.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpud5ocbg3.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x3f5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0im38eq0.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp0im38eq0.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmp0im38eq0.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x8cc09554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjd54meef.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpjd54meef.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpjd54meef.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xfa5b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    int sum1 = 0;\n    int sum2 = 0;\n    foreach (string s; lst1)\n        sum1\
    \ += s.length;\n    foreach (string s; lst2)\n        sum2 += s.length;\n    if\
    \ (sum1 == sum2)\n        return lst1;\n    else if (sum1 < sum2)\n        return\
    \ lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpci2fxh9d.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpci2fxh9d.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpci2fxh9d.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x8c916554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx6miorhu.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpx6miorhu.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpx6miorhu.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x709d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyjmq13tq.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpyjmq13tq.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpyjmq13tq.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe5402554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 <\
    \ total_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpth75x_k0.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpth75x_k0.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpth75x_k0.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x29f01554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        total_chars_lst1 += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        total_chars_lst2 += s.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpro0cogha.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpro0cogha.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpro0cogha.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x698b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6m951lga.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6m951lga.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmp6m951lga.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2c96a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    if (lst1.length == 0)\n        return lst2;\n    if (lst2.length == 0)\n\
    \        return lst1;\n    int total1 = 0;\n    int total2 = 0;\n    foreach (i;\
    \ lst1)\n        total1 += i.length;\n    foreach (i; lst2)\n        total2 +=\
    \ i.length;\n    if (total1 < total2)\n        return lst1;\n    else if (total2\
    \ < total1)\n        return lst2;\n    else\n        return lst1;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp46tirvbq.d(55): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429555]\\n??:? void tmp46tirvbq.__unittest_L44_C1()\
    \ [0x428583]\\n??:? void tmp46tirvbq.__modtest() [0x4287bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42de2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4292ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42acdd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac69]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429285]\\n??:? runModuleUnitTests [0x42dc05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4299a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42992b]\\n??:? _d_run_main [0x429896]\\n??:? main [0x4287cf]\\\
    n??:? __libc_start_main [0x23240554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8i2391_1.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp8i2391_1.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmp8i2391_1.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x89533554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqdi8s92s.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpqdi8s92s.__unittest_L44_C1()\
    \ [0x428464]\\n??:? void tmpqdi8s92s.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x63416554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdi876zet.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpdi876zet.__unittest_L37_C1()\
    \ [0x428460]\\n??:? void tmpdi876zet.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x6a97a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 > total2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
