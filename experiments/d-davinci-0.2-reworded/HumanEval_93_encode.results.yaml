name: HumanEval_93_encode
language: d
results:
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmgj6vemk.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpmgj6vemk.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpmgj6vemk.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpmgj6vemk.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpmgj6vemk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toupper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= tolower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51tg9kkm.d(43): Error: undefined identifier `toupper`\\n/tmp/tmp51tg9kkm.d(45):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp51tg9kkm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgcd71_x.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpqgcd71_x.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqgcd71_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92iu3zv8.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp92iu3zv8.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp92iu3zv8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n      \
    \  else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp33geud4i.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp33geud4i.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp33geud4i.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp33geud4i.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp33geud4i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp03r48ae9.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp03r48ae9.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp03r48ae9.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp03r48ae9.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp03r48ae9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp76ouitiu.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp76ouitiu.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp76ouitiu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15ebmw1a.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp15ebmw1a.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp15ebmw1a.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp15ebmw1a.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15ebmw1a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n\
    \        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n \
    \       {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro62yrme.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpro62yrme.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro62yrme.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= tolower(c);\n        } \n        else \n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5vqjfn2h.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp5vqjfn2h.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5vqjfn2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_td494s_.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp_td494s_.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_td494s_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvum0189s.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpvum0189s.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvum0189s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3d93cilz.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmp3d93cilz.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmp3d93cilz.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x1ccfc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvpktssl.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpgvpktssl.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvpktssl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = 'A' + (c - 'a');\n        }\n \
    \       else if(c >= 'A' && c <= 'Z')\n        {\n            c = 'a' + (c - 'A');\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = 'a' + (c - 'a' + 2) % 26;\n        }\n \
    \       else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n  \
    \      {\n            c = 'A' + (c - 'A' + 2) % 26;\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1yi_u2d.d(24): Error: cannot implicitly convert expression `65\
    \ + (cast(int)c - 97)` of type `int` to `char`\\n/tmp/tmpa1yi_u2d.d(28): Error:\
    \ cannot implicitly convert expression `97 + (cast(int)c - 65)` of type `int`\
    \ to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1yi_u2d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3835o4i.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpe3835o4i.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpe3835o4i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            result ~= 'c';\n\
    \        }\n        else if(c == 'e')\n        {\n            result ~= 'g';\n\
    \        }\n        else if(c == 'i')\n        {\n            result ~= 'k';\n\
    \        }\n        else if(c == 'o')\n        {\n            result ~= 'q';\n\
    \        }\n        else if(c == 'u')\n        {\n            result ~= 'y';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcu2i74wg.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpcu2i74wg.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpcu2i74wg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgo91elax.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpgo91elax.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpgo91elax.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xd2b30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n\
    \        } \n        else if (c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= tolower(c);\n        } \n        else \n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5l_g83p7.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp5l_g83p7.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5l_g83p7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ponhzy1.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp5ponhzy1.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5ponhzy1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(isalpha(c))\
    \ \n        {\n            if(isupper(c)) \n            {\n                c =\
    \ tolower(c);\n            } \n            else \n            {\n            \
    \    c = toupper(c);\n            }\n            switch(c) \n            {\n \
    \               case 'a':\n                    c = 'c';\n                    break;\n\
    \                case 'e':\n                    c = 'g';\n                   \
    \ break;\n                case 'i':\n                    c = 'k';\n          \
    \          break;\n                case 'o':\n                    c = 'q';\n \
    \                   break;\n                case 'u':\n                    c =\
    \ 'y';\n                    break;\n                case 'y':\n              \
    \      c = 'a';\n                    break;\n                case 'b':\n     \
    \               c = 'd';\n                    break;\n                case 'f':\n\
    \                    c = 'h';\n                    break;\n                case\
    \ 'j':\n                    c = 'l';\n                    break;\n           \
    \     case 'p':\n                    c = 'r';\n                    break;\n  \
    \              case 'v':\n                    c = 'z';\n                    break;\n\
    \                case 'z':\n                    c = 'b';\n                   \
    \ break;\n                case 'c':\n                    c = 'e';\n          \
    \          break;\n                case 'g':\n                    c = 'i';\n \
    \                   break;\n                case 'k':\n                    c =\
    \ 'm';\n                    break;\n                case 'q':\n              \
    \      c = 's';\n                    break;\n                case 'w':\n     \
    \               c = 'a';\n                    break;\n                case 'd':\n\
    \                    c = 'f';\n                    break;\n                case\
    \ 'h':\n                    c = 'j';\n                    break;\n           \
    \     case 'l':\n                    c = 'n';\n                    break;\n  \
    \              case 'r':\n                    c = 't';\n                    break;\n\
    \                case 'x':\n                    c = 'c';\n                   \
    \ break;\n                case 'm':\n                    c = 'o';\n          \
    \          break;\n                case 'n':\n                    c = 'p';\n \
    \                   break;\n                case 's':\n                    c =\
    \ 'u';\n                   \nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_oaso7om.d(109): Error: found `unittest` instead of statement\\\
    n/tmp/tmp_oaso7om.d(119): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_oaso7om.d(119): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp_oaso7om.d(119): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_oaso7om.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if (c == 'a')\n \
    \           {\n                c = 'c';\n            }\n            else if (c\
    \ == 'e')\n            {\n                c = 'g';\n            }\n          \
    \  else if (c == 'i')\n            {\n                c = 'k';\n            }\n\
    \            else if (c == 'o')\n            {\n                c = 'q';\n   \
    \         }\n            else if (c == 'u')\n            {\n                c\
    \ = 'w';\n            }\n            else if (c == 'y')\n            {\n     \
    \           c = 'a';\n            }\n            else\n            {\n       \
    \         c += 2;\n            }\n        }\n        result ~= c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ep_ag1s.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp4ep_ag1s.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp4ep_ag1s.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp4ep_ag1s.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ep_ag1s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6m3j8cxc.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp6m3j8cxc.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp6m3j8cxc.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp6m3j8cxc.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp6m3j8cxc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5yq4laf0.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp5yq4laf0.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp5yq4laf0.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp5yq4laf0.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yq4laf0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuact_esh.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpuact_esh.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpuact_esh.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpuact_esh.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuact_esh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n      \
    \  else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptc4a_bjv.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmptc4a_bjv.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmptc4a_bjv.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmptc4a_bjv.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmptc4a_bjv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message) {\n        if(c\
    \ == 'a') {\n            encoded ~= 'c';\n        } else if(c == 'e') {\n    \
    \        encoded ~= 'g';\n        } else if(c == 'i') {\n            encoded ~=\
    \ 'k';\n        } else if(c == 'o') {\n            encoded ~= 'q';\n        }\
    \ else if(c == 'u') {\n            encoded ~= 'y';\n        } else if(c == 'A')\
    \ {\n            encoded ~= 'C';\n        } else if(c == 'E') {\n            encoded\
    \ ~= 'G';\n        } else if(c == 'I') {\n            encoded ~= 'K';\n      \
    \  } else if(c == 'O') {\n            encoded ~= 'Q';\n        } else if(c ==\
    \ 'U') {\n            encoded ~= 'Y';\n        } else {\n            encoded ~=\
    \ c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp4wd6b6o.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmpp4wd6b6o.__unittest_L47_C1()\
    \ [0x427dd6]\\n??:? void tmpp4wd6b6o.__modtest() [0x427fb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430660]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43013d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c6a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428684]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42860b]\\n??:? _d_run_main [0x428576]\\n??:? main [0x427fc7]\\\
    n??:? __libc_start_main [0xfb492554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbarwdnbx.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpbarwdnbx.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbarwdnbx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7p3g3iy.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpn7p3g3iy.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpn7p3g3iy.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpn7p3g3iy.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7p3g3iy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ez1sq6c.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp1ez1sq6c.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp1ez1sq6c.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp1ez1sq6c.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp1ez1sq6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp002u38xm.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp002u38xm.d(28):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmp002u38xm.d(35): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp002u38xm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpedkr2hbk.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpedkr2hbk.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpedkr2hbk.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpedkr2hbk.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedkr2hbk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn2xamuu0.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpn2xamuu0.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpn2xamuu0.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpn2xamuu0.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpn2xamuu0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] result = new\
    \ char[message.length];\n    for (int i = 0; i < message.length; i++)\n    {\n\
    \        char c = message[i];\n        if (isUpperCase(c))\n        {\n      \
    \      c = toLowerCase(c);\n        }\n        else if (isLowerCase(c))\n    \
    \    {\n            c = toUpperCase(c);\n        }\n        if (c == 'z')\n  \
    \      {\n            c = 'b';\n        }\n        else if (c == 'Z')\n      \
    \  {\n            c = 'B';\n        }\n        else if (c == 'y')\n        {\n\
    \            c = 'a';\n        }\n        else if (c == 'Y')\n        {\n    \
    \        c = 'A';\n        }\n        else if (c == 'x')\n        {\n        \
    \    c = 'z';\n        }\n        else if (c == 'X')\n        {\n            c\
    \ = 'Z';\n        }\n        else if (c == 'w')\n        {\n            c = 'y';\n\
    \        }\n        else if (c == 'W')\n        {\n            c = 'Y';\n    \
    \    }\n        else if (c == 'v')\n        {\n            c = 'x';\n        }\n\
    \        else if (c == 'V')\n        {\n            c = 'X';\n        }\n    \
    \    else if (c == 'u')\n        {\n            c = 'w';\n        }\n        else\
    \ if (c == 'U')\n        {\n            c = 'W';\n        }\n        else if (c\
    \ == 't')\n        {\n            c = 'v';\n        }\n        else if (c == 'T')\n\
    \        {\n            c = 'V';\n        }\n        else if (c == 's')\n    \
    \    {\n            c = 'u';\n        }\n        else if (c == 'S')\n        {\n\
    \            c = 'U';\n        }\n        else if (c == 'r')\n        {\n    \
    \        c = 't';\n       \nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcojxu_u.d(100): Error: found `unittest` instead of statement\\\
    n/tmp/tmpgcojxu_u.d(110): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpgcojxu_u.d(110): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgcojxu_u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzmgfl4nl.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpzmgfl4nl.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpzmgfl4nl.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x869d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n        {\n            c = c + 2;\n            if(c > 'z')\n \
    \           {\n                c = c - 'z' + 'a' - 1;\n            }\n       \
    \ }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = c + 2;\n            if(c > 'Z')\n            {\n \
    \               c = c - 'Z' + 'A' - 1;\n            }\n        }\n        encoded\
    \ ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4awjgyu_.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp4awjgyu_.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp4awjgyu_.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp4awjgyu_.d(35): Error: cannot implicitly convert expression\
    \ `cast(int)c - 122 + 97 - 1` of type `int` to `char`\\n/tmp/tmp4awjgyu_.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp4awjgyu_.d(43): Error: cannot implicitly convert expression\
    \ `cast(int)c - 90 + 65 - 1` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4awjgyu_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzleb8cio.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpzleb8cio.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpzleb8cio.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpzleb8cio.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpzleb8cio.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6mfoyiz.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpy6mfoyiz.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpy6mfoyiz.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpy6mfoyiz.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6mfoyiz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwzmhfqeo.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpwzmhfqeo.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpwzmhfqeo.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x33266554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int len = message.length;\n    string result = \"\";\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        char c = message[i];\n        if (c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if (c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        result += c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzx3xe8mk.d(19): Error: cannot implicitly convert expression `message.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpzx3xe8mk.d(26): Error: cannot implicitly\
    \ convert expression `cast(int)c - 97 + 65` of type `int` to `char`\\n/tmp/tmpzx3xe8mk.d(30):\
    \ Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int`\
    \ to `char`\\n/tmp/tmpzx3xe8mk.d(32): Error: slice `result` is not mutable\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzx3xe8mk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46jgon33.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp46jgon33.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp46jgon33.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp46jgon33.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46jgon33.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= c.toUpper;\n       \
    \ else if(c >= 'A' && c <= 'Z')\n            result ~= c.toLower;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9urxr8ep.d(43): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmp9urxr8ep.d(45): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9urxr8ep.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9gye6vj.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpb9gye6vj.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpb9gye6vj.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpb9gye6vj.d(30): Error: undefined identifier `toupper`\\\
    n/tmp/tmpb9gye6vj.d(58): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpb9gye6vj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        if(c >= 'A' && c <= 'Z')\n        {\n            if(c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n             \
    \   c = (c - 'A' + 2) % 26 + 'A';\n            }\n        }\n        result ~=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa43u4b3w.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa43u4b3w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpepcc6m9c.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmpepcc6m9c.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpepcc6m9c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toUpper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= toLower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa99tsigw.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmpa99tsigw.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpa99tsigw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgzt7aqxn.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpgzt7aqxn.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgzt7aqxn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi33wg4qn.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpi33wg4qn.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpi33wg4qn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx7ja84m9.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpx7ja84m9.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpx7ja84m9.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x80b1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptu8vzc88.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmptu8vzc88.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmptu8vzc88.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmptu8vzc88.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu8vzc88.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n\
    \                c = toUpper(c);\n            }\n            else\n          \
    \  {\n                c = toLower(c);\n            }\n            if(c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n          \
    \      if(c == 'U')\n                {\n                    c = 'A';\n       \
    \         }\n                else\n                {\n                    c =\
    \ c + 2;\n                }\n            }\n        }\n        encodedMessage\
    \ ~= c;\n    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgm9afjs2.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpgm9afjs2.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpgm9afjs2.d(26): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpgm9afjs2.d(30): Error: undefined identifier `toLower`\\\
    n/tmp/tmpgm9afjs2.d(40): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgm9afjs2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4svgand1.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmp4svgand1.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmp4svgand1.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x56fdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13hzmg5d.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp13hzmg5d.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp13hzmg5d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isalpha(c))\n        {\n            if(islower(c))\n            {\n   \
    \             c = toupper(c);\n            }\n            else\n            {\n\
    \                c = tolower(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'A':\n                    c = 'C';\n         \
    \           break;\n                case 'E':\n                    c = 'G';\n\
    \                    break;\n                case 'I':\n                    c\
    \ = 'K';\n                    break;\n                case 'O':\n            \
    \        c = 'Q';\n                    break;\n                case 'U':\n   \
    \                 c = 'S';\n                    break;\n                case 'Y':\n\
    \                    c = 'A';\n                    break;\n                case\
    \ 'C':\n                    c = 'E';\n                    break;\n           \
    \     case 'G':\n                    c = 'I';\n                    break;\n  \
    \              case 'K':\n                    c = 'O';\n                    break;\n\
    \                case 'Q':\n                    c = 'U';\n                   \
    \ break;\n                case 'S':\n                    c = 'Y';\n          \
    \          break;\n                case 'a':\n                    c = 'c';\n \
    \                   break;\n                case 'e':\n                    c =\
    \ 'g';\n                    break;\n                case 'i':\n              \
    \      c = 'k';\n                    break;\n                case 'o':\n     \
    \               c = 'q';\n                    break;\n                case 'u':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'y':\n                    c = 'a';\n                    break;\n           \
    \     case 'c':\n                    c = 'e';\n                    break;\n  \
    \              case 'g':\n                    c = 'i';\n                    break;\n\
    \                case 'k':\n                    c = 'o';\n                   \
    \ break;\n                case 'q':\n                    c = 'u';\n          \
    \          break;\n                case 's':\n                    c = 'y';\n \
    \                   break;\n            }\n        }\n        encoded ~= c;\n\
    \    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e71yg7a.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp6e71yg7a.d(24):\
    \ Error: undefined identifier `islower`\\n/tmp/tmp6e71yg7a.d(26): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmp6e71yg7a.d(30): Error: undefined identifier `tolower`\\\
    n/tmp/tmp6e71yg7a.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e71yg7a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uw0rfic.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp7uw0rfic.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp7uw0rfic.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo4iqamys.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpo4iqamys.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpo4iqamys.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpo4iqamys.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4iqamys.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'b';\n              \
    \  else if(c == 'Y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= tolower(c) + 2;\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'B';\n\
    \                else if(c == 'y')\n                    result ~= 'A';\n     \
    \           else\n                    result ~= toupper(c) + 2;\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3wuu21zq.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp3wuu21zq.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp3wuu21zq.d(31): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp3wuu21zq.d(40): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wuu21zq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z')\n    \
    \    {\n            c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' &&\
    \ c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n    \
    \        c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = (c\
    \ - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxx7hsyb.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpvxx7hsyb.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpvxx7hsyb.d(39):\
    \ Error: slice `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvxx7hsyb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'a':\n\
    \            case 'A':\n                result ~= 'C';\n                break;\n\
    \            case 'e':\n            case 'E':\n                result ~= 'G';\n\
    \                break;\n            case 'i':\n            case 'I':\n      \
    \          result ~= 'K';\n                break;\n            case 'o':\n   \
    \         case 'O':\n                result ~= 'M';\n                break;\n\
    \            case 'u':\n            case 'U':\n                result ~= 'Q';\n\
    \                break;\n            default:\n                result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4e0ypnz.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpk4e0ypnz.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4e0ypnz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = (c + 2) % 26 + 'a';\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79qysv5t.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp79qysv5t.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79qysv5t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= tolower(c);\n        }\n        else \n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6ozpw3f.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp_6ozpw3f.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_6ozpw3f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n            continue;\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50h0g2f7.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp50h0g2f7.d(28):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmp50h0g2f7.d(35): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp50h0g2f7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmydybmwd.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpmydybmwd.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmydybmwd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'y';\n              \
    \  else if(c == 'z')\n                    result ~= 'b';\n                else\n\
    \                    result ~= c + 2;\n            }\n            else\n     \
    \       {\n                if(c == 'W')\n                    result ~= 'Y';\n\
    \                else if(c == 'Z')\n                    result ~= 'B';\n     \
    \           else\n                    result ~= c + 2;\n            }\n      \
    \  }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdm0t81xi.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpdm0t81xi.d(24):\
    \ Error: undefined identifier `isLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdm0t81xi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'b':\n\
    \                    c = 'd';\n                    break;\n                case\
    \ 'f':\n                    c = 'h';\n                    break;\n           \
    \     case 'j':\n                    c = 'l';\n                    break;\n  \
    \              case 'p':\n                    c = 'r';\n                    break;\n\
    \                case 'v':\n                    c = 'z';\n                   \
    \ break;\n                case 'c':\n                    c = 'e';\n          \
    \          break;\n                case 'g':\n                    c = 'i';\n \
    \                   break;\n                case 'k':\n                    c =\
    \ 'm';\n                    break;\n                case 'q':\n              \
    \      c = 's';\n                    break;\n                case 'w':\n     \
    \               c = 'a';\n                    break;\n                case 'd':\n\
    \                    c = 'f';\n                    break;\n                case\
    \ 'h':\n                    c = 'j';\n                    break;\n           \
    \     case 'l':\n                    c = 'n';\n                    break;\n  \
    \              case 'r':\n                    c = 't';\n                    break;\n\
    \                case 'x':\n                    c = 'b';\n                   \
    \ break;\n                case 'y':\n                    c = 'd';\n          \
    \          break;\n                case 'm':\n                    c = 'o';\n \
    \                   break;\n                case 'n':\n                    c =\
    \ 'p';\n                    break;\n                case 's':\n              \
    \      c = 'u';\n                    break;\n                case 't':\n     \
    \               c = 'v';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfm8cq7o.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpcfm8cq7o.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpcfm8cq7o.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpcfm8cq7o.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfm8cq7o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphi9dn0c4.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmphi9dn0c4.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmphi9dn0c4.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmphi9dn0c4.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmphi9dn0c4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcsdr0rc.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpjcsdr0rc.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjcsdr0rc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiunb5pvp.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmpiunb5pvp.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpiunb5pvp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps2jc641o.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmps2jc641o.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmps2jc641o.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0x2d985554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zvor_5s.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp1zvor_5s.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp1zvor_5s.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp1zvor_5s.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zvor_5s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp0mc2wt5.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpp0mc2wt5.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpp0mc2wt5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplypasgoq.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmplypasgoq.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmplypasgoq.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmplypasgoq.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmplypasgoq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmcsudqhb.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpmcsudqhb.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpmcsudqhb.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpmcsudqhb.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcsudqhb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6nrt2u2.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpj6nrt2u2.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpj6nrt2u2.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpj6nrt2u2.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpj6nrt2u2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21n1vzmv.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp21n1vzmv.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp21n1vzmv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if(c == 'a')\n        {\n          \
    \  result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n         \
    \   result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n        \
    \    result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n       \
    \     result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n      \
    \      result ~= 'y';\n        }\n        else if(c == 'A')\n        {\n     \
    \       result ~= 'C';\n        }\n        else if(c == 'E')\n        {\n    \
    \        result ~= 'G';\n        }\n        else if(c == 'I')\n        {\n   \
    \         result ~= 'K';\n        }\n        else if(c == 'O')\n        {\n  \
    \          result ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n \
    \           result ~= 'Y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59le2d4j.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp59le2d4j.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp59le2d4j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n    \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9a3u53xn.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp9a3u53xn.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a3u53xn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg7aou2dw.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpg7aou2dw.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpg7aou2dw.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0xa894c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0t5_tulk.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmp0t5_tulk.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmp0t5_tulk.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0xc5f90554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2m_wli73.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp2m_wli73.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2m_wli73.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknlnu_2_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpknlnu_2_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpknlnu_2_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjk36c0k.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpqjk36c0k.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpqjk36c0k.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpqjk36c0k.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjk36c0k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpze20gjtn.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpze20gjtn.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpze20gjtn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc0d7kjhp.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpc0d7kjhp.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpc0d7kjhp.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x2fce4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(c; message)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n \
    \       }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6l7plr0c.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmp6l7plr0c.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmp6l7plr0c.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0x19952554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = (c + 2) % 26 + 'a';\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg94s94p7.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpg94s94p7.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg94s94p7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdlrjjjgo.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpdlrjjjgo.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpdlrjjjgo.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpdlrjjjgo.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpdlrjjjgo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nsd497x.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp4nsd497x.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp4nsd497x.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp4nsd497x.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nsd497x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pie422_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp2pie422_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2pie422_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9t945o4.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpu9t945o4.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu9t945o4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n    \
    \            result ~= toLower(c);\n            }\n            else\n        \
    \    {\n                result ~= toUpper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvv9b9nv.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpkvv9b9nv.d(24):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpkvv9b9nv.d(26): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmpkvv9b9nv.d(30): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvv9b9nv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            if(c == 'z')\n           \
    \     result ~= 'B';\n            else if(c == 'y')\n                result ~=\
    \ 'A';\n            else\n                result ~= char(c + 2);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            if(c == 'Z')\n\
    \                result ~= 'b';\n            else if(c == 'Y')\n             \
    \   result ~= 'a';\n            else\n                result ~= char(c + 2);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnry1qkeg.d(29): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\n/tmp/tmpnry1qkeg.d(38): Error: cannot implicitly\
    \ convert expression `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnry1qkeg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c >= 'a' && c <= 'z') \n        {\n            result ~= toUpper(c);\n\
    \        } \n        else if (c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= toLower(c);\n        } \n        else \n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2k_a5i2n.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp2k_a5i2n.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2k_a5i2n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo44iazsd.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpo44iazsd.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpo44iazsd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqsk515f.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpsqsk515f.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsqsk515f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35pnzpt_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp35pnzpt_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp35pnzpt_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1qmd78l5.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp1qmd78l5.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1qmd78l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 32);\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c + 32);\n        }\n        else\n        {\n            result ~= c;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq8a8uit_.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280b5]\\n??:? void tmpq8a8uit_.__unittest_L37_C1()\
    \ [0x427c56]\\n??:? void tmpq8a8uit_.__modtest() [0x427e34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b925]\\n??:? runModuleUnitTests [0x42c815]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428504]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42848b]\\n??:? _d_run_main [0x4283f6]\\n??:? main [0x427e47]\\\
    n??:? __libc_start_main [0xdff30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            } \n            else \n   \
    \         {\n                result ~= toupper(c);\n            }\n        } \n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nh6smt0.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp5nh6smt0.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp5nh6smt0.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp5nh6smt0.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nh6smt0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgyo60fw9.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpgyo60fw9.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpgyo60fw9.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0xaffef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        if(c == 'a')\n        {\n            c = 'c';\n        }\n\
    \        else if(c == 'e')\n        {\n            c = 'g';\n        }\n     \
    \   else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else\
    \ if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c\
    \ == 'u')\n        {\n            c = 'y';\n        }\n        else if(c == 'A')\n\
    \        {\n            c = 'C';\n        }\n        else if(c == 'E')\n     \
    \   {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n\
    \            c = 'K';\n        }\n        else if(c == 'O')\n        {\n     \
    \       c = 'Q';\n        }\n        else if(c == 'U')\n        {\n          \
    \  c = 'Y';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0f_1_8e4.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp0f_1_8e4.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0f_1_8e4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91gdub88.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp91gdub88.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp91gdub88.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp91gdub88.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91gdub88.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk05tyrqm.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpk05tyrqm.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpk05tyrqm.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpk05tyrqm.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk05tyrqm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahhh4hxz.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpahhh4hxz.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpahhh4hxz.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpahhh4hxz.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpahhh4hxz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(isAlpha(c))\
    \ \n        {\n            if(isLower(c)) \n            {\n                c =\
    \ toUpper(c);\n            }\n            else \n            {\n             \
    \   c = toLower(c);\n            }\n            switch(c) \n            {\n  \
    \              case 'A':\n                    c = 'C';\n                    break;\n\
    \                case 'E':\n                    c = 'G';\n                   \
    \ break;\n                case 'I':\n                    c = 'K';\n          \
    \          break;\n                case 'O':\n                    c = 'Q';\n \
    \                   break;\n                case 'U':\n                    c =\
    \ 'S';\n                    break;\n                case 'Y':\n              \
    \      c = 'A';\n                    break;\n                case 'C':\n     \
    \               c = 'E';\n                    break;\n                case 'G':\n\
    \                    c = 'I';\n                    break;\n                case\
    \ 'K':\n                    c = 'O';\n                    break;\n           \
    \     case 'Q':\n                    c = 'U';\n                    break;\n  \
    \              case 'S':\n                    c = 'Y';\n                    break;\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6l6ckt8.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpu6l6ckt8.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpu6l6ckt8.d(26): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpu6l6ckt8.d(30): Error: undefined identifier `toLower`\\\
    n/tmp/tmpu6l6ckt8.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6l6ckt8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n  \
    \      }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (c + 2);\n        }\n        else\n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpow5grjo4.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpow5grjo4.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpow5grjo4.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x18098554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprh0jrmy1.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmprh0jrmy1.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmprh0jrmy1.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmprh0jrmy1.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprh0jrmy1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7fe3t6h.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpr7fe3t6h.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr7fe3t6h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3gntbja7.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp3gntbja7.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp3gntbja7.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp3gntbja7.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3gntbja7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c >= 'a' && c <= 'z') \n        {\n            c = c - 'a' + 'A';\n  \
    \      }\n        else if (c >= 'A' && c <= 'Z') \n        {\n            c =\
    \ c - 'A' + 'a';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') \n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') \n        {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n\
    \        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6yoycwh3.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp6yoycwh3.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6yoycwh3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'b':\n                    c = 'd';\n                    break;\n           \
    \     case 'f':\n                    c = 'h';\n                    break;\n  \
    \              case 'j':\n                    c = 'l';\n                    break;\n\
    \                case 'p':\n                    c = 'r';\n                   \
    \ break;\n                case 'v':\n                    c = 'z';\n          \
    \          break;\n                case 'z':\n                    c = 'b';\n \
    \                   break;\n                case 'c':\n                    c =\
    \ 'e';\n                    break;\n                case 'g':\n              \
    \      c = 'i';\n                    break;\n                case 'k':\n     \
    \               c = 'm';\n                    break;\n                case 'q':\n\
    \                    c = 's';\n                    break;\n                case\
    \ 'w':\n                    c = 'a';\n                    break;\n           \
    \     case 'd':\n                    c = 'f';\n                    break;\n  \
    \              case 'h':\n                    c = 'j';\n                    break;\n\
    \                case 'l':\n                    c = 'n';\n                   \
    \ break;\n                case 'r':\n                    c = 't';\n          \
    \          break;\n                case 'x':\n                    c = 'c';\n \
    \                   break;\n                case 'm':\n                    c =\
    \ 'o';\n                    break;\n                case 'n':\n              \
    \      c = 'p';\n                    break;\n                case 's':\n     \
    \               c = 'u';\n                    break;\n               \nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ui7hyi8.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp7ui7hyi8.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7ui7hyi8.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7ui7hyi8.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ui7hyi8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        switch(c)\n        {\n            case 'A':\n            \
    \    c = 'C';\n                break;\n            case 'E':\n               \
    \ c = 'G';\n                break;\n            case 'I':\n                c =\
    \ 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'Y';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 'y';\n                break;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_7m_2zn.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpi_7m_2zn.d(28):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmpi_7m_2zn.d(30): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi_7m_2zn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cm5531n.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp8cm5531n.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp8cm5531n.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp8cm5531n.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp8cm5531n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw78kgd9e.d(22): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpw78kgd9e.d(23): Error: no property `toLower` for type `char`\\n/tmp/tmpw78kgd9e.d(24):\
    \ Error: no property `isLower` for type `char`\\n/tmp/tmpw78kgd9e.d(25): Error:\
    \ no property `toUpper` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpw78kgd9e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ofewyrq.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp4ofewyrq.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4ofewyrq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuulru6c0.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpuulru6c0.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpuulru6c0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else if(c == 'A')\n        {\n            result ~= 'C';\n\
    \        }\n        else if(c == 'E')\n        {\n            result ~= 'G';\n\
    \        }\n        else if(c == 'I')\n        {\n            result ~= 'K';\n\
    \        }\n        else if(c == 'O')\n        {\n            result ~= 'Q';\n\
    \        }\n        else if(c == 'U')\n        {\n            result ~= 'S';\n\
    \        }\n        else if(c == 'a')\n        {\n            result ~= 'c';\n\
    \        }\n        else if(c == 'e')\n        {\n            result ~= 'g';\n\
    \        }\n        else if(c == 'i')\n        {\n            result ~= 'k';\n\
    \        }\n        else if(c == 'o')\n        {\n            result ~= 'q';\n\
    \        }\n        else if(c == 'u')\n        {\n            result ~= 's';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21z0axz_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp21z0axz_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp21z0axz_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pvhdyuc.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp3pvhdyuc.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp3pvhdyuc.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp3pvhdyuc.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pvhdyuc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpah37n2c2.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpah37n2c2.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpah37n2c2.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpah37n2c2.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpah37n2c2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = (c + 2) % 26 + 'a';\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr6fsyt42.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpr6fsyt42.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6fsyt42.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcp7yz3b.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpkcp7yz3b.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpkcp7yz3b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n \
    \       }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps6hjot1m.d(24): Error: undefined identifier `toupper`\\n/tmp/tmps6hjot1m.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps6hjot1m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvnj2dd9.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmplvnj2dd9.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplvnj2dd9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9im28akl.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp9im28akl.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp9im28akl.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp9im28akl.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9im28akl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeglieu8x.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpeglieu8x.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpeglieu8x.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpeglieu8x.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpeglieu8x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpikccpwdh.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpikccpwdh.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpikccpwdh.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpikccpwdh.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikccpwdh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpungj1xzz.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpungj1xzz.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpungj1xzz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message) \n    {\n\
    \        if(c >= 'a' && c <= 'z') \n        {\n            encodedMessage ~= toupper(c);\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            encodedMessage\
    \ ~= tolower(c);\n        } \n        else \n        {\n            encodedMessage\
    \ ~= c;\n        }\n    }\n    return encodedMessage;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbua2ycku.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpbua2ycku.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbua2ycku.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplnau5uy4.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmplnau5uy4.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnau5uy4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n\
    \        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n \
    \       {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy127b__u.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpy127b__u.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy127b__u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmwlobts3.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmpmwlobts3.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmpmwlobts3.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0xcb260554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkl57h4dg.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpkl57h4dg.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpkl57h4dg.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpkl57h4dg.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpkl57h4dg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu05chbgp.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpu05chbgp.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpu05chbgp.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpu05chbgp.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu05chbgp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphcyj9x9c.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmphcyj9x9c.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphcyj9x9c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'Y')\n        {\n            c = 'A';\n        }\n        else\n   \
    \     {\n            c = c + 1;\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy32gu0r.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmphy32gu0r.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmphy32gu0r.d(37):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmphy32gu0r.d(45): Error: cannot implicitly convert expression\
    \ `cast(int)c + 1` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmphy32gu0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n       \
    \ }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n\
    \        }\n        else if (c == 'a')\n        {\n            c = 'c';\n    \
    \    }\n        else if (c == 'e')\n        {\n            c = 'g';\n        }\n\
    \        else if (c == 'i')\n        {\n            c = 'k';\n        }\n    \
    \    else if (c == 'o')\n        {\n            c = 'q';\n        }\n        else\
    \ if (c == 'u')\n        {\n            c = 'w';\n        }\n        else if (c\
    \ == 'A')\n        {\n            c = 'C';\n        }\n        else if (c == 'E')\n\
    \        {\n            c = 'G';\n        }\n        else if (c == 'I')\n    \
    \    {\n            c = 'K';\n        }\n        else if (c == 'O')\n        {\n\
    \            c = 'Q';\n        }\n        else if (c == 'U')\n        {\n    \
    \        c = 'W';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbymgqrr_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpbymgqrr_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbymgqrr_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(c >= 'a' && c <= 'z') \n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else \n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphb2xlmt0.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmphb2xlmt0.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphb2xlmt0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ckq8oha.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp0ckq8oha.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0ckq8oha.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdnw1c39.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmptdnw1c39.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmptdnw1c39.d(35):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptdnw1c39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprbx6m2l6.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmprbx6m2l6.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmprbx6m2l6.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmprbx6m2l6.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbx6m2l6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    string vowels = \"aeiou\";\n    foreach(char\
    \ c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n          \
    \  c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n    \
    \    {\n            c = c - 'A' + 'a';\n        }\n        if(vowels.canFind(c))\n\
    \        {\n            int index = vowels.indexOf(c);\n            if(index +\
    \ 2 > 4)\n            {\n                index = index + 2 - 5;\n            }\n\
    \            else\n            {\n                index = index + 2;\n       \
    \     }\n            c = vowels[index];\n        }\n        result ~= c;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8p8k7448.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp8p8k7448.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp8p8k7448.d(31):\
    \ Error: no property `canFind` for type `string`\\n/tmp/tmp8p8k7448.d(33): Error:\
    \ no property `indexOf` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8p8k7448.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62a5jja6.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp62a5jja6.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp62a5jja6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            c = cast(char)(c - 'a' +\
    \ 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n      \
    \      c = cast(char)(c - 'A' + 'a');\n        }\n        else if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = cast(char)(c\
    \ + 2);\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = cast(char)(c + 2);\n        }\n\
    \        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp598iyel7.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42803d]\\n??:? void tmp598iyel7.__unittest_L42_C1()\
    \ [0x427be2]\\n??:? void tmp598iyel7.__modtest() [0x427dc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b9]\\n??:? runModuleUnitTests [0x42c4a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42848c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428413]\\n??:? _d_run_main [0x42837e]\\n??:? main [0x427dd3]\\\
    n??:? __libc_start_main [0xd0e46554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isUpper(c))\n        {\n            encoded ~= toLower(c);\n        }\n\
    \        else if(isLower(c))\n        {\n            encoded ~= toUpper(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknj5ih_v.d(22): Error: undefined identifier `isUpper`\\n/tmp/tmpknj5ih_v.d(24):\
    \ Error: undefined identifier `toLower`\\n/tmp/tmpknj5ih_v.d(26): Error: undefined\
    \ identifier `isLower`\\n/tmp/tmpknj5ih_v.d(28): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknj5ih_v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            result ~= tolower(c);\n            }\n            else\n        \
    \    {\n                result ~= toupper(c);\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbt8y_tf0.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpbt8y_tf0.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpbt8y_tf0.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpbt8y_tf0.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt8y_tf0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfopozt7_.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmpfopozt7_.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpfopozt7_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_c4v8cb.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpw_c4v8cb.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpw_c4v8cb.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpw_c4v8cb.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpw_c4v8cb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9l6k06dw.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp9l6k06dw.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9l6k06dw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpict8up6p.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpict8up6p.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpict8up6p.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpict8up6p.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpict8up6p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result\
    \ ~= (char)(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U')\n        {\n            result ~= (char)(c + 2);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwpc2gvnf.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpwpc2gvnf.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\n/tmp/tmpwpc2gvnf.d(32): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\n/tmp/tmpwpc2gvnf.d(36): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwpc2gvnf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' +\
    \ 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ldveinb.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp7ldveinb.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp7ldveinb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    char[] vowels = {'a', 'e', 'i',\
    \ 'o', 'u'};\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n  \
    \      {\n            c = toLower(c);\n        }\n        else if(isLower(c))\n\
    \        {\n            c = toUpper(c);\n        }\n        foreach(char v; vowels)\n\
    \        {\n            if(c == v)\n            {\n                c = v + 2;\n\
    \            }\n        }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprl7o52p9.d(20): Error: a struct is not a valid initializer for\
    \ a `char[]`\\n/tmp/tmprl7o52p9.d(23): Error: undefined identifier `isUpper`\\\
    n/tmp/tmprl7o52p9.d(25): Error: undefined identifier `toLower`\\n/tmp/tmprl7o52p9.d(27):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmprl7o52p9.d(29): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmprl7o52p9.d(35): Error: cannot implicitly convert\
    \ expression `cast(int)v + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprl7o52p9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpucehw9dh.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpucehw9dh.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpucehw9dh.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpucehw9dh.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucehw9dh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnh2l41qn.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpnh2l41qn.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpnh2l41qn.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpnh2l41qn.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnh2l41qn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    int i = 0;\n    foreach(char c; message)\n\
    \    {\n        if (c >= 'a' && c <= 'z')\n        {\n            if (c == 'z')\n\
    \                result ~= 'B';\n            else if (c == 'y')\n            \
    \    result ~= 'A';\n            else\n                result ~= (char)(c + 2\
    \ - 'a');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        if (c == 'Z')\n                result ~= 'b';\n            else if (c\
    \ == 'Y')\n                result ~= 'a';\n            else\n                result\
    \ ~= (char)(c + 2 - 'A');\n        }\n        else\n            result ~= c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefjki4zf.d(30): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 - \\'a\\')`\\n/tmp/tmpefjki4zf.d(39): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 - \\'A\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefjki4zf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n            result ~= (char)(c - 'a' + 'A');\n        else\
    \ if(c >= 'A' && c <= 'Z')\n            result ~= (char)(c - 'A' + 'a');\n   \
    \     else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5izagh2_.d(23): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp5izagh2_.d(25): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5izagh2_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcjgdgpv9.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpcjgdgpv9.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpcjgdgpv9.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x8dfbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= char(c + 2);\n            }\n            else\n       \
    \     {\n                if(c == 'W')\n                    result ~= 'A';\n  \
    \              else if(c == 'X')\n                    result ~= 'B';\n       \
    \         else if(c == 'Y')\n                    result ~= 'C';\n            \
    \    else if(c == 'Z')\n                    result ~= 'D';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0nwtj68.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpg0nwtj68.d(24):\
    \ Error: undefined identifier `islower`\\n/tmp/tmpg0nwtj68.d(35): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpg0nwtj68.d(48):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0nwtj68.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi5qr10bv.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpi5qr10bv.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpi5qr10bv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n\
    \        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n \
    \       {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cwv8180.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp8cwv8180.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cwv8180.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else if(c == 'a')\n        {\n          \
    \  result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n         \
    \   result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n        \
    \    result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n       \
    \     result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n      \
    \      result ~= 'w';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2vtbqgb.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpu2vtbqgb.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu2vtbqgb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            result ~= c;\n     \
    \       continue;\n        }\n        switch(c)\n        {\n            case 'A':\n\
    \                c = 'C';\n                break;\n            case 'E':\n   \
    \             c = 'G';\n                break;\n            case 'I':\n      \
    \          c = 'K';\n                break;\n            case 'O':\n         \
    \       c = 'Q';\n                break;\n            case 'U':\n            \
    \    c = 'S';\n                break;\n            case 'a':\n               \
    \ c = 'c';\n                break;\n            case 'e':\n                c =\
    \ 'g';\n                break;\n            case 'i':\n                c = 'k';\n\
    \                break;\n            case 'o':\n                c = 'q';\n   \
    \             break;\n            case 'u':\n                c = 's';\n      \
    \          break;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxem006vh.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpxem006vh.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpxem006vh.d(35):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxem006vh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64det3e0.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp64det3e0.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp64det3e0.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp64det3e0.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64det3e0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bp1p5_e.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp7bp1p5_e.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp7bp1p5_e.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp7bp1p5_e.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bp1p5_e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpntm6r1s4.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpntm6r1s4.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpntm6r1s4.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpntm6r1s4.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpntm6r1s4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe6rsn4bw.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpe6rsn4bw.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpe6rsn4bw.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0xbf12d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsarqv6o1.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpsarqv6o1.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsarqv6o1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (isalpha(c))\n        {\n            if (isupper(c))\n            {\n  \
    \              c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            switch(c)\n     \
    \       {\n                case 'a':\n                    c = 'c';\n         \
    \           break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        result ~= c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvpt5sa_j.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpvpt5sa_j.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpvpt5sa_j.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpvpt5sa_j.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpt5sa_j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5q6uy869.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp5q6uy869.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp5q6uy869.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp5q6uy869.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5q6uy869.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n      \
    \  else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyo1wqwjq.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmpyo1wqwjq.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpyo1wqwjq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp615vy5qa.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp615vy5qa.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp615vy5qa.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp615vy5qa.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp615vy5qa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n      \
    \  else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpryr57q9k.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpryr57q9k.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpryr57q9k.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpryr57q9k.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpryr57q9k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n\
    \        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= c - 'A' + 'a';\n        }\n        else if (c == 'a')\n        {\n      \
    \      result ~= 'c';\n        }\n        else if (c == 'e')\n        {\n    \
    \        result ~= 'g';\n        }\n        else if (c == 'i')\n        {\n  \
    \          result ~= 'k';\n        }\n        else if (c == 'o')\n        {\n\
    \            result ~= 'q';\n        }\n        else if (c == 'u')\n        {\n\
    \            result ~= 'y';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiv_vxv99.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281fd]\\n??:? void tmpiv_vxv99.__unittest_L57_C1()\
    \ [0x427d9e]\\n??:? void tmpiv_vxv99.__modtest() [0x427f7c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb87]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43046d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43091c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba6d]\\n??:? runModuleUnitTests [0x42c95d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42864c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285d3]\\n??:? _d_run_main [0x42853e]\\n??:? main [0x427f8f]\\\
    n??:? __libc_start_main [0xa4a5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlcxxkqr.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpmlcxxkqr.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpmlcxxkqr.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpmlcxxkqr.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlcxxkqr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded\
    \ ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6ct5zqq.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpd6ct5zqq.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpd6ct5zqq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq82fseow.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpq82fseow.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpq82fseow.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpq82fseow.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpq82fseow.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakh_oww0.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpakh_oww0.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpakh_oww0.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpakh_oww0.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpakh_oww0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result\
    \ = \"\";\n    foreach(char c; message)\n    {\n        if(c == ' ')\n       \
    \ {\n            result ~= c;\n            continue;\n        }\n        int index\
    \ = alphabet.indexOf(c.toLower());\n        if(index == -1)\n        {\n     \
    \       result ~= c;\n            continue;\n        }\n        if(c.isUpper)\n\
    \        {\n            result ~= alphabet[(index + 2) % 26].toUpper;\n      \
    \  }\n        else\n        {\n            result ~= alphabet[(index + 2) % 26];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgmrs2zp4.d(28): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmpgmrs2zp4.d(34): Error: no property `isUpper` for type `char`\\n/tmp/tmpgmrs2zp4.d(36):\
    \ Error: no property `toUpper` for type `immutable(char)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmrs2zp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) %\
    \ 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n   \
    \         result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1q_tvjxx.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmp1q_tvjxx.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmp1q_tvjxx.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x64f03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptenpjhd4.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmptenpjhd4.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmptenpjhd4.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmptenpjhd4.d(30): Error: undefined identifier `toupper`\\\
    n/tmp/tmptenpjhd4.d(58): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptenpjhd4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqegt_s6c.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpqegt_s6c.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpqegt_s6c.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpqegt_s6c.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqegt_s6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            if(c == 'Z')\n                    result ~= 'B';\n              \
    \  else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n            else\n\
    \            {\n                if(c == 'z')\n                    result ~= 'b';\n\
    \                else if(c == 'y')\n                    result ~= 'a';\n     \
    \           else\n                    result ~= char(c + 2);\n            }\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7r8kmwed.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp7r8kmwed.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp7r8kmwed.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmp7r8kmwed.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r8kmwed.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyhkv4l_x.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpyhkv4l_x.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpyhkv4l_x.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpyhkv4l_x.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpyhkv4l_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            } \n            else \n         \
    \   {\n                c = toupper(c);\n            }\n            switch(c) \n\
    \            {\n                case 'a':\n                    c = 'c';\n    \
    \                break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n            }\n      \
    \  }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprspy2jm7.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmprspy2jm7.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmprspy2jm7.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmprspy2jm7.d(30): Error: undefined identifier `toupper`\\\
    n/tmp/tmprspy2jm7.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprspy2jm7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(islower(c))\n            {\n    \
    \            c = toupper(c);\n            }\n            else\n            {\n\
    \                c = tolower(c);\n            }\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n               \
    \ c = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolfitaxj.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpolfitaxj.d(24):\
    \ Error: undefined identifier `islower`\\n/tmp/tmpolfitaxj.d(26): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmpolfitaxj.d(30): Error: undefined identifier `tolower`\\\
    n/tmp/tmpolfitaxj.d(34): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpolfitaxj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n   \
    \     else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n\
    \        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n          \
    \  c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftofys4s.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpftofys4s.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpftofys4s.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpftofys4s.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpftofys4s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o9cq8ty.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp0o9cq8ty.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0o9cq8ty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n    \
    \            if(c == 'w')\n                    result ~= 'a';\n              \
    \  else if(c == 'x')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'c';\n                else if(c\
    \ == 'z')\n                    result ~= 'd';\n                else\n        \
    \            result ~= c + 2;\n            }\n            else\n            {\n\
    \                if(c == 'W')\n                    result ~= 'A';\n          \
    \      else if(c == 'X')\n                    result ~= 'B';\n               \
    \ else if(c == 'Y')\n                    result ~= 'C';\n                else\
    \ if(c == 'Z')\n                    result ~= 'D';\n                else\n   \
    \                 result ~= c + 2;\n            }\n        }\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4cyw_2p.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpz4cyw_2p.d(24):\
    \ Error: undefined identifier `isLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpz4cyw_2p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               result ~= tolower(c);\n            }\n            else \n    \
    \        {\n                result ~= toupper(c);\n            }\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp39b4eyuh.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp39b4eyuh.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp39b4eyuh.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp39b4eyuh.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39b4eyuh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n \
    \               c = tolower(c);\n            }\n            else \n          \
    \  {\n                c = toupper(c);\n            }\n            if(c == 'a')\
    \ \n            {\n                c = 'c';\n            }\n            else if(c\
    \ == 'e') \n            {\n                c = 'g';\n            }\n         \
    \   else if(c == 'i') \n            {\n                c = 'k';\n            }\n\
    \            else if(c == 'o') \n            {\n                c = 'q';\n   \
    \         }\n            else if(c == 'u') \n            {\n                c\
    \ = 'y';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbje7cp_g.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpbje7cp_g.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpbje7cp_g.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpbje7cp_g.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbje7cp_g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if (c >= 'a' && c <= 'z') \n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z') \n        {\n   \
    \         result ~= (char)(c - 'A' + 'a');\n        }\n        else \n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptprhsih_.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmptprhsih_.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmptprhsih_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ = c + 2;\n            }\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzx_8aw2.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmppzx_8aw2.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmppzx_8aw2.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmppzx_8aw2.d(30): Error: undefined identifier `toupper`\\\
    n/tmp/tmppzx_8aw2.d(58): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppzx_8aw2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    foreach(char c; result)\n    {\n        if(c == 'a')\n            c\
    \ = 'c';\n        else if(c == 'e')\n            c = 'g';\n        else if(c ==\
    \ 'i')\n            c = 'k';\n        else if(c == 'o')\n            c = 'q';\n\
    \        else if(c == 'u')\n            c = 'w';\n        else if(c == 'y')\n\
    \            c = 'a';\n        else if(c == 'b')\n            c = 'd';\n     \
    \   else if(c == 'f')\n            c = 'h';\n        else if(c == 'j')\n     \
    \       c = 'l';\n        else if(c == 'p')\n            c = 'r';\n        else\
    \ if(c == 'v')\n            c = 'x';\n        else if(c == 'z')\n            c\
    \ = 'b';\n        else if(c == 'c')\n            c = 'e';\n        else if(c ==\
    \ 'g')\n            c = 'i';\n        else if(c == 'k')\n            c = 'm';\n\
    \        else if(c == 'q')\n            c = 's';\n        else if(c == 'w')\n\
    \            c = 'y';\n        else if(c == 'd')\n            c = 'f';\n     \
    \   else if(c == 'h')\n            c = 'j';\n        else if(c == 'l')\n     \
    \       c = 'n';\n        else if(c == 'r')\n            c = 't';\n        else\
    \ if(c == 'x')\n            c = 'z';\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_fphqic.d(22): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpq_fphqic.d(23): Error: no property `toLower` for type `char`\\n/tmp/tmpq_fphqic.d(24):\
    \ Error: no property `isLower` for type `char`\\n/tmp/tmpq_fphqic.d(25): Error:\
    \ no property `toUpper` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpq_fphqic.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4yi13xv.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpl4yi13xv.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpl4yi13xv.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpl4yi13xv.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpl4yi13xv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a'\
    \ + 'A');\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n    \
    \        result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4z92a5cy.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp4z92a5cy.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4z92a5cy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n     \
    \       result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n\
    \        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n\
    \            result ~= 'y';\n        else if(c == 'A')\n            result ~=\
    \ 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c\
    \ == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n           \
    \ result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n    \
    \    else if(c >= 'a' && c <= 'z')\n            result ~= (char)(c - 32);\n  \
    \      else if(c >= 'A' && c <= 'Z')\n            result ~= (char)(c + 32);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6spppaui.d(43): Error: C style cast illegal, use `cast(char)(c\
    \ - 32)`\\n/tmp/tmp6spppaui.d(45): Error: C style cast illegal, use `cast(char)(c\
    \ + 32)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6spppaui.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(isalpha(c))\n        {\n            if(islower(c))\n            {\n\
    \                if(c == 'z')\n                {\n                    encodedMessage\
    \ ~= 'b';\n                }\n                else if(c == 'y')\n            \
    \    {\n                    encodedMessage ~= 'a';\n                }\n      \
    \          else\n                {\n                    encodedMessage ~= tolower(c\
    \ + 2);\n                }\n            }\n            else\n            {\n \
    \               if(c == 'Z')\n                {\n                    encodedMessage\
    \ ~= 'B';\n                }\n                else if(c == 'Y')\n            \
    \    {\n                    encodedMessage ~= 'A';\n                }\n      \
    \          else\n                {\n                    encodedMessage ~= toupper(c\
    \ + 2);\n                }\n            }\n        }\n        else\n        {\n\
    \            encodedMessage ~= c;\n        }\n    }\n    return encodedMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpyh6ml9.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpgpyh6ml9.d(24):\
    \ Error: undefined identifier `islower`\\n/tmp/tmpgpyh6ml9.d(36): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpgpyh6ml9.d(51): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpyh6ml9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A'\
    \ + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjzv4v43.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpqjzv4v43.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpqjzv4v43.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpqjzv4v43.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqjzv4v43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c -\
    \ 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9a3twkv.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpo9a3twkv.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpo9a3twkv.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpo9a3twkv.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpo9a3twkv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n    \
    \            c = tolower(c);\n            }\n            else\n            {\n\
    \                c = toupper(c);\n            }\n            if(c == 'a')\n  \
    \          {\n                c = 'c';\n            }\n            else if(c ==\
    \ 'e')\n            {\n                c = 'g';\n            }\n            else\
    \ if(c == 'i')\n            {\n                c = 'k';\n            }\n     \
    \       else if(c == 'o')\n            {\n                c = 'q';\n         \
    \   }\n            else if(c == 'u')\n            {\n                c = 'w';\n\
    \            }\n            else if(c == 'y')\n            {\n               \
    \ c = 'a';\n            }\n            else\n            {\n                c\
    \ += 2;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9afunscd.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp9afunscd.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp9afunscd.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp9afunscd.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9afunscd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
