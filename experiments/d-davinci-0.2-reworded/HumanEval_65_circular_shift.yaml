name: HumanEval_65_circular_shift
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. $].reverse;\n\
    \    else\n        return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. $].reverse;\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n) {\n        return s[$-1 .. 0];\n \
    \   }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[n-1..0];\n\
    \    }\n    return s[n-shift..n-1] ~ s[0..n-shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    shift\
    \ %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\n", "{\n    string s = to!string(x);\n    if (shift > s.length)\n    \
    \    return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long len = s.length;\n\
    \    if (shift > len)\n    {\n        return s[$-1 .. $];\n    }\n    return s[shift\
    \ .. $] ~ s[0 .. shift-1];\n}", "{\n    string ret = to!string(x);\n    if (shift\
    \ > ret.length)\n    {\n        ret = ret.dup.reverse;\n    }\n    else\n    {\n\
    \        ret = ret[shift..$] ~ ret[0..shift-1];\n    }\n    return ret;\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift >= s.length)\n        return s[$-1..$].idup;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123L)\n\
    \    3\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123L)\n    3\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123L)\n\
    \    3\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123L)\n    3\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123L)\n\
    \    3\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123L)\n    3\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n\
    \    10\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..0]);\n}\n/*\n    Return True if\
    \ the integer x is a palindrome.\n    >>> is_palindrome(1234321L)\n    True\n\
    \    >>> is_palindrome(1234322L)\n    False\n*/", "{\n    string result = to!string(x);\n\
    \    if (shift > result.length)\n    {\n        return result[$-1..$].idup;\n\
    \    }\n    else\n    {\n        return result[shift..$] ~ result[0..shift-1];\n\
    \    }\n}", "{\n    string s = to!string(x);\n    shift %= s.length;\n    return\
    \ s[shift..$] ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    return\
    \ shift > s.length ? s[$-1..0] : s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n\
    }\n/*\n    >>> circular_shift(123L, 1L)\n    \"312\"\n    >>> circular_shift(123L,\
    \ 2L)\n    \"231\"\n    >>> circular_shift(123L, 3L)\n    \"123\"\n    >>> circular_shift(123L,\
    \ 4L)\n    \"312\"\n    >>> circular_shift(123L, 5L)\n    \"231\"\n    >>> circular_shift(123L,\
    \ 6L)\n    \"123\"\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ of the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/", "{\n    string s = to!string(x);\n    long n = s.length;\n    shift\
    \ = shift % n;\n    if (shift == 0) return s;\n    if (shift < 0) shift += n;\n\
    \    return s[shift .. $] ~ s[0 .. shift];\n}", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n        return s[$-1..$];\n    else\n\
    \        return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length) \n    {\n        return s[$-1 .. $];\n    }\n    return s[shift\
    \ .. $] ~ s[0 .. shift-1];\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n   \
    \ >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n \
    \   >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>", "{\n    string s\
    \ = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. 0];\n  \
    \  return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    Return the number of\
    \ digits in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123456789L)\n\
    \    9\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123456789L)\n    9\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123456789L)\n\
    \    9\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123456789L)\n    9\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(123456789L)\n\
    \    9\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(123456789L)\n    9\n*/\nlong number_of_digits(long\
    \ x)", "{\n    string s = to!string(x);\n    if (shift > s.length) \n    {\n \
    \       return s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift -\
    \ 1];\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>>", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1\
    \ .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n\
    \    2\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L)\n    2\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n\
    \    2\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L)\n    2\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L", "{\n    string s\
    \ = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n\
    \    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(", "{\n    string s = to!string(x);\n    long n = s.length;\n   \
    \ if (shift > n)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>>", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   Return the number of digits in the integer x.\n    >>> num_digits(12L)\n \
    \   2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num", "{\n    string s = to!string(x);\n    shift %= s.length;\n\
    \    if (shift == 0) return s;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n  \
    \      return s[n..0];\n    return s[shift..n] ~ s[0..shift];\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    if (x == 0L)\n\
    \        return 1L;\n    return cast(long) floor(log10(abs(x))) + 1L;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  if (x == 0L)\n        return 1L;\n    return cast(long) floor(log10(abs(x)))\
    \ + 1L;\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   if (x == 0L)\n        return 1L;\n    return cast(long) floor(log10(abs(x)))\
    \ + 1L;\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   if (x == 0L)\n        return 1L;\n    return cast(long) floor(log10(abs(x)))\
    \ + 1L;\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   if (x == 0L)\n        return 1L;\n   ", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L,", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n   \
    \ Return the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n\
    \    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    if (x == 0)\n        return 1;\n\
    \    return cast(long) floor(log10(x)) + 1;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n \
    \   1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    if (x == 0)\n        return 1;\n    return cast(long)\
    \ floor(log10(x)) + 1;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   if (x == 0)\n        return 1;\n    return cast(long) floor(log10(x)) + 1;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    if (x == 0)\n\
    \        return 1;", "{\n    string s = to!string(x);\n    long len = s.length;\n\
    \    if (shift >= len)\n    {\n        return s[len..0];\n    }\n    return s[shift..len]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1\
    \ .. $];\n    return s[shift .. $] ~ s[0 .. shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1 .. $];\n\
    \    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s =\
    \ to!string(x);\n    long n = s.length;\n    if (shift > n)\n    {\n        return\
    \ s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(123L)\n    3\n    >>> number_of_digits(1L)\n\
    \    1\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(123L)\n\
    \    3\n    >>> number_of_digits(1L)\n    1\n*/\nlong number_of_digits(long x)\
    \ \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(123L)\n    3\n    >>> number_of_digits(1L)\n\
    \    1\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(123L)\n\
    \    3\n    >>> number_of_digits(1L)\n    1\n*/\nlong number_of_digits(long x)\
    \ \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(123L)\n    3\n    >>> number_of_digits(1L)\n\
    \    1\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(123L)\n\
    \    3\n    >>> number_of_digits(1L)\n    1\n*/\nlong number_of_digits(long x)\
    \ \n{\n    return to!string(x).length;\n}\n/*", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    return s[shift..$] ~ s[0..shift];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift >= s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length) {\n        return s[$-1\
    \ .. $].reverse;\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    auto digits = to!string(x);\n\
    \    if (shift > digits.length)\n    {\n        return digits.dup.reverse;\n \
    \   }\n    else\n    {\n        return digits[shift..$] ~ digits[0..shift];\n\
    \    }\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n    \
    \    return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    else\n        return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the integer x with the digits\
    \ reversed.\n    >>> reverse(12L)\n    21L\n    >>> reverse(123L)\n    321L\n\
    */\nlong reverse(long x) \n{\n    string s = to!string(x);\n    return to!long(s[$-1..0]);\n\
    }\n/*\n    Return the integer x with the digits sorted in ascending order.\n \
    \   >>> sort_digits(12L)\n    21L\n    >>> sort_digits(123L)\n    123L\n*/\nlong\
    \ sort_digits(long x) \n{\n    string s = to!string(x);\n    sort(s);\n    return\
    \ to!long(s);\n}\n/*\n    Return the integer x with the digits sorted in descending\
    \ order.\n    >>> sort_digits(12L)\n    21L\n    >>> sort_digits(123L)\n    321L\n\
    */\nlong sort_digits(long x, bool descending) \n{\n    string s = to!string(x);\n\
    \    sort(s, descending);\n    return to!long(s);\n}\n/*\n    Return the integer\
    \ x with the digits sorted in ascending order.\n    >>> sort_digits(12L)\n   \
    \ 21L\n    >>> sort_digits(123L)\n    123L\n*/\nlong sort_digits(long x, bool\
    \ descending, bool unique) \n{\n    string s = to!string(x);\n    sort(s, descending,\
    \ unique);\n    return to!long(s);\n}\n/*\n    Return the integer x with the digits\
    \ sorted in ascending order.\n    >>> sort_digits(12L)\n    21L\n    >>> sort_digits(123L)\n\
    \    123L\n*/\nlong sort_digits(long x, bool descending, bool unique, bool stable)\
    \ \n{\n    string s = to!string(x);\n    sort(s, descending, unique, stable);\n\
    \    return", "{\n    string s = to!string(x);\n    if (shift > s.length)\n  \
    \      return s[$-1 .. $].reverse();\n    return s[shift .. $] ~ s[0 .. shift\
    \ - 1];\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n   ", "{\n    string s = to!string(x);\n    if (shift > s.length)\n  \
    \      return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string digits = to!string(x);\n    if (shift > digits.length)\n    {\n    \
    \    return digits.dup.reverse;\n    }\n    else\n    {\n        return digits[shift..$]\
    \ ~ digits[0..shift];\n    }\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length) \n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(1L)\n    1\n    >>>\
    \ num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>>", "{\n    if (shift > log10(x))\n        return reverse(to!string(x));\n\
    \    return to!string(x) ~ to!string(x / 10^shift);\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length) \n    {\n        return s[$-1..$].dup;\n    }\n   \
    \ return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n) \n    {\n        return s[$ - 1 ..\
    \ $];\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> number_of_digits(12L)\n    2\n\
    \    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long x) \n\
    {\n    return to!string(x).length;\n}\n/*\n    Return the number of digits in\
    \ the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long", "{\n    string s = to!string(x);\n  \
    \  if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>>\
    \ circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long\
    \ shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L,", "{\n    string s = to!string(x);\n\
    \    int len = s.length;\n    if (shift > len)\n    {\n        return s[$-len..$].dup.reverse;\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_int(1234L)\n    4321L\n    >>>\
    \ reverse_int(1L)\n    1L\n*/\nlong reverse_int(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_int(1234L)\n    4321L\n    >>> reverse_int(1L)\n    1L\n*/\n\
    long reverse_int(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_int(1234L)\n    4321L\n    >>> reverse_int(1L)\n    1L\n*/\n\
    long reverse_int(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_int(1234L)\n    4321L\n    >>> reverse_int(1L)\n    1L\n*/\n\
    long reverse_int(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_int(1234L)\n    43", "{\n    string s = to!string(x);\n    long\
    \ n = s.length;\n    if (shift > n)\n    {\n        return s[$-n..$];\n    }\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long len = s.length;\n    if (shift > len) \n    {\n        return s[len..0];\n\
    \    }\n    else \n    {\n        return s[shift..len] ~ s[0..shift];\n    }\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the sum\
    \ of the digits of the integer x.\n    >>> sum_digits(123L)\n    6\n    >>> sum_digits(0L)\n\
    \    0\n    >>> sum_digits(-123L)\n    6\n*/\nlong sum_digits(long x) \n{\n  \
    \  long sum = 0;\n    foreach (c; to!string(x))\n        sum += c - '0';\n   \
    \ return sum;\n}\n/*\n    Return the sum of the digits of the integer x.\n   \
    \ >>> sum_digits(123L)\n    6\n    >>> sum_digits(0L)\n    0\n    >>> sum_digits(-123L)\n\
    \    6\n*/\nlong sum_digits(long x) \n{\n    long sum = 0;\n    foreach (c; to!string(x))\n\
    \        sum += c - '0';\n    return sum;\n}\n/*\n    Return the sum of the digits\
    \ of the integer x.\n    >>> sum_digits(123L)\n    6\n    >>> sum_digits(0L)\n\
    \    0\n    >>> sum_digits(-123L)\n    6\n*/\nlong sum_digits(long x) \n{\n  \
    \  long sum = 0;\n    foreach (c; to!string(x))\n        sum += c - '0';\n   \
    \ return sum;\n}\n/*\n    Return the sum of the digits of the integer x.\n   \
    \ >>> sum_digits(123L)\n    6\n    >>> sum_digits(0L)\n    0\n    >>> sum_digits(-123L)\n\
    \    6\n*/\nlong sum_digits(long x) \n{\n    long sum = 0;\n    foreach (c; to!string(x))\n\
    \        sum += c - '0';\n    return sum;\n}\n/*\n    Return the sum of the digits\
    \ of the integer x.\n    >>> sum_digits(123L)", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        s = s[$-1..$];\n \
    \   }\n    else\n    {\n        s = s[shift..$-1] ~ s[0..shift-1];\n    }\n  \
    \  return s;\n}\n/*\n    Return a list of all circular shifts of the integer x.\n\
    \    >>> circular_shifts(12L)\n    [\"21\", \"12\"]\n    >>> circular_shifts(123L)\n\
    \    [\"321\", \"231\", \"123\"]\n*/\nstring[] circular_shifts(long x)\n{\n  \
    \  string s = to!string(x);\n    long n = s.length;\n    string[] shifts = new\
    \ string[n];\n    foreach (i; 0..n)\n    {\n        shifts[i] = circular_shift(x,\
    \ i);\n    }\n    return shifts;\n}\n/*\n    Return a list of all circular shifts\
    \ of the integer x, sorted in ascending order.\n    >>> sorted_circular_shifts(12L)\n\
    \    [\"12\", \"21\"]\n    >>> sorted_circular_shifts(123L)\n    [\"123\", \"\
    231\", \"321\"]\n*/\nstring[] sorted_circular_shifts(long x)\n{\n    string[]\
    \ shifts = circular_shifts(x);\n    std.algorithm.sort(shifts);\n    return shifts;\n\
    }\n/*\n    Return the number of circular shifts of the integer x that are prime.\n\
    \    >>> num_circular_primes(12L)\n    0\n    >>> num_circular_primes(13L)\n \
    \   1\n    >>> num_circular_primes(197L)\n    2\n*/\nlong num_circular_primes(long\
    \ x)\n{\n    string[] shifts = sorted_circular_shifts(x);\n    long n = 0;\n \
    \   foreach (shift; shifts)\n    {\n        if (isPrime(to!long(shift)))\n   \
    \     {\n            n++;\n        }\n    }\n    return n;\n}\n/*\n    Return\
    \ the number of circular primes less than", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n    5\n\
    */\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the sum of the digits in the integer x.\n    >>> sum_of_digits(12L)\n\
    \    3\n    >>> sum_of_digits(12345L)\n    15\n*/\nlong sum_of_digits(long x)\
    \ \n{\n    return to!string(x).sum!(\"a.to!long() - '0'.to!long()\");\n}\n/*\n\
    \    Return the number of digits in the integer x that are odd.\n    >>> number_of_odd_digits(12L)\n\
    \    1\n    >>> number_of_odd_digits(12345L)\n    3\n*/\nlong number_of_odd_digits(long\
    \ x) \n{\n    return to!string(x).count!(\"a.to!long() % 2 == 1\");\n}\n/*\n \
    \   Return the number of digits in the integer x that are even.\n    >>> number_of_even_digits(12L)\n\
    \    1\n    >>> number_of_even_digits(12345L)\n    2\n*/\nlong number_of_even_digits(long\
    \ x) \n{\n    return to!string(x).count!(\"a.to!long() % 2 == 0\");\n}\n/*\n \
    \   Return the number of digits in the integer x that are prime.\n    >>> number_of_prime_digits(12L)\n\
    \    0\n    >>> number_of_prime_digits(12345L)\n    3\n*/\nlong number_of_prime_digits(long\
    \ x) \n{\n    return to!", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string result = to!string(x);\n\
    \    if (shift > result.length)\n    {\n        return result[$-1..$];\n    }\n\
    \    else\n    {\n        return result[shift..$] ~ result[0..shift-1];\n    }\n\
    }", "{\n    long digits = log10(x);\n    long shift_digits = shift % (digits +\
    \ 1);\n    long shifted = x / pow(10, shift_digits);\n    long remainder = x %\
    \ pow(10, shift_digits);\n    return to!string(remainder) ~ to!string(shifted);\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(1L)\n    1\n    >>>\
    \ num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    if (shift == 0)\n        return\
    \ s;\n    return s[shift..$] ~ s[0..shift];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_", "{\n    string s\
    \ = to!string(x);\n    return shift > s.length ? s[$-1..0] : s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    else\n        return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[n..0];\n\
    \    }\n    else\n    {\n        return s[shift..n] ~ s[0..shift];\n    }\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length) \n    {\n        return\
    \ s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    if (shift == 0) return s;\n \
    \   return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n\
    {\n    return to!string(x).length;\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n    9876543210L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x).dup.reverse);\n}\n/*\n    Return the\
    \ integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x).dup.reverse);\n}\n/*\n    Return the\
    \ integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x).dup.reverse);\n\
    }\n/*", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n    {\n\
    \        return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n  \
    \  {\n        return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    long n = x.length;\n\
    \    if (shift > n) \n    {\n        return x.reverse;\n    }\n    return x[shift\
    \ .. n] ~ x[0 .. shift];\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(1234567890123456789L)\n    19\n*/\nlong num_digits(long x) \n{\n\
    \    return x.length;\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1234567890123456789L)\n\
    \    19\n*/\nlong num_digits(long x) \n{\n    return x.length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n   \
    \ >>> num_digits(123L)\n    3\n    >>> num_digits(1234567890123456789L)\n    19\n\
    */\nlong num_digits(long x) \n{\n    return x.length;\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(1234567890123456789L)\n    19\n*/\nlong num_digits(long\
    \ x) \n{\n    return x.length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n\
    \    >>> num_digits(1234567890123456789L)\n    19\n*/\nlong num_digits(long x)\
    \ \n{\n    return x.length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits", "{\n    string s = to!string(x);\n    shift %= s.length;\n\
    \    return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12345L,\
    \ 1L)\n    \"23451\"\n    >>> circular_shift(12345L, 2L)\n    \"34512\"\n    >>>\
    \ circular_shift(12345L, 3L)\n    \"45123\"\n    >>> circular_shift(12345L, 4L)\n\
    \    \"51234\"\n    >>> circular_shift(12345L, 5L)\n    \"12345\"\n    >>> circular_shift(12345L,\
    \ 6L)\n    \"23451\"\n    >>> circular_shift(12345L, 7L)\n    \"34512\"\n    >>>\
    \ circular_shift(12345L, 8L)\n    \"45123\"\n    >>> circular_shift(12345L, 9L)\n\
    \    \"51234\"\n    >>> circular_shift(12345L, 10L)\n    \"12345\"\n    >>> circular_shift(12345L,\
    \ 11L)\n    \"23451\"\n    >>> circular_shift(12345L, 12L)\n    \"34512\"\n  \
    \  >>> circular_shift(12345L, 13L)\n    \"45123\"\n    >>> circular_shift(12345L,\
    \ 14L)\n    \"51234\"\n    >>> circular_shift(12345L, 15L)\n    \"12345\"\n  \
    \  >>> circular_shift(12345L, 16L)\n    \"23451\"\n    >>> circular_shift(12345L,\
    \ 17L)\n    \"34512\"\n    >>> circular_shift(12345L, 18L)\n    \"45123\"\n  \
    \  >>> circular_shift(12345L, 19L)\n    \"51234\"\n    >>> circular_shift(12345L,\
    \ 20L)\n    \"12345\"\n    >>> circular_shift(12345L, 21L)\n    \"23451\"\n  \
    \  >>> circular_shift(12345L, 22L)\n    \"34512\"\n    >>> circular_shift(12345L,\
    \ 23L)\n    \"45123\"\n    >>> circular_shift(12345L", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$].reverse;\n\
    \    }\n    else\n    {\n        return s[shift..$] ~ s[0..shift-1];\n    }\n}",
  "{\n    string result;\n    long digits = ceil(log10(x));\n    if (shift > digits)\
    \ {\n        result = to!string(x);\n        result = result.dup.reverse;\n  \
    \  } else {\n        long div = pow(10, shift);\n        long mod = pow(10, digits\
    \ - shift);\n        long a = x / div;\n        long b = x % mod;\n        result\
    \ = to!string(b) ~ to!string(a);\n    }\n    return result;\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nunittest {\n\
    \    assert(circular_shift(12L, 1L) == \"21\");\n    assert(circular_shift(12L,\
    \ 2L) == \"12\");\n}\n/*\n    >>> circular_shift(12345L, 1L)\n    \"23451\"\n\
    \    >>> circular_shift(12345L, 2L)\n    \"34512\"\n    >>> circular_shift(12345L,\
    \ 3L)\n    \"45123\"\n    >>> circular_shift(12345L, 4L)\n    \"51234\"\n    >>>\
    \ circular_shift(12345L, 5L)\n    \"12345\"\n    >>> circular_shift(12345L, 6L)\n\
    \    \"23451\"\n*/\nunittest {\n    assert(circular_shift(12345L, 1L) == \"23451\"\
    );\n    assert(circular_shift(12345L, 2L) == \"34512\");\n    assert(circular_shift(12345L,\
    \ 3L) == \"45123\");\n    assert(circular_shift(12345L, 4L) == \"51234\");\n \
    \   assert(circular_shift(12345L, 5L) == \"12345\");\n    assert(circular_shift(12345L,\
    \ 6L) == \"23451\");\n}\n/*\n    >>> circular_shift(12345L, 7L)\n    \"34512\"\
    \n    >>> circular_shift(12345L, 8L)\n    \"45123\"\n    >>> circular", "{\n \
    \   string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n   \
    \ {\n        return s[$-n..$].reverse;\n    }\n    else\n    {\n        return\
    \ s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string result = to!string(x);\n    if (shift > result.length)\n    {\n  \
    \      return result[$-shift..$];\n    }\n    else\n    {\n        return result[shift..$]\
    \ ~ result[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~\
    \ s[0..shift];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..0];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    long digits = log10(x);\n    long shift_digits = shift % (digits + 1);\n\
    \    long shift_amount = pow(10, shift_digits);\n    long shifted = x / shift_amount\
    \ + (x % shift_amount) * pow(10, digits + 1 - shift_digits);\n    return to!string(shifted);\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length) \n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1 .. $];\n\
    \    }\n    else\n    {\n        return s[shift .. $] ~ s[0 .. shift-1];\n   \
    \ }\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n       \
    \ return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L,", "{\n    string s = to!string(x);\n    shift\
    \ %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    shift %= s.length;\n \
    \   return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    shift %= s.length;\n \
    \   return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    shift %= s.length;\n \
    \   return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    shift %= s.length;\n \
    \   return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    shift %= s.length;\n \
    \   return s[shift..$] ~ s[0..shift];\n}\n/*\n    >>> circular_", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n\
    \    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(1L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(1L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_", "{\n    string s = to!string(x);\n    if (shift > s.length)\n       \
    \ return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n  \
    \  >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(123L)\n    321L\n    >>> reverse_digits(0L)\n    0L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(123L)\n    321L\n    >>> reverse_digits(0L)\n    0L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(123L)\n    321L\n    >>> reverse_digits(0L)\n    0L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(123L)\n    321L\n    >>> reverse_digits(0L)\n    0L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(123L)\n    321L\n    >>> reverse_digits(0L)\n    0L\n\
    */\nlong reverse_digits(", "{\n    string s = to!string(x);\n    if (shift > s.length)\
    \ \n    {\n        return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>>", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~\
    \ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of trailing zeros in the integer x.\n    >>> num_trailing_zeros(0L)\n\
    \    0\n    >>> num_trailing_zeros(3L)\n    0\n    >>> num_trailing_zeros(1200L)\n\
    \    2\n    >>> num_trailing_zeros(1203L)\n    0\n*/\nlong num_trailing_zeros(long\
    \ x) \n{\n    string s = to!string(x);\n    long i = s.length;\n    while (i >\
    \ 0 && s[i-1] == '0')\n        i--;\n    return s.length - i;\n}\n/*\n    Return\
    \ the number of leading zeros in the integer x.\n    >>> num_leading_zeros(0L)\n\
    \    0\n    >>> num_leading_zeros(3L)\n    0\n    >>> num_leading_zeros(120L)\n\
    \    1\n    >>> num_leading_zeros(1203L)\n    0\n*/\nlong num_leading_zeros(long\
    \ x) \n{\n    string s = to!string(x);\n    long i = 0;\n    while (i < s.length\
    \ && s[i] == '0')\n        i++;\n    return i;\n}\n/*\n    Return the number of\
    \ trailing nines in the integer x.\n    >>> num_trailing_nines(0L)\n    0\n  \
    \  >>> num_trailing_nines(3L)\n    0\n    >>> num_trailing_nines(99L)\n   ", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1 .. $].reverse;\n\
    \    }\n    else\n    {\n        return s[shift .. $] ~ s[0 .. shift - 1];\n \
    \   }\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n     \
    \   return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. $].reverse;\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}",
  "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n \
    \   {\n        return s[n-1..0];\n    }\n    else\n    {\n        return s[shift..n-1]\
    \ ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string\
    \ s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n    {\n     \
    \   return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string result = to!string(x);\n    if (shift > result.length)\n    {\n  \
    \      return result[$-1..$];\n    }\n    else\n    {\n        return result[shift..$]\
    \ ~ result[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1 .. $].reverse;\n    return s[shift .. $] ~\
    \ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n  \
    \  {\n        return s[$-1..$];\n    }\n    else\n    {\n        return s[shift..$]\
    \ ~ s[0..shift-1];\n    }\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x)\n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x)\n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x)\n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x)\n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x)\n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n   ", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n) {\n        return s[$-1 .. $];\n \
    \   }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long len = s.length;\n\
    \    if (shift > len)\n    {\n        return s[$-1 .. $];\n    }\n    return s[shift\
    \ .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    shift\
    \ %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-shift..$];\n    else\n        return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    long digits = log10(x);\n    long shift_digits\
    \ = shift % (digits + 1);\n    long shifted = x / pow(10L, shift_digits);\n  \
    \  long remainder = x % pow(10L, shift_digits);\n    return to!string(remainder)\
    \ ~ to!string(shifted);\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[n-1..0];\n    }\n    return s[n-shift..n-1]\
    \ ~ s[0..n-shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string result = to!string(x);\n    if (shift > result.length)\n    {\n  \
    \      return result[$-1..$].dup;\n    }\n    else\n    {\n        return result[shift..$]\
    \ ~ result[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~\
    \ s[0..shift-1];\n}\n/*\n    Given a list of integers, return the list of integers\
    \ with the digits\n    circularly shifted to the right by the specified amount.\n\
    \    >>> circular_shift_list([12L, 34L, 56L], 1L)\n    [21L, 43L, 65L]\n    >>>\
    \ circular_shift_list([12L, 34L, 56L], 2L)\n    [12L, 34L, 56L]\n*/\nlong[] circular_shift_list(long[]\
    \ xs, long shift) \n{\n    return xs.map!(x => to!long(circular_shift(x, shift)));\n\
    }\n/*\n    Given a list of integers, return the list of integers with the digits\n\
    \    circularly shifted to the right by the specified amount.\n    >>> circular_shift_list([12L,\
    \ 34L, 56L], 1L)\n    [21L, 43L, 65L]\n    >>> circular_shift_list([12L, 34L,\
    \ 56L], 2L)\n    [12L, 34L, 56L]\n*/\nlong[] circular_shift_list(long[] xs, long\
    \ shift) \n{\n    return xs.map!(x => to!long(circular_shift(x, shift)));\n}\n\
    /*\n    Given a list of integers, return the list of integers with the digits\n\
    \    circularly shifted to the right by the specified amount.\n    >>> circular_shift_list([12L,\
    \ 34L, 56L], 1L)\n    [21L, 43L, 65L]\n    >>> circular_shift_list([12L, 34L,\
    \ 56L], 2L)\n    [12L, 34L, 56L]\n*/\nlong[] circular_shift_list(long[] xs, long\
    \ shift) \n{\n    return xs.map!(x => to!long(circular_shift(x, shift)));\n}\n\
    /*\n    Given a list of integers, return the list of integers", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num", "{\n    string s =\
    \ to!string(x);\n    if (shift >= s.length)\n        return s[$-1..$].reverse();\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(", "{\n    if (shift == 0)\n        return to!string(x);\n    else\n\
    \    {\n        string s = to!string(x);\n        string s2 = s[shift..$];\n \
    \       s2 ~= s[0..shift];\n        return s2;\n    }\n}", "{\n    string s =\
    \ to!string(x);\n    long n = s.length;\n    if (shift > n)\n    {\n        return\
    \ s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift-1];\n}", "{\n \
    \   string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n   \
    \ {\n        return s[$-1..$].reverse;\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(12345L)\n\
    \    54321L\n    >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(12345L)\n\
    \    54321L\n    >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the integer formed\
    \ by reversing the digits of the integer x.\n    >>> reverse_digits(12345L)\n\
    \    54321L\n    >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n}\n/*\n    Return\
    \ the number of digits", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length) \n    {\n    \
    \    return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    return s[$-shift..$] ~ s[0..$-shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return a list of all circular\
    \ shifts of the integer x.\n    >>> circular_shifts(12L)\n    [\"21\", \"12\"\
    ]\n    >>> circular_shifts(123L)\n    [\"321\", \"231\", \"123\"]\n*/\nstring[]\
    \ circular_shifts(long x) \n{\n    string s = to!string(x);\n    string[] shifts\
    \ = new string[s.length];\n    foreach (i; 0..s.length) \n    {\n        shifts[i]\
    \ = circular_shift(x, i);\n    }\n    return shifts;\n}\n/*\n    Return a list\
    \ of all circular shifts of the integer x, sorted.\n    >>> sorted_circular_shifts(12L)\n\
    \    [\"12\", \"21\"]\n    >>> sorted_circular_shifts(123L)\n    [\"123\", \"\
    231\", \"321\"]\n*/\nstring[] sorted_circular_shifts(long x) \n{\n    string[]\
    \ shifts = circular_shifts(x);\n    sort(shifts);\n    return shifts;\n}\n/*\n\
    \    Return the integer x with the digits sorted in ascending order.\n    >>>\
    \ sort_digits(12L)\n    21L\n    >>> sort_digits(123L)\n    123L\n*/\nlong sort_digits(long\
    \ x) \n{\n    string s = to!string(x);\n    sort(s);\n    return to!long(s);\n\
    }\n/*\n    Return the integer x with the digits sorted in descending order.\n\
    \    >>> sort_digits(12L)\n    21L\n    >>> sort_digits(123L)\n    321L\n*/\n\
    long sort_digits_descending(long x) \n{\n    string s = to!string(x);\n    sort(s);\n\
    \    return to!long(s[$-1..0]);\n}\n/*\n    Return the integer x with the digits\
    \ sorted in ascending order.\n    >>> sort_", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(", "{\n    string s =\
    \ to!string(x);\n    int len = s.length;\n    if (shift > len)\n    {\n      \
    \  return s[$-1..$].dup;\n    }\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n \
    \   {\n        return s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
