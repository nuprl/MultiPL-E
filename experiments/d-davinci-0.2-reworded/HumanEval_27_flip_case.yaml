name: HumanEval_27_flip_case
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip lowercase\
  \ characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\"\
  )\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n"
tests: "unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
  ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(char c; string)\n    {\n\
    \        if (c.isUpper)\n            result ~= c.toLower;\n        else if (c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c)) \n        {\n            result ~=\
    \ toLower(c);\n        } \n        else \n        {\n            result ~= toUpper(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n       \
    \     result ~= c.toLower;\n        else if(c.isLower)\n            result ~=\
    \ c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if (isUpper(c))\n\
    \            result ~= toLower(c);\n        else if (isLower(c))\n           \
    \ result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string)\n    {\n        if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; string)\n    {\n        if (c.isUpper)\n            result ~=\
    \ c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; string)\n    {\n       \
    \ if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else\n         \
    \   result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        }\n        else \n \
    \       {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else\n         \
    \   result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n       \
    \     result ~= c.toLower;\n        else if(c.isLower)\n            result ~=\
    \ c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; string)\n    {\n        if(isUpper(c))\n            result ~=\
    \ toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if (isUpper(c))\n\
    \            result ~= toLower(c);\n        else if (isLower(c))\n           \
    \ result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; string)\n    {\n       \
    \ if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}", "{\n    string result;\n    foreach(c; string) \n\
    \    {\n        if (isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        } \n        else \n        {\n            result ~= toUpper(c);\n   \
    \     }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ with the characters reversed.\n    >>> reverse_string(\"Hello\")\n    \"olleH\"\
    \n*/\nstring reverse_string(string string) \n{\n    string result;\n    foreach(c;\
    \ string) \n    {\n        result = c ~ result;\n    }\n    return result;\n}\n\
    /*\n Given a string, return a new string with the characters reversed.\n    >>>\
    \ reverse_string_2(\"Hello\")\n    \"olleH\"\n*/\nstring reverse_string_2(string\
    \ string) \n{\n    string result;\n    foreach_reverse(c; string) \n    {\n  \
    \      result ~= c;\n    }\n    return result;\n}\n/*\n Given a string, return\
    \ a new string with the characters reversed.\n    >>> reverse_string_3(\"Hello\"\
    )\n    \"olleH\"\n*/\nstring reverse_string_3(string string) \n{\n    string result;\n\
    \    foreach_reverse(i, c; string) \n    {\n        result ~= c;\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string with the characters reversed.\n\
    \    >>> reverse_string_4(\"Hello\")\n    \"olleH\"\n*/\nstring reverse_string_4(string\
    \ string) \n{\n    string result;\n    foreach_reverse(i, c; string) \n    {\n\
    \        result = c ~ result;\n    }\n    return result;\n}\n/*\n Given a string,\
    \ return a new string with the characters reversed.\n    >>> reverse_string_5(\"\
    Hello\")\n    \"olleH\"\n*/\nstring reverse_string_5(string string) \n{\n    string\
    \ result;\n    foreach_reverse(i, c; string) \n    {\n        result = c ~ result;\n\
    \    }\n   ", "{\n    string result = \"\";\n    foreach(char c; string)\n   \
    \ {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\
    \ \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        } \n        else \n        {\n            result ~= toUpper(c);\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; string)\n    {\n        if(isUpper(c))\n            result ~=\
    \ toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; string)\n    {\n       \
    \ if(c.isUpper)\n            result ~= c.toLower;\n        else\n            result\
    \ ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string) \n    {\n        if(c.isUpper) \n        {\n    \
    \        result ~= c.toLower;\n        }\n        else \n        {\n         \
    \   result ~= c.toUpper;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(char c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else \n\
    \        {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string) \n    {\n        if(c.isUpper)\
    \ \n        {\n            result ~= c.toLower;\n        } \n        else \n \
    \       {\n            result ~= c.toUpper;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\
    \ \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        } \n        else \n        {\n            result ~= toUpper(c);\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c)) \n        {\n            result ~=\
    \ toLower(c);\n        } \n        else if(isLower(c)) \n        {\n         \
    \   result ~= toUpper(c);\n        } \n        else \n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\n\
    \    {\n        if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= toLower(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n     \
    \       result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else\n            result ~= c.toUpper;\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\n\
    \    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n     \
    \       result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        result ~= isUpper(c) ? toLower(c) : toUpper(c);\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(char c; string)\n    {\n  \
    \      if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}\n/*\n    Given a string, return a string where for\
    \ every character in the original there are three characters.\n    >>> multi_char(\"\
    Mississippi\")\n    \"MMMiiissssssiiippppppiii\"\n*/\nstring multi_char(string\
    \ string) \n{\n    string result;\n    foreach(char c; string)\n    {\n      \
    \  result ~= c;\n        result ~= c;\n        result ~= c;\n    }\n    return\
    \ result;\n}\n/*\n    Given a string, return a string where for every character\
    \ in the original there are three characters.\n    >>> multi_char(\"Mississippi\"\
    )\n    \"MMMiiissssssiiippppppiii\"\n*/\nstring multi_char(string string) \n{\n\
    \    string result;\n    foreach(char c; string)\n    {\n        result ~= c;\n\
    \        result ~= c;\n        result ~= c;\n    }\n    return result;\n}\n/*\n\
    \    Given a string, return a string where for every character in the original\
    \ there are three characters.\n    >>> multi_char(\"Mississippi\")\n    \"MMMiiissssssiiippppppiii\"\
    \n*/\nstring multi_char(string string) \n{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        result ~= c;\n        result ~= c;\n        result\
    \ ~= c;\n    }\n    return result;\n}\n/*\n    Given a string, return a string\
    \ where for every character in the original there are three characters.\n    >>>\
    \ multi_char(\"Mississippi\")\n    \"MMMiiissssssiiippppppiii\"\n*/\nstring multi_char(string\
    \ string) \n{\n    string result;\n    foreach(char c; string)\n    {\n      \
    \  result ~= c;\n        result ~= c;", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(isLower(c))\n        {\n            result ~= toUpper(c);\n\
    \        }\n        else\n        {\n            result ~= toLower(c);\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if (c.isUpper)\n            result ~= c.toLower;\n        else\
    \ if (c.isLower)\n            result ~= c.toUpper;\n        else\n           \
    \ result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n       \
    \     result ~= c.toLower;\n        else if(c.isLower)\n            result ~=\
    \ c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(immutable char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else if(c.isLower)\n            result ~= c.toUpper;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n       \
    \     result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(character;\
    \ string)\n    {\n        if(character.isUpper)\n        {\n            result\
    \ ~= character.toLower;\n        }\n        else\n        {\n            result\
    \ ~= character.toUpper;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\n\
    \    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\
    \ if(c.isLower)\n            result ~= c.toUpper;\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n  \
    \          result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(char c; string)\n    {\n  \
    \      if(c.isUpper)\n            result ~= c.toLower;\n        else\n       \
    \     result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(c.isLower)\n            result ~= c.toUpper;\n        else\n\
    \            result ~= c.toLower;\n    }\n    return result;\n}\n/*\n    Given\
    \ a string, return the sum of the digits 0-9 that appear in the string, ignoring\
    \ all other characters. Return 0 if there are no digits in the string.\n    >>>\
    \ sum_digits(\"abc123xyz\")\n    6\n    >>> sum_digits(\"aa1bc2d3\")\n    6\n\
    \    >>> sum_digits(\"aa11b33\")\n    8\n    >>> sum_digits(\"Chocolate\")\n \
    \   0\n*/", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n   \
    \     if(c.isUpper)\n            result ~= c.toLower;\n        else\n        \
    \    result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\n/*\n    For a given string, return the character that appears the most times.\n\
    \    >>> most_frequent_char(\"Hello\")\n    'l'\n*/\nchar most_frequent_char(string\
    \ string) \n{\n    char[] chars = string.dup;\n    std.algorithm.sort(chars);\n\
    \    char result = '\\0';\n    int max = 0;\n    int count = 0;\n    foreach(c;\
    \ chars)\n    {\n        if(c == result)\n            count++;\n        else\n\
    \        {\n            if(count > max)\n            {\n                max =\
    \ count;\n                result = c;\n            }\n            count = 1;\n\
    \        }\n    }\n    return result;\n}\n/*\n    For a given string, return the\
    \ character that appears the least times.\n    >>> least_frequent_char(\"Hello\"\
    )\n    'H'\n*/\nchar least_frequent_char(string string) \n{\n    char[] chars\
    \ = string.dup;\n    std.algorithm.sort(chars);\n    char result = '\\0';\n  \
    \  int min = string.length;\n    int count = 0;\n    foreach(c; chars)\n    {\n\
    \        if(c == result)\n            count++;\n        else\n        {\n    \
    \        if(count < min)\n            {\n                min = count;\n      \
    \          result = c;\n            }\n            count = 1;\n        }\n   \
    \ }\n    return result;\n}\n/*\n    For a given string, return the character that\
    \ appears the most times.\n    >>> most_frequent_char(\"Hello\")\n    'l'\n*/\n\
    char most_frequent_char(string string) \n{\n    char[] chars = string.dup;\n \
    \   std.algorithm.sort(chars);\n    char result = '\\", "{\n    string result;\n\
    \    foreach(c; string)\n    {\n        if(isUpper(c))\n            result ~=\
    \ toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string flipped = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            flipped ~= c.toLower;\n        }\n        else\n     \
    \   {\n            flipped ~= c.toUpper;\n        }\n    }\n    return flipped;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string) \n    {\n     \
    \   if(c.isUpper) \n        {\n            result ~= c.toLower;\n        } \n\
    \        else \n        {\n            result ~= c.toUpper;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\n\
    \    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c.toUpper;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string)\n    {\n        if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n   \
    \ return result;\n}", "{\n    string result;\n    foreach(char c; string)\n  \
    \  {\n        if(isLower(c))\n            result ~= toUpper(c);\n        else\
    \ if(isUpper(c))\n            result ~= toLower(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string flipped = \"\";\n    foreach(char c; string)\n    {\n     \
    \   if(isUpper(c))\n            flipped ~= toLower(c);\n        else if(isLower(c))\n\
    \            flipped ~= toUpper(c);\n        else\n            flipped ~= c;\n\
    \    }\n    return flipped;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else\n            result ~= c.toUpper;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ flipped = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            flipped ~= c.toLower;\n        else\n            flipped ~= c.toUpper;\n\
    \    }\n    return flipped;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else\n            result ~= c.toUpper;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if (isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}\n/*\n    Given a string, return the sum of the digits\
    \ 0-9 that appear in the string, ignoring all other characters. Return 0 if there\
    \ are no digits in the string.\n    >>> sum_digits(\"abc123xyz\")\n    6\n   \
    \ >>> sum_digits(\"aa1bc2d3\")\n    6\n    >>> sum_digits(\"aa11b33\")\n    8\n\
    \    >>> sum_digits(\"Chocolate\")\n    0\n*/", "{\n    string flipped = \"\"\
    ;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n            flipped\
    \ ~= c.toLower;\n        else\n            flipped ~= c.toUpper;\n    }\n    return\
    \ flipped;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n \
    \   {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c.toUpper;\n    }\n    return result;\n}\n/*\n    Given\
    \ a string, return the sum of the digits 0-9 that appear in the string, ignoring\
    \ all other characters. Return 0 if there are no digits in the string.\n    >>>\
    \ add_digits(\"aa1bc2d3\")\n    6\n    >>> add_digits(\"aa11b33\")\n    8\n  \
    \  >>> add_digits(\"Chocolate\")\n    0\n*/", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; string)\n    {\n        if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}\n/*\n    Given a string, return a list of words\
    \ in the string that are exactly four letters long.\n    >>> four_letter_words(\"\
    Hello how are you today?\")\n    [\"Hell\", \"how\", \"are\", \"you\", \"toda\"\
    ]\n*/\nstring[] four_letter_words(string string) \n{\n    string[] words = string.split;\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.length\
    \ == 4)\n            result ~= word;\n    }\n    return result;\n}\n/*\n    Given\
    \ a list of words, return a list of words that are exactly four letters long.\n\
    \    >>> four_letter_words([\"Hello\", \"how\", \"are\", \"you\", \"today\"])\n\
    \    [\"Hell\", \"how\", \"are\", \"you\", \"toda\"]\n*/\nstring[] four_letter_words(string[]\
    \ words) \n{\n    string[] result = [];\n    foreach(word; words)\n    {\n   \
    \     if(word.length == 4)\n            result ~= word;\n    }\n    return result;\n\
    }\n/*\n    Given a list of words, return a list of words that are exactly four\
    \ letters long.\n    >>> four_letter_words([\"Hello\", \"how\", \"are\", \"you\"\
    , \"today\"])\n    [\"Hell\", \"how\", \"are\", \"you\", \"toda\"]\n*/\nstring[]\
    \ four_letter_words(string[] words) \n{\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.length == 4)\n            result ~= word;\n \
    \   }\n    return result;\n}\n/*\n    Given a list of words, return a list of\
    \ words that are exactly four letters long.\n    >>> four_letter_words([\"Hello\"\
    , \"how\", \"are\", \"you\", \"today\"])\n    [\"Hell\", \"how\", \"are\", \"",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else \n\
    \        {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a string where for every char in the original,\
    \ there are two chars.\n    >>> double_char(\"The\")\n    \"TThhee\"\n    >>>\
    \ double_char(\"AAbb\")\n    \"AAAAbbbb\"\n    >>> double_char(\"Hi-There\")\n\
    \    \"HHii--TThheerree\"\n*/\nstring double_char(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        result ~= c ~ c;\n    }\n \
    \   return result;\n}\n/*\n Return the number of times that the string \"hi\"\
    \ appears anywhere in the given string.\n    >>> count_hi(\"abc hi ho\")\n   \
    \ 1\n    >>> count_hi(\"ABChi hi\")\n    2\n    >>> count_hi(\"hihi\")\n    2\n\
    */", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n     \
    \   if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    return result;\n}", "{\n    string result;\n    foreach(char c; string)\
    \ \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        } \n        else \n        {\n            result ~= toUpper(c);\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string flipped = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            flipped ~= toLower(c);\n\
    \        else if(isLower(c))\n            flipped ~= toUpper(c);\n        else\n\
    \            flipped ~= c;\n    }\n    return flipped;\n}", "{\n    string result;\n\
    \    foreach(c; string)\n    {\n        if(isUpper(c))\n            result ~=\
    \ toLower(c);\n        else\n            result ~= toUpper(c);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string)\n    {\n        if(isUpper(c))\n            result\
    \ ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n  \
    \          result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; string)\n    {\n        if (c.isUpper)\n  \
    \          result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string) \n    {\n     \
    \   if(c.isUpper) \n        {\n            result ~= c.toLower;\n        } \n\
    \        else \n        {\n            result ~= c.toUpper;\n        }\n    }\n\
    \    return result;\n}\n/*\n    For a given string, return the number of vowels\
    \ in the string.\n    >>> count_vowels(\"Hello\")\n    2\n*/", "{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n  \
    \  {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; string)\n    {\n       \
    \ if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\
    \ \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        } \n        else \n        {\n            result ~= toUpper(c);\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n  \
    \      else\n            result ~= c.toUpper;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else if(isLower(c))\
    \ \n        {\n            result ~= toUpper(c);\n        } \n        else \n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string) \n    {\n     \
    \   if(isUpper(c)) \n        {\n            result ~= toLower(c);\n        } \n\
    \        else \n        {\n            result ~= toUpper(c);\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(char c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if (isUpper(c))\n            result ~= toLower(c);\n        else if (isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\
    \ if(isLower(c))\n            result ~= toUpper(c);\n        else\n          \
    \  result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n      \
    \      result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string) \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n\
    \        }\n        else if(isLower(c)) \n        {\n            result ~= toUpper(c);\n\
    \        }\n        else \n        {\n            result ~= c;\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result;\n    foreach(c; string)\n\
    \    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else\n\
    \            result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string) \n    {\n        if(isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        } \n        else if(isLower(c))\
    \ \n        {\n            result ~= toUpper(c);\n        } \n        else \n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \            result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else\n            result ~= c.toUpper;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; string) \n    {\n        if(isUpper(c)) \n        {\n            result ~=\
    \ toLower(c);\n        } \n        else \n        {\n            result ~= toUpper(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= toUpper(c);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; string)\n    {\n      \
    \  if(isUpper(c))\n            result ~= toLower(c);\n        else\n         \
    \   result ~= toUpper(c);\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(char c; string)\n    {\n        if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else if(isUpper(c))\n            result ~= toLower(c);\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n   \
    \         result ~= c.toLower;\n        else if(c.isLower)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\n/*\n For a given string, return the first character that does not repeat itself.\n\
    \    >>> first_non_repeating_letter('a')\n    'a'\n    >>> first_non_repeating_letter('stress')\n\
    \    't'\n    >>> first_non_repeating_letter('moonmen')\n    'e'\n*/\nchar first_non_repeating_letter(string\
    \ string) \n{\n    foreach(c; string)\n    {\n        if(count(string, c) == 1)\n\
    \            return c;\n    }\n    return ' ';\n}\n/*\n For a given string, return\
    \ the sum of ASCII values of each character.\n    >>> ascii_value('Four score')\n\
    \    984\n    >>> ascii_value('Launch School')\n    1251\n    >>> ascii_value('a')\n\
    \    97\n    >>> ascii_value('')\n    0\n*/", "{\n    string result = \"\";\n\
    \    foreach(c; string) \n    {\n        if(isUpper(c)) \n        {\n        \
    \    result ~= toLower(c);\n        } \n        else \n        {\n           \
    \ result ~= toUpper(c);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        if(isUpper(c)) \n        {\n\
    \            result ~= toLower(c);\n        }\n        else \n        {\n    \
    \        result ~= toUpper(c);\n        }\n    }\n    return result;\n}\n/*\n\
    \    For a given string, return a list of all possible permutations of the string.\n\
    \    >>> permutations(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\"\
    , \"cba\"]\n*/\nstring[] permutations(string string) \n{\n    if(string.length\
    \ == 1) \n    {\n        return [string];\n    }\n    string[] result;\n    foreach(i,\
    \ c; string) \n    {\n        string rest = string[0..i] ~ string[i+1..$];\n \
    \       foreach(permutation; permutations(rest)) \n        {\n            result\
    \ ~= c ~ permutation;\n        }\n    }\n    return result;\n}\n/*\n    For a\
    \ given string, return a list of all possible permutations of the string.\n  \
    \  >>> permutations(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\"\
    , \"cba\"]\n*/\nstring[] permutations(string string) \n{\n    if(string.length\
    \ == 1) \n    {\n        return [string];\n    }\n    string[] result;\n    foreach(i,\
    \ c; string) \n    {\n        string rest = string[0..i] ~ string[i+1..$];\n \
    \       foreach(permutation; permutations(rest)) \n        {\n            result\
    \ ~= c ~ permutation;\n        }\n    }\n    return result;\n}\n/*\n    For a\
    \ given string, return a list of all possible permutations of the string.\n  \
    \  >>> permutations(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\"\
    , \"cba\"]\n*/\nstring[] permutations(string string) \n{\n    if(string.length\
    \ == 1) \n    {\n        return [string];\n   ", "{\n    string result;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n\
    \        else if(c.isLower)\n            result ~= c.toUpper;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n       \
    \     result ~= c.toLower;\n        else\n            result ~= c.toUpper;\n \
    \   }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
