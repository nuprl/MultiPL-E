name: HumanEval_39_prime_fib
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    prime_fib returns n-th\
  \ number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1L)\n\
  \    2L\n    >>> prime_fib(2L)\n    3L\n    >>> prime_fib(3L)\n    5L\n    >>> prime_fib(4L)\n\
  \    13L\n    >>> prime_fib(5L)\n    89L\n    \n*/\nlong prime_fib(long n) \n"
tests: "unittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L)\
  \ == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n\
  \    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L)\
  \ == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n\
  \    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n\
  }\nvoid main(){}"
completions: ["{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i\
    \ = 3L;\n    while (true) \n    {\n        if (isPrime(c)) \n        {\n     \
    \       if (i == n) \n            {\n                return c;\n            }\n\
    \            i += 1L;\n        }\n        a = b;\n        b = c;\n        c =\
    \ a + b;\n    }\n    return 0L;\n}\n/*", "{\n    long a = 0L;\n    long b = 1L;\n\
    \    long c = 0L;\n    long i = 0L;\n    while (i < n) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i = i\
    \ + 1L;\n        }\n    }\n    return c;\n}", "{\n    long i = 1L;\n    long j\
    \ = 1L;\n    long k = 0L;\n    long count = 0L;\n    while (count < n) {\n   \
    \     k = i + j;\n        i = j;\n        j = k;\n        if (is_prime(k)) {\n\
    \            count += 1L;\n        }\n    }\n    return k;\n}", "{\n    long i\
    \ = 1L;\n    long j = 1L;\n    long k = 0L;\n    long count = 0L;\n    while (count\
    \ < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (is_prime(k))\
    \ {\n            count += 1L;\n        }\n    }\n    return k;\n}", "{\n    long\
    \ a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while (i\
    \ < n) \n    {\n        a = b;\n        b = c;\n        c = a + b;\n        if\
    \ (is_prime(c)) \n        {\n            i = i + 1L;\n        }\n    }\n    return\
    \ c;\n}\n/*", "{\n    long f1 = 2L;\n    long f2 = 3L;\n    long f3 = 5L;\n  \
    \  long i = 3L;\n    while (i < n) {\n        f1 = f2;\n        f2 = f3;\n   \
    \     f3 = f1 + f2;\n        if (is_prime(f3)) {\n            i = i + 1L;\n  \
    \      }\n    }\n    return f3;\n}", "{\n    long a = 0L;\n    long b = 1L;\n\
    \    long c = 0L;\n    long i = 0L;\n    while (i < n) \n    {\n        c = a\
    \ + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) \n        {\n\
    \            i = i + 1L;\n        }\n    }\n    return c;\n}\n/*", "{ \n    long\
    \ a = 0L; \n    long b = 1L; \n    long c = 0L; \n    long i = 2L; \n    while\
    \ (i <= n) \n    { \n        c = a + b; \n        a = b; \n        b = c; \n \
    \       if (isPrime(c)) \n            i++; \n    } \n    return c; \n} \n/*",
  "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n   \
    \ while (i < n) \n    {\n        a = b;\n        b = c;\n        c = a + b;\n\
    \        if (is_prime(c)) \n        {\n            i += 1L;\n        }\n    }\n\
    \    return c;\n}\n/*", "{\n    long i = 0L;\n    long j = 1L;\n    long k = 0L;\n\
    \    long count = 0L;\n    while (count < n) \n    {\n        k = i + j;\n   \
    \     i = j;\n        j = k;\n        if (is_prime(k)) \n        {\n         \
    \   count += 1L;\n        }\n    }\n    return k;\n}\n/*", "{\n    long a = 0L;\n\
    \    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n    while (i < n) \n  \
    \  {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c))\n\
    \        {\n            i += 1L;\n        }\n    }\n    return c;\n}", "{\n  \
    \  long i = 1L;\n    long f = 1L;\n    long p = 1L;\n    long c = 0L;\n    while\
    \ (c < n) {\n        f = f + i;\n        i = f - i;\n        if (isPrime(f)) {\n\
    \            p = f;\n            c = c + 1L;\n        }\n    }\n    return p;\n\
    }\n/*", "{\n    long a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i =\
    \ 0L;\n    while (i < n) \n    {\n        c = a + b;\n        a = b;\n       \
    \ b = c;\n        if (is_prime(c)) \n        {\n            i += 1L;\n       \
    \ }\n    }\n    return c;\n}\n/*", "{\n    long i = 1L;\n    long j = 2L;\n  \
    \  long k = 3L;\n    long count = 2L;\n    while (count < n) \n    {\n       \
    \ i = j;\n        j = k;\n        k = i + j;\n        if (is_prime(k)) \n    \
    \    {\n            count += 1L;\n        }\n    }\n    return k;\n}\n/*", "{\n\
    \    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while\
    \ (true) {\n        if (isPrime(c)) {\n            if (i == n) {\n           \
    \     return c;\n            }\n            i = i + 1L;\n        }\n        a\
    \ = b;\n        b = c;\n        c = a + b;\n    }\n    return 0L;\n}\n/*", "{\n\
    \    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while\
    \ (i < n) \n    {\n        a = b;\n        b = c;\n        c = a + b;\n      \
    \  i = i + 1L;\n        while (!is_prime(c)) \n        {\n            a = b;\n\
    \            b = c;\n            c = a + b;\n            i = i + 1L;\n       \
    \ }\n    }\n    return c;\n}\n/*", "{\n    long a = 0L;\n    long b = 1L;\n  \
    \  long c = 0L;\n    long i = 0L;\n    while (i < n) {\n        c = a + b;\n \
    \       a = b;\n        b = c;\n        if (isPrime(c)) {\n            i += 1L;\n\
    \        }\n    }\n    return c;\n}", "{\n    long a = 0L;\n    long b = 1L;\n\
    \    long c = 0L;\n    long i = 0L;\n    while (i < n) \n    {\n        c = a\
    \ + b;\n        if (isPrime(c)) \n        {\n            i += 1L;\n        }\n\
    \        a = b;\n        b = c;\n    }\n    return c;\n}\n/*", "{\n    long a\
    \ = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n    while (i <\
    \ n) \n    {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c))\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return c;\n}\n/*",
  "{\n    long a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n   \
    \ while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n      \
    \  if (is_prime(c)) {\n            i += 1L;\n        }\n    }\n    return c;\n\
    }\n/*"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
