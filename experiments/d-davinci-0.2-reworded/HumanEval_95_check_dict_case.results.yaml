language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && isLower(key);\n        is_upper = is_upper && isUpper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6tv5r5wr.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp6tv5r5wr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key, value; dict)\n    {\n\
    \        if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr7ctdng8.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr7ctdng8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n   \
    \     if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd3j8x2qi.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd3j8x2qi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper) upper = false;\n        if (key.isLower) lower\
    \ = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1322gz56.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1322gz56.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_35zrlk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2_35zrlk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprtah7oyt.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprtah7oyt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isUpper = true;\n \
    \   bool isLower = true;\n    foreach (key; dict.keys) \n    {\n        isUpper\
    \ = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n    }\n\
    \    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4icwv18g.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4icwv18g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikail3fu.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpikail3fu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = dict.keys[0].isLower;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isLower != is_lower)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpot8zihi4.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpot8zihi4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpch4hgio8.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpch4hgio8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk18f6xdr.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk18f6xdr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (k, v; dict)\n\
    \    {\n        if (k.isLower != is_lower) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4_lbz_r.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt4_lbz_r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5oytjmqx.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5oytjmqx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0nw0758.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb0nw0758.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) is_upper = true;\n        if (k.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6wcvc_7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm6wcvc_7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0px53ooo.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0px53ooo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n  \
    \          is_upper = true;\n        else if (key.isLower)\n            is_lower\
    \ = true;\n        else\n            return false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3hroitqg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3hroitqg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikail3fu.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpikail3fu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (is_lower && !isLower(key))\n            is_lower = false;\n        if\
    \ (is_upper && !isUpper(key))\n            is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfqmucq29.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfqmucq29.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpghastqxk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpghastqxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isLower = true;\n \
    \   bool isUpper = true;\n    foreach (key; dict.keys) \n    {\n        isLower\
    \ = isLower && key.isLower;\n        isUpper = isUpper && key.isUpper;\n    }\n\
    \    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz2maz6w3.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpz2maz6w3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdo65h80a.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdo65h80a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbvd5h0b_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbvd5h0b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1alv060s.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1alv060s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwzem5mk6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwzem5mk6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) all_lower = false;\n    \
    \    if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprtah7oyt.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprtah7oyt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            lower = false;\n        }\n        else if (key.isLower)\n\
    \        {\n            upper = false;\n        }\n        else\n        {\n \
    \           return false;\n        }\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0n399wxd.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0n399wxd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ all_lower = false;\n        if(key.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd_si0am.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptd_si0am.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n\
    \            all_lower = false;\n        else\n            all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpraejcmti.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpraejcmti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        } \n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        } \n        else \n        {\n            return false;\n  \
    \      }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzabht7eb.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzabht7eb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp076d4uuy.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp076d4uuy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            all_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            all_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5oytjmqx.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5oytjmqx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_q0gocrp.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_q0gocrp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower_case = false;\n    bool is_upper_case = false;\n \
    \   foreach (key, value; dict) \n    {\n        if (key.isUpper) is_upper_case\
    \ = true;\n        if (key.isLower) is_lower_case = true;\n    }\n    return is_lower_case\
    \ ^ is_upper_case;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyum_pm1a.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyum_pm1a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp076d4uuy.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp076d4uuy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool isLower\
    \ = false;\n    bool isUpper = false;\n    foreach (key, value; dict) \n    {\n\
    \        if (isLower == false && isUpper == false) \n        {\n            if\
    \ (key.isUpper) \n            {\n                isUpper = true;\n           \
    \ }\n            else if (key.isLower) \n            {\n                isLower\
    \ = true;\n            }\n            else \n            {\n                return\
    \ false;\n            }\n        }\n        else if (isLower == true && isUpper\
    \ == false) \n        {\n            if (key.isUpper) \n            {\n      \
    \          return false;\n            }\n        }\n        else if (isLower ==\
    \ false && isUpper == true) \n        {\n            if (key.isLower) \n     \
    \       {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0refu8l.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp0refu8l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != is_upper) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hj_b36y.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2hj_b36y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_35zrlk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2_35zrlk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        if (key.isUpper) \n        {\n           \
    \ all_lower = false;\n        } \n        else if (key.isLower) \n        {\n\
    \            all_upper = false;\n        } \n        else \n        {\n      \
    \      return false;\n        }\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvtakurml.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvtakurml.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && islower(key);\n        is_upper\
    \ = is_upper && isupper(key);\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn9r6qm56.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpn9r6qm56.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3579wthm.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3579wthm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8omic6od.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8omic6od.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8j7a_q9.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq8j7a_q9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm256nrrd.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm256nrrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_35zrlk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2_35zrlk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            is_upper\
    \ = true;\n        }\n        else if (key.isLower)\n        {\n            is_lower\
    \ = true;\n        }\n        else\n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower != is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_lwurug.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj_lwurug.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool isUpper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != isUpper) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m9phz28.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7m9phz28.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != is_upper) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hj_b36y.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2hj_b36y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (k, v; dict)\n    {\n        if (k.isUpper) is_upper = true;\n        if (k.isLower)\
    \ is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6wcvc_7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm6wcvc_7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && (key.toLower() == key);\n        is_upper = is_upper\
    \ && (key.toUpper() == key);\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg71ydrk4.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpg71ydrk4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikail3fu.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpikail3fu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isUpper = true;\n \
    \   bool isLower = true;\n    foreach (key; dict.keys)\n    {\n        isUpper\
    \ = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n    }\n\
    \    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprljeglte.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprljeglte.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0nw0758.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb0nw0758.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ true;\n    bool isLower = true;\n    foreach (key; dict.keys) \n    {\n    \
    \    isUpper = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplrmm47_s.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplrmm47_s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isUpper = true;\n \
    \   bool isLower = true;\n    foreach (key; dict.keys)\n    {\n        isUpper\
    \ &= key.isUpper;\n        isLower &= key.isLower;\n    }\n    return isUpper\
    \ || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp55uuqpgz.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp55uuqpgz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbvd5h0b_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbvd5h0b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       continue;\n        is_upper = false;\n        break;\n    }\n    if (is_upper)\n\
    \        return true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            continue;\n        is_lower = false;\n\
    \        break;\n    }\n    return is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvqtqo_y9.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvqtqo_y9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikail3fu.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpikail3fu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbvd5h0b_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbvd5h0b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool isLower = true;\n    bool isUpper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        isLower = isLower && islower(key);\n        isUpper\
    \ = isUpper && isupper(key);\n    }\n    return isLower || isUpper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkb39wrto.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkb39wrto.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (is_lower && !isLower(key)) is_lower = false;\n\
    \        if (is_upper && !isUpper(key)) is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkqb9d2p1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkqb9d2p1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0nw0758.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb0nw0758.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (lower && key != key.toLower) lower = false;\n        if (upper\
    \ && key != key.toUpper) upper = false;\n    }\n    return lower || upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuvrjfb_y.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpuvrjfb_y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_upper =\
    \ true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2zvflio.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpa2zvflio.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= islower(key);\n        is_upper &= isupper(key);\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmt06uy62.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmt06uy62.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool isUpper = false;\n    bool isLower =\
    \ false;\n    foreach (key, value; dict)\n    {\n        if (key.isUpper)\n  \
    \          isUpper = true;\n        if (key.isLower)\n            isLower = true;\n\
    \    }\n    return isUpper ^ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvvvclk2.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphvvvclk2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcgcfd6o_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcgcfd6o_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1alv060s.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1alv060s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \            all_lower = false;\n        else\n            all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpesz7bp9w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpesz7bp9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (lower\
    \ && !key.isLower)\n            lower = false;\n        if (upper && !key.isUpper)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0b789072.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0b789072.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0nw0758.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb0nw0758.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = dict.keys[0].isLower;\n  \
    \  foreach (key; dict.keys)\n    {\n        if (key.isLower != is_lower)\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpot8zihi4.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpot8zihi4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdo65h80a.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdo65h80a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_afvk8d8.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_afvk8d8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    foreach (key, value; dict)\n    {\n\
    \        if (key.isUpper)\n            is_upper = true;\n        else if (key.isLower)\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr7ctdng8.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr7ctdng8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdo65h80a.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdo65h80a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_upper = true;\n\
    \    bool is_lower = true;\n    foreach (key; dict.keys)\n    {\n        is_upper\
    \ &= key.isUpper;\n        is_lower &= key.isLower;\n    }\n    return is_upper\
    \ || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe6w4c6kc.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe6w4c6kc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1e4fcu00.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1e4fcu00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (lower\
    \ && !isLower(key)) lower = false;\n        if (upper && !isUpper(key)) upper\
    \ = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa1k4clrt.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpa1k4clrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo500uw6w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo500uw6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_upper = is_upper && key.isUpper;\n        is_lower\
    \ = is_lower && key.isLower;\n    }\n    return is_upper || is_lower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpirekd6a0.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpirekd6a0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_upper = dict.keys[0].isUpper;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper != is_upper) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hj_b36y.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2hj_b36y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbvd5h0b_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbvd5h0b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            all_lower = false;\n      \
    \  }\n        else if (key.isLower) \n        {\n            all_upper = false;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcgcfd6o_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcgcfd6o_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) is_upper = true;\n       \
    \ if (key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xsul6q6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0xsul6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        } \n    \
    \    else if (key.isLower) \n        {\n            all_upper = false;\n     \
    \   } \n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm256nrrd.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm256nrrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (is_lower\
    \ && isupper(key[0])) is_lower = false;\n        if (is_upper && islower(key[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gx5fjv4.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5gx5fjv4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) upper = false;\n        if (key.isLower) lower\
    \ = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk4vekzbz.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk4vekzbz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp139rl1xs.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp139rl1xs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        all_lower\
    \ &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1qf3j10_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1qf3j10_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if (key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwautpljr.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwautpljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && islower(key);\n        is_upper\
    \ = is_upper && isupper(key);\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzlosos4h.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzlosos4h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpghastqxk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpghastqxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_upper = true;\n\
    \    bool all_lower = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \            all_lower = false;\n        else\n            all_upper = false;\n\
    \    }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplol8kgqd.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplol8kgqd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp749p1u6f.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp749p1u6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \   {\n            is_lower = false;\n            break;\n        }\n    }\n \
    \   if (is_lower)\n    {\n        foreach (key; dict.keys)\n        {\n      \
    \      if (key.isLower)\n                continue;\n            else\n       \
    \         return false;\n        }\n    }\n    else\n    {\n        foreach (key;\
    \ dict.keys)\n        {\n            if (key.isUpper)\n                continue;\n\
    \            else\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpecbzim1k.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpecbzim1k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp749p1u6f.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp749p1u6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8j7a_q9.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq8j7a_q9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n            all_lower = false;\n        else if (key.isLower)\n\
    \            all_upper = false;\n        else\n            return false;\n   \
    \ }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0nw0758.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb0nw0758.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n   \
    \     if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd3j8x2qi.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd3j8x2qi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_upper &= key.isUpper;\n        is_lower &= key.isLower;\n\
    \    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiiilliyk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpiiilliyk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower != is_lower) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpia6jff9v.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpia6jff9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3b9zh1na.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3b9zh1na.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1alv060s.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1alv060s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbvd5h0b_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbvd5h0b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = dict.byKey.front.key.isLower;\n    foreach (key,\
    \ value; dict)\n    {\n        if (key.isLower != is_lower) return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9jwq4il7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9jwq4il7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10o630z6.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp10o630z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_upper &= key.isUpper;\n        is_lower &= key.isLower;\n\
    \    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiiilliyk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpiiilliyk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n  \
    \          is_upper = true;\n        else if (key.isLower)\n            is_lower\
    \ = true;\n        else\n            return false;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3i0tibs_.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3i0tibs_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach (key; dict.keys) \n    {\n        if (!isLower(key))\
    \ lower = false;\n        if (!isUpper(key)) upper = false;\n    }\n    return\
    \ lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoy2z286k.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpoy2z286k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_q0gocrp.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_q0gocrp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n  \
    \          is_upper = true;\n        else if (key.isLower)\n            is_lower\
    \ = true;\n        else\n            return false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3hroitqg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3hroitqg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isLower = true;\n \
    \   bool isUpper = true;\n    foreach (key; dict.keys) \n    {\n        isLower\
    \ = isLower && isLowerCase(key);\n        isUpper = isUpper && isUpperCase(key);\n\
    \    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy8v9k0xv.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpy8v9k0xv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    if (key.isUpper)\n            is_lower = false;\n        else if (key.isLower)\n\
    \            is_upper = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu48vyn0d.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu48vyn0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= islower(key);\n        is_upper &= isupper(key);\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmt06uy62.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmt06uy62.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool isUpper = false;\n\
    \    bool isLower = false;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ isUpper = true;\n        if (key.isLower) isLower = true;\n    }\n    return\
    \ isUpper && !isLower || !isUpper && isLower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0v4rwx5z.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0v4rwx5z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) \n        {\n            is_lower = false;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_upper = false;\n  \
    \      }\n        else \n        {\n            return false;\n        }\n   \
    \ }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0px53ooo.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0px53ooo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        if (key.isUpper) is_lower = false;\n        if (key.isLower)\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4l0ggf31.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4l0ggf31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsh0_3idc.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsh0_3idc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) \n        {\n            is_lower = false;\n\
    \        }\n        else if (key.isLower) \n        {\n            is_upper =\
    \ false;\n        }\n        else \n        {\n            return false;\n   \
    \     }\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm5ag5ee1.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm5ag5ee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        if (key.isUpper) upper = false;\n        if (key.isLower) lower\
    \ = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk4vekzbz.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk4vekzbz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool isUpper =\
    \ true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n    {\n     \
    \   isUpper = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpads9vz1x.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpads9vz1x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo500uw6w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo500uw6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo500uw6w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo500uw6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper) all_lower = false;\n     \
    \   if (key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_a2xv7.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2g_a2xv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_upper = true;\n\
    \    bool is_lower = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaeje1t3i.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpaeje1t3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpghastqxk.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpghastqxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo500uw6w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo500uw6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n    \
    \    is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo500uw6w.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo500uw6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\
    \ \n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99u8fokg.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp99u8fokg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return false;\n    if (dict.length == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys) \n    {\n        is_lower = is_lower && islower(key);\n        is_upper\
    \ = is_upper && isupper(key);\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn9r6qm56.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpn9r6qm56.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null)\n        return false;\n    if (dict.length\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n     \
    \       is_lower = false;\n        if (key.isLower)\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8j7a_q9.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq8j7a_q9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null) return false;\n    bool isUpper = true;\n  \
    \  bool isLower = true;\n    foreach(key; dict.keys)\n    {\n        if(isUpper\
    \ && isLower) break;\n        if(isUpper && !isUpperOnly(key)) isUpper = false;\n\
    \        if(isLower && !isLowerOnly(key)) isLower = false;\n    }\n    return\
    \ isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxl75g877.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxl75g877.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an associative array, return true if\
    \ all keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return false.\n    The function should return false is the given associative\
    \ array is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"\
    b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
    a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"\
    12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) \n    {\n        return false;\n    }\n   \
    \ if (dict.length == 0) \n    {\n        return false;\n    }\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) \n        {\n            is_upper = true;\n        }\n\
    \        else if (key.isLower) \n        {\n            is_lower = true;\n   \
    \     }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3b9zh1na.d(20): Error: template instance `Nullable!(string[string])`
    template `Nullable` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3b9zh1na.d", "-I/tmp"]\n'''
  stdout: b''
