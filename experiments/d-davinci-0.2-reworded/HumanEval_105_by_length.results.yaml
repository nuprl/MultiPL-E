name: HumanEval_105_by_length
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(long i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(ref string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppu01512e.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmppu01512e.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmppu01512e.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmppu01512e.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmppu01512e.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppu01512e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(x => x > 0 && x < 10).sort!((a,\
    \ b) => a - b);\n    result = sorted.map!(x => to!string(x)).reverse;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmposvomr3_.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmposvomr3_.d(26): Error: no property `map` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposvomr3_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= i.to!string;\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(i; result)\n    {\n\
    \        switch(i)\n        {\n            case \"1\":\n                i = \"\
    One\";\n                break;\n            case \"2\":\n                i = \"\
    Two\";\n                break;\n            case \"3\":\n                i = \"\
    Three\";\n                break;\n            case \"4\":\n                i =\
    \ \"Four\";\n                break;\n            case \"5\":\n               \
    \ i = \"Five\";\n                break;\n            case \"6\":\n           \
    \     i = \"Six\";\n                break;\n            case \"7\":\n        \
    \        i = \"Seven\";\n                break;\n            case \"8\":\n   \
    \             i = \"Eight\";\n                break;\n            case \"9\":\n\
    \                i = \"Nine\";\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26mm4buv.d(29): Error: no property `to` for type `long`\\n/tmp/tmp26mm4buv.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp26mm4buv.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp26mm4buv.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp26mm4buv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[];\n    foreach(i; arr)\n    {\n        if(i > 0\
    \ && i < 10)\n        {\n            res ~= to!string(i);\n        }\n    }\n\
    \    sort(res);\n    reverse(res);\n    foreach(i; res)\n    {\n        switch(i)\n\
    \        {\n            case \"1\":\n                i = \"One\";\n          \
    \      break;\n            case \"2\":\n                i = \"Two\";\n       \
    \         break;\n            case \"3\":\n                i = \"Three\";\n  \
    \              break;\n            case \"4\":\n                i = \"Four\";\n\
    \                break;\n            case \"5\":\n                i = \"Five\"\
    ;\n                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc94dnzlk.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpc94dnzlk.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpc94dnzlk.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpc94dnzlk.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpc94dnzlk.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpc94dnzlk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4dio5zb9.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp4dio5zb9.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp4dio5zb9.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4dio5zb9.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4dio5zb9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0 .. result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhoqf79b.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpxhoqf79b.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpxhoqf79b.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpxhoqf79b.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxhoqf79b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(i; arr)\n    {\n        if(i >\
    \ 0 && i < 10)\n        {\n            switch(i)\n            {\n            \
    \    case 1:\n                    result ~= \"One\";\n                    break;\n\
    \                case 2:\n                    result ~= \"Two\";\n           \
    \         break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    result.sort;\n    result.reverse;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiw6xc4v0.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpiw6xc4v0.d(29): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmpiw6xc4v0.d(61): Error: no property `sort`\
    \ for type `string[]`\\n/tmp/tmpiw6xc4v0.d(62): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpiw6xc4v0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(i; arr)\n    {\n        if(i >\
    \ 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n  \
    \  }\n    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa3a6ectm.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpa3a6ectm.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpa3a6ectm.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpa3a6ectm.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3a6ectm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = new int[arr.length];\n\
    \    int count = 0;\n    foreach(i; arr)\n    {\n        if(i >= 1 && i <= 9)\n\
    \        {\n            sorted[count] = i;\n            count++;\n        }\n\
    \    }\n    sort(sorted[0..count]);\n    for(int i = 0; i < count; i++)\n    {\n\
    \        switch(sorted[i])\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result[0..count].reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9iwbin7y.d(31): Error: cannot implicitly convert expression `i`\
    \ of type `long` to `int`\\n/tmp/tmp9iwbin7y.d(35): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmp9iwbin7y.d(38): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmp9iwbin7y.d(69): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9iwbin7y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i >= 1 && i <=\
    \ 9)\n        {\n            result ~= i.to!string;\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfi7koouh.d(29): Error: no property `to` for type `long`\\n/tmp/tmpfi7koouh.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpfi7koouh.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpfi7koouh.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfi7koouh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(to!int(elem))\n        {\n            case 1:\n         \
    \       elem = \"One\";\n                break;\n            case 2:\n       \
    \         elem = \"Two\";\n                break;\n            case 3:\n     \
    \           elem = \"Three\";\n                break;\n            case 4:\n \
    \               elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrypzn4o.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpnrypzn4o.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpnrypzn4o.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpnrypzn4o.d(36):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrypzn4o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(long i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(ref string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9jj06y1.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpm9jj06y1.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpm9jj06y1.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpm9jj06y1.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpm9jj06y1.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpm9jj06y1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1f4bt7dq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp1f4bt7dq.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp1f4bt7dq.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xcf832554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpokg6lvzl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpokg6lvzl.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpokg6lvzl.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x697c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9z6vzaw.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpi9z6vzaw.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpi9z6vzaw.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpi9z6vzaw.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpi9z6vzaw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return [];\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuhuuttl8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291a5]\\n??:? void tmpuhuuttl8.__unittest_L27_C1()\
    \ [0x427ff3]\\n??:? void tmpuhuuttl8.__modtest() [0x42840c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dcab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428efe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a951]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ed5]\\n??:? runModuleUnitTests [0x42da81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42957b]\\n??:? _d_run_main [0x4294e6]\\n??:? main [0x42841f]\\\
    n??:? __libc_start_main [0x7a812554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppw1w928f.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmppw1w928f.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmppw1w928f.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmppw1w928f.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppw1w928f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpauki3bbd.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpauki3bbd.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpauki3bbd.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpauki3bbd.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpauki3bbd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0slz39hi.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp0slz39hi.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp0slz39hi.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x10c18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n  \
    \      {\n            res ~= to!string(e);\n        }\n    }\n    res.sort();\n\
    \    res.reverse();\n    foreach(i, e; res)\n    {\n        switch(e)\n      \
    \  {\n            case \"1\":\n                res[i] = \"One\";\n           \
    \     break;\n            case \"2\":\n                res[i] = \"Two\";\n   \
    \             break;\n            case \"3\":\n                res[i] = \"Three\"\
    ;\n                break;\n            case \"4\":\n                res[i] = \"\
    Four\";\n                break;\n            case \"5\":\n                res[i]\
    \ = \"Five\";\n                break;\n            case \"6\":\n             \
    \   res[i] = \"Six\";\n                break;\n            case \"7\":\n     \
    \           res[i] = \"Seven\";\n                break;\n            case \"8\"\
    :\n                res[i] = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                res[i] = \"Nine\";\n                break;\n       \
    \ }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb07ke16.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpnb07ke16.d(32): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmpnb07ke16.d(33): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpnb07ke16.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpnb07ke16.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(number; arr)\n    {\n        if(number\
    \ > 0 && number < 10)\n        {\n            switch(number)\n            {\n\
    \                case 1:\n                    result ~= \"One\";\n           \
    \         break;\n                case 2:\n                    result ~= \"Two\"\
    ;\n                    break;\n                case 3:\n                    result\
    \ ~= \"Three\";\n                    break;\n                case 4:\n       \
    \             result ~= \"Four\";\n                    break;\n              \
    \  case 5:\n                    result ~= \"Five\";\n                    break;\n\
    \                case 6:\n                    result ~= \"Six\";\n           \
    \         break;\n                case 7:\n                    result ~= \"Seven\"\
    ;\n                    break;\n                case 8:\n                    result\
    \ ~= \"Eight\";\n                    break;\n                case 9:\n       \
    \             result ~= \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphubfn_wn.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmphubfn_wn.d(29): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmphubfn_wn.d(61): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphubfn_wn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = new int[arr.length];\n\
    \    int i = 0;\n    foreach(long l; arr)\n    {\n        if(l >= 1 && l <= 9)\n\
    \        {\n            sorted[i] = cast(int)l;\n            i++;\n        }\n\
    \    }\n    sorted = sorted[0..i];\n    sort(sorted);\n    i = 0;\n    foreach(int\
    \ l; sorted)\n    {\n        switch(l)\n        {\n            case 1:\n     \
    \           result[i] = \"One\";\n                break;\n            case 2:\n\
    \                result[i] = \"Two\";\n                break;\n            case\
    \ 3:\n                result[i] = \"Three\";\n                break;\n       \
    \     case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n        i++;\n    }\n    return result[0..i].reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjgn0r_x.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpcjgn0r_x.d(40): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\n/tmp/tmpcjgn0r_x.d(72): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjgn0r_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ >= 1 && i <= 9)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    result.sort;\n    result.reverse;\n    foreach(i; 0 .. result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8m8dn8m3.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp8m8dn8m3.d(32): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmp8m8dn8m3.d(33): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8m8dn8m3.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8m8dn8m3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc453lah.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpjc453lah.d(32): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmpjc453lah.d(33): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc453lah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Sort the array\n    arr.sort();\n    // Reverse the array\n    arr.reverse();\n\
    \    // Create a new array of strings\n    string[] result = new string[arr.length];\n\
    \    // Iterate over the array\n    foreach(i, n; arr)\n    {\n        // If the\
    \ number is between 1 and 9 inclusive\n        if(n >= 1 && n <= 9)\n        {\n\
    \            // Add the corresponding name to the result array\n            result[i]\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][n - 1];\n        }\n    }\n    // Return the result array\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9yl0k0ao.d(25): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp9yl0k0ao.d(27): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yl0k0ao.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] tmp;\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            tmp ~= elem;\n        }\n    }\n \
    \   sort(tmp);\n    foreach(elem; tmp)\n    {\n        switch(elem)\n        {\n\
    \            case 1:\n                result ~= \"One\";\n                break;\n\
    \            case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgysu0mge.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpgysu0mge.d(36): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgysu0mge.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[arr.length];\n    int i = 0;\n    foreach(long l;\
    \ arr)\n    {\n        if(l >= 1 && l <= 9)\n        {\n            res[i] = l.to!string;\n\
    \            i++;\n        }\n    }\n    res = res[0..i];\n    res.sort!((a, b)\
    \ => a.length > b.length);\n    res.reverse;\n    foreach(ref string s; res)\n\
    \    {\n        switch(s)\n        {\n            case \"1\":\n              \
    \  s = \"One\";\n                break;\n            case \"2\":\n           \
    \     s = \"Two\";\n                break;\n            case \"3\":\n        \
    \        s = \"Three\";\n                break;\n            case \"4\":\n   \
    \             s = \"Four\";\n                break;\n            case \"5\":\n\
    \                s = \"Five\";\n                break;\n            case \"6\"\
    :\n                s = \"Six\";\n                break;\n            case \"7\"\
    :\n                s = \"Seven\";\n                break;\n            case \"\
    8\":\n                s = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                s = \"Nine\";\n                break;\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5d351vnt.d(30): Error: no property `to` for type `long`\\n/tmp/tmp5d351vnt.d(35):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmp5d351vnt.d(36): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp5d351vnt.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5d351vnt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwdfvxn36.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpwdfvxn36.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpwdfvxn36.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdfvxn36.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            result ~= to!string(elem);\n     \
    \   }\n    }\n    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpti3l15qj.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpti3l15qj.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpti3l15qj.d(32):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpti3l15qj.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpti3l15qj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] temp = new int[arr.length];\n\
    \    int i = 0;\n    foreach(long l; arr)\n    {\n        if(l > 0 && l < 10)\n\
    \        {\n            temp[i] = cast(int)l;\n            i++;\n        }\n \
    \   }\n    temp = temp[0..i];\n    temp.sort();\n    temp.reverse();\n    foreach(int\
    \ j; temp)\n    {\n        switch(j)\n        {\n            case 1:\n       \
    \         result ~= \"One\";\n                break;\n            case 2:\n  \
    \              result ~= \"Two\";\n                break;\n            case 3:\n\
    \                result ~= \"Three\";\n                break;\n            case\
    \ 4:\n                result ~= \"Four\";\n                break;\n          \
    \  case 5:\n                result ~= \"Five\";\n                break;\n    \
    \        case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8blnv9dz.d(36): Error: no property `sort` for type `int[]`\\\
    n/tmp/tmp8blnv9dz.d(37): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8blnv9dz.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8blnv9dz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp10zm0ozc.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp10zm0ozc.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp10zm0ozc.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp10zm0ozc.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp10zm0ozc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i > 0 && i < 10)\n        {\n            switch(i)\n      \
    \      {\n                case 1:\n                    result[j] = \"One\";\n\
    \                    break;\n                case 2:\n                    result[j]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[j] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[j] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[j] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[j] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[j] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[j] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[j] = \"Nine\";\n        \
    \            break;\n            }\n            j++;\n        }\n    }\n    result\
    \ = result[0..j];\n    result.sort;\n    result.reverse;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvlq_nd_.d(30): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpqvlq_nd_.d(64):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpqvlq_nd_.d(65): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvlq_nd_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a >= 1 && a <= 9).sort.map!(a => to!string(a)).reverse;\n\
    \    return result.map!(a => a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a ==\
    \ \"3\" ? \"Three\" : a == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"\
    6\" ? \"Six\" : a == \"7\" ? \"Seven\" : a == \"8\" ? \"Eight\" : a == \"9\" ?\
    \ \"Nine\" : a).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1elghcys.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1elghcys.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    long[] sorted = arr.filter!(a => a >\
    \ 0 && a < 10).sort!(a => a).reverse;\n    foreach(a; sorted)\n    {\n       \
    \ switch(a)\n        {\n            case 1:\n                result ~= \"One\"\
    ;\n                break;\n            case 2:\n                result ~= \"Two\"\
    ;\n                break;\n            case 3:\n                result ~= \"Three\"\
    ;\n                break;\n            case 4:\n                result ~= \"Four\"\
    ;\n                break;\n            case 5:\n                result ~= \"Five\"\
    ;\n                break;\n            case 6:\n                result ~= \"Six\"\
    ;\n                break;\n            case 7:\n                result ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                result ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaxhbjwcr.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpaxhbjwcr.d(28): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxhbjwcr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    result = result.reverse;\n    foreach(i, elem; result)\n\
    \    {\n        switch(elem)\n        {\n            case \"1\":\n           \
    \     result[i] = \"One\";\n                break;\n            case \"2\":\n\
    \                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_kb7wyp.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpb_kb7wyp.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpb_kb7wyp.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpb_kb7wyp.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb_kb7wyp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            result ~= to!string(e);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i, e; result)\n    {\n        switch(to!long(e))\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6s_e7i0p.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6s_e7i0p.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp6s_e7i0p.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6s_e7i0p.d(36):\
    \ Error: template instance `to!long` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s_e7i0p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(ref string s;\
    \ result)\n    {\n        switch(s)\n        {\n            case \"1\":\n    \
    \            s = \"One\";\n                break;\n            case \"2\":\n \
    \               s = \"Two\";\n                break;\n            case \"3\":\n\
    \                s = \"Three\";\n                break;\n            case \"4\"\
    :\n                s = \"Four\";\n                break;\n            case \"\
    5\":\n                s = \"Five\";\n                break;\n            case\
    \ \"6\":\n                s = \"Six\";\n                break;\n            case\
    \ \"7\":\n                s = \"Seven\";\n                break;\n           \
    \ case \"8\":\n                s = \"Eight\";\n                break;\n      \
    \      case \"9\":\n                s = \"Nine\";\n                break;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqt5thny1.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpqt5thny1.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpqt5thny1.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpqt5thny1.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqt5thny1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    result.sort;\n    result.reverse;\n    foreach(i; 0 .. result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8enij9hr.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp8enij9hr.d(32): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmp8enij9hr.d(33): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8enij9hr.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8enij9hr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe564hqvj.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpe564hqvj.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpe564hqvj.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe564hqvj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxhon863w.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpxhon863w.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpxhon863w.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xc37e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a >= 1 && a <= 9).sort.reverse;\n    return\
    \ result.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsntr7jz.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsntr7jz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx3xjja17.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpx3xjja17.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpx3xjja17.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpx3xjja17.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx3xjja17.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(to!int(elem))\n        {\n            case 1:\n         \
    \       elem = \"One\";\n                break;\n            case 2:\n       \
    \         elem = \"Two\";\n                break;\n            case 3:\n     \
    \           elem = \"Three\";\n                break;\n            case 4:\n \
    \               elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg1x3coi2.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpg1x3coi2.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpg1x3coi2.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpg1x3coi2.d(36):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1x3coi2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Sort the array\n    sort(arr);\n    // Reverse the array\n    reverse(arr);\n\
    \    // Replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[]\
    \ result = new string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8hxwyuw.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpm8hxwyuw.d(27): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpm8hxwyuw.d(32):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpm8hxwyuw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(long i; arr)\n    {\n        if(i > 0 &&\
    \ i < 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(string s; result)\n    {\n\
    \        switch(s)\n        {\n            case \"1\":\n                s = \"\
    One\";\n                break;\n            case \"2\":\n                s = \"\
    Two\";\n                break;\n            case \"3\":\n                s = \"\
    Three\";\n                break;\n            case \"4\":\n                s =\
    \ \"Four\";\n                break;\n            case \"5\":\n               \
    \ s = \"Five\";\n                break;\n            case \"6\":\n           \
    \     s = \"Six\";\n                break;\n            case \"7\":\n        \
    \        s = \"Seven\";\n                break;\n            case \"8\":\n   \
    \             s = \"Eight\";\n                break;\n            case \"9\":\n\
    \                s = \"Nine\";\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu_vvzt2n.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpu_vvzt2n.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpu_vvzt2n.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpu_vvzt2n.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu_vvzt2n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(num; arr)\n    {\n        if(num > 0 && num <\
    \ 10)\n        {\n            result ~= to!string(num);\n        }\n    }\n  \
    \  sort(result);\n    reverse(result);\n    foreach(i, ref num; result)\n    {\n\
    \        switch(num)\n        {\n            case \"1\":\n                num\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  num = \"Two\";\n                break;\n            case \"3\":\n         \
    \       num = \"Three\";\n                break;\n            case \"4\":\n  \
    \              num = \"Four\";\n                break;\n            case \"5\"\
    :\n                num = \"Five\";\n                break;\n            case \"\
    6\":\n                num = \"Six\";\n                break;\n            case\
    \ \"7\":\n                num = \"Seven\";\n                break;\n         \
    \   case \"8\":\n                num = \"Eight\";\n                break;\n  \
    \          case \"9\":\n                num = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5urnsb71.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp5urnsb71.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp5urnsb71.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp5urnsb71.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5urnsb71.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9c6i3oxv.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp9c6i3oxv.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp9c6i3oxv.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c6i3oxv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj5nwlylg.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj5nwlylg.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpj5nwlylg.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpj5nwlylg.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpj5nwlylg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjepbevu2.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpjepbevu2.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpjepbevu2.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpjepbevu2.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjepbevu2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = arr.sort!((a,\
    \ b) => a < b);\n    int i = 0;\n    foreach(num; sorted)\n    {\n        if(num\
    \ > 0 && num < 10)\n        {\n            switch(num)\n            {\n      \
    \          case 1:\n                    result[i] = \"One\";\n               \
    \     break;\n                case 2:\n                    result[i] = \"Two\"\
    ;\n                    break;\n                case 3:\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case 4:\n        \
    \            result[i] = \"Four\";\n                    break;\n             \
    \   case 5:\n                    result[i] = \"Five\";\n                    break;\n\
    \                case 6:\n                    result[i] = \"Six\";\n         \
    \           break;\n                case 7:\n                    result[i] = \"\
    Seven\";\n                    break;\n                case 8:\n              \
    \      result[i] = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    result[i] = \"Nine\";\n                    break;\n\
    \            }\n            i++;\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfvg93q94.d(25): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpfvg93q94.d(31): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpfvg93q94.d(64):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvg93q94.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4qbgq07c.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp4qbgq07c.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp4qbgq07c.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4qbgq07c.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4qbgq07c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8j3ucpig.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp8j3ucpig.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp8j3ucpig.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8j3ucpig.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8j3ucpig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaikho9z6.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpaikho9z6.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpaikho9z6.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpaikho9z6.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaikho9z6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvt_nj5a.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvt_nj5a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ l; arr)\n    {\n        if(l > 0 && l < 10)\n        {\n            result[i]\
    \ = l.to!string;\n            i++;\n        }\n    }\n    result = result[0..i];\n\
    \    sort(result);\n    reverse(result);\n    foreach(ref string s; result)\n\
    \    {\n        switch(s)\n        {\n            case \"1\": s = \"One\"; break;\n\
    \            case \"2\": s = \"Two\"; break;\n            case \"3\": s = \"Three\"\
    ; break;\n            case \"4\": s = \"Four\"; break;\n            case \"5\"\
    : s = \"Five\"; break;\n            case \"6\": s = \"Six\"; break;\n        \
    \    case \"7\": s = \"Seven\"; break;\n            case \"8\": s = \"Eight\"\
    ; break;\n            case \"9\": s = \"Nine\"; break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1zt8378.d(30): Error: no property `to` for type `long`\\n/tmp/tmpk1zt8378.d(35):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpk1zt8378.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpk1zt8378.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk1zt8378.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.filter!(a => a > 0 && a < 10).sort();\n    string[] result\
    \ = sorted.map!(a => to!string(a)).reverse;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdiciah6h.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpdiciah6h.d(25): Error: no property `map` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiciah6h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[0];\n    foreach(long i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            res ~= to!string(i);\n        }\n   \
    \ }\n    sort(res);\n    reverse(res);\n    foreach(ref string s; res)\n    {\n\
    \        switch(s)\n        {\n            case \"1\": s = \"One\"; break;\n \
    \           case \"2\": s = \"Two\"; break;\n            case \"3\": s = \"Three\"\
    ; break;\n            case \"4\": s = \"Four\"; break;\n            case \"5\"\
    : s = \"Five\"; break;\n            case \"6\": s = \"Six\"; break;\n        \
    \    case \"7\": s = \"Seven\"; break;\n            case \"8\": s = \"Eight\"\
    ; break;\n            case \"9\": s = \"Nine\"; break;\n        }\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyrmh0wb.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpxyrmh0wb.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpxyrmh0wb.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpxyrmh0wb.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxyrmh0wb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6upyqlqw.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6upyqlqw.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp6upyqlqw.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6upyqlqw.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6upyqlqw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplnut55fp.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmplnut55fp.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmplnut55fp.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplnut55fp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Sort the array\n    sort(arr);\n    // Reverse the array\n    reverse(arr);\n\
    \    // Create a new array\n    string[] new_arr;\n    // Iterate through the\
    \ array\n    foreach(long i; arr)\n    {\n        // If the number is between\
    \ 1 and 9 inclusive\n        if(i >= 1 && i <= 9)\n        {\n            // Append\
    \ the number to the new array\n            new_arr ~= to!string(i);\n        }\n\
    \    }\n    // Return the new array\n    return new_arr;\n}\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp653_h18w.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp653_h18w.d(27): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp653_h18w.d(37):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp653_h18w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[];\n    foreach(e; arr)\n    {\n        if(e > 0\
    \ && e < 10)\n        {\n            res ~= to!string(e);\n        }\n    }\n\
    \    sort(res);\n    reverse(res);\n    foreach(ref e; res)\n    {\n        switch(to!long(e))\n\
    \        {\n            case 1: e = \"One\"; break;\n            case 2: e = \"\
    Two\"; break;\n            case 3: e = \"Three\"; break;\n            case 4:\
    \ e = \"Four\"; break;\n            case 5: e = \"Five\"; break;\n           \
    \ case 6: e = \"Six\"; break;\n            case 7: e = \"Seven\"; break;\n   \
    \         case 8: e = \"Eight\"; break;\n            case 9: e = \"Nine\"; break;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoppuh7up.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpoppuh7up.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpoppuh7up.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpoppuh7up.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpoppuh7up.d(36):\
    \ Error: template instance `to!long` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoppuh7up.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(to!int(result[i]))\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpp76mvw.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpdpp76mvw.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpdpp76mvw.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpdpp76mvw.d(36):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpp76mvw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[arr.length];\n    int i = 0;\n    foreach(long x;\
    \ arr)\n    {\n        if(x >= 1 && x <= 9)\n        {\n            res[i] = to!string(x);\n\
    \            i++;\n        }\n    }\n    res = res[0..i];\n    res.sort!((a, b)\
    \ => a.length > b.length);\n    res.reverse;\n    foreach(ref string x; res)\n\
    \    {\n        switch(x)\n        {\n            case \"1\": x = \"One\"; break;\n\
    \            case \"2\": x = \"Two\"; break;\n            case \"3\": x = \"Three\"\
    ; break;\n            case \"4\": x = \"Four\"; break;\n            case \"5\"\
    : x = \"Five\"; break;\n            case \"6\": x = \"Six\"; break;\n        \
    \    case \"7\": x = \"Seven\"; break;\n            case \"8\": x = \"Eight\"\
    ; break;\n            case \"9\": x = \"Nine\"; break;\n        }\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp275m9l7b.d(30): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp275m9l7b.d(35): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmp275m9l7b.d(36): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp275m9l7b.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp275m9l7b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(i; 0 .. result.length)\n\
    \    {\n        result[i] = to!string(to!long(result[i]));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcq756i3n.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpcq756i3n.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpcq756i3n.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpcq756i3n.d(36):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq756i3n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] numbers = new int[arr.length];\n\
    \    int j = 0;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n   \
    \     {\n            numbers[j] = i;\n            j++;\n        }\n    }\n   \
    \ numbers = numbers[0..j];\n    sort(numbers);\n    numbers = numbers.reverse;\n\
    \    foreach(i; numbers)\n    {\n        switch(i)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnl352s9.d(31): Error: cannot implicitly convert expression `i`\
    \ of type `long` to `int`\\n/tmp/tmpmnl352s9.d(36): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmpmnl352s9.d(37): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(int[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpmnl352s9.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmnl352s9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e < 1 || e > 9)\n\
    \            continue;\n        result ~= e.to!string;\n    }\n    result.sort;\n\
    \    result.reverse;\n    foreach(i, e; result)\n    {\n        switch(e)\n  \
    \      {\n            case \"1\":\n                result[i] = \"One\";\n    \
    \            break;\n            case \"2\":\n                result[i] = \"Two\"\
    ;\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqwepqhy.d(29): Error: no property `to` for type `long`\\n/tmp/tmpbqwepqhy.d(31):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpbqwepqhy.d(32): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpbqwepqhy.d(35):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbqwepqhy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(x => x > 0 && x < 10);\n    arr2.sort;\n    arr2.reverse;\n\
    \    return arr2.map!(x => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][x-1]);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdt8yqmue.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdt8yqmue.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            result ~= e.to!string;\n        }\n    }\n    result.sort!(a,\
    \ b => a.length < b.length);\n    result.reverse;\n    foreach(i, e; result)\n\
    \    {\n        switch(e)\n        {\n            case \"1\":\n              \
    \  result[i] = \"One\";\n                break;\n            case \"2\":\n   \
    \             result[i] = \"Two\";\n                break;\n            case \"\
    3\":\n                result[i] = \"Three\";\n                break;\n       \
    \     case \"4\":\n                result[i] = \"Four\";\n                break;\n\
    \            case \"5\":\n                result[i] = \"Five\";\n            \
    \    break;\n            case \"6\":\n                result[i] = \"Six\";\n \
    \               break;\n            case \"7\":\n                result[i] = \"\
    Seven\";\n                break;\n            case \"8\":\n                result[i]\
    \ = \"Eight\";\n                break;\n            case \"9\":\n            \
    \    result[i] = \"Nine\";\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz63oerpw.d(29): Error: no property `to` for type `long`\\n/tmp/tmpz63oerpw.d(32):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpz63oerpw.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpz63oerpw.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz63oerpw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] temp;\n    foreach(element; arr)\n    {\n    \
    \    if(element > 0 && element < 10)\n        {\n            temp ~= element;\n\
    \        }\n    }\n    sort(temp);\n    reverse(temp);\n    foreach(element; temp)\n\
    \    {\n        switch(element)\n        {\n            case 1:\n            \
    \    result ~= \"One\";\n                break;\n            case 2:\n       \
    \         result ~= \"Two\";\n                break;\n            case 3:\n  \
    \              result ~= \"Three\";\n                break;\n            case\
    \ 4:\n                result ~= \"Four\";\n                break;\n          \
    \  case 5:\n                result ~= \"Five\";\n                break;\n    \
    \        case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjxv5kf1w.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpjxv5kf1w.d(34): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpjxv5kf1w.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjxv5kf1w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1h6xenft.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp1h6xenft.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp1h6xenft.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp1h6xenft.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1h6xenft.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(a => a >= 1 && a <= 9).sort!((a,\
    \ b) => a - b).reverse;\n    foreach(i; sorted)\n    {\n        result ~= to!string(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa8p7wr54.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpa8p7wr54.d(28): Error: template instance `to!string` template `to` is\
    \ not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa8p7wr54.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(i; 0 .. result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwzkc3w7.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpzwzkc3w7.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpzwzkc3w7.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpzwzkc3w7.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzwzkc3w7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n    auto arr3\
    \ = arr2.map!(a => to!string(a));\n    return arr3;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphmxjj3ic.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmxjj3ic.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgm9t1po.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpfgm9t1po.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpfgm9t1po.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpfgm9t1po.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfgm9t1po.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto d = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6:\
    \ \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    auto res = arr.filter!(a\
    \ => a > 0 && a < 10).sort.map!(a => d[a]).array;\n    res.reverse;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv_eoph6v.d(25): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_eoph6v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswi35_jr.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpswi35_jr.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpswi35_jr.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpswi35_jr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9yxo8mj.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9yxo8mj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    long[] sorted = new long[0];\n    foreach(long\
    \ i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n            sorted ~=\
    \ i;\n        }\n    }\n    sort(sorted);\n    foreach(long i; sorted)\n    {\n\
    \        switch(i)\n        {\n            case 1:\n                result ~=\
    \ \"One\";\n                break;\n            case 2:\n                result\
    \ ~= \"Two\";\n                break;\n            case 3:\n                result\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ result ~= \"Four\";\n                break;\n            case 5:\n         \
    \       result ~= \"Five\";\n                break;\n            case 6:\n   \
    \             result ~= \"Six\";\n                break;\n            case 7:\n\
    \                result ~= \"Seven\";\n                break;\n            case\
    \ 8:\n                result ~= \"Eight\";\n                break;\n         \
    \   case 9:\n                result ~= \"Nine\";\n                break;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwnkad9k.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpwwnkad9k.d(36): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwnkad9k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i >= 1 && i <=\
    \ 9)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2dijetz8.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp2dijetz8.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp2dijetz8.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp2dijetz8.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2dijetz8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6sq14o5w.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6sq14o5w.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp6sq14o5w.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6sq14o5w.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6sq14o5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp920mxrtx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp920mxrtx.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp920mxrtx.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xa5da4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto sorted = arr.filter!(a => a >= 1 && a <= 9).sort;\n    auto reversed =\
    \ sorted.reverse;\n    return reversed.map!(a => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yha1_db.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yha1_db.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return [];\n    else\n    {\n        auto result\
    \ = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n        return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpteivoll2.d(28): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteivoll2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    int[] temp = [];\n    foreach(int i; arr)\n    {\n\
    \        if(i > 0 && i < 10)\n        {\n            temp ~= i;\n        }\n \
    \   }\n    temp.sort;\n    temp.reverse;\n    foreach(int i; temp)\n    {\n  \
    \      switch(i)\n        {\n            case 1:\n                result ~= \"\
    One\";\n                break;\n            case 2:\n                result ~=\
    \ \"Two\";\n                break;\n            case 3:\n                result\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ result ~= \"Four\";\n                break;\n            case 5:\n         \
    \       result ~= \"Five\";\n                break;\n            case 6:\n   \
    \             result ~= \"Six\";\n                break;\n            case 7:\n\
    \                result ~= \"Seven\";\n                break;\n            case\
    \ 8:\n                result ~= \"Eight\";\n                break;\n         \
    \   case 9:\n                result ~= \"Nine\";\n                break;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpevoke_x8.d(26): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\n/tmp/tmpevoke_x8.d(33): Error: no property `sort`\
    \ for type `int[]`\\n/tmp/tmpevoke_x8.d(34): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpevoke_x8.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpevoke_x8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i > 0 && i < 10)\n        {\n            result[j] = i.to!string;\n\
    \            j++;\n        }\n    }\n    result = result[0..j];\n    result.sort!((a,\
    \ b) => a.length > b.length);\n    result.reverse;\n    foreach(i; 0..result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjixtu1z.d(30): Error: no property `to` for type `long`\\n/tmp/tmpgjixtu1z.d(35):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpgjixtu1z.d(36): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgjixtu1z.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgjixtu1z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return arr2.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzigdco_.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzigdco_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            switch(elem)\n            {\n           \
    \     case 1:\n                    result ~= \"One\";\n                    break;\n\
    \                case 2:\n                    result ~= \"Two\";\n           \
    \         break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    result.sort();\n    result.reverse();\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk2sho43.d(29): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpyk2sho43.d(61):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpyk2sho43.d(62): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk2sho43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n    string[]\
    \ result = new string[arr2.length];\n    foreach(i, e; arr2)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqza_lp7b.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqza_lp7b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn2xsjirj.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpn2xsjirj.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpn2xsjirj.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpn2xsjirj.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpn2xsjirj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] sorted = arr.filter!(a\
    \ => a > 0 && a < 10).sort!((a, b) => a > b);\n    foreach(i, v; sorted)\n   \
    \ {\n        switch(v)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw72trp1v.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpw72trp1v.d(28): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpw72trp1v.d(59):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw72trp1v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpai_l0v53.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpai_l0v53.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpai_l0v53.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x4b432554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo69g0az9.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpo69g0az9.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpo69g0az9.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo69g0az9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(long i; arr)\n    {\n        if(i > 0 &&\
    \ i < 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(string i; result)\n    {\n\
    \        switch(i)\n        {\n            case \"1\":\n                i = \"\
    One\";\n                break;\n            case \"2\":\n                i = \"\
    Two\";\n                break;\n            case \"3\":\n                i = \"\
    Three\";\n                break;\n            case \"4\":\n                i =\
    \ \"Four\";\n                break;\n            case \"5\":\n               \
    \ i = \"Five\";\n                break;\n            case \"6\":\n           \
    \     i = \"Six\";\n                break;\n            case \"7\":\n        \
    \        i = \"Seven\";\n                break;\n            case \"8\":\n   \
    \             i = \"Eight\";\n                break;\n            case \"9\":\n\
    \                i = \"Nine\";\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj053p02l.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj053p02l.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpj053p02l.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpj053p02l.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpj053p02l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] sorted = sort(arr.filter!(a => a > 0 && a < 10));\n    string[] result\
    \ = new string[sorted.length];\n    foreach(i, e; sorted)\n    {\n        result[i]\
    \ = to!string(e);\n    }\n    return result.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86or44tq.d(24): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp86or44tq.d(28): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmp86or44tq.d(30): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp86or44tq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.filter!(a => a > 0 && a < 10).sort!((a, b) => a > b);\n\
    \    string[] result = new string[sorted.length];\n    foreach(i, e; sorted)\n\
    \    {\n        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2qhl1zcq.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmp2qhl1zcq.d(28): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp2qhl1zcq.d(59):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qhl1zcq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(a => a > 0 && a < 10).sort!((a,\
    \ b) => a > b);\n    foreach(i; sorted.reverse)\n    {\n        switch(i)\n  \
    \      {\n            case 1:\n                result ~= \"One\";\n          \
    \      break;\n            case 2:\n                result ~= \"Two\";\n     \
    \           break;\n            case 3:\n                result ~= \"Three\";\n\
    \                break;\n            case 4:\n                result ~= \"Four\"\
    ;\n                break;\n            case 5:\n                result ~= \"Five\"\
    ;\n                break;\n            case 6:\n                result ~= \"Six\"\
    ;\n                break;\n            case 7:\n                result ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                result ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa094hsw0.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpa094hsw0.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa094hsw0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.filter!(a => a > 0 && a < 10).sort();\n    string[] result\
    \ = new string[sorted.length];\n    foreach(i, e; sorted.reverse)\n    {\n   \
    \     switch(e)\n        {\n            case 1: result[i] = \"One\"; break;\n\
    \            case 2: result[i] = \"Two\"; break;\n            case 3: result[i]\
    \ = \"Three\"; break;\n            case 4: result[i] = \"Four\"; break;\n    \
    \        case 5: result[i] = \"Five\"; break;\n            case 6: result[i] =\
    \ \"Six\"; break;\n            case 7: result[i] = \"Seven\"; break;\n       \
    \     case 8: result[i] = \"Eight\"; break;\n            case 9: result[i] = \"\
    Nine\"; break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr73908xb.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpr73908xb.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpr73908xb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            result ~= to!string(e);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i, e; result)\n    {\n        switch(e)\n \
    \       {\n            case \"1\":\n                result[i] = \"One\";\n   \
    \             break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3x0gjbgj.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp3x0gjbgj.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp3x0gjbgj.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp3x0gjbgj.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp3x0gjbgj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ x; arr)\n    {\n        if(x > 0 && x < 10)\n        {\n            switch(x)\n\
    \            {\n                case 1:\n                    result[i] = \"One\"\
    ;\n                    break;\n                case 2:\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[i] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n            i++;\n        }\n    }\n    result\
    \ = result[0..i];\n    result.sort;\n    result.reverse;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc0fyzddq.d(30): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpc0fyzddq.d(64):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpc0fyzddq.d(65): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc0fyzddq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            result ~= to!string(e);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i, e; result)\n    {\n        switch(to!long(e))\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgtfazxqd.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpgtfazxqd.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpgtfazxqd.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgtfazxqd.d(36):\
    \ Error: template instance `to!long` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtfazxqd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.filter!(a => a > 0 && a < 10).sort!((a, b) => a - b);\n\
    \    string[] result = new string[sorted.length];\n    foreach (i, v; sorted.reverse)\n\
    \    {\n        switch (v)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_ahjqzh.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmp6_ahjqzh.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_ahjqzh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(a => a > 0 && a < 10).sort;\n\
    \    foreach(i; sorted)\n    {\n        result ~= to!string(i);\n    }\n    return\
    \ result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppkstszs4.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmppkstszs4.d(28): Error: template instance `to!string` template `to` is\
    \ not defined, did you mean No?\\n/tmp/tmppkstszs4.d(30): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppkstszs4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = new string[arr.length];\n    int i = 0;\n    foreach(long e;\
    \ arr)\n    {\n        if(e >= 1 && e <= 9)\n        {\n            res[i] = e.to!string;\n\
    \            i++;\n        }\n    }\n    res = res[0..i];\n    res.sort!((a, b)\
    \ => a.length > b.length);\n    res.reverse;\n    foreach(ref string e; res)\n\
    \    {\n        switch(e)\n        {\n            case \"1\": e = \"One\"; break;\n\
    \            case \"2\": e = \"Two\"; break;\n            case \"3\": e = \"Three\"\
    ; break;\n            case \"4\": e = \"Four\"; break;\n            case \"5\"\
    : e = \"Five\"; break;\n            case \"6\": e = \"Six\"; break;\n        \
    \    case \"7\": e = \"Seven\"; break;\n            case \"8\": e = \"Eight\"\
    ; break;\n            case \"9\": e = \"Nine\"; break;\n        }\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4o7rvsht.d(30): Error: no property `to` for type `long`\\n/tmp/tmp4o7rvsht.d(35):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmp4o7rvsht.d(36): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4o7rvsht.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4o7rvsht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] numbers = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9];\n    string[] names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    int i = 0;\n    foreach(long\
    \ l; arr)\n    {\n        if(l in numbers)\n        {\n            result[i] =\
    \ names[l - 1];\n            i++;\n        }\n    }\n    result = result[0..i];\n\
    \    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7yvdsi_.d(30): Error: incompatible types for `(l) in (numbers)`:\
    \ `long` and `int[]`\\n/tmp/tmpe7yvdsi_.d(37): Error: no property `sort` for type\
    \ `string[]`\\n/tmp/tmpe7yvdsi_.d(38): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7yvdsi_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1172b8th.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1172b8th.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            result ~= to!string(elem);\n     \
    \   }\n    }\n    sort(result);\n    reverse(result);\n    foreach(i, elem; result)\n\
    \    {\n        result[i] = to!string(to!long(elem));\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps6ayecn3.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmps6ayecn3.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmps6ayecn3.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmps6ayecn3.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmps6ayecn3.d(36):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6ayecn3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            switch(elem)\n            {\n    \
    \            case 1: result ~= \"One\"; break;\n                case 2: result\
    \ ~= \"Two\"; break;\n                case 3: result ~= \"Three\"; break;\n  \
    \              case 4: result ~= \"Four\"; break;\n                case 5: result\
    \ ~= \"Five\"; break;\n                case 6: result ~= \"Six\"; break;\n   \
    \             case 7: result ~= \"Seven\"; break;\n                case 8: result\
    \ ~= \"Eight\"; break;\n                case 9: result ~= \"Nine\"; break;\n \
    \           }\n        }\n    }\n    result.sort;\n    result.reverse;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxtuo68w.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpqxtuo68w.d(29): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmpqxtuo68w.d(43): Error: no property `sort`\
    \ for type `string[]`\\n/tmp/tmpqxtuo68w.d(44): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxtuo68w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            result ~= to!string(e);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i, e; result)\n    {\n        switch(e)\n \
    \       {\n            case \"1\":\n                result[i] = \"One\";\n   \
    \             break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsjqclrlt.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpsjqclrlt.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpsjqclrlt.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpsjqclrlt.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsjqclrlt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe8xrn6l1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpe8xrn6l1.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpe8xrn6l1.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x3fe15554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] arr1 = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n    string[]\
    \ arr2 = arr1.map!(a => a == 1 ? \"One\" : a == 2 ? \"Two\" : a == 3 ? \"Three\"\
    \ : a == 4 ? \"Four\" : a == 5 ? \"Five\" : a == 6 ? \"Six\" : a == 7 ? \"Seven\"\
    \ : a == 8 ? \"Eight\" : \"Nine\").array();\n    return arr2;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywoys3k4.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpywoys3k4.d(25): Error: no property `map` for type `int[]`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywoys3k4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(num; arr)\n    {\n        if(num >= 1 && num\
    \ <= 9)\n        {\n            result ~= to!string(num);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(i, num; result)\n    {\n\
    \        switch(num)\n        {\n            case \"1\":\n                result[i]\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  result[i] = \"Two\";\n                break;\n            case \"3\":\n   \
    \             result[i] = \"Three\";\n                break;\n            case\
    \ \"4\":\n                result[i] = \"Four\";\n                break;\n    \
    \        case \"5\":\n                result[i] = \"Five\";\n                break;\n\
    \            case \"6\":\n                result[i] = \"Six\";\n             \
    \   break;\n            case \"7\":\n                result[i] = \"Seven\";\n\
    \                break;\n            case \"8\":\n                result[i] =\
    \ \"Eight\";\n                break;\n            case \"9\":\n              \
    \  result[i] = \"Nine\";\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuqpfxp73.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpuqpfxp73.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpuqpfxp73.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpuqpfxp73.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuqpfxp73.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp08nyr_hc.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08nyr_hc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] arr1 = arr.filter!(x => x >= 1 && x <= 9);\n    arr1.sort;\n    arr1.reverse;\n\
    \    string[] arr2 = arr1.map!(x => to!string(x));\n    return arr2;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqqjdm92.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpeqqjdm92.d(25): Error: no property `sort` for type `long[]`\\n/tmp/tmpeqqjdm92.d(26):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpeqqjdm92.d(27):\
    \ Error: no property `map` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpeqqjdm92.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(i; arr)\n    {\n        if(i >\
    \ 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n  \
    \  }\n    sort(result);\n    reverse(result);\n    foreach(i; 0..result.length)\n\
    \    {\n        result[i] = to!string(to!long(result[i]));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3nfb7w5p.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmp3nfb7w5p.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmp3nfb7w5p.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp3nfb7w5p.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp3nfb7w5p.d(36):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nfb7w5p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt65sf3i_.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt65sf3i_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(long num; arr)\n    {\n      \
    \  if(num > 0 && num < 10)\n        {\n            result ~= to!string(num);\n\
    \        }\n    }\n    sort(result);\n    reverse(result);\n    foreach(ref string\
    \ num; result)\n    {\n        switch(num)\n        {\n            case \"1\"\
    :\n                num = \"One\";\n                break;\n            case \"\
    2\":\n                num = \"Two\";\n                break;\n            case\
    \ \"3\":\n                num = \"Three\";\n                break;\n         \
    \   case \"4\":\n                num = \"Four\";\n                break;\n   \
    \         case \"5\":\n                num = \"Five\";\n                break;\n\
    \            case \"6\":\n                num = \"Six\";\n                break;\n\
    \            case \"7\":\n                num = \"Seven\";\n                break;\n\
    \            case \"8\":\n                num = \"Eight\";\n                break;\n\
    \            case \"9\":\n                num = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy2uvpxj.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmphy2uvpxj.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmphy2uvpxj.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmphy2uvpxj.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmphy2uvpxj.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphy2uvpxj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8x9m8w6y.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8x9m8w6y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        result[i]\
    \ = to!string(to!long(result[i]));\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbdu9974.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpdbdu9974.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpdbdu9974.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpdbdu9974.d(36):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbdu9974.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto a = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n    return a.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lsnbsfw.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lsnbsfw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4ojsei7.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj4ojsei7.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpj4ojsei7.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpj4ojsei7.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpj4ojsei7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem >= 1\
    \ && elem <= 9)\n        {\n            result ~= to!string(elem);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n \
    \   {\n        switch(elem)\n        {\n            case \"1\":\n            \
    \    elem = \"One\";\n                break;\n            case \"2\":\n      \
    \          elem = \"Two\";\n                break;\n            case \"3\":\n\
    \                elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9nxwft2.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpy9nxwft2.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpy9nxwft2.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpy9nxwft2.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpy9nxwft2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9npgfr39.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp9npgfr39.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp9npgfr39.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp9npgfr39.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9npgfr39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7447c8_d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp7447c8_d.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp7447c8_d.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xc08c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = sort(arr);\n    long[] reversed = reverse(sorted);\n    string[]\
    \ result = new string[reversed.length];\n    foreach(i, e; reversed)\n    {\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4adkc4xq.d(24): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp4adkc4xq.d(25): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4adkc4xq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvngkoty7.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvngkoty7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = new int[arr.length];\n\
    \    int i = 0;\n    foreach(long l; arr)\n    {\n        if(l >= 1 && l <= 9)\n\
    \        {\n            sorted[i] = l;\n            i++;\n        }\n    }\n \
    \   sort(sorted[0..i]);\n    i = 0;\n    foreach(int l; sorted)\n    {\n     \
    \   if(l >= 1 && l <= 9)\n        {\n            switch(l)\n            {\n  \
    \              case 1:\n                    result[i] = \"One\";\n           \
    \         break;\n                case 2:\n                    result[i] = \"\
    Two\";\n                    break;\n                case 3:\n                \
    \    result[i] = \"Three\";\n                    break;\n                case\
    \ 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n            i++;\n        }\n    }\n    return\
    \ result[0..i];\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwlmelxlz.d(31): Error: cannot implicitly convert expression `l`\
    \ of type `long` to `int`\\n/tmp/tmpwlmelxlz.d(35): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmpwlmelxlz.d(41): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwlmelxlz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzzia8obx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpzzia8obx.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpzzia8obx.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xb7ade554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbya2ofzl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpbya2ofzl.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpbya2ofzl.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xd4ee5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_mz1yrx.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpi_mz1yrx.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpi_mz1yrx.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpi_mz1yrx.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpi_mz1yrx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0 .. result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6lwwnlob.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6lwwnlob.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp6lwwnlob.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6lwwnlob.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6lwwnlob.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpalzy3piy.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpalzy3piy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    long[] sorted = sort(arr);\n    foreach(i;\
    \ sorted)\n    {\n        if(i > 0 && i < 10)\n        {\n            result ~=\
    \ to!string(i);\n        }\n    }\n    return result.reverse;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy33nj1qm.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpy33nj1qm.d(30): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmpy33nj1qm.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy33nj1qm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i <\
    \ 10)\n        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0 .. result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjckjvu81.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpjckjvu81.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpjckjvu81.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpjckjvu81.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjckjvu81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= i.to!string;\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplsz564jb.d(29): Error: no property `to` for type `long`\\n/tmp/tmplsz564jb.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmplsz564jb.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmplsz564jb.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplsz564jb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv1slr4p.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpsv1slr4p.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpsv1slr4p.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv1slr4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(long i; arr)\n    {\n        if(i >= 1 &&\
    \ i <= 9)\n        {\n            result ~= to!string(i);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(string s; result)\n    {\n\
    \        switch(s)\n        {\n            case \"1\":\n                s = \"\
    One\";\n                break;\n            case \"2\":\n                s = \"\
    Two\";\n                break;\n            case \"3\":\n                s = \"\
    Three\";\n                break;\n            case \"4\":\n                s =\
    \ \"Four\";\n                break;\n            case \"5\":\n               \
    \ s = \"Five\";\n                break;\n            case \"6\":\n           \
    \     s = \"Six\";\n                break;\n            case \"7\":\n        \
    \        s = \"Seven\";\n                break;\n            case \"8\":\n   \
    \             s = \"Eight\";\n                break;\n            case \"9\":\n\
    \                s = \"Nine\";\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hro0y6e.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp8hro0y6e.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp8hro0y6e.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8hro0y6e.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8hro0y6e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37ydd_54.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp37ydd_54.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp37ydd_54.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp37ydd_54.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp37ydd_54.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3k0d_rin.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp3k0d_rin.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp3k0d_rin.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xe1722554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(elem; result)\n    {\n \
    \       switch(elem)\n        {\n            case \"1\":\n                elem\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  elem = \"Two\";\n                break;\n            case \"3\":\n        \
    \        elem = \"Three\";\n                break;\n            case \"4\":\n\
    \                elem = \"Four\";\n                break;\n            case \"\
    5\":\n                elem = \"Five\";\n                break;\n            case\
    \ \"6\":\n                elem = \"Six\";\n                break;\n          \
    \  case \"7\":\n                elem = \"Seven\";\n                break;\n  \
    \          case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4kruh_v2.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp4kruh_v2.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp4kruh_v2.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4kruh_v2.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4kruh_v2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; result)\n    {\n        switch(i)\n    \
    \    {\n            case \"1\":\n                i = \"One\";\n              \
    \  break;\n            case \"2\":\n                i = \"Two\";\n           \
    \     break;\n            case \"3\":\n                i = \"Three\";\n      \
    \          break;\n            case \"4\":\n                i = \"Four\";\n  \
    \              break;\n            case \"5\":\n                i = \"Five\";\n\
    \                break;\n            case \"6\":\n                i = \"Six\"\
    ;\n                break;\n            case \"7\":\n                i = \"Seven\"\
    ;\n                break;\n            case \"8\":\n                i = \"Eight\"\
    ;\n                break;\n            case \"9\":\n                i = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgyzqcvbk.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpgyzqcvbk.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpgyzqcvbk.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgyzqcvbk.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgyzqcvbk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpri238yna.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpri238yna.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto sorted = arr.filter!(a => a > 0 && a < 10).sort;\n    auto reversed =\
    \ sorted.reverse;\n    return reversed.map!(a => to!string(a)).map!(a => a.replace(\"\
    1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\").replace(\"4\"\
    , \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"7\", \"\
    Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpye71xtfs.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpye71xtfs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ x; arr)\n    {\n        if(x > 0 && x < 10)\n        {\n            switch(x)\n\
    \            {\n                case 1:\n                    result[i] = \"One\"\
    ;\n                    break;\n                case 2:\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[i] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n            i++;\n        }\n    }\n    result\
    \ = result[0..i];\n    result.sort();\n    result.reverse();\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9r8mkeck.d(30): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp9r8mkeck.d(64):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmp9r8mkeck.d(65): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9r8mkeck.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5d3o9x_d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp5d3o9x_d.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp5d3o9x_d.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xb2198554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] sorted = arr.dup;\n \
    \   sorted.sort;\n    foreach(i, e; sorted)\n    {\n        if(e > 0 && e < 10)\n\
    \        {\n            switch(e)\n            {\n                case 1:\n  \
    \                  result[i] = \"One\";\n                    break;\n        \
    \        case 2:\n                    result[i] = \"Two\";\n                 \
    \   break;\n                case 3:\n                    result[i] = \"Three\"\
    ;\n                    break;\n                case 4:\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case 5:\n         \
    \           result[i] = \"Five\";\n                    break;\n              \
    \  case 6:\n                    result[i] = \"Six\";\n                    break;\n\
    \                case 7:\n                    result[i] = \"Seven\";\n       \
    \             break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    result.reverse;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvopqvkfy.d(26): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpvopqvkfy.d(31): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpvopqvkfy.d(63):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvopqvkfy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(x => x > 0 && x < 10).sort.reverse;\n    return result.map!(x\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][x - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxx30k8v_.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx30k8v_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] sorted = arr.sort();\n\
    \    long[] reversed = sorted.reverse();\n    foreach(i, item; reversed)\n   \
    \ {\n        if(item == 1)\n        {\n            result[i] = \"One\";\n    \
    \    }\n        else if(item == 2)\n        {\n            result[i] = \"Two\"\
    ;\n        }\n        else if(item == 3)\n        {\n            result[i] = \"\
    Three\";\n        }\n        else if(item == 4)\n        {\n            result[i]\
    \ = \"Four\";\n        }\n        else if(item == 5)\n        {\n            result[i]\
    \ = \"Five\";\n        }\n        else if(item == 6)\n        {\n            result[i]\
    \ = \"Six\";\n        }\n        else if(item == 7)\n        {\n            result[i]\
    \ = \"Seven\";\n        }\n        else if(item == 8)\n        {\n           \
    \ result[i] = \"Eight\";\n        }\n        else if(item == 9)\n        {\n \
    \           result[i] = \"Nine\";\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbec4h2_.d(25): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmptbec4h2_.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptbec4h2_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted = arr.filter!(a => a > 0 && a < 10).sort;\n\
    \    foreach(i; sorted.reverse)\n    {\n        switch(i)\n        {\n       \
    \     case 1:\n                result ~= \"One\";\n                break;\n  \
    \          case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bmdo0wb.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmp1bmdo0wb.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bmdo0wb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return arr2.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqy4qlcm5.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqy4qlcm5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // your code here\n    string[] result = new string[0];\n    long[] temp =\
    \ new long[0];\n    foreach(elem; arr)\n    {\n        if(elem >= 1 && elem <=\
    \ 9)\n        {\n            temp ~= elem;\n        }\n    }\n    temp = sort(temp);\n\
    \    temp = temp.reverse;\n    foreach(elem; temp)\n    {\n        switch(elem)\n\
    \        {\n            case 1:\n                result ~= \"One\";\n        \
    \        break;\n            case 2:\n                result ~= \"Two\";\n   \
    \             break;\n            case 3:\n                result ~= \"Three\"\
    ;\n                break;\n            case 4:\n                result ~= \"Four\"\
    ;\n                break;\n            case 5:\n                result ~= \"Five\"\
    ;\n                break;\n            case 6:\n                result ~= \"Six\"\
    ;\n                break;\n            case 7:\n                result ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                result ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7vl15vp.d(34): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpr7vl15vp.d(35): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpr7vl15vp.d(38):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpr7vl15vp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    result = result.reverse;\n    foreach(elem; result)\n\
    \    {\n        switch(to!int(elem))\n        {\n            case 1:\n       \
    \         elem = \"One\";\n                break;\n            case 2:\n     \
    \           elem = \"Two\";\n                break;\n            case 3:\n   \
    \             elem = \"Three\";\n                break;\n            case 4:\n\
    \                elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpne569rl4.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpne569rl4.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpne569rl4.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpne569rl4.d(36):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpne569rl4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return arr.filter!(a => a > 0 && a < 10).sort.reverse.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4t5lfzml.d(25): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4t5lfzml.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem >= 1 && elem\
    \ <= 9)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    foreach(elem; result)\n    {\n \
    \       switch(elem)\n        {\n            case \"1\":\n                elem\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  elem = \"Two\";\n                break;\n            case \"3\":\n        \
    \        elem = \"Three\";\n                break;\n            case \"4\":\n\
    \                elem = \"Four\";\n                break;\n            case \"\
    5\":\n                elem = \"Five\";\n                break;\n            case\
    \ \"6\":\n                elem = \"Six\";\n                break;\n          \
    \  case \"7\":\n                elem = \"Seven\";\n                break;\n  \
    \          case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxh4878mw.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpxh4878mw.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpxh4878mw.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpxh4878mw.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxh4878mw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            switch(elem)\n            {\n           \
    \     case 1:\n                    result ~= \"One\";\n                    break;\n\
    \                case 2:\n                    result ~= \"Two\";\n           \
    \         break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    result.sort!((a, b) => a.length < b.length);\n    result.reverse;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbabgv9qv.d(29): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpbabgv9qv.d(61):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpbabgv9qv.d(62): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbabgv9qv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xyxeb2a.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp7xyxeb2a.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp7xyxeb2a.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp7xyxeb2a.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7xyxeb2a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwlxvm8nj.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlxvm8nj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto numbers = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ];\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => numbers[a - 1]).array;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_0l2pbw.d(27): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_0l2pbw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] sorted;\n    foreach(l; arr)\n    {\n        if(l\
    \ > 0 && l < 10)\n        {\n            sorted ~= l;\n        }\n    }\n    sort(sorted);\n\
    \    foreach(l; sorted)\n    {\n        switch(l)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvhlioda.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmplvhlioda.d(36): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvhlioda.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(i; arr)\n    {\n        if(i >\
    \ 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n  \
    \  }\n    sort(result);\n    reverse(result);\n    foreach(i; 0..result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpewz_rh7d.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpewz_rh7d.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpewz_rh7d.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpewz_rh7d.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpewz_rh7d.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpewz_rh7d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] sorted = arr.filter!(a\
    \ => a >= 1 && a <= 9).sort!((a, b) => a > b);\n    foreach(i, ref e; sorted)\n\
    \    {\n        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm73rj0a9.d(25): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpm73rj0a9.d(28): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpm73rj0a9.d(59):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpm73rj0a9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(elem; arr)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            result ~= to!string(elem);\n     \
    \   }\n    }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n\
    \    {\n        switch(to!long(elem))\n        {\n            case 1:\n      \
    \          elem = \"One\";\n                break;\n            case 2:\n    \
    \            elem = \"Two\";\n                break;\n            case 3:\n  \
    \              elem = \"Three\";\n                break;\n            case 4:\n\
    \                elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9j5e3ov.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpn9j5e3ov.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpn9j5e3ov.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpn9j5e3ov.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpn9j5e3ov.d(36):\
    \ Error: template instance `to!long` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn9j5e3ov.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    auto names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    return result.map!(a => names[a - 1]).array;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbzzlk7gx.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbzzlk7gx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] temp = new long[arr.length];\n\
    \    int j = 0;\n    foreach(long i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            temp[j] = i;\n            j++;\n        }\n    }\n   \
    \ temp = temp[0..j];\n    temp.sort();\n    temp.reverse();\n    foreach(long\
    \ i; temp)\n    {\n        switch(i)\n        {\n            case 1:\n       \
    \         result ~= \"One\";\n                break;\n            case 2:\n  \
    \              result ~= \"Two\";\n                break;\n            case 3:\n\
    \                result ~= \"Three\";\n                break;\n            case\
    \ 4:\n                result ~= \"Four\";\n                break;\n          \
    \  case 5:\n                result ~= \"Five\";\n                break;\n    \
    \        case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxq06grck.d(36): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpxq06grck.d(37): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpxq06grck.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxq06grck.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] nums = new int[arr.length];\n\
    \    int index = 0;\n    foreach(i; arr)\n    {\n        if(i >= 1 && i <= 9)\n\
    \        {\n            nums[index] = i;\n            index++;\n        }\n  \
    \  }\n    nums = nums[0..index];\n    sort(nums);\n    index = 0;\n    foreach(i;\
    \ nums)\n    {\n        switch(i)\n        {\n            case 1:\n          \
    \      result[index] = \"One\";\n                break;\n            case 2:\n\
    \                result[index] = \"Two\";\n                break;\n          \
    \  case 3:\n                result[index] = \"Three\";\n                break;\n\
    \            case 4:\n                result[index] = \"Four\";\n            \
    \    break;\n            case 5:\n                result[index] = \"Five\";\n\
    \                break;\n            case 6:\n                result[index] =\
    \ \"Six\";\n                break;\n            case 7:\n                result[index]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[index]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[index]\
    \ = \"Nine\";\n                break;\n        }\n        index++;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4wuj0ib7.d(31): Error: cannot implicitly convert expression `i`\
    \ of type `long` to `int`\\n/tmp/tmp4wuj0ib7.d(36): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmp4wuj0ib7.d(40): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4wuj0ib7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long[] sorted = new long[arr.length];\n\
    \    int j = 0;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n   \
    \     {\n            sorted[j] = i;\n            j++;\n        }\n    }\n    sorted\
    \ = sorted[0..j];\n    sort(sorted);\n    foreach(i; 0..sorted.length)\n    {\n\
    \        switch(sorted[i])\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1w7mlfr.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpc1w7mlfr.d(39): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\n/tmp/tmpc1w7mlfr.d(70): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1w7mlfr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ x; arr)\n    {\n        if(x > 0 && x < 10)\n        {\n            switch(x)\n\
    \            {\n                case 1:\n                    result[i] = \"One\"\
    ;\n                    break;\n                case 2:\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[i] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n            i++;\n        }\n    }\n    result\
    \ = result[0..i];\n    result.sort();\n    result.reverse();\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrmhrb_r.d(30): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpcrmhrb_r.d(64):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpcrmhrb_r.d(65): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrmhrb_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    int[] sorted = sort(arr);\n    foreach(int i; sorted)\n\
    \    {\n        if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n\
    \        }\n    }\n    result = result.reverse;\n    foreach(int i; result)\n\
    \    {\n        switch(i)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9tkfzsdu.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp9tkfzsdu.d(30): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmp9tkfzsdu.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp9tkfzsdu.d(34):\
    \ Error: cannot implicitly convert expression `__r75[__key76]` of type `string`\
    \ to `int`\\n/tmp/tmp9tkfzsdu.d(36): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9tkfzsdu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(elem)\n        {\n            case \"1\":\n             \
    \   elem = \"One\";\n                break;\n            case \"2\":\n       \
    \         elem = \"Two\";\n                break;\n            case \"3\":\n \
    \               elem = \"Three\";\n                break;\n            case \"\
    4\":\n                elem = \"Four\";\n                break;\n            case\
    \ \"5\":\n                elem = \"Five\";\n                break;\n         \
    \   case \"6\":\n                elem = \"Six\";\n                break;\n   \
    \         case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hcvbis9.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp3hcvbis9.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp3hcvbis9.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp3hcvbis9.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp3hcvbis9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxiiznk4b.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpxiiznk4b.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpxiiznk4b.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpxiiznk4b.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxiiznk4b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.map!(a => to!string(a)).reverse;\n\
    \    return result.map!(a => a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a ==\
    \ \"3\" ? \"Three\" : a == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"\
    6\" ? \"Six\" : a == \"7\" ? \"Seven\" : a == \"8\" ? \"Eight\" : a == \"9\" ?\
    \ \"Nine\" : a).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppt0xb69v.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppt0xb69v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    string[] names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    int[] result = [];\n    foreach(i; arr)\n    {\n        if(i in numbers)\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  reverse(result);\n    string[] finalResult = [];\n    foreach(i; result)\n\
    \    {\n        finalResult ~= names[i - 1];\n    }\n    return finalResult;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwamlfcyd.d(29): Error: incompatible types for `(i) in (numbers)`:\
    \ `long` and `int[]`\\n/tmp/tmpwamlfcyd.d(31): Error: cannot append type `long`\
    \ to type `int[]`\\n/tmp/tmpwamlfcyd.d(34): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\n/tmp/tmpwamlfcyd.d(35): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwamlfcyd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            result ~= to!string(elem);\n        }\n    }\n\
    \    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6k07ozlt.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6k07ozlt.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp6k07ozlt.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k07ozlt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n\
    \    }\n    sort(result);\n    reverse(result);\n    foreach(i; result)\n    {\n\
    \        switch(i)\n        {\n            case \"1\":\n                i = \"\
    One\";\n                break;\n            case \"2\":\n                i = \"\
    Two\";\n                break;\n            case \"3\":\n                i = \"\
    Three\";\n                break;\n            case \"4\":\n                i =\
    \ \"Four\";\n                break;\n            case \"5\":\n               \
    \ i = \"Five\";\n                break;\n            case \"6\":\n           \
    \     i = \"Six\";\n                break;\n            case \"7\":\n        \
    \        i = \"Seven\";\n                break;\n            case \"8\":\n   \
    \             i = \"Eight\";\n                break;\n            case \"9\":\n\
    \                i = \"Nine\";\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx11v7vpz.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpx11v7vpz.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpx11v7vpz.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpx11v7vpz.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx11v7vpz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] numbers = new int[arr.length];\n\
    \    int j = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > 0 && arr[i] < 10)\n        {\n            numbers[j] = arr[i];\n         \
    \   j++;\n        }\n    }\n    numbers = numbers[0..j];\n    sort(numbers);\n\
    \    numbers = numbers.reverse;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        switch (numbers[i])\n        {\n            case 1:\n        \
    \        result[i] = \"One\";\n                break;\n            case 2:\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ 3:\n                result[i] = \"Three\";\n                break;\n       \
    \     case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplihia_hk.d(31): Error: cannot implicitly convert expression `arr[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmplihia_hk.d(36): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmplihia_hk.d(37): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(int[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmplihia_hk.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplihia_hk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    foreach(elem; result)\n  \
    \  {\n        switch(to!int(elem))\n        {\n            case 1:\n         \
    \       elem = \"One\";\n                break;\n            case 2:\n       \
    \         elem = \"Two\";\n                break;\n            case 3:\n     \
    \           elem = \"Three\";\n                break;\n            case 4:\n \
    \               elem = \"Four\";\n                break;\n            case 5:\n\
    \                elem = \"Five\";\n                break;\n            case 6:\n\
    \                elem = \"Six\";\n                break;\n            case 7:\n\
    \                elem = \"Seven\";\n                break;\n            case 8:\n\
    \                elem = \"Eight\";\n                break;\n            case 9:\n\
    \                elem = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwatmtigt.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpwatmtigt.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpwatmtigt.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpwatmtigt.d(36):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwatmtigt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = new int[arr.length];\n\
    \    int j = 0;\n    foreach(int i; arr)\n    {\n        if(i >= 1 && i <= 9)\n\
    \        {\n            sorted[j] = i;\n            j++;\n        }\n    }\n \
    \   sort(sorted[0..j]);\n    for(int i = 0; i < j; i++)\n    {\n        switch(sorted[i])\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result[0..j].reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph5b9aaj3.d(27): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\n/tmp/tmph5b9aaj3.d(35): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmph5b9aaj3.d(38): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmph5b9aaj3.d(69): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph5b9aaj3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement by_length\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8naej20l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp8naej20l.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp8naej20l.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x9befb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpryay93f1.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpryay93f1.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpryay93f1.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpryay93f1.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpryay93f1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2gf9htac.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp2gf9htac.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp2gf9htac.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp2gf9htac.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2gf9htac.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] tmp = new int[arr.length];\n\
    \    int j = 0;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n   \
    \     {\n            tmp[j] = i;\n            j++;\n        }\n    }\n    tmp\
    \ = tmp[0..j];\n    tmp.sort;\n    tmp.reverse;\n    foreach(i; 0..tmp.length)\n\
    \    {\n        switch(tmp[i])\n        {\n            case 1:\n             \
    \   result[i] = \"One\";\n                break;\n            case 2:\n      \
    \          result[i] = \"Two\";\n                break;\n            case 3:\n\
    \                result[i] = \"Three\";\n                break;\n            case\
    \ 4:\n                result[i] = \"Four\";\n                break;\n        \
    \    case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparo8bazg.d(31): Error: cannot implicitly convert expression `i`\
    \ of type `long` to `int`\\n/tmp/tmparo8bazg.d(36): Error: no property `sort`\
    \ for type `int[]`\\n/tmp/tmparo8bazg.d(37): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmparo8bazg.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmparo8bazg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp673wwdq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmpp673wwdq.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmpp673wwdq.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xb6b4d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] numbers = new int[9];\n\
    \    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n        \
    \    numbers[i - 1]++;\n        }\n    }\n    int index = 0;\n    foreach(i; numbers)\n\
    \    {\n        foreach(j; 0 .. i)\n        {\n            result[index] = to!string(index\
    \ + 1);\n            index++;\n        }\n    }\n    return result.reversed;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp70wn05mx.d(38): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp70wn05mx.d(42): Error: no property\
    \ `reversed` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp70wn05mx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return [];\n    else\n    {\n        auto arr2\
    \ = arr.filter!(a => a >= 1 && a <= 9);\n        arr2.sort!((a, b) => a > b);\n\
    \        arr2.reverse;\n        return arr2.map!(a => to!string(a)).map!(a =>\
    \ a.replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\").replace(\"\
    4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"7\"\
    , \"Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n    }\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvemm_uz.d(28): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvemm_uz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp142ivg7i.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp142ivg7i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ num; arr)\n    {\n        if(num >= 1 && num <= 9)\n        {\n            result[i]\
    \ = num.to!string;\n            i++;\n        }\n    }\n    result = result[0..i];\n\
    \    sort(result);\n    reverse(result);\n    foreach(ref string num; result)\n\
    \    {\n        switch(num)\n        {\n            case \"1\":\n            \
    \    num = \"One\";\n                break;\n            case \"2\":\n       \
    \         num = \"Two\";\n                break;\n            case \"3\":\n  \
    \              num = \"Three\";\n                break;\n            case \"4\"\
    :\n                num = \"Four\";\n                break;\n            case \"\
    5\":\n                num = \"Five\";\n                break;\n            case\
    \ \"6\":\n                num = \"Six\";\n                break;\n           \
    \ case \"7\":\n                num = \"Seven\";\n                break;\n    \
    \        case \"8\":\n                num = \"Eight\";\n                break;\n\
    \            case \"9\":\n                num = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe992ypxj.d(30): Error: no property `to` for type `long`\\n/tmp/tmpe992ypxj.d(35):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpe992ypxj.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpe992ypxj.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe992ypxj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0;\n    foreach(long\
    \ num; arr)\n    {\n        if(num < 1 || num > 9)\n            continue;\n  \
    \      result[i] = num.to!string;\n        i++;\n    }\n    result = result[0..i];\n\
    \    sort!((a, b) => a.length < b.length)(result);\n    result = result.reverse;\n\
    \    foreach(ref string str; result)\n    {\n        switch(str)\n        {\n\
    \            case \"1\":\n                str = \"One\";\n                break;\n\
    \            case \"2\":\n                str = \"Two\";\n                break;\n\
    \            case \"3\":\n                str = \"Three\";\n                break;\n\
    \            case \"4\":\n                str = \"Four\";\n                break;\n\
    \            case \"5\":\n                str = \"Five\";\n                break;\n\
    \            case \"6\":\n                str = \"Six\";\n                break;\n\
    \            case \"7\":\n                str = \"Seven\";\n                break;\n\
    \            case \"8\":\n                str = \"Eight\";\n                break;\n\
    \            case \"9\":\n                str = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmku74g0_.d(30): Error: no property `to` for type `long`\\n/tmp/tmpmku74g0_.d(34):\
    \ Error: template instance `sort!((a, b) => a.length < b.length)` template `sort`\
    \ is not defined, did you mean sqrt?\\n/tmp/tmpmku74g0_.d(35): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpmku74g0_.d(38):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmku74g0_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(num; arr)\n    {\n        if(num\
    \ > 0 && num < 10)\n        {\n            result ~= to!string(num);\n       \
    \ }\n    }\n    sort(result);\n    reverse(result);\n    foreach(i, num; result)\n\
    \    {\n        switch(num)\n        {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2xwyofr.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpv2xwyofr.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpv2xwyofr.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpv2xwyofr.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpv2xwyofr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto sorted = arr.filter!(a => a > 0 && a < 10).sort!((a, b) => a > b).reverse;\n\
    \    return sorted.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8laowzhy.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8laowzhy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(a => a > 0 && a < 10).sort.map!(a => a.to!string).reverse;\n\
    \    return arr2.map!(a => a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a ==\
    \ \"3\" ? \"Three\" : a == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"\
    6\" ? \"Six\" : a == \"7\" ? \"Seven\" : a == \"8\" ? \"Eight\" : a == \"9\" ?\
    \ \"Nine\" : \"\").array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwnb03mje.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnb03mje.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i > 0 && i < 10)\n        {\n            switch(i)\n      \
    \      {\n                case 1:\n                    result[j] = \"One\";\n\
    \                    break;\n                case 2:\n                    result[j]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[j] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[j] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[j] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[j] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[j] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[j] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[j] = \"Nine\";\n        \
    \            break;\n            }\n            j++;\n        }\n    }\n    result\
    \ = result[0..j];\n    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqb4je03v.d(30): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpqb4je03v.d(64):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpqb4je03v.d(65): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqb4je03v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphx4bzhwp.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmphx4bzhwp.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmphx4bzhwp.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xa63b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    foreach(long i; arr)\n    {\n       \
    \ if(i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n      \
    \  }\n    }\n    sort(result);\n    reverse(result);\n    foreach(string i; result)\n\
    \    {\n        switch(i)\n        {\n            case \"1\":\n              \
    \  i = \"One\";\n                break;\n            case \"2\":\n           \
    \     i = \"Two\";\n                break;\n            case \"3\":\n        \
    \        i = \"Three\";\n                break;\n            case \"4\":\n   \
    \             i = \"Four\";\n                break;\n            case \"5\":\n\
    \                i = \"Five\";\n                break;\n            case \"6\"\
    :\n                i = \"Six\";\n                break;\n            case \"7\"\
    :\n                i = \"Seven\";\n                break;\n            case \"\
    8\":\n                i = \"Eight\";\n                break;\n            case\
    \ \"9\":\n                i = \"Nine\";\n                break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyp_wi9hp.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyp_wi9hp.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpyp_wi9hp.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpyp_wi9hp.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpyp_wi9hp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n    return result.map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprz2ffl3_.d(24): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprz2ffl3_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement\n    return null;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ju22jkx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp_ju22jkx.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp_ju22jkx.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xc9d04554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[];\n    foreach(i; arr)\n    {\n        if(i >\
    \ 0 && i < 10)\n        {\n            result ~= to!string(i);\n        }\n  \
    \  }\n    sort(result);\n    reverse(result);\n    foreach(i; 0..result.length)\n\
    \    {\n        switch(result[i])\n        {\n            case \"1\":\n      \
    \          result[i] = \"One\";\n                break;\n            case \"2\"\
    :\n                result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpun6w9w4f.d(24): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpun6w9w4f.d(29): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpun6w9w4f.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpun6w9w4f.d(33):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpun6w9w4f.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpun6w9w4f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.filter!(a => a > 0 && a < 10).sort;\n    string[] result\
    \ = new string[sorted.length];\n    foreach(i, e; sorted.reverse)\n    {\n   \
    \     switch(e)\n        {\n            case 1:\n                result[i] = \"\
    One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegx4vb9i.d(24): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpegx4vb9i.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpegx4vb9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int[] sorted = sort(arr);\n\
    \    int i = 0;\n    foreach(long num; sorted)\n    {\n        if(num > 0 && num\
    \ < 10)\n        {\n            switch(num)\n            {\n                case\
    \ 1:\n                    result[i] = \"One\";\n                    break;\n \
    \               case 2:\n                    result[i] = \"Two\";\n          \
    \          break;\n                case 3:\n                    result[i] = \"\
    Three\";\n                    break;\n                case 4:\n              \
    \      result[i] = \"Four\";\n                    break;\n                case\
    \ 5:\n                    result[i] = \"Five\";\n                    break;\n\
    \                case 6:\n                    result[i] = \"Six\";\n         \
    \           break;\n                case 7:\n                    result[i] = \"\
    Seven\";\n                    break;\n                case 8:\n              \
    \      result[i] = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    result[i] = \"Nine\";\n                    break;\n\
    \            }\n            i++;\n        }\n    }\n    return result.reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkve5avss.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpkve5avss.d(31): Error: `switch` statement without\
    \ a `default`; use `final switch` or add `default: assert(0);` or add `default:\
    \ break;`\\n/tmp/tmpkve5avss.d(64): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkve5avss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0..result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaj8uihz6.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpaj8uihz6.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpaj8uihz6.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpaj8uihz6.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaj8uihz6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 &&\
    \ elem < 10)\n        {\n            result ~= to!string(elem);\n        }\n \
    \   }\n    sort(result);\n    reverse(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3opv29e6.d(29): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp3opv29e6.d(32): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp3opv29e6.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3opv29e6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: implement this function\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp82fgevwm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp82fgevwm.__unittest_L27_C1()\
    \ [0x427fe3]\\n??:? void tmp82fgevwm.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0x35333554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
