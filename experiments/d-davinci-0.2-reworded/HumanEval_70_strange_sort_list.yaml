name: HumanEval_70_strange_sort_list
language: d
prompt: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
  \ order.\n    Strange sorting, is when you start with the minimum value,\n    then\
  \ maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
  \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
  \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n  \
  \  \n*/\nlong[] strange_sort_list(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
  \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
  \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
  \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
  \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
  \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
  \ == [111111L]);\n}\nvoid main(){}"
completions: ["{\n    if (lst.length == 0)\n        return lst;\n    long[] result\
    \ = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n  \
    \  int i = 0;\n    int j = sorted.length - 1;\n    bool is_min = true;\n    foreach\
    \ (el; lst)\n    {\n        if (is_min)\n        {\n            result[i] = sorted[0];\n\
    \            sorted = sorted[1..$];\n        }\n        else\n        {\n    \
    \        result[i] = sorted[$-1];\n            sorted = sorted[0..$-1];\n    \
    \    }\n        is_min = !is_min;\n        i++;\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int index = 0;\n    int min = 0;\n    int max = lst.length - 1;\n    bool\
    \ is_min = true;\n    while (index < lst.length)\n    {\n        if (is_min)\n\
    \        {\n            res[index] = lst[min];\n            min++;\n        }\n\
    \        else\n        {\n            res[index] = lst[max];\n            max--;\n\
    \        }\n        is_min = !is_min;\n        index++;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            res[i] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    int i = 0;\n    while (lst_copy.length >\
    \ 0)\n    {\n        res[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n\
    \        if (lst_copy.length == 0)\n            break;\n        res[i+1] = lst_copy[$-1];\n\
    \        lst_copy = lst_copy[0..$-1];\n        i += 2;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i],\
    \ lst[j]);\n        i++;\n        j--;\n    }\n    return res;\n}", "{\n    if\
    \ (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    int k = 0;\n    while (k < result.length)\n    {\n        if (i <=\
    \ j)\n        {\n            result[k] = sorted[i];\n            i++;\n      \
    \  }\n        if (i <= j)\n        {\n            result[k] = sorted[j];\n   \
    \         j--;\n        }\n        k++;\n    }\n    return result;\n}", "{\n \
    \   if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int[] idx = new int[lst.length];\n    for (int i = 0; i < lst.length; i++)\n\
    \        idx[i] = i;\n    sort(idx, (a, b) => lst[a] < lst[b]);\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[idx[i++]];\n        if (i <= j)\n            res[k++] = lst[idx[j--]];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0) return lst;\n    long[]\
    \ res = new long[lst.length];\n    long[] lst_sorted = lst.dup;\n    lst_sorted.sort;\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j) {\n        res[k++] = lst_sorted[i++];\n        if (i <= j) res[k++] = lst_sorted[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] result = new long[lst.length];\n    long[] sorted = lst.dup;\n   \
    \ sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    bool is_min\
    \ = true;\n    foreach (el; lst)\n    {\n        if (is_min)\n        {\n    \
    \        result[i] = sorted[i];\n            i++;\n        }\n        else\n \
    \       {\n            result[j] = sorted[j];\n            j--;\n        }\n \
    \       is_min = !is_min;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool\
    \ asc = true;\n    while (i <= j)\n    {\n        if (asc)\n        {\n      \
    \      result[i] = lst[i];\n            i++;\n        }\n        else\n      \
    \  {\n            result[j] = lst[i];\n            j--;\n        }\n        asc\
    \ = !asc;\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n     \
    \   return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy =\
    \ lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length -\
    \ 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    long[] tmp = lst.dup;\n    sort(tmp);\n    int\
    \ i = 0;\n    int j = tmp.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = tmp[i++];\n        if (i <= j)\n            res[k++]\
    \ = tmp[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n        if (flag)\n\
    \        {\n            res[i] = lst_copy[i];\n            i++;\n        }\n \
    \       else\n        {\n            res[i] = lst_copy[j];\n            j--;\n\
    \        }\n        flag = !flag;\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j) {\n        result[k++] = lst[i++];\n     \
    \   if (i <= j) {\n            result[k++] = lst[j--];\n        }\n    }\n   \
    \ return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n\
    \        if (i <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = min(lst[i], lst[j]);\n        if (lst[i] < lst[j])\n            i++;\n\
    \        else\n            j--;\n        if (i <= j)\n            res[k++] = max(lst[i],\
    \ lst[j]);\n        if (lst[i] > lst[j])\n            i++;\n        else\n   \
    \         j--;\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    bool is_min\
    \ = true;\n    while (lst.length != 0)\n    {\n        if (is_min)\n        {\n\
    \            res[i] = lst[0];\n            lst = lst[1..$];\n        }\n     \
    \   else\n        {\n            res[i] = lst[$-1];\n            lst = lst[0..$-1];\n\
    \        }\n        i++;\n        is_min = !is_min;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int\
    \ j = lst_copy.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n      \
    \  res[k++] = lst_copy[i++];\n        if (i <= j)\n            res[k++] = lst_copy[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++]\
    \ = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n    }\n\
    \    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n \
    \   long[] result = new long[lst.length];\n    long[] lst_copy = lst.dup;\n  \
    \  lst_copy.sort;\n    int i = 0;\n    int j = lst_copy.length - 1;\n    while\
    \ (i <= j)\n    {\n        result[i] = lst_copy[i];\n        if (i != j)\n   \
    \         result[j] = lst_copy[j];\n        i++;\n        j--;\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n        if\
    \ (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int[] idx = new int[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n \
    \       {\n            res[k] = lst[i];\n            idx[k] = i;\n           \
    \ i++;\n        }\n        else\n        {\n            res[k] = lst[j];\n   \
    \         idx[k] = j;\n            j--;\n        }\n        k++;\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n\
    \    int i = 0;\n    int j = lst_copy.length - 1;\n    int k = 0;\n    while (i\
    \ <= j)\n    {\n        res[k++] = lst_copy[i++];\n        if (i <= j)\n     \
    \       res[k++] = lst_copy[j--];\n    }\n    return res;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    long[]\
    \ lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool flag = true;\n    foreach (long x; lst_copy)\n    {\n       \
    \ if (flag)\n        {\n            res[i] = x;\n            i++;\n        }\n\
    \        else\n        {\n            res[j] = x;\n            j--;\n        }\n\
    \        flag = !flag;\n    }\n    return res;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] res = new long[lst.length];\n    bool asc\
    \ = true;\n    int i = 0;\n    while (lst.length > 0)\n    {\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        foreach (long x; lst)\n     \
    \   {\n            if (x < min)\n                min = x;\n            if (x >\
    \ max)\n                max = x;\n        }\n        if (asc)\n        {\n   \
    \         res[i] = min;\n            lst = lst.remove(min);\n        }\n     \
    \   else\n        {\n            res[i] = max;\n            lst = lst.remove(max);\n\
    \        }\n        i++;\n        asc = !asc;\n    }\n    return res;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    lst.sort();\n    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n\
    \    while (i <= j)\n    {\n        result[k++] = lst[i++];\n        if (i <=\
    \ j)\n            result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool flag = true;\n    while\
    \ (i < lst.length)\n    {\n        if (flag)\n        {\n            result[i]\
    \ = lst[j];\n            j--;\n        }\n        else\n        {\n          \
    \  result[i] = lst[j];\n            j++;\n        }\n        flag = !flag;\n \
    \       i++;\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n  \
    \      return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n \
    \   int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n     \
    \   res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n       \
    \ if (i <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] result = new long[lst.length];\n    bool is_min =\
    \ true;\n    long min_val = 0;\n    long max_val = 0;\n    int min_index = 0;\n\
    \    int max_index = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n   \
    \     if (is_min)\n        {\n            min_val = lst[0];\n            min_index\
    \ = 0;\n            for (int j = 1; j < lst.length; j++)\n            {\n    \
    \            if (lst[j] < min_val)\n                {\n                    min_val\
    \ = lst[j];\n                    min_index = j;\n                }\n         \
    \   }\n            result[i] = min_val;\n            lst[min_index] = long.max;\n\
    \            is_min = false;\n        }\n        else\n        {\n           \
    \ max_val = lst[0];\n            max_index = 0;\n            for (int j = 1; j\
    \ < lst.length; j++)\n            {\n                if (lst[j] > max_val)\n \
    \               {\n                    max_val = lst[j];\n                   \
    \ max_index = j;\n                }\n            }\n            result[i] = max_val;\n\
    \            lst[max_index] = long.min;\n            is_min = true;\n        }\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0) return lst;\n   \
    \ long[] res = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    int i = 0;\n    int j = sorted.length - 1;\n    int k = 0;\n    while (i\
    \ <= j)\n    {\n        res[k++] = sorted[i++];\n        if (i <= j) res[k++]\
    \ = sorted[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool inc = true;\n    while (i <= j)\n    {\n        if (inc)\n  \
    \      {\n            res[i] = lst[i];\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = lst[i];\n            j--;\n        }\n      \
    \  inc = !inc;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n   \
    \     return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            result[k] = min(lst[i], lst[j]);\n\
    \            if (lst[i] < lst[j])\n                i++;\n            else\n  \
    \              j--;\n        }\n        else\n        {\n            result[k]\
    \ = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n\
    \            else\n                j--;\n        }\n        k++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    if (lst.length\
    \ == 0)\n        return result;\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n\
    \        if (i <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] sorted = new\
    \ long[lst.length];\n    long[] lst_copy = lst.dup;\n    int i = 0;\n    while\
    \ (lst_copy.length > 0)\n    {\n        sorted[i] = lst_copy[0];\n        lst_copy\
    \ = lst_copy[1..$];\n        if (lst_copy.length > 0)\n        {\n           \
    \ sorted[i+1] = lst_copy[$-1];\n            lst_copy = lst_copy[0..$-2];\n   \
    \     }\n        i += 2;\n    }\n    return sorted;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <=\
    \ j)\n    {\n        if (is_min)\n        {\n            res[i] = lst[i];\n  \
    \          i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool flag = true;\n    while\
    \ (i < j)\n    {\n        if (flag)\n        {\n            res[i] = min(lst);\n\
    \            lst.remove(res[i]);\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = max(lst);\n            lst.remove(res[j]);\n\
    \            j--;\n        }\n        flag = !flag;\n    }\n    res[i] = lst[0];\n\
    \    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ res = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n    \
    \    if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool asc = true;\n    while\
    \ (i < lst.length)\n    {\n        if (asc)\n        {\n            res[i] = lst[j];\n\
    \            j--;\n        }\n        else\n        {\n            res[i] = lst[j];\n\
    \            j++;\n        }\n        i++;\n        asc = !asc;\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool\
    \ is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n        {\n\
    \            long min = lst[0];\n            int min_index = 0;\n            for\
    \ (int k = 0; k < lst.length; k++)\n            {\n                if (lst[k]\
    \ < min)\n                {\n                    min = lst[k];\n             \
    \       min_index = k;\n                }\n            }\n            result[i]\
    \ = min;\n            lst[min_index] = long.max;\n            i++;\n        }\n\
    \        else\n        {\n            long max = lst[0];\n            int max_index\
    \ = 0;\n            for (int k = 0; k < lst.length; k++)\n            {\n    \
    \            if (lst[k] > max)\n                {\n                    max = lst[k];\n\
    \                    max_index = k;\n                }\n            }\n      \
    \      result[j] = max;\n            lst[max_index] = long.min;\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            long min = lst[0];\n\
    \            int min_i = 0;\n            for (int k = 1; k < lst.length; k++)\n\
    \            {\n                if (lst[k] < min)\n                {\n       \
    \             min = lst[k];\n                    min_i = k;\n                }\n\
    \            }\n            res[i] = min;\n            lst[min_i] = long.max;\n\
    \            i++;\n        }\n        else\n        {\n            long max =\
    \ lst[0];\n            int max_i = 0;\n            for (int k = 1; k < lst.length;\
    \ k++)\n            {\n                if (lst[k] > max)\n                {\n\
    \                    max = lst[k];\n                    max_i = k;\n         \
    \       }\n            }\n            res[j] = max;\n            lst[max_i] =\
    \ long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n \
    \   return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n\
    \        if (i <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst2 = lst.dup;\n    int i = 0;\n    while (lst2.length > 0)\n   \
    \ {\n        res[i] = lst2[0];\n        lst2 = lst2[1..$];\n        if (lst2.length\
    \ == 0)\n            break;\n        res[i+1] = lst2[$-1];\n        lst2 = lst2[0..$-1];\n\
    \        i += 2;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n \
    \       return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n    }\n\
    \    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ res = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   bool asc = true;\n    while (i <= j)\n    {\n        if (asc)\n        {\n\
    \            res[i] = lst[i];\n            i++;\n        }\n        else\n   \
    \     {\n            res[j] = lst[i];\n            j--;\n        }\n        asc\
    \ = !asc;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy = lst.dup;\n\
    \    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length - 1;\n    while\
    \ (i <= j)\n    {\n        res[i] = lst_copy[i];\n        if (i != j)\n      \
    \      res[j] = lst_copy[j];\n        i++;\n        j--;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool is_min\
    \ = true;\n    while (i <= j)\n    {\n        if (is_min)\n        {\n       \
    \     result[i] = min(lst);\n            lst = remove(lst, result[i]);\n     \
    \       i++;\n        }\n        else\n        {\n            result[j] = max(lst);\n\
    \            lst = remove(lst, result[j]);\n            j--;\n        }\n    \
    \    is_min = !is_min;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <=\
    \ j)\n    {\n        if (is_min)\n        {\n            long min = lst[0];\n\
    \            int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n\
    \            {\n                if (lst[k] < min)\n                {\n       \
    \             min = lst[k];\n                    min_index = k;\n            \
    \    }\n            }\n            res[i] = min;\n            lst[min_index] =\
    \ long.max;\n            i++;\n        }\n        else\n        {\n          \
    \  long max = lst[0];\n            int max_index = 0;\n            for (int k\
    \ = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            res[j] = max;\n        \
    \    lst[max_index] = long.min;\n            j--;\n        }\n        is_min =\
    \ !is_min;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n       \
    \ return lst;\n    long[] result = new long[lst.length];\n    long[] sorted =\
    \ lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (i == j)\n        {\n            result[k] = lst[i];\n            break;\n\
    \        }\n        result[k] = lst[i];\n        k++;\n        result[k] = lst[j];\n\
    \        k++;\n        i++;\n        j--;\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool asc = true;\n    while\
    \ (i <= j)\n    {\n        if (asc)\n        {\n            res[i] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n\
    \            j--;\n        }\n        asc = !asc;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n\
    \    int i = 0;\n    int j = lst_copy.length - 1;\n    int k = 0;\n    while (i\
    \ <= j)\n    {\n        res[k++] = lst_copy[i++];\n        if (i <= j)\n     \
    \       res[k++] = lst_copy[j--];\n    }\n    return res;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j) {\n        res[k++] = lst[i++];\n        if (i <= j) {\n            res[k++]\
    \ = lst[j--];\n        }\n    }\n    return res;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int i =\
    \ 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n\
    \    {\n        if (is_min)\n        {\n            res[i] = min(lst);\n     \
    \       lst = remove(lst, res[i]);\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = max(lst);\n            lst = remove(lst, res[j]);\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool flag\
    \ = true;\n    while (i <= j)\n    {\n        if (flag)\n        {\n         \
    \   result[i] = lst[i];\n            i++;\n        }\n        else\n        {\n\
    \            result[j] = lst[i];\n            j--;\n        }\n        flag =\
    \ !flag;\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0) return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    bool is_min = true;\n    while (lst.length > 0)\n    {\n\
    \        long min = lst[0];\n        long max = lst[0];\n        int min_index\
    \ = 0;\n        int max_index = 0;\n        for (int j = 0; j < lst.length; j++)\n\
    \        {\n            if (lst[j] < min)\n            {\n                min\
    \ = lst[j];\n                min_index = j;\n            }\n            if (lst[j]\
    \ > max)\n            {\n                max = lst[j];\n                max_index\
    \ = j;\n            }\n        }\n        if (is_min)\n        {\n           \
    \ res[i] = min;\n            lst = lst[0..min_index] ~ lst[min_index+1..$];\n\
    \        }\n        else\n        {\n            res[i] = max;\n            lst\
    \ = lst[0..max_index] ~ lst[max_index+1..$];\n        }\n        is_min = !is_min;\n\
    \        i++;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = min(lst[i++], lst[j--]);\n        if (i <= j)\n           \
    \ result[k++] = max(lst[i++], lst[j--]);\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    \n    long[] result = new\
    \ long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n    \n  \
    \  int i = 0;\n    int j = sorted.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = sorted[i++];\n        if (i <= j)\n       \
    \     result[k++] = sorted[j--];\n    }\n    \n    return result;\n}", "{\n  \
    \  long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n \
    \       {\n            res[k] = min(lst[i], lst[j]);\n            if (lst[i] <\
    \ lst[j])\n                i++;\n            else\n                j--;\n    \
    \    }\n        else\n        {\n            res[k] = max(lst[i], lst[j]);\n \
    \           if (lst[i] > lst[j])\n                i++;\n            else\n   \
    \             j--;\n        }\n        k++;\n    }\n    return res;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    long[] copy = lst.dup;\n    sort(copy);\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = copy[i++];\n\
    \        if (i <= j)\n            result[k++] = copy[j--];\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] sorted\
    \ = new long[lst.length];\n    long[] lst_copy = new long[lst.length];\n    lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        sorted[k] = lst_copy[i];\n\
    \        k++;\n        if (i != j)\n        {\n            sorted[k] = lst_copy[j];\n\
    \            k++;\n        }\n        i++;\n        j--;\n    }\n    return sorted;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int\
    \ j = lst_copy.length - 1;\n    bool is_min = true;\n    foreach (elem; lst_copy)\n\
    \    {\n        if (is_min)\n        {\n            res[i] = elem;\n         \
    \   i++;\n        }\n        else\n        {\n            res[j] = elem;\n   \
    \         j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int\
    \ j = lst_copy.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n      \
    \  res[k++] = lst_copy[i++];\n        if (i <= j)\n            res[k++] = lst_copy[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = min(lst[i],\
    \ lst[j]);\n        if (lst[i] < lst[j])\n            i++;\n        else\n   \
    \         j--;\n        if (i <= j)\n            res[k++] = max(lst[i], lst[j]);\n\
    \        if (lst[i] > lst[j])\n            i++;\n        else\n            j--;\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int\
    \ j = lst_copy.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n      \
    \  res[k++] = lst_copy[i++];\n        if (i <= j)\n            res[k++] = lst_copy[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] result = new long[lst.length];\n    long[] sorted = lst.dup;\n   \
    \ sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    int k = 0;\n\
    \    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n        if (i\
    \ <= j)\n            result[k++] = sorted[j--];\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    long[] res\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n        if\
    \ (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool asc = true;\n    while\
    \ (i <= j)\n    {\n        if (asc)\n        {\n            res[i] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            res[i] = lst[j];\n\
    \            j--;\n        }\n        asc = !asc;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ if (k % 2 == 0)\n        {\n            res[k] = min(lst[i], lst[j]);\n    \
    \        if (lst[i] < lst[j])\n                i++;\n            else\n      \
    \          j--;\n        }\n        else\n        {\n            res[k] = max(lst[i],\
    \ lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        k++;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i],\
    \ lst[j]);\n        i++;\n        j--;\n    }\n    return res;\n}", "{\n    if\
    \ (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    while (lst.length\
    \ > 0)\n    {\n        res[i] = lst[0];\n        lst = lst[1..$];\n        if\
    \ (lst.length == 0) break;\n        res[i+1] = lst[$-1];\n        lst = lst[0..$-1];\n\
    \        i += 2;\n    }\n    return res;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n\
    \        if (i <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            res[i] = min(lst);\n\
    \            lst.remove(res[i]);\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = max(lst);\n            lst.remove(res[j]);\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int k =\
    \ 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n        if (i\
    \ <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            result[k] =\
    \ lst[j];\n            j--;\n        }\n        k++;\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0) return lst;\n    long[]\
    \ res = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n    \
    \    if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    bool is_min = true;\n    while (i <= j)\n    {\n        if\
    \ (is_min)\n        {\n            result[k] = min(lst[i], lst[j]);\n        \
    \    if (lst[i] < lst[j])\n                i++;\n            else\n          \
    \      j--;\n        }\n        else\n        {\n            result[k] = max(lst[i],\
    \ lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        is_min = !is_min;\n       \
    \ k++;\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] result = new long[lst.length];\n    long[] sorted = lst.dup;\n\
    \    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    int k =\
    \ 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n        if\
    \ (i <= j) result[k++] = sorted[j--];\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int k =\
    \ 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n        if (i\
    \ <= j)\n            result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            long min = lst[0];\n\
    \            int min_index = 0;\n            for (int k = 0; k < lst.length; k++)\n\
    \            {\n                if (lst[k] < min)\n                {\n       \
    \             min = lst[k];\n                    min_index = k;\n            \
    \    }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 0; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n  \
    \      return lst;\n    long[] res = new long[lst.length];\n    int min = 0;\n\
    \    int max = lst.length - 1;\n    int i = 0;\n    while (min <= max)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            res[i] = lst[min];\n        \
    \    min++;\n        }\n        else\n        {\n            res[i] = lst[max];\n\
    \            max--;\n        }\n        i++;\n    }\n    return res;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] result = new long[lst.length];\n    long[] temp =\
    \ new long[lst.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int\
    \ n = lst.length;\n    int m = n;\n    while (n > 0)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            temp[j] = lst[k];\n            j++;\n        }\n\
    \        else\n        {\n            temp[m - 1] = lst[k];\n            m--;\n\
    \        }\n        k++;\n        i++;\n        n--;\n    }\n    i = 0;\n    while\
    \ (i < lst.length)\n    {\n        result[i] = temp[i];\n        i++;\n    }\n\
    \    return result;\n}", "{\n    if (lst.length == 0) return lst;\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n   \
    \     {\n            long min = lst[0];\n            int min_index = 0;\n    \
    \        for (int k = 1; k < lst.length; k++)\n            {\n               \
    \ if (lst[k] < min)\n                {\n                    min = lst[k];\n  \
    \                  min_index = k;\n                }\n            }\n        \
    \    result[i] = min;\n            lst[min_index] = long.max;\n            i++;\n\
    \        }\n        else\n        {\n            long max = lst[0];\n        \
    \    int max_index = 0;\n            for (int k = 1; k < lst.length; k++)\n  \
    \          {\n                if (lst[k] > max)\n                {\n         \
    \           max = lst[k];\n                    max_index = k;\n              \
    \  }\n            }\n            result[j] = max;\n            lst[max_index]\
    \ = long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n\
    \    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n \
    \   long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n\
    \        {\n            long min = lst[0];\n            int min_index = 0;\n \
    \           for (int k = 1; k < lst.length; k++)\n            {\n            \
    \    if (lst[k] < min)\n                {\n                    min = lst[k];\n\
    \                    min_index = k;\n                }\n            }\n      \
    \      res[i] = min;\n            lst[min_index] = long.max;\n            i++;\n\
    \        }\n        else\n        {\n            long max = lst[0];\n        \
    \    int max_index = 0;\n            for (int k = 1; k < lst.length; k++)\n  \
    \          {\n                if (lst[k] > max)\n                {\n         \
    \           max = lst[k];\n                    max_index = k;\n              \
    \  }\n            }\n            res[j] = max;\n            lst[max_index] = long.min;\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n\
    \        if (flag)\n        {\n            res[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            res[j] = lst[i];\n          \
    \  j--;\n        }\n        flag = !flag;\n    }\n    return res;\n}", "{\n  \
    \  long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n \
    \       {\n            res[k] = lst[i];\n            i++;\n        }\n       \
    \ else\n        {\n            res[k] = lst[j];\n            j--;\n        }\n\
    \        k++;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool is_min = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n \
    \       {\n            result[i] = sorted[i];\n            i++;\n        }\n \
    \       else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int\
    \ j = lst_copy.length - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n\
    \        if (flag)\n        {\n            res[i] = lst_copy[i];\n           \
    \ i++;\n        }\n        else\n        {\n            res[i] = lst_copy[j];\n\
    \            j--;\n        }\n        flag = !flag;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] ret = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n    long max =\
    \ lst_copy[$ - 1];\n    int i = 0;\n    while (i < lst.length) \n    {\n     \
    \   ret[i] = min;\n        ret[i + 1] = max;\n        i += 2;\n    }\n    return\
    \ ret;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (k < lst.length)\n    {\n        if (k % 2 == 0)\n       \
    \ {\n            res[k] = lst[i];\n            i++;\n        }\n        else\n\
    \        {\n            res[k] = lst[j];\n            j--;\n        }\n      \
    \  k++;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n\
    \        {\n            res[i] = lst[i];\n            i++;\n        }\n      \
    \  else\n        {\n            res[j] = lst[i];\n            j--;\n        }\n\
    \        is_min = !is_min;\n    }\n    return res;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    long[]\
    \ tmp = lst.dup;\n    int i = 0;\n    while (tmp.length > 0)\n    {\n        res[i]\
    \ = tmp[0];\n        tmp = tmp[1..$];\n        if (tmp.length > 0)\n        {\n\
    \            res[i + 1] = tmp[$ - 1];\n            tmp = tmp[0..$ - 2];\n    \
    \    }\n        i += 2;\n    }\n    return res;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int i =\
    \ 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n\
    \        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n\
    \    int i = 0;\n    while (lst_copy.length > 0)\n    {\n        res[i] = lst_copy[0];\n\
    \        lst_copy = lst_copy[1..$];\n        if (lst_copy.length == 0)\n     \
    \       break;\n        res[i+1] = lst_copy[$-1];\n        lst_copy = lst_copy[0..$-1];\n\
    \        i += 2;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n \
    \       return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            res[k] = min(lst[i],\
    \ lst[j]);\n            if (lst[i] < lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        else\n        {\n         \
    \   res[k] = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n        \
    \        i++;\n            else\n                j--;\n        }\n        k++;\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] result = new long[lst.length];\n    long[] lst_copy = lst.dup;\n \
    \   sort(lst_copy);\n    long min = lst_copy[0];\n    long max = lst_copy[$ -\
    \ 1];\n    int i = 0;\n    int j = 0;\n    while (i < lst.length)\n    {\n   \
    \     result[i] = min;\n        i += 2;\n        if (i < lst.length)\n       \
    \ {\n            result[i] = max;\n            i += 2;\n        }\n        j++;\n\
    \        min = lst_copy[j];\n        max = lst_copy[$ - 1 - j];\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0) return lst;\n    long[] res = new\
    \ long[lst.length];\n    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n   \
    \ int i = 0;\n    int j = lst_copy.length - 1;\n    foreach (idx, _; lst) {\n\
    \        if (idx % 2 == 0) {\n            res[idx] = lst_copy[i];\n          \
    \  i++;\n        } else {\n            res[idx] = lst_copy[j];\n            j--;\n\
    \        }\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n       \
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy = lst.dup;\n\
    \    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n     \
    \   if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i],\
    \ lst[j]);\n        i++;\n        j--;\n    }\n    return res;\n}", "{\n    if\
    \ (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (k < lst.length)\n\
    \    {\n        if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            result[k] =\
    \ lst[j];\n            j--;\n        }\n        k++;\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool asc = true;\n    while\
    \ (i < lst.length)\n    {\n        if (asc)\n        {\n            res[i] = lst[j];\n\
    \            j--;\n        }\n        else\n        {\n            res[i] = lst[j];\n\
    \            j++;\n        }\n        i++;\n        asc = !asc;\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    bool is_min = true;\n    while (k < lst.length)\n    {\n\
    \        if (is_min)\n        {\n            result[k] = lst[i];\n           \
    \ i++;\n        }\n        else\n        {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        is_min = !is_min;\n        k++;\n    }\n\
    \    return result;\n}", "{\n    int len = lst.length;\n    if (len == 0)\n  \
    \      return lst;\n    long[] res = new long[len];\n    int i = 0;\n    int j\
    \ = len - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int[] idx = new int[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n        idx[i] = i;\n    sort(idx,\
    \ (a, b) => lst[a] < lst[b]);\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[idx[i++]];\n\
    \        if (i <= j)\n            res[k++] = lst[idx[j--]];\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n\
    \    long min = lst_copy[0];\n    long max = lst_copy[$ - 1];\n    int i = 0;\n\
    \    int j = 0;\n    while (i < lst.length)\n    {\n        res[i] = min;\n  \
    \      i += 2;\n    }\n    while (j < lst.length)\n    {\n        res[j] = max;\n\
    \        j += 2;\n    }\n    return res;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k] = sorted[i];\n\
    \        k++;\n        if (i != j)\n        {\n            result[k] = sorted[j];\n\
    \            k++;\n        }\n        i++;\n        j--;\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool is_min\
    \ = true;\n    while (i <= j)\n    {\n        if (is_min)\n        {\n       \
    \     long min = lst[0];\n            int min_index = 0;\n            for (int\
    \ k = 1; k < lst.length; k++)\n            {\n                if (lst[k] < min)\n\
    \                {\n                    min = lst[k];\n                    min_index\
    \ = k;\n                }\n            }\n            result[i] = min;\n     \
    \       lst[min_index] = long.max;\n            i++;\n        }\n        else\n\
    \        {\n            long max = lst[0];\n            int max_index = 0;\n \
    \           for (int k = 1; k < lst.length; k++)\n            {\n            \
    \    if (lst[k] > max)\n                {\n                    max = lst[k];\n\
    \                    max_index = k;\n                }\n            }\n      \
    \      result[j] = max;\n            lst[max_index] = long.min;\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n\
    \    long max = lst_copy[$ - 1];\n    int i = 0;\n    int j = $ - 1;\n    int\
    \ k = 0;\n    while (k < lst.length)\n    {\n        if (k % 2 == 0)\n       \
    \ {\n            res[k] = lst_copy[i];\n            i++;\n        }\n        else\n\
    \        {\n            res[k] = lst_copy[j];\n            j--;\n        }\n \
    \       k++;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n     \
    \   return lst;\n    long[] res = new long[lst.length];\n    long[] tmp = lst.dup;\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = tmp[i++];\n        if (i <= j)\n            res[k++]\
    \ = tmp[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac\
    \ = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n \
    \   int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al\
    \ = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n \
    \   int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au\
    \ = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n \
    \   int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd\
    \ = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n \
    \   int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm\
    \ = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n \
    \   int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv\
    \ = 0;\n    int bw = 0;\n    int bx = 0;\n    int by =", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    long[]\
    \ lst_copy = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result\
    \ = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n  \
    \  int i = 0;\n    int j = sorted.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = sorted[i++];\n        if (i <= j)\n       \
    \     result[k++] = sorted[j--];\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0) return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    bool is_min = true;\n    int i = 0;\n    while\
    \ (sorted.length > 0)\n    {\n        if (is_min)\n        {\n            result[i]\
    \ = sorted[0];\n            sorted = sorted[1..$];\n        }\n        else\n\
    \        {\n            result[i] = sorted[$-1];\n            sorted = sorted[0..$-1];\n\
    \        }\n        is_min = !is_min;\n        i++;\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    bool is_min\
    \ = true;\n    while (i <= j)\n    {\n        if (is_min)\n        {\n       \
    \     long min = lst[0];\n            int min_index = 0;\n            for (int\
    \ k = 1; k < lst.length; k++)\n            {\n                if (lst[k] < min)\n\
    \                {\n                    min = lst[k];\n                    min_index\
    \ = k;\n                }\n            }\n            result[i] = min;\n     \
    \       lst[min_index] = long.max;\n            i++;\n        }\n        else\n\
    \        {\n            long max = lst[0];\n            int max_index = 0;\n \
    \           for (int k = 1; k < lst.length; k++)\n            {\n            \
    \    if (lst[k] > max)\n                {\n                    max = lst[k];\n\
    \                    max_index = k;\n                }\n            }\n      \
    \      result[j] = max;\n            lst[max_index] = long.min;\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    bool is_min = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n\
    \        {\n            result[i] = sorted[i];\n            i++;\n        }\n\
    \        else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n \
    \       {\n            result[k] = lst[i];\n            i++;\n        }\n    \
    \    else\n        {\n            result[k] = lst[j];\n            j--;\n    \
    \    }\n        k++;\n    }\n    return result;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        if (k % 2 == 0)\n        {\n            long min = lst[i];\n   \
    \         int min_index = i;\n            for (int m = i; m <= j; m++)\n     \
    \       {\n                if (lst[m] < min)\n                {\n            \
    \        min = lst[m];\n                    min_index = m;\n                }\n\
    \            }\n            result[k] = min;\n            lst[min_index] = lst[i];\n\
    \            lst[i] = min;\n            i++;\n        }\n        else\n      \
    \  {\n            long max = lst[j];\n            int max_index = j;\n       \
    \     for (int m = j; m >= i; m--)\n            {\n                if (lst[m]\
    \ > max)\n                {\n                    max = lst[m];\n             \
    \       max_index = m;\n                }\n            }\n            result[k]\
    \ = max;\n            lst[max_index] = lst[j];\n            lst[j] = max;\n  \
    \          j--;\n        }\n        k++;\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] result = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    bool asc = true;\n    foreach (e; lst)\n    {\n        if (asc)\n\
    \        {\n            result[i] = sorted[i];\n            i++;\n        }\n\
    \        else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        asc = !asc;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] result = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    bool flag = true;\n    foreach (e; lst)\n    {\n        if (flag)\n\
    \        {\n            result[i] = sorted[i];\n            i++;\n        }\n\
    \        else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        flag = !flag;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n        if (flag)\n\
    \        {\n            res[i] = lst[i];\n            i++;\n        }\n      \
    \  else\n        {\n            res[j] = lst[i];\n            j--;\n        }\n\
    \        flag = !flag;\n    }\n    return res;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] result = new long[lst.length];\n    int\
    \ index = 0;\n    bool is_min = true;\n    while (lst.length > 0)\n    {\n   \
    \     long min = lst[0];\n        long max = lst[0];\n        int min_index =\
    \ 0;\n        int max_index = 0;\n        for (int i = 0; i < lst.length; i++)\n\
    \        {\n            if (lst[i] < min)\n            {\n                min\
    \ = lst[i];\n                min_index = i;\n            }\n            if (lst[i]\
    \ > max)\n            {\n                max = lst[i];\n                max_index\
    \ = i;\n            }\n        }\n        if (is_min)\n        {\n           \
    \ result[index] = min;\n            lst = lst[0..min_index] ~ lst[min_index +\
    \ 1..$];\n        }\n        else\n        {\n            result[index] = max;\n\
    \            lst = lst[0..max_index] ~ lst[max_index + 1..$];\n        }\n   \
    \     is_min = !is_min;\n        index++;\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    int i = 0;\n    while (lst_copy.length >\
    \ 0)\n    {\n        long min = lst_copy[0];\n        long max = lst_copy[0];\n\
    \        int min_index = 0;\n        int max_index = 0;\n        for (int j =\
    \ 0; j < lst_copy.length; j++)\n        {\n            if (lst_copy[j] < min)\n\
    \            {\n                min = lst_copy[j];\n                min_index\
    \ = j;\n            }\n            if (lst_copy[j] > max)\n            {\n   \
    \             max = lst_copy[j];\n                max_index = j;\n           \
    \ }\n        }\n        res[i] = min;\n        i++;\n        lst_copy = lst_copy[0..min_index]\
    \ ~ lst_copy[min_index+1..$];\n        if (lst_copy.length == 0)\n           \
    \ break;\n        res[i] = max;\n        i++;\n        lst_copy = lst_copy[0..max_index]\
    \ ~ lst_copy[max_index+1..$];\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    while (lst.length > 0)\n    {\n\
    \        long min = lst[0];\n        long max = lst[0];\n        int min_index\
    \ = 0;\n        int max_index = 0;\n        for (int j = 0; j < lst.length; j++)\n\
    \        {\n            if (lst[j] < min)\n            {\n                min\
    \ = lst[j];\n                min_index = j;\n            }\n            if (lst[j]\
    \ > max)\n            {\n                max = lst[j];\n                max_index\
    \ = j;\n            }\n        }\n        result[i] = min;\n        result[i +\
    \ 1] = max;\n        i += 2;\n        lst = lst[0..min_index] ~ lst[min_index\
    \ + 1..$];\n        if (max_index > min_index)\n            max_index--;\n   \
    \     lst = lst[0..max_index] ~ lst[max_index + 1..$];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    long[] lst_copy = lst.dup;\n    int i = 0;\n    while (lst_copy.length >\
    \ 0)\n    {\n        res[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n\
    \        if (lst_copy.length == 0)\n            break;\n        res[i+1] = lst_copy[$-1];\n\
    \        lst_copy = lst_copy[0..$-1];\n        i += 2;\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i],\
    \ lst[j]);\n        i++;\n        j--;\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n        {\n\
    \            result[k] = lst[i];\n            i++;\n        }\n        else\n\
    \        {\n            result[k] = lst[j];\n            j--;\n        }\n   \
    \     k++;\n    }\n    return result;\n}", "{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    while (i < lst.length)\n    {\n        long min = lst[0];\n\
    \        long max = lst[0];\n        foreach (long x; lst)\n        {\n      \
    \      if (x < min)\n                min = x;\n            if (x > max)\n    \
    \            max = x;\n        }\n        res[i] = min;\n        res[i+1] = max;\n\
    \        lst = lst.remove(min);\n        lst = lst.remove(max);\n        i +=\
    \ 2;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n\
    \        {\n            res[i] = min(lst);\n            lst = remove(lst, min(lst));\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = max(lst);\n\
    \            lst = remove(lst, max(lst));\n            j--;\n        }\n     \
    \   is_min = !is_min;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n\
    \        if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            long min = lst[0];\n\
    \            int min_index = 0;\n            for (int k = 0; k < lst.length; k++)\n\
    \            {\n                if (lst[k] < min)\n                {\n       \
    \             min = lst[k];\n                    min_index = k;\n            \
    \    }\n            }\n            res[i] = min;\n            lst[min_index] =\
    \ long.max;\n            i++;\n        }\n        else\n        {\n          \
    \  long max = lst[0];\n            int max_index = 0;\n            for (int k\
    \ = 0; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            res[j] = max;\n        \
    \    lst[max_index] = long.min;\n            j--;\n        }\n        is_min =\
    \ !is_min;\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n       \
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n    }\n\
    \    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ res = new long[lst.length];\n    long[] lst2 = lst.dup;\n    sort(lst2);\n \
    \   int i = 0;\n    int j = lst2.length - 1;\n    bool flag = true;\n    foreach\
    \ (e; lst2)\n    {\n        if (flag)\n        {\n            res[i] = e;\n  \
    \          i++;\n        }\n        else\n        {\n            res[j] = e;\n\
    \            j--;\n        }\n        flag = !flag;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}", "{\n    if (lst.length == 0)\n    \
    \    return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n       \
    \ res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0) return lst;\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n   \
    \     {\n            result[i] = min(lst);\n            lst = remove(lst, min(lst));\n\
    \            i++;\n        }\n        else\n        {\n            result[j] =\
    \ max(lst);\n            lst = remove(lst, max(lst));\n            j--;\n    \
    \    }\n        is_min = !is_min;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0) return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool flag = true;\n    lst.sort();\n    foreach\
    \ (var item; lst)\n    {\n        if (flag)\n        {\n            res[i] = item;\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = item;\n\
    \            j--;\n        }\n        flag = !flag;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0) return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n\
    \    }\n    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n        if (is_min)\n\
    \        {\n            long min = lst[0];\n            int min_index = 0;\n \
    \           for (int k = 1; k < lst.length; k++)\n            {\n            \
    \    if (lst[k] < min)\n                {\n                    min = lst[k];\n\
    \                    min_index = k;\n                }\n            }\n      \
    \      result[i] = min;\n            lst[min_index] = long.max;\n            i++;\n\
    \        }\n        else\n        {\n            long max = lst[0];\n        \
    \    int max_index = 0;\n            for (int k = 1; k < lst.length; k++)\n  \
    \          {\n                if (lst[k] > max)\n                {\n         \
    \           max = lst[k];\n                    max_index = k;\n              \
    \  }\n            }\n            result[j] = max;\n            lst[max_index]\
    \ = long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n\
    \    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n \
    \   long[] res = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    bool is_min = true;\n    while (k < lst.length)\n\
    \    {\n        if (is_min)\n        {\n            res[k] = lst[i];\n       \
    \     i++;\n        }\n        else\n        {\n            res[k] = lst[j];\n\
    \            j--;\n        }\n        is_min = !is_min;\n        k++;\n    }\n\
    \    return res;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[]\
    \ res = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst[i++];\n    \
    \    if (i <= j)\n            res[k++] = lst[j--];\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    int min = 0;\n\
    \    int max = 0;\n    while (i <= j)\n    {\n        min = i;\n        max =\
    \ i;\n        for (int x = i; x <= j; x++)\n        {\n            if (lst[x]\
    \ < lst[min])\n                min = x;\n            if (lst[x] > lst[max])\n\
    \                max = x;\n        }\n        res[k++] = lst[min];\n        if\
    \ (min != max)\n            res[k++] = lst[max];\n        i = min + 1;\n     \
    \   j = max - 1;\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    long[] sorted = lst.dup;\n\
    \    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    bool is_min\
    \ = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n        {\n     \
    \       res[i] = sorted[i];\n            i++;\n        }\n        else\n     \
    \   {\n            res[j] = sorted[j];\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return res;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long[] res = new long[lst.length];\n    long[] lst_ = lst.dup;\n \
    \   sort(lst_);\n    int i = 0;\n    int j = lst_.length - 1;\n    int k = 0;\n\
    \    while (i <= j)\n    {\n        res[k++] = lst_[i++];\n        if (i <= j)\
    \ res[k++] = lst_[j--];\n    }\n    return res;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    int sign = 1;\n   \
    \ while (i <= j)\n    {\n        if (sign > 0)\n        {\n            result[k]\
    \ = min(lst[i], lst[j]);\n            if (lst[i] < lst[j])\n                i++;\n\
    \            else\n                j--;\n        }\n        else\n        {\n\
    \            result[k] = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n\
    \                i++;\n            else\n                j--;\n        }\n   \
    \     sign *= -1;\n        k++;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long[] res = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        res[k++] = min(lst[i], lst[j]);\n        if (lst[i] < lst[j])\n\
    \            i++;\n        else\n            j--;\n        if (i > j)\n      \
    \      break;\n        res[k++] = max(lst[i], lst[j]);\n        if (lst[i] > lst[j])\n\
    \            i++;\n        else\n            j--;\n    }\n    return res;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    long[] res\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        res[k++] = min(lst[i], lst[j]);\n\
    \        res[k++] = max(lst[i], lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}", "{\n    if (lst.length == 0) return lst;\n    long[] res\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (k < lst.length) {\n        if (k % 2 == 0) {\n          \
    \  res[k] = lst[i];\n            i++;\n        } else {\n            res[k] =\
    \ lst[j];\n            j--;\n        }\n        k++;\n    }\n    return res;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
