name: HumanEval_112_reverse_delete
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, isPalindrome(res));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8krumr21.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp8krumr21.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8krumr21.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1n0yhvjf.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp1n0yhvjf.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1n0yhvjf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, c)\n    {\n        s = s.replace(c[i],\
    \ \"\");\n    }\n    foreach(i, s)\n    {\n        result ~= s[i];\n    }\n  \
    \  return tuple(result, result == result.dup.reverse);\n}\nunittest\n{\n    alias\
    \ candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"\
    bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkyqn1w5v.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpkyqn1w5v.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpkyqn1w5v.d(25): Error: found `foreach`\
    \ when expecting `)`\\n/tmp/tmpkyqn1w5v.d(29): Error: found `return` when expecting\
    \ `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpkyqn1w5v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19gg2_fd.d(21): Error: no identifier for declarator `c`\\n/tmp/tmp19gg2_fd.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmp19gg2_fd.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19gg2_fd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0ynb5fk.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpe0ynb5fk.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0ynb5fk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnq92mvvc.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpnq92mvvc.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnq92mvvc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbtclr8l.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmptbtclr8l.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbtclr8l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // your code here\n    auto result = s;\n    foreach(i; 0 .. c.length)\n\
    \    {\n        result = result.replace(c[i], \"\");\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkc6j49s0.d(24): Error: no property `replace` for type `string`\\\
    n/tmp/tmpkc6j49s0.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc6j49s0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpca05tdiq.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpca05tdiq.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpca05tdiq.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca05tdiq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s.equal(s.dup.reverse));\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp05xsfgue.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmp05xsfgue.d(24): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05xsfgue.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1k7_jo0f.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp1k7_jo0f.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1k7_jo0f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46g1o0t2.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp46g1o0t2.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp46g1o0t2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu_ugm9c1.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpu_ugm9c1.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_ugm9c1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s) \n    {\n        if(c.find(ch)\
    \ == -1) \n        {\n            result ~= ch;\n        }\n    }\n    return\
    \ tuple(result, result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpukwk98bo.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpukwk98bo.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpukwk98bo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd3nhctp1.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpd3nhctp1.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3nhctp1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmg5t07d.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpnmg5t07d.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpnmg5t07d.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmg5t07d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s.equal(s.dup.reverse));\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkmi53hrf.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmpkmi53hrf.d(24): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmi53hrf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(char ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprl8rt5d5.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmprl8rt5d5.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprl8rt5d5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyhtachgg.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpyhtachgg.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhtachgg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lh1gvty.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp4lh1gvty.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lh1gvty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0gq7lv6.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpb0gq7lv6.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0gq7lv6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_fbqknk.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpq_fbqknk.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_fbqknk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjnlrf5d7.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpjnlrf5d7.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnlrf5d7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz622qgxj.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpz622qgxj.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz622qgxj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnkuy_8p_.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpnkuy_8p_.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkuy_8p_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, isPalindrome(res));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_g5x19r.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpb_g5x19r.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_g5x19r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(char ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4t88q_47.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp4t88q_47.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4t88q_47.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspf4w9x_.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpspf4w9x_.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpspf4w9x_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(c_char; c)\n    {\n        result = result.replace(c_char,\
    \ \"\");\n    }\n    return tuple(result, result.length > 0 && result.equal(result.dup.reverse));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01oss832.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp01oss832.d(25): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01oss832.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s) \n    {\n        if(c.find(ch) ==\
    \ -1) \n        {\n            result ~= ch;\n        }\n    }\n    return tuple(result,\
    \ isPalindrome(result));\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpaulbvs.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpfpaulbvs.d(28): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpaulbvs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(char ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result.length > 0 && result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ej2itin.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp3ej2itin.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ej2itin.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9j_0hga.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpc9j_0hga.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9j_0hga.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.canFind(ch))\n\
    \            continue;\n        result ~= ch;\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fy06ybt.d(23): Error: no property `canFind` for type `string`\\\
    n/tmp/tmp1fy06ybt.d(27): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fy06ybt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphwd1k5z5.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmphwd1k5z5.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphwd1k5z5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s) \n    {\n        if(c.find(ch)\
    \ == -1) \n        {\n            result ~= ch;\n        }\n    }\n    return\
    \ tuple(result, result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6hsj4nk.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp_6hsj4nk.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6hsj4nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdu85md6p.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpdu85md6p.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu85md6p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr5p64lo.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpcr5p64lo.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcr5p64lo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c) \n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdgmgmyq3.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpdgmgmyq3.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpdgmgmyq3.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgmgmyq3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6we_8asn.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp6we_8asn.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6we_8asn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqaqahy0.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpfqaqahy0.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqaqahy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.canFind(ch))\n\
    \            continue;\n        result ~= ch;\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98f5n88t.d(23): Error: no property `canFind` for type `string`\\\
    n/tmp/tmp98f5n88t.d(27): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp98f5n88t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    bool isPalindrome = true;\n  \
    \  foreach(i, ch; result)\n    {\n        if(result[i] != result[$-i-1])\n   \
    \     {\n            isPalindrome = false;\n            break;\n        }\n  \
    \  }\n    return tuple(result, isPalindrome);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6wynbk9.d(23): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6wynbk9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolywm1zk.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpolywm1zk.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpolywm1zk.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolywm1zk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4py20cz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpc4py20cz.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4py20cz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxdcewh1.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpqxdcewh1.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxdcewh1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rs58we_.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp0rs58we_.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rs58we_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // Erase all characters in s that are equal to any character in c\n   \
    \ foreach(char ch; c)\n        s.erase(ch);\n    // Check if the result string\
    \ is palindrome\n    return tuple(s, s == s.dup.reverse);\n}\nunittest\n{\n  \
    \  alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\"\
    ) == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"\
    acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\"\
    , true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n\
    \    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"\
    abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\"\
    , \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\"\
    ) == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\
    \", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8evmzmh.d(22): Error: no property `erase` for type `string`\\\
    n/tmp/tmpe8evmzmh.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8evmzmh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp289fikr_.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp289fikr_.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp289fikr_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppukbwv2c.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmppukbwv2c.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppukbwv2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtqpjq14.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmphtqpjq14.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphtqpjq14.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s.length == 0 || s == s.dup.reverse);\n}\n/*\nTask\n    We are\
    \ given a string s and a list of strings words.\n    We have to find the shortest\
    \ substring in s that contains all the words in words.\n    You should return\
    \ a tuple containing the result string and the length of the result string.\n\
    \    Example\n    >>> find_shortest_substring(\"aabbcc\", [\"aa\", \"bb\", \"\
    cc\"])\n    tuple(\"aabbcc\", 6)\n    >>> find_shortest_substring(\"aabbcc\",\
    \ [\"aa\", \"bb\", \"cc\", \"dd\"])\n    tuple(\"\", 0)\n    >>> find_shortest_substring(\"\
    aabbcc\", [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])\n    tuple(\"\", 0)\n    >>>\
    \ find_shortest_substring(\"aabbcc\", [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"\
    , \"ff\"])\n    tuple(\"\", 0)\n    >>> find_shortest_substring(\"aabbcc\", [\"\
    aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"])\n    tuple(\"\", 0)\n \
    \   >>> find_shortest_substring(\"aabbcc\", [\"aa\", \"bb\", \"cc\", \"dd\", \"\
    ee\", \"ff\", \"gg\", \"hh\"])\n    tuple(\"\", 0)\n    >>> find_shortest_substring(\"\
    aabbcc\", [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"\
    ii\"])\n    tuple(\"\", 0)\n    >>> find_shortest_substring(\"aabbcc\", [\"aa\"\
    , \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\"])\n \
    \   tuple(\"\", 0)\n    >>> find_shortest_substring(\"aabbcc\", [\"aa\", \"bb\"\
    , \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\"])\n \
    \   tuple(\"\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2y1jnvr5.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y1jnvr5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi80ra4v8.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpi80ra4v8.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi80ra4v8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjl7_x5zz.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpjl7_x5zz.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpjl7_x5zz.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjl7_x5zz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t6eef5f.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp_t6eef5f.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t6eef5f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi6vx3enj.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpi6vx3enj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6vx3enj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdr8de0we.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpdr8de0we.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdr8de0we.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = s;\n    foreach(char ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result.equal(result.dup.reverse));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2sm4r5rk.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp2sm4r5rk.d(25): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sm4r5rk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkwwgqb53.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpkwwgqb53.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwwgqb53.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy1pm42jy.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpy1pm42jy.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1pm42jy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj5ntlxdc.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpj5ntlxdc.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5ntlxdc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            res ~= ch;\n    }\n    return tuple(res, isPalindrome(res));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9pbgz06b.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp9pbgz06b.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pbgz06b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_98h8jsn.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp_98h8jsn.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_98h8jsn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi82hxtc6.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpi82hxtc6.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi82hxtc6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjph2vlv9.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpjph2vlv9.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjph2vlv9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_7mpwf8.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpb_7mpwf8.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_7mpwf8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, isPalindrome(res));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9wir3dq.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpq9wir3dq.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9wir3dq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnauqwk9z.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpnauqwk9z.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnauqwk9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bjfnpdk.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp2bjfnpdk.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bjfnpdk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv97rqw1y.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpv97rqw1y.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpv97rqw1y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s) \n    {\n        if(c.find(ch) ==\
    \ -1) \n        {\n            result ~= ch;\n        }\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpydevmk5e.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpydevmk5e.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpydevmk5e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, isPalindrome(res));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph80qvwvr.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmph80qvwvr.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph80qvwvr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6293k486.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp6293k486.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6293k486.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jjg_jnj.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp2jjg_jnj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jjg_jnj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbu74rkhu.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpbu74rkhu.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu74rkhu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7mlqu84.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpz7mlqu84.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7mlqu84.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(c_; c)\n    {\n        result = result.replace(c_,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8jy2p7m.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmph8jy2p7m.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph8jy2p7m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcssk8ut.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpdcssk8ut.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcssk8ut.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_73jwj18.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp_73jwj18.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_73jwj18.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(c_char; c)\n    {\n        result = result.replace(c_char,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa9gj4q8o.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpa9gj4q8o.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9gj4q8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(!c.canFind(ch))\n\
    \            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9se2wys.d(23): Error: no property `canFind` for type `string`\\\
    n/tmp/tmpc9se2wys.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9se2wys.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqm7uyfv4.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpqm7uyfv4.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqm7uyfv4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9le1t7fa.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp9le1t7fa.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9le1t7fa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq8yx1364.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpq8yx1364.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8yx1364.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string s_copy = s;\n    foreach(c_char; c)\n    {\n        s_copy = s_copy.replace(c_char,\
    \ \"\");\n    }\n    return tuple(s_copy, s_copy == s_copy.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgugmtv1j.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpgugmtv1j.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgugmtv1j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, char ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result.equal(result.dup.reverse));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mkxra6x.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp4mkxra6x.d(25): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mkxra6x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(c_char; c)\n    {\n        result = result.replace(c_char,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphq5wrfky.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmphq5wrfky.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphq5wrfky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi3szcjql.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpi3szcjql.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3szcjql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp448ev_p.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpp448ev_p.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp448ev_p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj8aig80k.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpj8aig80k.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8aig80k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvh4l_9y.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpgvh4l_9y.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvh4l_9y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s) \n    {\n        if(c.find(ch)\
    \ == -1) \n        {\n            result ~= ch;\n        }\n    }\n    return\
    \ tuple(result, result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmf_76nl1.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpmf_76nl1.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf_76nl1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi1nsfir2.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpi1nsfir2.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1nsfir2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyii_u4x.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmptyii_u4x.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptyii_u4x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    bool is_palindrome = true;\n \
    \   foreach(i, ch; result)\n    {\n        if(ch != result[$ - i - 1])\n     \
    \   {\n            is_palindrome = false;\n            break;\n        }\n   \
    \ }\n    return tuple(result, is_palindrome);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjo_cqcd.d(23): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjo_cqcd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzcdhf1l.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpqzcdhf1l.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzcdhf1l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(char ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jwmuzbs.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp8jwmuzbs.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jwmuzbs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppgi1q4ur.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmppgi1q4ur.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgi1q4ur.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ownshup.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp0ownshup.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ownshup.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto s_copy = s;\n    foreach(i, ch; c)\n    {\n        s_copy = s_copy.replace(ch,\
    \ \"\");\n    }\n    return tuple(s_copy, s_copy == s_copy.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvaf0vzc6.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpvaf0vzc6.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvaf0vzc6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxj916sy.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpzxj916sy.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxj916sy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0c4wpv4.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpl0c4wpv4.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0c4wpv4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(char ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9n9cowua.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp9n9cowua.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9n9cowua.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplze5xeqm.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplze5xeqm.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplze5xeqm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_ye1c73.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpg_ye1c73.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_ye1c73.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2pn6hjp.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpd2pn6hjp.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2pn6hjp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, e; c)\n    {\n        result = result.replace(e,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3q18o3fi.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp3q18o3fi.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q18o3fi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_gussij.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpm_gussij.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_gussij.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5iay53_v.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp5iay53_v.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iay53_v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_6rboz5.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpw_6rboz5.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_6rboz5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmsezaa85.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpmsezaa85.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsezaa85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9u4f6fo.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpo9u4f6fo.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9u4f6fo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35q7w5_c.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp35q7w5_c.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp35q7w5_c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvfqdy8wx.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpvfqdy8wx.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpvfqdy8wx.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfqdy8wx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4abucbn.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpc4abucbn.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4abucbn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // your code here\n    string result = \"\";\n    foreach(i, ch; s)\n \
    \   {\n        if(c.find(ch) == -1)\n        {\n            result ~= ch;\n  \
    \      }\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshux1lqs.d(24): Error: no property `find` for type `string`\\\
    n/tmp/tmpshux1lqs.d(29): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpshux1lqs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8opuc1a.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpm8opuc1a.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8opuc1a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyd5_uogx.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpyd5_uogx.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd5_uogx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11qprdaz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp11qprdaz.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11qprdaz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // remove all characters in c from s\n    foreach(ch; c)\n    {\n     \
    \   s = s.replace(ch, \"\");\n    }\n    // check if s is palindrome\n    return\
    \ tuple(s, s == s.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_szd06oo.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp_szd06oo.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_szd06oo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpel3t37ep.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpel3t37ep.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpel3t37ep.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5frzkny.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpb5frzkny.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5frzkny.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp73bqa77s.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp73bqa77s.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp73bqa77s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfdc7may.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpyfdc7may.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfdc7may.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplr200eev.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplr200eev.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplr200eev.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcbum31r.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpgcbum31r.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcbum31r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rdqzxh6.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp0rdqzxh6.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rdqzxh6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgmfi417p.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpgmfi417p.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmfi417p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    //string s = \"abcdedcba\";\n    //string c = \"ab\";\n    string result\
    \ = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n      \
    \  {\n            result ~= ch;\n        }\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpelnatxvj.d(25): Error: no property `find` for type `string`\\\
    n/tmp/tmpelnatxvj.d(30): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelnatxvj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptvdvvzx7.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmptvdvvzx7.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptvdvvzx7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dgjg_24.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp5dgjg_24.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dgjg_24.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsozrtyav.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpsozrtyav.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsozrtyav.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg4o6x5fz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpg4o6x5fz.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4o6x5fz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_zym5d2.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmps_zym5d2.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmps_zym5d2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ksoywrz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp4ksoywrz.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ksoywrz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = s;\n    foreach(c_char; c)\n    {\n        result = result.replace(c_char,\
    \ \"\");\n    }\n    return tuple(result, result.length > 0 && result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4w888nd7.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp4w888nd7.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w888nd7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6qp8hn26.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp6qp8hn26.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qp8hn26.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3axfkxs.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpz3axfkxs.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3axfkxs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvn4t6d9.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplvn4t6d9.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplvn4t6d9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprc8o1p48.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmprc8o1p48.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprc8o1p48.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80wtbygq.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmp80wtbygq.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp80wtbygq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjlw6lr34.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpjlw6lr34.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlw6lr34.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42ns0dvw.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp42ns0dvw.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42ns0dvw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // your code here\n    foreach(i; c)\n    {\n        s = s.replace(i, \"\
    \");\n    }\n    return tuple(s, isPalindrome(s));\n}\nunittest\n{\n    alias\
    \ candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"\
    bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojxo92kp.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpojxo92kp.d(25): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojxo92kp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj_y_17d.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplj_y_17d.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplj_y_17d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp75h0i0d2.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp75h0i0d2.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp75h0i0d2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1rv6u6m.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpc1rv6u6m.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1rv6u6m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgs98onm5.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpgs98onm5.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs98onm5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz1n8d57j.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpz1n8d57j.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1n8d57j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsf80gaz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpzsf80gaz.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsf80gaz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuh90d4ba.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpuh90d4ba.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh90d4ba.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxs9cwt5g.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpxs9cwt5g.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpxs9cwt5g.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs9cwt5g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = s;\n    foreach(i, ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result.length > 0 && result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtl0h6_w.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmphtl0h6_w.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphtl0h6_w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3cpq9xa_.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp3cpq9xa_.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cpq9xa_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_w8kxnnb.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp_w8kxnnb.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_w8kxnnb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzcd1eyww.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpzcd1eyww.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcd1eyww.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcnvtucje.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpcnvtucje.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnvtucje.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmg4f4v6w.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpmg4f4v6w.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg4f4v6w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz0sdule9.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpz0sdule9.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0sdule9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf3goowqi.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpf3goowqi.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3goowqi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s.length == 0 || s == s.dup.reverse);\n}\nunittest\n{\n    alias\
    \ candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"\
    bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplbza61bi.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmplbza61bi.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplbza61bi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2_h2r_6.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpt2_h2r_6.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2_h2r_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa3j1bw6t.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpa3j1bw6t.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3j1bw6t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq5vv4rr1.d(21): Error: no identifier for declarator `c`\\n/tmp/tmpq5vv4rr1.d(21):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpq5vv4rr1.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5vv4rr1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvpwwdg8.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpwvpwwdg8.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvpwwdg8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s == s.dup.reverse);\n}\nunittest\n{\n    alias candidate =\
    \ reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfmkllyk3.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmpfmkllyk3.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmkllyk3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp340j4qd.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpp340j4qd.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpp340j4qd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaarv6nxf.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpaarv6nxf.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaarv6nxf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfmwbcdb2.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpfmwbcdb2.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmwbcdb2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplf7ymgs8.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplf7ymgs8.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplf7ymgs8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    bool isPalindrome = true;\n  \
    \  foreach(i, ch; result)\n    {\n        if(ch != result[$ - i - 1])\n      \
    \  {\n            isPalindrome = false;\n            break;\n        }\n    }\n\
    \    return tuple(result, isPalindrome);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjhq7vy8_.d(23): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjhq7vy8_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    // TODO: implement\n    return tuple(\"\", false);\n}\nunittest\n{\n  \
    \  alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\"\
    ) == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"\
    acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\"\
    , true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n\
    \    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"\
    abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\"\
    , \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\"\
    ) == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\
    \", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6_yir2ac.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428f99]\\n??:? void tmp6_yir2ac.__unittest_L23_C1()\
    \ [0x4280d7]\\n??:? void tmp6_yir2ac.__modtest() [0x428a80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d893]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431075]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431524]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431001]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c779]\\n??:? runModuleUnitTests [0x42d669]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42943c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4293c3]\\n??:? _d_run_main [0x42932e]\\n??:? main [0x428a93]\\\
    n??:? __libc_start_main [0x12f92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpby4hfcp1.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpby4hfcp1.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpby4hfcp1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6b1szhbg.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp6b1szhbg.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6b1szhbg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfyzg3ds.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpcfyzg3ds.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfyzg3ds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkerh11vy.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpkerh11vy.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkerh11vy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s == s.dup.reverse);\n}\nunittest\n{\n    alias candidate =\
    \ reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt5ikjqaa.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmpt5ikjqaa.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5ikjqaa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzlgu0ms.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpzzlgu0ms.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzlgu0ms.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi61rkt5k.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpi61rkt5k.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi61rkt5k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string res;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            res ~= ch;\n    }\n    return tuple(res, res == res.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcwr4xng.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpwcwr4xng.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcwr4xng.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqpspu6kb.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpqpspu6kb.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpspu6kb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxldf1_7j.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpxldf1_7j.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxldf1_7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wp1h9u8.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp2wp1h9u8.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wp1h9u8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8puclczb.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp8puclczb.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8puclczb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprthvn17b.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmprthvn17b.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprthvn17b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknzoa4yv.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpknzoa4yv.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpknzoa4yv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s) \n    {\n        if(c.find(ch)\
    \ == -1) \n        {\n            result ~= ch;\n        }\n    }\n    return\
    \ tuple(result, result == result.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyzo21i3r.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpyzo21i3r.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzo21i3r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s == s.dup.reverse);\n}\nunittest\n{\n    alias candidate =\
    \ reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu73qxh5e.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmpu73qxh5e.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpu73qxh5e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6cyn2m16.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp6cyn2m16.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cyn2m16.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpub5hnflo.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpub5hnflo.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpub5hnflo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    auto result = s;\n    foreach(i, e; c)\n    {\n        result = result.replace(e,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}\n\
    unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmhundjb.d(23): Error: no property `replace` for type `string`\\\
    n/tmp/tmpjmhundjb.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmhundjb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1lz4nvvz.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp1lz4nvvz.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lz4nvvz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    foreach(i, ch; c)\n    {\n        s = s.replace(ch, \"\");\n    }\n   \
    \ return tuple(s, s.equal(s.dup.reverse));\n}\nunittest\n{\n    alias candidate\
    \ = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\"\
    , false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n\
    \    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n   \
    \ assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"\
    a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\")\
    \ == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"\
    abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu7r3ozu7.d(22): Error: no property `replace` for type `string`\\\
    n/tmp/tmpu7r3ozu7.d(24): Error: no property `equal` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7r3ozu7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbopm0j5o.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpbopm0j5o.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbopm0j5o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu8cqm1ae.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpu8cqm1ae.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8cqm1ae.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftxur8o0.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpftxur8o0.d(26): Error: undefined identifier `isPalindrome`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftxur8o0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result;\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) ==\
    \ -1)\n            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
    abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\",\
    \ \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"\
    ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"\
    dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n  \
    \  assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahbbgh7b.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpahbbgh7b.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpahbbgh7b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr_hpezw.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpxr_hpezw.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr_hpezw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2v7tspan.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmp2v7tspan.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v7tspan.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplkvm2sz3.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmplkvm2sz3.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplkvm2sz3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two\
    \ strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and true/false for\
    \ the check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"\
    bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    tuple(\"acdef\"\
    , false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    tuple(\"cdedc\",\
    \ true)\n    \n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n\
    {\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if (c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}\nunittest\n{\n    alias candidate = reverse_delete;\n\
    \n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"\
    abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\"\
    , \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") ==\
    \ tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n\
    \    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n \
    \   assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"\
    mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz7cv4mg.d(23): Error: no property `find` for type `string`\\\
    n/tmp/tmpzz7cv4mg.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz7cv4mg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
