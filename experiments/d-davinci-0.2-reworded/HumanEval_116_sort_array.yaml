name: HumanEval_116_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    In this Kata, you have\
  \ to sort an array of non-negative integers according to\n    number of ones in\
  \ their binary representation in ascending order.\n    For similar number of ones,\
  \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
  \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
  \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L, 0L,\
  \ 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[] arr)\
  \ \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
  \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
  \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L,\
  \ 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
  \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
  \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
  \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
  \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
  \ 16L, 32L]);\n}\nvoid main(){}"
completions: ["{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n    \
    \    auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        if\
    \ (a_ones == b_ones)\n            return a < b;\n        return a_ones < b_ones;\n\
    \    });\n    return arr2;\n}", "{\n    // your code here\n    return arr.sort!((a,\
    \ b) => \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n}", "{\n    return arr.sort!((a, b) => \n    {\n       \
    \ auto aBits = a.to!string.count(\"1\");\n        auto bBits = b.to!string.count(\"\
    1\");\n        return aBits == bBits ? a.compare(b) : aBits.compare(bBits);\n\
    \    });\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b)\
    \ =>\n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr_sorted;\n}", "{\n    return arr.sort!((a,\
    \ b) =>\n    {\n        int a_ones = a.countOnes();\n        int b_ones = b.countOnes();\n\
    \        if (a_ones == b_ones)\n            return a - b;\n        return a_ones\
    \ - b_ones;\n    });\n}", "{\n    auto arr2 = arr.dup;\n    auto arr3 = arr.dup;\n\
    \    auto arr4 = arr.dup;\n    auto arr5 = arr.dup;\n    auto arr6 = arr.dup;\n\
    \    auto arr7 = arr.dup;\n    auto arr8 = arr.dup;\n    auto arr9 = arr.dup;\n\
    \    auto arr10 = arr.dup;\n    auto arr11 = arr.dup;\n    auto arr12 = arr.dup;\n\
    \    auto arr13 = arr.dup;\n    auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n\
    \    auto arr16 = arr.dup;\n    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n\
    \    auto arr19 = arr.dup;\n    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n\
    \    auto arr22 = arr.dup;\n    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n\
    \    auto arr25 = arr.dup;\n    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n\
    \    auto arr28 = arr.dup;\n    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n\
    \    auto arr31 = arr.dup;\n    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n\
    \    auto arr34 = arr.dup;\n    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n\
    \    auto arr37 = arr.dup;\n    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n\
    \    auto arr40 = arr.dup;\n    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n\
    \    auto arr43 = arr.dup;\n    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n\
    \    auto arr46 = arr.dup;\n    auto arr47 = arr.dup;\n    auto arr", "{\n   \
    \ auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto aa = a.to!string;\n\
    \        auto bb = b.to!string;\n        auto a1 = aa.count(\"1\");\n        auto\
    \ b1 = bb.count(\"1\");\n        if (a1 == b1)\n            return a > b;\n  \
    \      return a1 > b1;\n    });\n    return arr2;\n}", "{\n    long[] result =\
    \ new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    int z = 0;\n    int o = 0;\n    foreach(long i;\
    \ arr)\n    {\n        if(i < 0)\n            continue;\n        if(i == 0)\n\
    \            zeros[z++] = i;\n        else\n            ones[o++] = i;\n    }\n\
    \    ones = ones[0..o];\n    zeros = zeros[0..z];\n    sort!((a, b) => countOnes(a)\
    \ < countOnes(b) || (countOnes(a) == countOnes(b) && a < b))(ones);\n    sort!((a,\
    \ b) => countOnes(a) < countOnes(b) || (countOnes(a) == countOnes(b) && a < b))(zeros);\n\
    \    int i = 0;\n    foreach(long z; zeros)\n        result[i++] = z;\n    foreach(long\
    \ o; ones)\n        result[i++] = o;\n    return result;\n}", "{\n    auto arr_sorted\
    \ = arr.dup;\n    arr_sorted.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b :\
    \ a_ones - b_ones;\n    });\n    return arr_sorted;\n}", "{\n    return arr.sort!((a,\
    \ b) =>\n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n}", "{\n\
    \    auto arr_len = arr.length;\n    auto arr_copy = arr.dup;\n    auto arr_ones\
    \ = new long[arr_len];\n    auto arr_sorted = new long[arr_len];\n    auto arr_sorted_ones\
    \ = new long[arr_len];\n    auto arr_sorted_copy = new long[arr_len];\n    auto\
    \ arr_sorted_copy_ones = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted\
    \ = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index = new long[arr_len];\n\
    \    auto arr_sorted_copy_ones_sorted_index_sorted = new long[arr_len];\n    auto\
    \ arr_sorted_copy_ones_sorted_index_sorted_index = new long[arr_len];\n    auto\
    \ arr_sorted_copy_ones_sorted_index_sorted_index_sorted = new long[arr_len];\n\
    \    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index = new long[arr_len];\n\
    \    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_sorted =\
    \ new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[arr_len];\n    auto arr_sorted_copy_ones_sorted_index_sorted_index_sorted_index_s",
  "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a1 =\
    \ a.to!string(2);\n        auto b1 = b.to!string(2);\n        if (a1.count('1')\
    \ == b1.count('1'))\n            return a < b;\n        return a1.count('1') <\
    \ b1.count('1');\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string.count(\"1\");\n\
    \        auto b1 = b.to!string.count(\"1\");\n        if (a1 == b1)\n        \
    \    return a < b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n\
    \    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto a_ones\
    \ = a.countOnes;\n        auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n\
    \            return a < b;\n        return a_ones < b_ones;\n    });\n    return\
    \ arr2;\n}", "{\n    long[] sorted = arr.dup;\n    sort!((a, b) => a.countOnes()\
    \ == b.countOnes() ? a - b : a.countOnes() - b.countOnes())(sorted);\n    return\
    \ sorted;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n\
    \        auto a1 = a.to!string;\n        auto b1 = b.to!string;\n        auto\
    \ a2 = a1.count('1');\n        auto b2 = b1.count('1');\n        if (a2 == b2)\n\
    \            return a < b;\n        return a2 < b2;\n    });\n    return arr2;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto\
    \ a1 = a.to!string.count(\"1\");\n        auto b1 = b.to!string.count(\"1\");\n\
    \        if (a1 == b1)\n            return a < b;\n        return a1 < b1;\n \
    \   });\n    return arr2;\n}", "{\n    // your code here\n    long[] result =\
    \ new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    long[] zeros_copy = new long[arr.length];\n   \
    \ long[] ones_copy = new long[arr.length];\n    int zeros_index = 0;\n    int\
    \ ones_index = 0;\n    int result_index = 0;\n    foreach(i; arr)\n    {\n   \
    \     if(i == 0)\n        {\n            zeros[zeros_index] = i;\n           \
    \ zeros_index++;\n        }\n        else\n        {\n            ones[ones_index]\
    \ = i;\n            ones_index++;\n        }\n    }\n    zeros_copy = zeros[0..zeros_index];\n\
    \    ones_copy = ones[0..ones_index];\n    ones_copy.sort!((a, b) => count_ones(a)\
    \ < count_ones(b));\n    foreach(i; ones_copy)\n    {\n        result[result_index]\
    \ = i;\n        result_index++;\n    }\n    zeros_copy.sort!((a, b) => a < b);\n\
    \    foreach(i; zeros_copy)\n    {\n        result[result_index] = i;\n      \
    \  result_index++;\n    }\n    return result;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string.count(\"1\");\n\
    \        auto b1 = b.to!string.count(\"1\");\n        if (a1 == b1)\n        \
    \    return a < b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n\
    \    auto cmp = (a, b) => a.countOnes == b.countOnes ? a - b : a.countOnes - b.countOnes;\n\
    \    return arr.sort!cmp;\n}", "{\n    // Your code here\n    auto arr_tuple =\
    \ new Tuple!(long, long)[arr.length];\n    foreach(i, e; arr)\n    {\n       \
    \ arr_tuple[i] = tuple(e, count_ones(e));\n    }\n    sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]))(arr_tuple);\n    foreach(i, e; arr_tuple)\n\
    \    {\n        arr[i] = e[0];\n    }\n    return arr;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n\
    \    return arr2;\n}", "{\n    auto arr_tuple = arr.map!(a => tuple(a, a.countOnes));\n\
    \    arr_tuple.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return arr_tuple.map!(a => a[0]).array;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort(sorted, (a, b) =>\n    {\n        int aOnes = countOnes(a);\n      \
    \  int bOnes = countOnes(b);\n        if (aOnes == bOnes)\n            return\
    \ a - b;\n        return aOnes - bOnes;\n    });\n    return sorted;\n}", "{\n\
    \    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n     \
    \   auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        if\
    \ (a_ones == b_ones)\n            return a < b;\n        return a_ones < b_ones;\n\
    \    });\n    return arr_sorted;\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!((a,\
    \ b) =>\n    {\n        auto a_ = a.to!string.count('1');\n        auto b_ = b.to!string.count('1');\n\
    \        return a_ == b_ ? a.compare(b) : a_.compare(b_);\n    });\n    return\
    \ arr_;\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) =>\n\
    \    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr_sorted;\n}", "{\n    auto arr_ = arr.dup;\n\
    \    arr_.sort!((a, b) =>\n    {\n        auto a_ = a.to!string;\n        auto\
    \ b_ = b.to!string;\n        auto a_count = a_.count!((c) => c == '1');\n    \
    \    auto b_count = b_.count!((c) => c == '1');\n        if (a_count == b_count)\n\
    \            return a < b;\n        return a_count < b_count;\n    });\n    return\
    \ arr_;\n}", "{\n    long[] result = arr.dup;\n    result.sort!((a, b) =>\n  \
    \  {\n        int a1 = a.countOnes;\n        int b1 = b.countOnes;\n        if\
    \ (a1 == b1)\n            return a - b;\n        return a1 - b1;\n    });\n  \
    \  return result;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\
    \ a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr2;\n}", "{\n    auto\
    \ arr2 = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto\
    \ arr5 = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto\
    \ arr8 = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto\
    \ arr11 = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n   \
    \ auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n\
    \    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n\
    \    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n\
    \    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n\
    \    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n\
    \    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n\
    \    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n\
    \    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n\
    \    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n\
    \    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n\
    \    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n\
    \    auto arr47 = arr.dup;\n    auto arr", "{\n    long[][] arr2 = new long[arr.length][2];\n\
    \    foreach(i, e; arr)\n    {\n        arr2[i][0] = e;\n        arr2[i][1] =\
    \ e.countOnes;\n    }\n    arr2.sort!((a, b) => a[1] == b[1] ? a[0] < b[0] : a[1]\
    \ < b[1]);\n    return arr2.map!(a => a[0]).array;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n       \
    \ auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n            return\
    \ a < b;\n        return a_ones < b_ones;\n    });\n    return arr2;\n}", "{\n\
    \    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto aa =\
    \ a.to!string;\n        auto bb = b.to!string;\n        auto a1 = aa.count('1');\n\
    \        auto b1 = bb.count('1');\n        if (a1 == b1)\n            return a\
    \ > b;\n        return a1 > b1;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto arr5\
    \ = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto arr8\
    \ = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto arr11\
    \ = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n    auto arr14\
    \ = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n    auto arr17\
    \ = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n    auto arr20\
    \ = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n    auto arr23\
    \ = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n    auto arr26\
    \ = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n    auto arr29\
    \ = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n    auto arr32\
    \ = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n    auto arr35\
    \ = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n    auto arr38\
    \ = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n    auto arr41\
    \ = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n    auto arr44\
    \ = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n    auto arr47\
    \ = arr.dup;\n    auto arr", "{\n    long[] sorted = arr.dup;\n    sort(sorted,\
    \ (a, b) =>\n    {\n        int aOnes = countOnes(a);\n        int bOnes = countOnes(b);\n\
    \        if (aOnes == bOnes)\n            return a - b;\n        return aOnes\
    \ - bOnes;\n    });\n    return sorted;\n}", "{\n    // your code here\n    long[]\
    \ result = new long[arr.length];\n    int[] count = new int[arr.length];\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        count[i] = countOnes(arr[i]);\n\
    \    }\n    int[] sorted = sort(count);\n    int[] index = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        index[i] = findIndex(count,\
    \ sorted[i]);\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n       \
    \ result[i] = arr[index[i]];\n    }\n    return result;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) => (a.countOnes, a).cmp((b.countOnes, b)));\n\
    \    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\
    \ \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n    return\
    \ arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n\
    \        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n    \
    \    if (a_ones == b_ones)\n            return a < b;\n        return a_ones <\
    \ b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => \n    {\n        auto a1 = a.countOnes;\n        auto b1 = b.countOnes;\n\
    \        if (a1 == b1)\n            return a < b;\n        return a1 < b1;\n \
    \   });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    sort!((a, b)\
    \ => a.countOnes > b.countOnes || (a.countOnes == b.countOnes && a > b))(arr2);\n\
    \    return arr2;\n}", "{\n    long[] ret = arr.dup;\n    ret.sort!((a, b) =>\
    \ \n    {\n        int a_ones = a.countOnes;\n        int b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a - b;\n        return a_ones\
    \ - b_ones;\n    });\n    return ret;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) =>\n    {\n        auto a1 = a.to!string;\n        auto b1 = b.to!string;\n\
    \        auto a2 = a1.count('1');\n        auto b2 = b1.count('1');\n        return\
    \ a2 == b2 ? a < b : a2 < b2;\n    });\n    return arr2;\n}", "{\n    long[] result\
    \ = arr.dup;\n    result.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b :\
    \ a_ones - b_ones;\n    });\n    return result;\n}", "{\n    auto arr_ = arr.dup;\n\
    \    arr_.sort!((a, b) =>\n    {\n        auto a_ = a.to!string;\n        auto\
    \ b_ = b.to!string;\n        auto a_1 = a_.count('1');\n        auto b_1 = b_.count('1');\n\
    \        if (a_1 == b_1)\n            return a < b;\n        return a_1 < b_1;\n\
    \    });\n    return arr_;\n}", "{\n    long[] sorted = arr.dup;\n    sort(sorted,\
    \ (a, b) =>\n    {\n        int onesA = countOnes(a);\n        int onesB = countOnes(b);\n\
    \        if (onesA == onesB)\n            return a - b;\n        return onesA\
    \ - onesB;\n    });\n    return sorted;\n}", "{\n    auto a = arr.dup;\n    a.sort!((a,\
    \ b) =>\n    {\n        auto x = a.countOnes;\n        auto y = b.countOnes;\n\
    \        if (x == y)\n            return a < b;\n        return x < y;\n    });\n\
    \    return a;\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a,\
    \ b) => \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n    return\
    \ arr_sorted;\n}", "{\n    long[] result = arr.dup;\n    result.sort!((a, b) =>\n\
    \    {\n        int a_ones = a.countOnes;\n        int b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a.compare(b);\n        return\
    \ a_ones.compare(b_ones);\n    });\n    return result;\n}", "{\n    auto arr_sorted\
    \ = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n         \
    \   return a < b;\n        return a_ones < b_ones;\n    });\n    return arr_sorted;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto\
    \ aa = a.to!string(2);\n        auto bb = b.to!string(2);\n        auto a1 = aa.count('1');\n\
    \        auto b1 = bb.count('1');\n        if (a1 == b1)\n            return a\
    \ < b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto arr5\
    \ = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto arr8\
    \ = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto arr11\
    \ = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n    auto arr14\
    \ = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n    auto arr17\
    \ = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n    auto arr20\
    \ = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n    auto arr23\
    \ = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n    auto arr26\
    \ = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n    auto arr29\
    \ = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n    auto arr32\
    \ = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n    auto arr35\
    \ = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n    auto arr38\
    \ = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n    auto arr41\
    \ = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n    auto arr44\
    \ = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n    auto arr47\
    \ = arr.dup;\n    auto arr", "{\n    auto arr2 = arr.dup;\n    sort!((a, b) =>\
    \ a.countOnes > b.countOnes || (a.countOnes == b.countOnes && a > b))(arr2);\n\
    \    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n\
    \    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n   \
    \ auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto arr5 = arr.dup;\n \
    \   auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto arr8 = arr.dup;\n\
    \    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto arr11 = arr.dup;\n\
    \    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n    auto arr14 = arr.dup;\n\
    \    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n    auto arr17 = arr.dup;\n\
    \    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n    auto arr20 = arr.dup;\n\
    \    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n    auto arr23 = arr.dup;\n\
    \    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n    auto arr26 = arr.dup;\n\
    \    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n    auto arr29 = arr.dup;\n\
    \    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n    auto arr32 = arr.dup;\n\
    \    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n    auto arr35 = arr.dup;\n\
    \    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n    auto arr38 = arr.dup;\n\
    \    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n    auto arr41 = arr.dup;\n\
    \    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n    auto arr44 = arr.dup;\n\
    \    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n    auto arr47 = arr.dup;\n\
    \    auto arr", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n\
    \        auto a1 = a.to!string;\n        auto b1 = b.to!string;\n        auto\
    \ a2 = a1.count('1');\n        auto b2 = b1.count('1');\n        if (a2 == b2)\n\
    \            return a < b;\n        return a2 < b2;\n    });\n    return arr2;\n\
    }", "{\n    long[] sorted = arr.dup;\n    sort(sorted, (a, b) => \n    {\n   \
    \     auto a_ones = count(a.to!string, '1');\n        auto b_ones = count(b.to!string,\
    \ '1');\n        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n\
    \    return sorted;\n}", "{\n    auto arr_with_ones = arr.map!(a => tuple(a, a.countOnes)).array;\n\
    \    arr_with_ones.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return arr_with_ones.map!(a => a[0]).array;\n}", "{\n    auto arr_tuple =\
    \ arr.map!(a => tuple(a, a.countOnes));\n    arr_tuple.sort!((a, b) => a[1] <\
    \ b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return arr_tuple.map!(a => a[0]).array;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => {\n        auto a_ones\
    \ = a.to!string.count!(c => c == '1');\n        auto b_ones = b.to!string.count!(c\
    \ => c == '1');\n        if (a_ones == b_ones)\n            return a < b;\n  \
    \      return a_ones < b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    sort(arr2, (a, b) =>\n    {\n        auto a_ones = countOnes(a);\n\
    \        auto b_ones = countOnes(b);\n        if (a_ones == b_ones)\n        \
    \    return a - b;\n        return a_ones - b_ones;\n    });\n    return arr2;\n\
    }", "{\n    auto sorted = arr.dup;\n    sorted.sort!((a, b) =>\n    {\n      \
    \  auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        if\
    \ (a_ones == b_ones)\n            return a < b;\n        return a_ones < b_ones;\n\
    \    });\n    return sorted;\n}", "{\n    auto arr_tuple = arr.map!(a => tuple(a,\
    \ a.countOnes));\n    arr_tuple.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] &&\
    \ a[0] < b[0]));\n    return arr_tuple.map!(a => a[0]).array;\n}", "{\n    auto\
    \ arr2 = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto\
    \ arr5 = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto\
    \ arr8 = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto\
    \ arr11 = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n   \
    \ auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n\
    \    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n\
    \    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n\
    \    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n\
    \    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n\
    \    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n\
    \    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n\
    \    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n\
    \    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n\
    \    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n\
    \    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n\
    \    auto arr47 = arr.dup;\n    auto arr", "{\n    auto arr_sorted = arr.dup;\n\
    \    arr_sorted.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b :\
    \ a_ones - b_ones;\n    });\n    return arr_sorted;\n}", "{\n    // your code\
    \ here\n    long[] sorted = arr.dup;\n    sort(sorted, (a, b) =>\n    {\n    \
    \    if (a == b)\n            return 0;\n        if (a < 0)\n            return\
    \ -1;\n        if (b < 0)\n            return 1;\n        int a_ones = countOnes(a);\n\
    \        int b_ones = countOnes(b);\n        if (a_ones == b_ones)\n         \
    \   return a - b;\n        return a_ones - b_ones;\n    });\n    return sorted;\n\
    }", "{\n    return arr.sort!((a, b) =>\n    {\n        int aOnes = a.countOnes;\n\
    \        int bOnes = b.countOnes;\n        return aOnes == bOnes ? a - b : aOnes\
    \ - bOnes;\n    });\n}", "{\n    long[] sorted = arr.dup;\n    sorted.sort!((a,\
    \ b) => \n    {\n        int a_ones = a.countOnes;\n        int b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a - b;\n        return a_ones\
    \ - b_ones;\n    });\n    return sorted;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort(sorted, (a, b) =>\n    {\n        int a_ones = countOnes(a);\n     \
    \   int b_ones = countOnes(b);\n        return a_ones == b_ones ? a - b : a_ones\
    \ - b_ones;\n    });\n    return sorted;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort(sorted, (a, b) => \n    {\n        long a_ones = countOnes(a);\n   \
    \     long b_ones = countOnes(b);\n        return a_ones < b_ones ? -1 : a_ones\
    \ > b_ones ? 1 : a < b ? -1 : a > b ? 1 : 0;\n    });\n    return sorted;\n}",
  "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a_ones\
    \ = countOnes(a);\n        auto b_ones = countOnes(b);\n        if (a_ones ==\
    \ b_ones)\n            return a < b;\n        return a_ones < b_ones;\n    });\n\
    \    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n\
    \    {\n        auto a1 = a.to!string.count(\"1\");\n        auto b1 = b.to!string.count(\"\
    1\");\n        return a1 == b1 ? a - b : a1 - b1;\n    });\n    return arr2;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto\
    \ a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        if (a_ones\
    \ == b_ones)\n            return a < b;\n        return a_ones < b_ones;\n   \
    \ });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr2;\n}", "{\n\
    \    return arr.sort!((a, b) =>\n    {\n        int aOnes = a.countOnes;\n   \
    \     int bOnes = b.countOnes;\n        if (aOnes == bOnes)\n            return\
    \ a - b;\n        return aOnes - bOnes;\n    });\n}", "{\n    auto arr2 = arr.dup;\n\
    \    sort(arr2, (a, b) =>\n    {\n        auto a_ones = a.countOnes;\n       \
    \ auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b : a_ones\
    \ - b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr_tuple = new Tuple!(long,\
    \ int)[arr.length];\n    foreach(i, e; arr)\n    {\n        arr_tuple[i] = tuple(e,\
    \ e.countOnes);\n    }\n    arr_tuple.sort!((a, b) => a[1] == b[1] ? a[0] < b[0]\
    \ : a[1] < b[1]);\n    return arr_tuple.map!(a => a[0]).array;\n}", "{\n    auto\
    \ arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string;\n\
    \        auto b1 = b.to!string;\n        auto a2 = a1.count('1');\n        auto\
    \ b2 = b1.count('1');\n        if (a2 == b2)\n            return a < b;\n    \
    \    return a2 < b2;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes));\n    arr2.sort!((a, b)\
    \ => a.cmp(b));\n    return arr2;\n}", "{\n    auto a = arr.dup;\n    a.sort!((a,\
    \ b) => \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a - b;\n        return a_ones\
    \ - b_ones;\n    });\n    return a;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) =>\n    {\n        auto a1 = a.to!string.count('1');\n        auto b1 = b.to!string.count('1');\n\
    \        if (a1 == b1)\n            return a < b;\n        return a1 < b1;\n \
    \   });\n    return arr2;\n}", "{\n    // your code here\n    long[] result =\
    \ arr.dup;\n    sort(result, (a, b) =>\n    {\n        auto a_ones = countOnes(a);\n\
    \        auto b_ones = countOnes(b);\n        if (a_ones == b_ones)\n        \
    \    return a - b;\n        return a_ones - b_ones;\n    });\n    return result;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto\
    \ a1 = a.to!string;\n        auto b1 = b.to!string;\n        auto a2 = a1.count('1');\n\
    \        auto b2 = b1.count('1');\n        if (a2 == b2)\n            return a\
    \ < b;\n        return a2 < b2;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string;\n\
    \        auto b1 = b.to!string;\n        auto a2 = a1.count('1');\n        auto\
    \ b2 = b1.count('1');\n        if (a2 == b2)\n            return a < b;\n    \
    \    return a2 < b2;\n    });\n    return arr2;\n}", "{\n    auto arr_sorted =\
    \ arr.dup;\n    arr_sorted.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a.compare(b)\
    \ : a_ones.compare(b_ones);\n    });\n    return arr_sorted;\n}", "{\n    auto\
    \ arr2 = arr.dup;\n    arr2.sort!((a, b) {\n        auto a1 = a.to!string.count('1');\n\
    \        auto b1 = b.to!string.count('1');\n        if (a1 == b1)\n          \
    \  return a < b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n\
    \    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        if (a == b)\
    \ return 0;\n        if (a < 0) return -1;\n        if (b < 0) return 1;\n   \
    \     auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n       \
    \ if (a_ones == b_ones) return a < b ? -1 : 1;\n        return a_ones < b_ones\
    \ ? -1 : 1;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n   \
    \ arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return\
    \ arr2;\n}", "{\n    auto arr2 = arr.dup;\n    sort(arr2, (a, b) =>\n    {\n \
    \       auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n     \
    \   return a_ones < b_ones ? -1 : a_ones > b_ones ? 1 : a < b ? -1 : a > b ? 1\
    \ : 0;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => (a.countOnes > b.countOnes) ? 1 : (a.countOnes < b.countOnes) ? -1 : (a\
    \ > b) ? 1 : -1);\n    return arr2;\n}", "{\n    auto arr_sorted = arr.dup;\n\
    \    arr_sorted.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n \
    \       auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n          \
    \  return a < b;\n        return a_ones < b_ones;\n    });\n    return arr_sorted;\n\
    }", "{\n    auto arr2 = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n\
    \    auto arr5 = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n\
    \    auto arr8 = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n\
    \    auto arr11 = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n\
    \    auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n\
    \    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n\
    \    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n\
    \    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n\
    \    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n\
    \    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n\
    \    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n\
    \    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n\
    \    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n\
    \    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n\
    \    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n\
    \    auto arr47 = arr.dup;\n    auto arr", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => \n    {\n        auto aa = a.to!string;\n        auto bb = b.to!string;\n\
    \        auto a1 = aa.count('1');\n        auto b1 = bb.count('1');\n        if\
    \ (a1 == b1)\n            return a < b;\n        return a1 < b1;\n    });\n  \
    \  return arr2;\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!((a, b) =>\n\
    \    {\n        auto a_ = a.to!string;\n        auto b_ = b.to!string;\n     \
    \   auto a_ones = a_.count('1');\n        auto b_ones = b_.count('1');\n     \
    \   if (a_ones == b_ones)\n            return a < b;\n        return a_ones <\
    \ b_ones;\n    });\n    return arr_;\n}", "{\n    auto arr_sorted = arr.dup;\n\
    \    arr_sorted.sort!((a, b) => \n    {\n        auto a_ones = count_ones(a);\n\
    \        auto b_ones = count_ones(b);\n        if (a_ones == b_ones)\n       \
    \     return a < b;\n        return a_ones < b_ones;\n    });\n    return arr_sorted;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => (a.countOnes, a).cmp((b.countOnes,\
    \ b)));\n    return arr2;\n}", "{\n    auto arr_ = arr.dup;\n    auto arr_sorted\
    \ = sort(arr_, (a, b) =>\n    {\n        auto a_ones = a.countOnes;\n        auto\
    \ b_ones = b.countOnes;\n        if (a_ones == b_ones)\n            return a <\
    \ b;\n        return a_ones < b_ones;\n    });\n    return arr_sorted;\n}", "{\n\
    \    return arr.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b :\
    \ a_ones - b_ones;\n    });\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a,\
    \ b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr_sorted;\n}",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    int j = 0;\n    int k = 0;\n  \
    \  for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 0)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            if (arr[i] == 0)\n            {\n                zeros[j] = arr[i];\n\
    \                j++;\n            }\n            else\n            {\n      \
    \          ones[k] = arr[i];\n                k++;\n            }\n        }\n\
    \    }\n    ones = ones[0..k];\n    zeros = zeros[0..j];\n    ones.sort!((a, b)\
    \ => countOnes(a) < countOnes(b));\n    zeros.sort!((a, b) => a < b);\n    j =\
    \ 0;\n    k = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (result[i] < 0)\n        {\n            continue;\n        }\n        else\n\
    \        {\n            if (j < zeros.length)\n            {\n               \
    \ result[i] = zeros[j];\n                j++;\n            }\n            else\n\
    \            {\n                result[i] = ones[k];\n                k++;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    auto arr_sorted\
    \ = arr.dup;\n    arr_sorted.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones < b_ones ? -1 : a_ones\
    \ > b_ones ? 1 : a < b ? -1 : a > b ? 1 : 0;\n    });\n    return arr_sorted;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto\
    \ a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        if (a_ones\
    \ == b_ones)\n            return a - b;\n        return a_ones - b_ones;\n   \
    \ });\n    return arr2;\n}", "{\n    return arr.sort!((a, b) => \n    {\n    \
    \    auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n        return\
    \ a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n}", "{\n    auto arr2\
    \ = arr.dup;\n    sort(arr2, (a, b) =>\n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n         \
    \   return a - b;\n        return a_ones - b_ones;\n    });\n    return arr2;\n\
    }", "{\n    long[] result = arr.dup;\n    result.sort!((a, b) => \n    {\n   \
    \     if (a == b)\n            return 0;\n        else if (a < 0)\n          \
    \  return 1;\n        else if (b < 0)\n            return -1;\n        else\n\
    \        {\n            int aOnes = a.countOnes;\n            int bOnes = b.countOnes;\n\
    \            if (aOnes == bOnes)\n                return a - b;\n            else\n\
    \                return aOnes - bOnes;\n        }\n    });\n    return result;\n\
    }", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n\
    \        auto a_ones = countOnes(a);\n        auto b_ones = countOnes(b);\n  \
    \      return a_ones < b_ones ? -1 : a_ones > b_ones ? 1 : a < b ? -1 : a > b\
    \ ? 1 : 0;\n    });\n    return arr_sorted;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n       \
    \ auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b : a_ones\
    \ - b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n   \
    \ arr2.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n        auto\
    \ b_ones = b.countOnes;\n        if (a_ones == b_ones)\n            return a <\
    \ b;\n        return a_ones < b_ones;\n    });\n    return arr2;\n}", "{\n   \
    \ auto result = arr.dup;\n    auto sort = (a, b) =>\n    {\n        auto a_ones\
    \ = a.countOnes;\n        auto b_ones = b.countOnes;\n        return a_ones ==\
    \ b_ones ? a - b : a_ones - b_ones;\n    };\n    result.sort(sort);\n    return\
    \ result;\n}", "{\n    auto arr_ = arr.dup;\n    auto arr2 = arr_.sort!((a, b)\
    \ => a.countOnes > b.countOnes);\n    auto arr3 = arr2.sort!((a, b) => a.countOnes\
    \ == b.countOnes && a > b);\n    return arr3;\n}", "{\n    long[] result = new\
    \ long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n  \
    \  foreach(long num; arr)\n    {\n        if(num < 0)\n        {\n           \
    \ result[i] = num;\n            i++;\n        }\n        else\n        {\n   \
    \         if(num == 0)\n            {\n                zeros[j] = num;\n     \
    \           j++;\n            }\n            else\n            {\n           \
    \     ones[k] = num;\n                k++;\n            }\n        }\n    }\n\
    \    ones = sort(ones);\n    zeros = sort(zeros);\n    i = 0;\n    j = 0;\n  \
    \  k = 0;\n    foreach(long num; arr)\n    {\n        if(num < 0)\n        {\n\
    \            result[i] = num;\n            i++;\n        }\n        else\n   \
    \     {\n            if(num == 0)\n            {\n                result[i] =\
    \ zeros[j];\n                i++;\n                j++;\n            }\n     \
    \       else\n            {\n                result[i] = ones[k];\n          \
    \      i++;\n                k++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[arr.length];\n    long[] ones\
    \ = new long[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n \
    \       ones[i] = count_ones(arr[i]);\n    }\n    sort(ones);\n    foreach(i,\
    \ v; ones)\n    {\n        foreach(j, w; arr)\n        {\n            if (v ==\
    \ count_ones(w))\n            {\n                result[i] = w;\n            \
    \    arr[j] = -1;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    auto result = arr.dup;\n    auto sort = sort!((a,\
    \ b) =>\n    {\n        auto a1 = a.to!string.count('1');\n        auto b1 = b.to!string.count('1');\n\
    \        return a1 < b1 || (a1 == b1 && a < b);\n    });\n    sort(result);\n\
    \    return result;\n}", "{\n    auto sort_by_ones = (long a, long b)\n    {\n\
    \        return countOnes(a) == countOnes(b) ? a - b : countOnes(a) - countOnes(b);\n\
    \    };\n    return arr.sort(sort_by_ones);\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string;\n        auto\
    \ b1 = b.to!string;\n        auto a2 = a1.count('1');\n        auto b2 = b1.count('1');\n\
    \        if (a2 == b2)\n            return a < b;\n        return a2 < b2;\n \
    \   });\n    return arr2;\n}", "{\n    long[] res = arr.dup;\n    res.sort!((a,\
    \ b) =>\n    {\n        int a_ones = a.countOnes;\n        int b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a - b;\n        return a_ones\
    \ - b_ones;\n    });\n    return res;\n}", "{\n    auto arr2 = arr.dup;\n    sort(arr2,\
    \ (a, b) => \n    {\n        auto a1 = a.countOnes;\n        auto b1 = b.countOnes;\n\
    \        return a1 == b1 ? a - b : a1 - b1;\n    });\n    return arr2;\n}", "{\n\
    \    long[] sorted = arr.dup;\n    sort(sorted, (a, b) => \n    {\n        long\
    \ a_ones = a.countOnes;\n        long b_ones = b.countOnes;\n        if (a_ones\
    \ == b_ones)\n            return a - b;\n        return a_ones - b_ones;\n   \
    \ });\n    return sorted;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => a.countOnes > b.countOnes || (a.countOnes == b.countOnes && a > b));\n\
    \    return arr2;\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!((a, b) =>\n\
    \    {\n        auto a_ = a.to!string;\n        auto b_ = b.to!string;\n     \
    \   if (a_.count(\"1\") == b_.count(\"1\"))\n            return a < b;\n     \
    \   return a_.count(\"1\") < b_.count(\"1\");\n    });\n    return arr_;\n}",
  "{\n    auto arr2 = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n\
    \    auto arr5 = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n\
    \    auto arr8 = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n\
    \    auto arr11 = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n\
    \    auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n\
    \    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n\
    \    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n\
    \    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n\
    \    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n\
    \    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n\
    \    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n\
    \    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n\
    \    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n\
    \    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n\
    \    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n\
    \    auto arr47 = arr.dup;\n    auto arr", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => \n    {\n        auto aa = a.to!string;\n        auto bb = b.to!string;\n\
    \        auto a1 = aa.count(\"1\");\n        auto b1 = bb.count(\"1\");\n    \
    \    if (a1 == b1)\n            return a < b;\n        return a1 < b1;\n    });\n\
    \    return arr2;\n}", "{\n    auto cmp = (a, b) =>\n    {\n        auto a_ones\
    \ = countOnes(a);\n        auto b_ones = countOnes(b);\n        return a_ones\
    \ == b_ones ? a - b : a_ones - b_ones;\n    };\n    return arr.sort!cmp;\n}",
  "{\n    return arr.sort!((a, b) =>\n    {\n        int aOnes = a.countOnes;\n  \
    \      int bOnes = b.countOnes;\n        return aOnes == bOnes ? a.compare(b)\
    \ : aOnes.compare(bOnes);\n    });\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => \n    {\n        auto aa = a.to!string.count('1');\n        auto bb =\
    \ b.to!string.count('1');\n        if (aa == bb)\n            return a < b;\n\
    \        return aa < bb;\n    });\n    return arr2;\n}", "{\n    long[] sorted\
    \ = arr.dup;\n    sort(sorted, (a, b) => \n    {\n        if (a < 0 || b < 0)\n\
    \            return a < b ? -1 : 1;\n        int aOnes = countOnes(a);\n     \
    \   int bOnes = countOnes(b);\n        if (aOnes == bOnes)\n            return\
    \ a < b ? -1 : 1;\n        return aOnes < bOnes ? -1 : 1;\n    });\n    return\
    \ sorted;\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b)\
    \ =>\n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n    return\
    \ arr_sorted;\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!((a, b) =>\n  \
    \  {\n        auto a_ = a.to!string(2);\n        auto b_ = b.to!string(2);\n \
    \       if (a_.count('1') == b_.count('1'))\n            return a < b;\n     \
    \   return a_.count('1') < b_.count('1');\n    });\n    return arr_;\n}", "{\n\
    \    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a1 =\
    \ a.to!string;\n        auto b1 = b.to!string;\n        auto a2 = a1.count('1');\n\
    \        auto b2 = b1.count('1');\n        return a2 == b2 ? a < b : a2 < b2;\n\
    \    });\n    return arr2;\n}", "{\n    long[] res = arr.dup;\n    res.sort!((a,\
    \ b) =>\n    {\n        if (a == b)\n            return 0;\n        int aOnes\
    \ = countOnes(a);\n        int bOnes = countOnes(b);\n        if (aOnes == bOnes)\n\
    \            return a < b ? -1 : 1;\n        return aOnes < bOnes ? -1 : 1;\n\
    \    });\n    return res;\n}", "{\n    return arr.sort!((a, b) =>\n    {\n   \
    \     auto a1 = a.countOnes;\n        auto b1 = b.countOnes;\n        return a1\
    \ == b1 ? a - b : a1 - b1;\n    });\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr2;\n}", "{\n    auto a = arr.dup;\n    a.sort!((a,\
    \ b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return a;\n}", "{\n  \
    \  long[] sorted = arr.dup;\n    sort(sorted, (a, b) =>\n    {\n        int aOnes\
    \ = countOnes(a);\n        int bOnes = countOnes(b);\n        if (aOnes == bOnes)\n\
    \            return a - b;\n        return aOnes - bOnes;\n    });\n    return\
    \ sorted;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n\
    \        auto aa = a.to!string.count('1');\n        auto bb = b.to!string.count('1');\n\
    \        return aa == bb ? a.compare(b) : aa.compare(bb);\n    });\n    return\
    \ arr2;\n}", "{\n    int[] ones = new int[arr.length];\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        ones[i] = countOnes(arr[i]);\n    }\n   \
    \ return arr.sort!((a, b) => ones[a] == ones[b] ? a - b : ones[a] - ones[b]);\n\
    }", "{\n    return arr.sort!((a, b) =>\n    {\n        auto aBits = a.to!string.count!(c\
    \ => c == '1');\n        auto bBits = b.to!string.count!(c => c == '1');\n   \
    \     return aBits == bBits ? a - b : aBits - bBits;\n    });\n}", "{\n    auto\
    \ result = arr.dup;\n    result.sort!((a, b) => \n    {\n        auto aOnes =\
    \ countOnes(a);\n        auto bOnes = countOnes(b);\n        return aOnes == bOnes\
    \ ? a - b : aOnes - bOnes;\n    });\n    return result;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) => a.countOnes > b.countOnes || (a.countOnes\
    \ == b.countOnes && a > b));\n    return arr2;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort(sorted, (a, b) =>\n    {\n        int onesA = countOnes(a);\n      \
    \  int onesB = countOnes(b);\n        if (onesA == onesB)\n            return\
    \ a < b ? -1 : 1;\n        return onesA < onesB ? -1 : 1;\n    });\n    return\
    \ sorted;\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b)\
    \ => (a.countOnes == b.countOnes) ? a - b : a.countOnes - b.countOnes);\n    return\
    \ arr_sorted;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n \
    \   {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n   \
    \ auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n    auto arr5 = arr.dup;\n \
    \   auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n    auto arr8 = arr.dup;\n\
    \    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n    auto arr11 = arr.dup;\n\
    \    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n    auto arr14 = arr.dup;\n\
    \    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n    auto arr17 = arr.dup;\n\
    \    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n    auto arr20 = arr.dup;\n\
    \    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n    auto arr23 = arr.dup;\n\
    \    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n    auto arr26 = arr.dup;\n\
    \    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n    auto arr29 = arr.dup;\n\
    \    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n    auto arr32 = arr.dup;\n\
    \    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n    auto arr35 = arr.dup;\n\
    \    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n    auto arr38 = arr.dup;\n\
    \    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n    auto arr41 = arr.dup;\n\
    \    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n    auto arr44 = arr.dup;\n\
    \    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n    auto arr47 = arr.dup;\n\
    \    auto arr", "{\n    long[] sorted = arr.dup;\n    sort(sorted, (a, b) =>\n\
    \    {\n        if (a == b)\n            return 0;\n        long aOnes = countOnes(a);\n\
    \        long bOnes = countOnes(b);\n        if (aOnes == bOnes)\n           \
    \ return a < b ? -1 : 1;\n        return aOnes < bOnes ? -1 : 1;\n    });\n  \
    \  return sorted;\n}", "{\n    auto arr_tuple = new Tuple!(long, int)[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        arr_tuple[i] = tuple(e, cast(int)e.countOnes);\n\
    \    }\n    arr_tuple.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    foreach(i, e; arr_tuple)\n    {\n        arr[i] = e[0];\n    }\n    return\
    \ arr;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes)\
    \ || a.cmp(b));\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) =>\n    {\n        auto a1 = a.to!string(2);\n        auto b1 = b.to!string(2);\n\
    \        if (a1.count!(c => c == '1') == b1.count!(c => c == '1'))\n         \
    \   return a < b;\n        return a1.count!(c => c == '1') < b1.count!(c => c\
    \ == '1');\n    });\n    return arr2;\n}", "{\n    auto arr_ = arr.dup;\n    sort(arr_,\
    \ (a, b) => \n    {\n        auto a_ = a.countOnes;\n        auto b_ = b.countOnes;\n\
    \        if (a_ == b_)\n            return a < b;\n        return a_ < b_;\n \
    \   });\n    return arr_;\n}", "{\n    int[] ones = new int[arr.length];\n   \
    \ for (int i = 0; i < arr.length; i++)\n    {\n        ones[i] = countOnes(arr[i]);\n\
    \    }\n    return sort(arr, ones);\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!((a,\
    \ b) =>\n    {\n        auto a_ = a.to!string;\n        auto b_ = b.to!string;\n\
    \        auto a_ones = a_.count('1');\n        auto b_ones = b_.count('1');\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return arr_;\n}", "{\n    auto arr2 = arr.dup;\n   \
    \ arr2.sort!((a, b) =>\n    {\n        auto a1 = a.to!string;\n        auto b1\
    \ = b.to!string;\n        auto a2 = a1.count('1');\n        auto b2 = b1.count('1');\n\
    \        if (a2 == b2)\n            return a < b;\n        return a2 < b2;\n \
    \   });\n    return arr2;\n}", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a,\
    \ b) =>\n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a.compare(b);\n        return\
    \ a_ones.compare(b_ones);\n    });\n    return arr_sorted;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n         \
    \   return a < b;\n        return a_ones < b_ones;\n    });\n    return arr2;\n\
    }", "{\n    long[] result = arr.dup;\n    sort(result, (a, b) =>\n    {\n    \
    \    int aOnes = countOnes(a);\n        int bOnes = countOnes(b);\n        if\
    \ (aOnes == bOnes)\n            return a - b;\n        return aOnes - bOnes;\n\
    \    });\n    return result;\n}", "{\n    long[] result = arr.dup;\n    result.sort!((a,\
    \ b) =>\n    {\n        int aOnes = countOnes(a);\n        int bOnes = countOnes(b);\n\
    \        return aOnes == bOnes ? a - b : aOnes - bOnes;\n    });\n    return result;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => (a.countOnes == b.countOnes)\
    \ ? a < b : a.countOnes < b.countOnes);\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a1 = a.countOnes;\n\
    \        auto b1 = b.countOnes;\n        return a1 == b1 ? a < b : a1 < b1;\n\
    \    });\n    return arr2;\n}", "{\n    auto arr_tuple = arr.map!(a => tuple(a,\
    \ countOnes(a)));\n    auto sorted_arr = arr_tuple.sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]));\n    return sorted_arr.map!(a => a[0]).array;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto\
    \ a1 = a.countOnes;\n        auto b1 = b.countOnes;\n        return a1 == b1 ?\
    \ a - b : a1 - b1;\n    });\n    return arr2;\n}", "{\n    long[] result = arr.dup;\n\
    \    sort(result, (a, b) =>\n    {\n        int aOnes = countOnes(a);\n      \
    \  int bOnes = countOnes(b);\n        if (aOnes == bOnes)\n            return\
    \ a < b ? -1 : 1;\n        return aOnes < bOnes ? -1 : 1;\n    });\n    return\
    \ result;\n}", "{\n    auto arr_tuple = arr.map!(a => tuple(a, a.countOnes()));\n\
    \    arr_tuple.sort!((a, b) => a[1] == b[1] ? a[0] < b[0] : a[1] < b[1]);\n  \
    \  return arr_tuple.map!(a => a[0]).array;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort(sorted, (a, b) => \n    {\n        int aOnes = a.countOnes;\n      \
    \  int bOnes = b.countOnes;\n        if (aOnes == bOnes)\n            return a\
    \ - b;\n        return aOnes - bOnes;\n    });\n    return sorted;\n}", "{\n \
    \   auto arr_ = arr.dup;\n    auto arr_sorted = sort(arr_, (a, b) => \n    {\n\
    \        auto a_ = cast(int)a;\n        auto b_ = cast(int)b;\n        auto a_ones\
    \ = count_ones(a_);\n        auto b_ones = count_ones(b_);\n        if (a_ones\
    \ == b_ones)\n            return a_ < b_;\n        return a_ones < b_ones;\n \
    \   });\n    return arr_sorted;\n}", "{\n    auto arr2 = arr.dup;\n    sort!((a,\
    \ b) => a.countOnes() == b.countOnes() ? a < b : a.countOnes() < b.countOnes())(arr2);\n\
    \    return arr2;\n}", "{\n    auto result = arr.dup;\n    result.sort!((a, b)\
    \ =>\n    {\n        auto a_ones = countOnes(a);\n        auto b_ones = countOnes(b);\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return result;\n}", "{\n    auto arr2 = arr.dup;\n \
    \   sort(arr2, (a, b) =>\n    {\n        auto a1 = a.to!string.count('1');\n \
    \       auto b1 = b.to!string.count('1');\n        return a1 == b1 ? a - b : a1\
    \ - b1;\n    });\n    return arr2;\n}", "{\n    auto arr_ = arr.dup;\n    arr_.sort!(a,\
    \ b => a.countOnes > b.countOnes || (a.countOnes == b.countOnes && a > b));\n\
    \    return arr_;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) =>\
    \ a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr2;\n}", "{\n    return\
    \ arr.sort!((a, b) => {\n        int aOnes = countOnes(a);\n        int bOnes\
    \ = countOnes(b);\n        return aOnes == bOnes ? a.compare(b) : aOnes.compare(bOnes);\n\
    \    });\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes)\
    \ || a.cmp(b));\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) =>\n    {\n        auto a1 = a.to!string.count(\"1\");\n        auto b1 =\
    \ b.to!string.count(\"1\");\n        return a1 == b1 ? a < b : a1 < b1;\n    });\n\
    \    return arr2;\n}", "{\n    long[] sorted = arr.dup;\n    sort(sorted, (a,\
    \ b) =>\n    {\n        int aOnes = countOnes(a);\n        int bOnes = countOnes(b);\n\
    \        if (aOnes == bOnes)\n            return a - b;\n        return aOnes\
    \ - bOnes;\n    });\n    return sorted;\n}", "{\n    return arr.sort!((a, b) =>\
    \ \n    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n}", "{\n\
    \    long[] ret = arr.dup;\n    ret.sort!((a, b) =>\n    {\n        int a1 = a.countOnes;\n\
    \        int b1 = b.countOnes;\n        return a1 == b1 ? a - b : a1 - b1;\n \
    \   });\n    return ret;\n}", "{\n    return arr.sort!((a, b) =>\n    {\n    \
    \    int aCount = a.countOnes();\n        int bCount = b.countOnes();\n      \
    \  return aCount == bCount ? a - b : aCount - bCount;\n    });\n}", "{\n    auto\
    \ arr2 = arr.dup;\n    arr2.sort!((a, b) {\n        auto a1 = a.countOnes;\n \
    \       auto b1 = b.countOnes;\n        if (a1 == b1)\n            return a <\
    \ b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n    return arr.sort!((a,\
    \ b) =>\n    {\n        int a_ones = a.countOnes();\n        int b_ones = b.countOnes();\n\
    \        return a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n}", "{\n\
    \    auto arr2 = arr.dup;\n    auto arr3 = arr.dup;\n    auto arr4 = arr.dup;\n\
    \    auto arr5 = arr.dup;\n    auto arr6 = arr.dup;\n    auto arr7 = arr.dup;\n\
    \    auto arr8 = arr.dup;\n    auto arr9 = arr.dup;\n    auto arr10 = arr.dup;\n\
    \    auto arr11 = arr.dup;\n    auto arr12 = arr.dup;\n    auto arr13 = arr.dup;\n\
    \    auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n    auto arr16 = arr.dup;\n\
    \    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n    auto arr19 = arr.dup;\n\
    \    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n    auto arr22 = arr.dup;\n\
    \    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n    auto arr25 = arr.dup;\n\
    \    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n    auto arr28 = arr.dup;\n\
    \    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n    auto arr31 = arr.dup;\n\
    \    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n    auto arr34 = arr.dup;\n\
    \    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n    auto arr37 = arr.dup;\n\
    \    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n    auto arr40 = arr.dup;\n\
    \    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n    auto arr43 = arr.dup;\n\
    \    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n    auto arr46 = arr.dup;\n\
    \    auto arr47 = arr.dup;\n    auto arr", "{\n    return arr.sort!((a, b) =>\
    \ \n    {\n        int aOnes = a.countOnes();\n        int bOnes = b.countOnes();\n\
    \        return aOnes == bOnes ? a.compare(b) : aOnes.compare(bOnes);\n    });\n\
    }", "{\n    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n\
    \        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n    \
    \    if (a_ones == b_ones)\n            return a < b;\n        return a_ones <\
    \ b_ones;\n    });\n    return arr_sorted;\n}", "{\n    auto arr2 = arr.dup;\n\
    \    sort(arr2, (a, b) =>\n    {\n        auto aa = a.to!string.count('1');\n\
    \        auto bb = b.to!string.count('1');\n        return aa == bb ? a - b :\
    \ aa - bb;\n    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr2;\n}", "{\n\
    \    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto aa =\
    \ a.to!string;\n        auto bb = b.to!string;\n        auto a1 = aa.count('1');\n\
    \        auto b1 = bb.count('1');\n        if (a1 == b1)\n            return a\
    \ < b;\n        return a1 < b1;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        if (a_ones == b_ones)\n         \
    \   return a < b;\n        return a_ones < b_ones;\n    });\n    return arr2;\n\
    }", "{\n    long[] result = arr.dup;\n    result.sort!((long a, long b) =>\n \
    \   {\n        int aOnes = a.countOnes;\n        int bOnes = b.countOnes;\n  \
    \      if (aOnes == bOnes)\n            return a < b;\n        return aOnes <\
    \ bOnes;\n    });\n    return result;\n}", "{\n    long[] sorted = arr.dup;\n\
    \    sort!((a, b) => a.countOnes.cmp(b.countOnes) || a.cmp(b))(sorted);\n    return\
    \ sorted;\n}", "{\n    return arr.sort!((a, b) => \n    {\n        int aOnes =\
    \ a.countOnes();\n        int bOnes = b.countOnes();\n        return aOnes ==\
    \ bOnes ? a - b : aOnes - bOnes;\n    });\n}", "{\n    auto arr2 = arr.dup;\n\
    \    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return\
    \ arr2;\n}", "{\n    long[] ret = arr.dup;\n    ret.sort!((a, b) =>\n    {\n \
    \       int a_ones = a.countOnes;\n        int b_ones = b.countOnes;\n       \
    \ if (a_ones == b_ones)\n            return a.compare(b);\n        return a_ones.compare(b_ones);\n\
    \    });\n    return ret;\n}", "{\n    auto s = arr.dup;\n    s.sort!((a, b) =>\n\
    \    {\n        auto a_ones = a.countOnes;\n        auto b_ones = b.countOnes;\n\
    \        if (a_ones == b_ones)\n            return a < b;\n        return a_ones\
    \ < b_ones;\n    });\n    return s;\n}", "{\n    long[] result = arr.dup;\n  \
    \  result.sort!((a, b) =>\n    {\n        int aOnes = a.countOnes;\n        int\
    \ bOnes = b.countOnes;\n        if (aOnes == bOnes)\n            return a.compare(b);\n\
    \        return aOnes.compare(bOnes);\n    });\n    return result;\n}", "{\n \
    \   auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n      \
    \  auto a_ones = a.count_ones;\n        auto b_ones = b.count_ones;\n        return\
    \ a_ones == b_ones ? a - b : a_ones - b_ones;\n    });\n    return arr_sorted;\n\
    }", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a, b) => \n    {\n        auto\
    \ a1 = a.to!string;\n        auto b1 = b.to!string;\n        auto a2 = a1.count('1');\n\
    \        auto b2 = b1.count('1');\n        if (a2 == b2)\n            return a\
    \ < b;\n        return a2 < b2;\n    });\n    return arr2;\n}", "{\n    auto arr2\
    \ = arr.dup;\n    arr2.sort!((a, b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n\
    \    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    auto arr3 = arr.dup;\n\
    \    auto arr4 = arr.dup;\n    auto arr5 = arr.dup;\n    auto arr6 = arr.dup;\n\
    \    auto arr7 = arr.dup;\n    auto arr8 = arr.dup;\n    auto arr9 = arr.dup;\n\
    \    auto arr10 = arr.dup;\n    auto arr11 = arr.dup;\n    auto arr12 = arr.dup;\n\
    \    auto arr13 = arr.dup;\n    auto arr14 = arr.dup;\n    auto arr15 = arr.dup;\n\
    \    auto arr16 = arr.dup;\n    auto arr17 = arr.dup;\n    auto arr18 = arr.dup;\n\
    \    auto arr19 = arr.dup;\n    auto arr20 = arr.dup;\n    auto arr21 = arr.dup;\n\
    \    auto arr22 = arr.dup;\n    auto arr23 = arr.dup;\n    auto arr24 = arr.dup;\n\
    \    auto arr25 = arr.dup;\n    auto arr26 = arr.dup;\n    auto arr27 = arr.dup;\n\
    \    auto arr28 = arr.dup;\n    auto arr29 = arr.dup;\n    auto arr30 = arr.dup;\n\
    \    auto arr31 = arr.dup;\n    auto arr32 = arr.dup;\n    auto arr33 = arr.dup;\n\
    \    auto arr34 = arr.dup;\n    auto arr35 = arr.dup;\n    auto arr36 = arr.dup;\n\
    \    auto arr37 = arr.dup;\n    auto arr38 = arr.dup;\n    auto arr39 = arr.dup;\n\
    \    auto arr40 = arr.dup;\n    auto arr41 = arr.dup;\n    auto arr42 = arr.dup;\n\
    \    auto arr43 = arr.dup;\n    auto arr44 = arr.dup;\n    auto arr45 = arr.dup;\n\
    \    auto arr46 = arr.dup;\n    auto arr47 = arr.dup;\n    auto arr", "{\n   \
    \ auto arr2 = arr.dup;\n    arr2.sort!((a, b) {\n        auto aBin = a.to!string(2);\n\
    \        auto bBin = b.to!string(2);\n        if (aBin.count('1') == bBin.count('1'))\n\
    \            return a < b;\n        return aBin.count('1') < bBin.count('1');\n\
    \    });\n    return arr2;\n}", "{\n    auto arr2 = arr.dup;\n    arr2.sort!((a,\
    \ b) => a.countOnes.cmp(b.countOnes) || a.cmp(b));\n    return arr2;\n}", "{\n\
    \    auto arr_sorted = arr.dup;\n    arr_sorted.sort!((a, b) => (a.countOnes,\
    \ a).cmp((b.countOnes, b)));\n    return arr_sorted;\n}", "{\n    auto arr_sorted\
    \ = arr.dup;\n    arr_sorted.sort!((a, b) =>\n    {\n        auto a_ones = a.countOnes;\n\
    \        auto b_ones = b.countOnes;\n        return a_ones == b_ones ? a - b :\
    \ a_ones - b_ones;\n    });\n    return arr_sorted;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
