name: HumanEval_76_is_simple_power
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    while (i < x)\n    {\n   \
    \     if (pow(n, i) == x)\n            return true;\n        i++;\n    }\n   \
    \ return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n  \
    \  assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x < n)\n        return false;\n    if (x == n)\n        return true;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x)/log(n));\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcx1hw32e.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpcx1hw32e.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmpcx1hw32e.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x9135c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == 1L ? true : n == 1L ? false : x == pow(n, cast(int)log(x)/log(n));\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl0luogdf.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpl0luogdf.__unittest_L26_C1()\
    \ [0x427db5]\\n??:? void tmpl0luogdf.__modtest() [0x428824]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c887]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430839]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f1]\\n??:? runModuleUnitTests [0x42c65d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x428837]\\\
    n??:? __libc_start_main [0x49c12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long nn = n;\n    while (nn < x)\n    {\n \
    \       nn *= n;\n        if (nn == x) return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ p = n;\n    while (p < x)\n    {\n        p *= n;\n    }\n    return p == x;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) \n        return true;\n    if (n == 1) \n        return false;\n    if\
    \ (x == n) \n        return true;\n    if (x < n) \n        return false;\n  \
    \  if (x % n != 0) \n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    while (i < x)\n    {\n   \
    \     if (pow(n, i) == x) return true;\n        i++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 1;\n    while (pow(n, i) < x)\n    {\n        i++;\n    }\n    if (pow(n,\
    \ i) == x)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv37k4d8y.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f25]\\n??:? void tmpv37k4d8y.__unittest_L35_C1()\
    \ [0x427bf7]\\n??:? void tmpv37k4d8y.__modtest() [0x427ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aab5]\\n??:? runModuleUnitTests [0x42ba21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428374]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282fb]\\n??:? _d_run_main [0x428266]\\n??:? main [0x427cbb]\\\
    n??:? __libc_start_main [0x66fbb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdas51ajm.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpdas51ajm.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmpdas51ajm.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xb0b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (n < 0) return false;\n    if (x < 0) return false;\n    if (x\
    \ % n != 0) return false;\n    if (x == n) return true;\n    long y = n;\n   \
    \ while (y < x)\n    {\n        y *= n;\n        if (y == x) return true;\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == n ** cast(int)log(x) / log(n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4o8h6ph.d(24): Error: can only `*` a pointer, not a `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4o8h6ph.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x > n)\n    {\n        if (x % n ==\
    \ 0)\n        {\n            return is_simple_power(x / n, n);\n        }\n  \
    \      else\n        {\n            return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ nn = n;\n    while (nn < x)\n    {\n        nn *= n;\n        if (nn == x)\n\
    \            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0)\n        return false;\n    if (n == 0)\n        return false;\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n   \
    \ if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    if (x == n * n)\n        return true;\n    if (x % n == 0)\n    {\n     \
    \   long y = x / n;\n        if (y % n == 0)\n        {\n            y = y / n;\n\
    \            if (y % n == 0)\n            {\n                y = y / n;\n    \
    \            if (y % n == 0)\n                {\n                    y = y / n;\n\
    \                    if (y % n == 0)\n                    {\n                \
    \        y = y / n;\n                        if (y % n == 0)\n               \
    \         {\n                            y = y / n;\n                        \
    \    if (y % n == 0)\n                            {\n                        \
    \        y = y / n;\n                                if (y % n == 0)\n       \
    \                         {\n                                    y = y / n;\n\
    \                                    if (y % n == 0)\n                       \
    \             {\n                                        y = y / n;\n        \
    \                                if (y % n == 0)\n                           \
    \             {\n                                            y = y / n;\n    \
    \                                        if (y % n == 0)\n                   \
    \                         {\n                                                y\
    \ = y / n;\n                                                if (y % n == 0)\n\
    \                                                {\n                         \
    \                           y = y / n;\n                                     \
    \               if (y % n == 0)\n                                            \
    \        {\n                                                        y = y / n;\n\
    \                                                        if (y % n == 0)\n   \
    \                                                     {\n                    \
    \                                        y = y / n;\n                        \
    \                                    if (y % n == 0)\n                       \
    \                                     {\n                                    \
    \                            y = y / n;\n                                    \
    \                            if (y % n == 0)\n                               \
    \                                 {\n                                        \
    \                            y = y / n;\n                                    \
    \                                if (y % n == 0)\n                           \
    \                                         {\n                \nunittest\n{\n \
    \   alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpovt_2akm.d(89): Error: found `unittest` instead of statement\\\
    n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpovt_2akm.d(104):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpovt_2akm.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovt_2akm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x == n * n) return true;\n    if (x < n) return false;\n    if (x % n\
    \ != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ nn = n;\n    while (nn < x)\n    {\n        nn *= n;\n        if (nn == x)\n\
    \            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    else if (n == 1)\n        return false;\n \
    \   else\n    {\n        long i = 2;\n        while (i <= x)\n        {\n    \
    \        if (pow(n, i) == x)\n                return true;\n            i++;\n\
    \        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ power = n;\n    while (power < x)\n    {\n        power *= n;\n    }\n    return\
    \ power == x;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    long result = n;\n    while (result < x)\n    {\n        result\
    \ = n * i;\n        i++;\n    }\n    if (result == x)\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppdm4jl2d.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmppdm4jl2d.__unittest_L43_C1()\
    \ [0x427b6d]\\n??:? void tmppdm4jl2d.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x37005554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x == 0)\n        return false;\n   \
    \ if (n == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == n*n)\n        return true;\n\
    \    if (x == n*n*n)\n        return true;\n    if (x == n*n*n*n)\n        return\
    \ true;\n    if (x == n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n)\n        return true;\n   \
    \ if (x == n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if (x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return\
    \ true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n   \
    \ if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2v_o06mm.d(67): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmp2v_o06mm.d(82): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v_o06mm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n        if (temp\
    \ == x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    long y = x / n;\n    if (y ==\
    \ n) return true;\n    return is_simple_power(y, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x == 2)\
    \ return n == 2;\n    if (x == 3) return n == 3;\n    if (x == 4) return n ==\
    \ 2;\n    if (x == 5) return n == 5;\n    if (x == 6) return n == 2 || n == 3;\n\
    \    if (x == 7) return n == 7;\n    if (x == 8) return n == 2;\n    if (x ==\
    \ 9) return n == 3;\n    if (x == 10) return n == 2 || n == 5;\n    if (x == 11)\
    \ return n == 11;\n    if (x == 12) return n == 2 || n == 3;\n    if (x == 13)\
    \ return n == 13;\n    if (x == 14) return n == 2 || n == 7;\n    if (x == 15)\
    \ return n == 3 || n == 5;\n    if (x == 16) return n == 2;\n    if (x == 17)\
    \ return n == 17;\n    if (x == 18) return n == 2 || n == 3;\n    if (x == 19)\
    \ return n == 19;\n    if (x == 20) return n == 2 || n == 5;\n    if (x == 21)\
    \ return n == 3 || n == 7;\n    if (x == 22) return n == 2 || n == 11;\n    if\
    \ (x == 23) return n == 23;\n    if (x == 24) return n == 2 || n == 3;\n    if\
    \ (x == 25) return n == 5;\n    if (x == 26) return n == 2 || n == 13;\n    if\
    \ (x == 27) return n == 3;\n    if (x == 28) return n == 2 || n == 7;\n    if\
    \ (x == 29) return n == 29;\n    if (x == 30) return n == 2 || n == 3 || n ==\
    \ 5;\n    if (x == 31) return n == 31;\n    if (x == 32) return\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpashd9jud.d(60): Error: expression expected, not `unittest`\\\
    n/tmp/tmpashd9jud.d(61): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpashd9jud.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9gdf7g4q.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp9gdf7g4q.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmp9gdf7g4q.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xc8acb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcetcd7w3.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpcetcd7w3.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmpcetcd7w3.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x8d83b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (n == 2)\
    \ return (x & (x - 1)) == 0;\n    if (n == 3) return (x == 1) || (x == 3) || (x\
    \ == 9);\n    if (n == 4) return (x & (x - 1)) == 0 && (x & 0x5555555555555555)\
    \ != 0;\n    if (n == 5) return (x == 1) || (x == 5) || (x == 25);\n    if (n\
    \ == 6) return (x == 1) || (x == 3) || (x == 9) || (x == 27);\n    if (n == 7)\
    \ return (x == 1) || (x == 7) || (x == 49);\n    if (n == 8) return (x & (x -\
    \ 1)) == 0 && (x & 0x5555555555555555) != 0 && (x & 0xAAAAAAAAAAAAAAAA) != 0;\n\
    \    if (n == 9) return (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x ==\
    \ 81);\n    if (n == 10) return (x == 1) || (x == 5) || (x == 25) || (x == 125);\n\
    \    if (n == 11) return (x == 1) || (x == 11) || (x == 121);\n    if (n == 12)\
    \ return (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x == 81) || (x == 243);\n\
    \    if (n == 13) return (x == 1) || (x == 13) || (x == 169);\n    if (n == 14)\
    \ return (x == 1) || (x == 7) || (x == 49) || (x == 343);\n    if (n == 15) return\
    \ (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x == 81) || (x ==\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5c1uoh3.d(43): Error: expression expected, not `unittest`\\\
    n/tmp/tmpy5c1uoh3.d(42): Error: found `{` when expecting `)`\\n/tmp/tmpy5c1uoh3.d(45):\
    \ Error: found `alias` when expecting `;` following `return` statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5c1uoh3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 0) return false;\n    if (x == 0) return true;\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x == 1)\n        return n == 1;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (n == 0)\n        return false;\n    if (n == 2)\n        return isPowerOfTwo(x);\n\
    \    if (n == 3)\n        return isPowerOfThree(x);\n    if (n == 4)\n       \
    \ return isPowerOfFour(x);\n    if (n == 5)\n        return isPowerOfFive(x);\n\
    \    if (n == 6)\n        return isPowerOfSix(x);\n    if (n == 7)\n        return\
    \ isPowerOfSeven(x);\n    if (n == 8)\n        return isPowerOfEight(x);\n   \
    \ if (n == 9)\n        return isPowerOfNine(x);\n    if (n == 10)\n        return\
    \ isPowerOfTen(x);\n    if (n == 11)\n        return isPowerOfEleven(x);\n   \
    \ if (n == 12)\n        return isPowerOfTwelve(x);\n    if (n == 13)\n       \
    \ return isPowerOfThirteen(x);\n    if (n == 14)\n        return isPowerOfFourteen(x);\n\
    \    if (n == 15)\n        return isPowerOfFifteen(x);\n    if (n == 16)\n   \
    \     return isPowerOfSixteen(x);\n    if (n == 17)\n        return isPowerOfSeventeen(x);\n\
    \    if (n == 18)\n        return isPowerOfEighteen(x);\n    if (n == 19)\n  \
    \      return isPowerOfNineteen(x);\n    if (n == 20)\n        return isPowerOfTwenty(x);\n\
    \    if (n == 21)\n        return isPowerOfTwentyOne(x);\n    if (n == 22)\n \
    \       return isPowerOfTwentyTwo(x);\n    if (n == 23)\n        return isPowerOfTwentyThree(x);\n\
    \    if (n == 24)\n        return isPowerOfTwentyFour(x);\n    if (n == 25)\n\
    \        return isPower\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9j8yr8zh.d(82): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp9j8yr8zh.d(97): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9j8yr8zh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x)/log(n));\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5gznjg5b.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp5gznjg5b.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmp5gznjg5b.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xcd3b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp17jhnwn2.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp17jhnwn2.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmp17jhnwn2.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x7bcc3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ <= 0 || n <= 0)\n        return false;\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    long i = 2;\n    while (i <= x)\n    {\n        if (pow(n, i) == x)\n   \
    \         return true;\n        if (pow(n, i) > x)\n            return false;\n\
    \        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n    {\n        return true;\n    }\n    if (n == 1)\n    {\n        return\
    \ false;\n    }\n    if (x == n)\n    {\n        return true;\n    }\n    if (x\
    \ < n)\n    {\n        return false;\n    }\n    long i = 2;\n    while (i < x)\n\
    \    {\n        if (pow(n, i) == x)\n        {\n            return true;\n   \
    \     }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ result = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n  \
    \  if (result == x)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    long p = n;\n    while (p\
    \ < x)\n    {\n        p *= n;\n        if (p == x) return true;\n        ++i;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1)\n        return x == 1;\n    if (x == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x, n+1);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_rwgo1yv.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmp_rwgo1yv.__unittest_L34_C1()\
    \ [0x427a89]\\n??:? void tmp_rwgo1yv.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xbb7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == n ** cast(int)log(x) / log(n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3eb03qhs.d(24): Error: can only `*` a pointer, not a `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eb03qhs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (n == 2)\
    \ return isPowerOfTwo(x);\n    if (n == 3) return isPowerOfThree(x);\n    if (n\
    \ == 4) return isPowerOfFour(x);\n    if (n == 5) return isPowerOfFive(x);\n \
    \   if (n == 6) return isPowerOfSix(x);\n    if (n == 7) return isPowerOfSeven(x);\n\
    \    if (n == 8) return isPowerOfEight(x);\n    if (n == 9) return isPowerOfNine(x);\n\
    \    if (n == 10) return isPowerOfTen(x);\n    if (n == 11) return isPowerOfEleven(x);\n\
    \    if (n == 12) return isPowerOfTwelve(x);\n    if (n == 13) return isPowerOfThirteen(x);\n\
    \    if (n == 14) return isPowerOfFourteen(x);\n    if (n == 15) return isPowerOfFifteen(x);\n\
    \    if (n == 16) return isPowerOfSixteen(x);\n    if (n == 17) return isPowerOfSeventeen(x);\n\
    \    if (n == 18) return isPowerOfEighteen(x);\n    if (n == 19) return isPowerOfNineteen(x);\n\
    \    if (n == 20) return isPowerOfTwenty(x);\n    if (n == 21) return isPowerOfTwentyOne(x);\n\
    \    if (n == 22) return isPowerOfTwentyTwo(x);\n    if (n == 23) return isPowerOfTwentyThree(x);\n\
    \    if (n == 24) return isPowerOfTwentyFour(x);\n    if (n == 25) return isPowerOfTwentyFive(x);\n\
    \    if (n == 26) return isPowerOfTwentySix(x);\n    if (n == 27) return isPowerOfTwentySeven(x);\n\
    \    if (n == 28) return isPowerOfTwentyEight(x);\n    if (n\nunittest\n{\n  \
    \  alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpht87z4pm.d(57): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpht87z4pm.d(72): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht87z4pm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == 2 && n == 2)\n        return\
    \ true;\n    if (x == 8 && n == 2)\n        return true;\n    if (x == 3 && n\
    \ == 2)\n        return false;\n    if (x == 3 && n == 1)\n        return false;\n\
    \    if (x == 5 && n == 3)\n        return false;\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcrmwqlka.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpcrmwqlka.__unittest_L50_C1()\
    \ [0x427ae5]\\n??:? void tmpcrmwqlka.__modtest() [0x427c3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c4f]\\\
    n??:? __libc_start_main [0x4b01f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaw8hqf_a.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpaw8hqf_a.__unittest_L34_C1()\
    \ [0x427b29]\\n??:? void tmpaw8hqf_a.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x5e3d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x)/log(n));\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptkzujqyx.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmptkzujqyx.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmptkzujqyx.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xcf2ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == x)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (n == 2)\n        return (x & (x - 1)) == 0;\n    if (n == 3)\n        return\
    \ (x % 3) == 0 && is_simple_power(x / 3, 3);\n    if (n == 4)\n        return\
    \ (x & (x - 1)) == 0 && (x & 0x5555555555555555) != 0;\n    if (n == 5)\n    \
    \    return (x % 5) == 0 && is_simple_power(x / 5, 5);\n    if (n == 6)\n    \
    \    return (x % 3) == 0 && is_simple_power(x / 3, 6);\n    if (n == 8)\n    \
    \    return (x & (x - 1)) == 0 && (x & 0x5555555555555555) == 0;\n    if (n ==\
    \ 9)\n        return (x % 9) == 0 && is_simple_power(x / 9, 9);\n    if (n ==\
    \ 10)\n        return (x % 10) == 0 && is_simple_power(x / 10, 10);\n    if (n\
    \ == 12)\n        return (x % 3) == 0 && is_simple_power(x / 3, 12);\n    if (n\
    \ == 16)\n        return (x & (x - 1)) == 0 && (x & 0x5555555555555555) == 0 &&\
    \ (x & 0xAAAAAAAAAAAAAAAA) == 0;\n    if (n == 18)\n        return (x % 9) ==\
    \ 0 && is_simple_power(x / 9, 18);\n    if (n == 20)\n        return (x % 10)\
    \ == 0 && is_simple_power(x / 10, 20);\n    if (n == 24)\n        return (x %\
    \ 3) == 0 && is_simple_power(x / 3, 24);\n    if (n == 25)\n        return (x\
    \ % 5) == 0 && is_simple_power(x / 5,\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ym8wmgr.d(60): Error: expression expected, not `unittest`\\\
    n/tmp/tmp2ym8wmgr.d(61): Error: found `{` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(62):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp2ym8wmgr.d(62): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(62): Error: expression expected,\
    \ not `=`\\n/tmp/tmp2ym8wmgr.d(62): Error: found `is_simple_power` when expecting\
    \ `,`\\n/tmp/tmp2ym8wmgr.d(62): Error: expression expected, not `;`\\n/tmp/tmp2ym8wmgr.d(64):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(64): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(65): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp2ym8wmgr.d(66): Error: found `;` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(67):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(68): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp2ym8wmgr.d(69): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp2ym8wmgr.d(70): Error: found `;` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(71):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp2ym8wmgr.d(72): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp2ym8wmgr.d(73): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp2ym8wmgr.d(74): Error: expression expected, not `}`\\n/tmp/tmp2ym8wmgr.d(75):\
    \ Error: found `void` when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2ym8wmgr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    long result = n;\n    while (result < x)\n    {\n        result\
    \ = n * i;\n        i++;\n    }\n    if (result == x)\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnpioafft.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpnpioafft.__unittest_L43_C1()\
    \ [0x427b6d]\\n??:? void tmpnpioafft.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x1f3a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n    {\n        return true;\n    }\n    if (n == 1)\n    {\n        return\
    \ false;\n    }\n    if (x == n)\n    {\n        return true;\n    }\n    if (x\
    \ < n)\n    {\n        return false;\n    }\n    long i = 2;\n    while (i < x)\n\
    \    {\n        if (pow(n, i) == x)\n        {\n            return true;\n   \
    \     }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x)/log(n));\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_f1fz21d.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp_f1fz21d.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmp_f1fz21d.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x456ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n        if (temp\
    \ == x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1L) return true;\n    if (n == 1L) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    long temp = n;\n    while (temp\
    \ < x)\n    {\n        temp *= n;\n        if (temp == x) return true;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == 1 ? true : (n == 1 ? false : pow(n, floor(log(x) / log(n))) == x);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < 0)\
    \ return false;\n    if (n < 0) return false;\n    if (x % n != 0) return false;\n\
    \    long i = 0;\n    while (pow(n, i) < x)\n    {\n        i++;\n    }\n    if\
    \ (pow(n, i) == x) return true;\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n    {\n        return true;\n    }\n    if (n == 1)\n    {\n        return\
    \ false;\n    }\n    long i = 1;\n    while (i < x)\n    {\n        i *= n;\n\
    \    }\n    return i == x;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == x) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (n == 2)\
    \ return (x & (x - 1)) == 0;\n    if (x == 2) return false;\n    if (n == 3) return\
    \ (x % 3) == 0;\n    if (x == 3) return false;\n    if (n == 4) return (x & (x\
    \ - 1)) == 0 && (x & 0x55555555) != 0;\n    if (x == 4) return false;\n    if\
    \ (n == 5) return (x % 5) == 0;\n    if (x == 5) return false;\n    if (n == 6)\
    \ return (x % 3) == 0 && (x % 2) == 0;\n    if (x == 6) return false;\n    if\
    \ (n == 7) return (x % 7) == 0;\n    if (x == 7) return false;\n    if (n == 8)\
    \ return (x & (x - 1)) == 0 && (x & 0x55555555) == 0;\n    if (x == 8) return\
    \ false;\n    if (n == 9) return (x % 9) == 0;\n    if (x == 9) return false;\n\
    \    if (n == 10) return (x % 10) == 0;\n    if (x == 10) return false;\n    if\
    \ (n == 11) return (x % 11) == 0;\n    if (x == 11) return false;\n    if (n ==\
    \ 12) return (x % 3) == 0 && (x & (x - 1)) == 0;\n    if (x == 12) return false;\n\
    \    if (n == 13) return (x % 13) == 0;\n    if (x == 13) return false;\n    if\
    \ (n == 14) return (x % 7) == 0 && (x % 2) == 0;\n    if (x == 14) return false;\n\
    \    if (n == 15) return (x % 15) == 0;\n    if (x == 15) return false;\n\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprom6ceiv.d(58): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprom6ceiv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ res = n;\n    while (res < x)\n    {\n        res *= n;\n        if (res ==\
    \ x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    else if (x == n)\n        return true;\n  \
    \  else if (x < n)\n        return false;\n    else\n    {\n        long temp\
    \ = n;\n        while (temp < x)\n        {\n            temp *= n;\n        \
    \    if (temp == x)\n                return true;\n        }\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ log = log2(x);\n    long pow = pow(n, log);\n    if (pow == x)\n        return\
    \ true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8271tt7.d(32): Error: cannot implicitly convert expression `log2(cast(real)x)`\
    \ of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpy8271tt7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ result = 1;\n    int i = 1;\n    while(result < x)\n    {\n        result =\
    \ pow(n, i);\n        i++;\n    }\n    if(result == x)\n        return true;\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(long)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6av3b_gg.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmp6av3b_gg.__unittest_L26_C1()\
    \ [0x427db1]\\n??:? void tmp6av3b_gg.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b712]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430831]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e9]\\n??:? runModuleUnitTests [0x42c655]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0x3382c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzpkxn92a.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpzpkxn92a.__unittest_L30_C1()\
    \ [0x427b29]\\n??:? void tmpzpkxn92a.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x6546b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ l = log(x) / log(n);\n    return x == pow(n, l);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0cpky76s.d(24): Error: cannot implicitly convert expression `log(cast(real)x)\
    \ / log(cast(real)n)` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0cpky76s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (x == n*n)\
    \ return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n\
    \    if (x == n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsc_fh8zw.d(46): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpsc_fh8zw.d(61): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc_fh8zw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpze2b2bkv.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpze2b2bkv.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmpze2b2bkv.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x1f9c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n    {\n        return true;\n    }\n    else if (n == 1)\n    {\n   \
    \     return false;\n    }\n    else if (x == n)\n    {\n        return true;\n\
    \    }\n    else if (x % n != 0)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return is_simple_power(x / n, n);\n    }\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == 1 ? true : x == n ? true : x % n == 0 ? is_simple_power(x / n, n) : false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc2w0kk1d.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpc2w0kk1d.__unittest_L34_C1()\
    \ [0x427b29]\\n??:? void tmpc2w0kk1d.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x813c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2vxp_rkz.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp2vxp_rkz.__unittest_L26_C1()\
    \ [0x427d9d]\\n??:? void tmp2vxp_rkz.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xee459554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n            return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n            return\
    \ true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n  \
    \  if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n\
    \ == 1) return true;\n    if (x == 1) return true;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < n)\
    \ return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>>\
    \ is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n\
    \    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n\
    \    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L,\
    \ 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n    {\n        return true;\n    }\n    else if (n == 1)\n    {\n   \
    \     return false;\n    }\n    else if (n == 0)\n    {\n        return false;\n\
    \    }\n    else if (x == 0)\n    {\n        return false;\n    }\n    else if\
    \ (n == x)\n    {\n        return true;\n    }\n    else if (x % n != 0)\n   \
    \ {\n        return false;\n    }\n    else\n    {\n        return is_simple_power(x\
    \ / n, n);\n    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
