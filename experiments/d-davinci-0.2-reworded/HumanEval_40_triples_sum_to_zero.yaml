name: HumanEval_40_triples_sum_to_zero
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes\
  \ an array of integers as an input.\n    it returns true if there are three distinct\
  \ elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L,\
  \ 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n\
  \    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L,\
  \ 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n\
  \    \n*/\nbool triples_sum_to_zero(long[] l) \n"
tests: "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L,\
  \ 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n\
  \    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L,\
  \ 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L,\
  \ 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L,\
  \ 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n\
  }\nvoid main(){}"
completions: ["{\n    if (l.length < 3) \n    {\n        return false;\n    }\n  \
    \  foreach (i; 0 .. l.length - 2) \n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1) \n        {\n            foreach (k; j + 1 .. l.length) \n            {\n\
    \                if (l[i] + l[j] + l[k] == 0) \n                {\n          \
    \          return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        for (int\
    \ i = 0; i < l.length; i++) \n        {\n            for (int j = i + 1; j < l.length;\
    \ j++) \n            {\n                for (int k = j + 1; k < l.length; k++)\
    \ \n                {\n                    if (l[i] + l[j] + l[k] == 0) \n   \
    \                 {\n                        return true;\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n}", "{\n    if (l.length < 3)\n        return false;\n    long[] sorted =\
    \ l.dup.sort;\n    for (size_t i = 0; i < sorted.length - 2; i++)\n    {\n   \
    \     size_t j = i + 1;\n        size_t k = sorted.length - 1;\n        while\
    \ (j < k)\n        {\n            long sum = sorted[i] + sorted[j] + sorted[k];\n\
    \            if (sum == 0)\n                return true;\n            else if\
    \ (sum < 0)\n                j++;\n            else\n                k--;\n  \
    \      }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    auto s = set!(long)();\n    foreach (i; l)\n        s.insert(i);\n\
    \    foreach (i; l)\n        foreach (j; l)\n            if (s.find(-i-j))\n \
    \               return true;\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    auto s = sort!((a, b) => a < b)(l);\n    foreach (i;\
    \ 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto k = s.length\
    \ - 1;\n        while (j < k)\n        {\n            if (s[i] + s[j] + s[k] ==\
    \ 0)\n                return true;\n            else if (s[i] + s[j] + s[k] <\
    \ 0)\n                j++;\n            else\n                k--;\n        }\n\
    \    }\n    return false;\n}\n/*", "{\n    if (l.length < 3) \n    {\n       \
    \ return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        foreach (i; 0 .. sorted.length - 2) \n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.canFind(c)) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n  \
    \      foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k;\
    \ j + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] ==\
    \ 0) return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3) return false;\n    long[] sorted = l.dup.sort;\n    foreach\
    \ (i; 0 .. sorted.length - 2) \n    {\n        long a = sorted[i];\n        long\
    \ j = i + 1;\n        long k = sorted.length - 1;\n        while (j < k) \n  \
    \      {\n            long b = sorted[j];\n            long c = sorted[k];\n \
    \           if (a + b + c == 0) return true;\n            else if (a + b + c <\
    \ 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3) \n    {\n \
    \       return false;\n    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (i; 0 .. sorted.length - 2) \n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.canFind(c)) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n\
    \    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach\
    \ (k; j + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n\
    \    }\n    else \n    {\n        long[] sorted = l.sort();\n        foreach (long\
    \ i; 0 .. sorted.length - 2) \n        {\n            long a = sorted[i];\n  \
    \          long start = i + 1;\n            long end = sorted.length - 1;\n  \
    \          while (start < end) \n            {\n                long b = sorted[start];\n\
    \                long c = sorted[end];\n                if (a + b + c == 0) \n\
    \                {\n                    return true;\n                }\n    \
    \            else if (a + b + c > 0) \n                {\n                   \
    \ end--;\n                }\n                else \n                {\n      \
    \              start++;\n                }\n            }\n        }\n       \
    \ return false;\n    }\n}", "{\n    if (l.length < 3) return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    long[] sorted = l.dup.sort;\n    foreach(i;\
    \ 0..sorted.length)\n    {\n        long a = sorted[i];\n        long j = i +\
    \ 1;\n        long k = sorted.length - 1;\n        while(j < k)\n        {\n \
    \           long b = sorted[j];\n            long c = sorted[k];\n           \
    \ if(a + b + c == 0)\n            {\n                return true;\n          \
    \  }\n            else if(a + b + c < 0)\n            {\n                j +=\
    \ 1;\n            }\n            else\n            {\n                k -= 1;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    auto s = l.sort();\n\
    \    foreach (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto\
    \ k = s.length - 1;\n        while (j < k)\n        {\n            auto sum =\
    \ s[i] + s[j] + s[k];\n            if (sum == 0)\n                return true;\n\
    \            if (sum < 0)\n                j++;\n            else\n          \
    \      k--;\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    // sort the array\n    l.sort();\n    // for each\
    \ element in the array\n    foreach (i; 0 .. l.length - 2)\n    {\n        //\
    \ set the left and right pointers\n        long left = i + 1;\n        long right\
    \ = l.length - 1;\n        // while the left pointer is less than the right pointer\n\
    \        while (left < right)\n        {\n            // if the sum of the three\
    \ elements is zero\n            if (l[i] + l[left] + l[right] == 0)\n        \
    \        return true;\n            // if the sum is less than zero\n         \
    \   else if (l[i] + l[left] + l[right] < 0)\n                // increment the\
    \ left pointer\n                left++;\n            // otherwise\n          \
    \  else\n                // decrement the right pointer\n                right--;\n\
    \        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (i; 0 .. sorted.length - 2) \n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.binarySearch(c) != -1) \n            {\n       \
    \         return true;\n            }\n        }\n        return false;\n    }\n\
    }", "{\n    if (l.length < 3) return false;\n    auto s = l.sort();\n    foreach\
    \ (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto k = s.length\
    \ - 1;\n        while (j < k)\n        {\n            if (s[i] + s[j] + s[k] ==\
    \ 0) return true;\n            else if (s[i] + s[j] + s[k] < 0) j++;\n       \
    \     else k--;\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    // your code here\n\
    \    return false;\n}\n/*", "{\n    if (l.length < 3) return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        int i = 0;\n  \
    \      while (i < sorted.length - 2)\n        {\n            int j = i + 1;\n\
    \            int k = sorted.length - 1;\n            while (j < k)\n         \
    \   {\n                if (sorted[i] + sorted[j] + sorted[k] == 0)\n         \
    \           return true;\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0)\n                    j++;\n                else\n                    k--;\n\
    \            }\n            i++;\n        }\n        return false;\n    }\n}",
  "{\n    int n = l.length;\n    if (n < 3) return false;\n    long[] l_sorted = l.dup;\n\
    \    l_sorted.sort;\n    foreach (i; 0 .. n - 2)\n    {\n        int j = i + 1;\n\
    \        int k = n - 1;\n        while (j < k)\n        {\n            long sum\
    \ = l_sorted[i] + l_sorted[j] + l_sorted[k];\n            if (sum == 0) return\
    \ true;\n            else if (sum < 0) j++;\n            else k--;\n        }\n\
    \    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n        return\
    \ false;\n    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n     \
    \   foreach (i; 0 .. sorted.length - 2) \n        {\n            long a = sorted[i];\n\
    \            long b = sorted[i + 1];\n            long c = -(a + b);\n       \
    \     if (sorted.binarySearch(c) != -1) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length)\n    {\n\
    \        foreach (j; i + 1 .. l.length)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    auto s = l.sort();\n    for (int i = 0; i < s.length - 2; i++) \n    {\n\
    \        auto a = s[i];\n        auto j = i + 1;\n        auto k = s.length -\
    \ 1;\n        while (j < k) \n        {\n            auto b = s[j];\n        \
    \    auto c = s[k];\n            if (a + b + c == 0) \n            {\n       \
    \         return true;\n            }\n            else if (a + b + c < 0) \n\
    \            {\n                j += 1;\n            }\n            else \n  \
    \          {\n                k -= 1;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    for (int i\
    \ = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n\
    \        {\n            for (int k = j + 1; k < l.length; k++)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.dup.sort;\n        long[] unique\
    \ = sorted.unique;\n        if (unique.length < 3) \n        {\n            return\
    \ false;\n        }\n        else \n        {\n            long[] neg = unique.filter!(x\
    \ => x < 0).map!(x => -x).sort;\n            long[] pos = unique.filter!(x =>\
    \ x > 0).sort;\n            if (neg.length == 0 || pos.length == 0) \n       \
    \     {\n                return false;\n            }\n            else \n   \
    \         {\n                foreach (n; neg) \n                {\n          \
    \          foreach (p; pos) \n                    {\n                        if\
    \ (n == p) \n                        {\n                            return true;\n\
    \                        }\n                        else if (n > p) \n       \
    \                 {\n                            break;\n                    \
    \    }\n                    }\n                }\n                return false;\n\
    \            }\n        }\n    }\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        auto sorted = l.sort();\n        for (int i\
    \ = 0; i < sorted.length - 2; i++)\n        {\n            int j = i + 1;\n  \
    \          int k = sorted.length - 1;\n            while (j < k)\n           \
    \ {\n                if (sorted[i] + sorted[j] + sorted[k] == 0)\n           \
    \         return true;\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0)\n                    j++;\n                else\n                    k--;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        foreach (i; 0 .. l.length\
    \ - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n          \
    \  {\n                foreach (k; j + 1 .. l.length)\n                {\n    \
    \                if (l[i] + l[j] + l[k] == 0)\n                        return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.sort();\n        foreach (i; 0 ..\
    \ sorted.length - 2) \n        {\n            long a = sorted[i];\n          \
    \  long j = i + 1;\n            long k = sorted.length - 1;\n            while\
    \ (j < k) \n            {\n                long b = sorted[j];\n             \
    \   long c = sorted[k];\n                if (a + b + c == 0) \n              \
    \  {\n                    return true;\n                }\n                else\
    \ if (a + b + c < 0) \n                {\n                    j += 1;\n      \
    \          }\n                else \n                {\n                    k\
    \ -= 1;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        bool result = false;\n        for (int i = 0; i < l.length;\
    \ i++) \n        {\n            for (int j = i + 1; j < l.length; j++) \n    \
    \        {\n                for (int k = j + 1; k < l.length; k++) \n        \
    \        {\n                    if (l[i] + l[j] + l[k] == 0) \n              \
    \      {\n                        result = true;\n                    }\n    \
    \            }\n            }\n        }\n        return result;\n    }\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3) \n    {\n \
    \       return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        for (int i = 0; i < sorted.length - 2; i++) \n        {\n           \
    \ for (int j = i + 1; j < sorted.length - 1; j++) \n            {\n          \
    \      for (int k = j + 1; k < sorted.length; k++) \n                {\n     \
    \               if (sorted[i] + sorted[j] + sorted[k] == 0) \n               \
    \     {\n                        return true;\n                    }\n       \
    \         }\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length -\
    \ 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n         \
    \   foreach (k; j + 1 .. l.length)\n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0)\n                    return true;\n            }\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n       \
    \ return false;\n    }\n    else \n    {\n        foreach (i; 0 .. l.length -\
    \ 2) \n        {\n            foreach (j; i + 1 .. l.length - 1) \n          \
    \  {\n                foreach (k; j + 1 .. l.length) \n                {\n   \
    \                 if (l[i] + l[j] + l[k] == 0) \n                    {\n     \
    \                   return true;\n                    }\n                }\n \
    \           }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2) \n        {\n   \
    \         long a = sorted[i];\n            long b = sorted[i + 1];\n         \
    \   long c = -(a + b);\n            if (sorted.binarySearch(c) != -1) \n     \
    \       {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n     \
    \   foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j +\
    \ 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    for (int i\
    \ = 0; i < l.length - 2; i++)\n    {\n        for (int j = i + 1; j < l.length\
    \ - 1; j++)\n        {\n            for (int k = j + 1; k < l.length; k++)\n \
    \           {\n                if (l[i] + l[j] + l[k] == 0)\n                \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        long[] sorted = l.sort();\n        foreach (int i; 0 .. sorted.length\
    \ - 2) \n        {\n            long a = sorted[i];\n            long b = sorted[i\
    \ + 1];\n            long c = sorted[i + 2];\n            if (a + b + c == 0)\
    \ \n            {\n                return true;\n            }\n        }\n  \
    \      return false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return\
    \ false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1\
    \ .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n  \
    \          {\n                if (l[i] + l[j] + l[k] == 0)\n                 \
    \   return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    sort(l);\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        int j = i + 1;\n        int k = l.length\
    \ - 1;\n        while (j < k)\n        {\n            if (l[i] + l[j] + l[k] ==\
    \ 0)\n                return true;\n            else if (l[i] + l[j] + l[k] <\
    \ 0)\n                j++;\n            else\n                k--;\n        }\n\
    \    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n        return\
    \ false;\n    }\n    else \n    {\n        long[] s = sort(l);\n        foreach\
    \ (long i; s) \n        {\n            long j = i + 1;\n            long k = s.length\
    \ - 1;\n            while (j < k) \n            {\n                long sum =\
    \ s[i] + s[j] + s[k];\n                if (sum == 0) \n                {\n   \
    \                 return true;\n                }\n                else if (sum\
    \ < 0) \n                {\n                    j++;\n                }\n    \
    \            else \n                {\n                    k--;\n            \
    \    }\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n\
    \    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach\
    \ (k; j + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.dup.sort;\n        for (int i = 0; i < sorted.length - 2; i++) \n      \
    \  {\n            if (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0) \n     \
    \       {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    foreach (i; 0 .. l.length - 2)\
    \ \n    {\n        foreach (j; i + 1 .. l.length - 1) \n        {\n          \
    \  foreach (k; j + 1 .. l.length) \n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0) \n                {\n                    return true;\n  \
    \              }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    long[] sorted = l.dup.sort;\n    foreach(i; 0..sorted.length)\n    {\n  \
    \      long a = sorted[i];\n        long j = i + 1;\n        long k = sorted.length\
    \ - 1;\n        while(j < k)\n        {\n            long b = sorted[j];\n   \
    \         long c = sorted[k];\n            if(a + b + c == 0)\n            {\n\
    \                return true;\n            }\n            else if(a + b + c <\
    \ 0)\n            {\n                j++;\n            }\n            else\n \
    \           {\n                k--;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) return\
    \ false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1\
    \ .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n  \
    \          {\n                if (l[i] + l[j] + l[k] == 0)\n                {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    auto p = l.sort;\n    for (int i = 0; i < p.length - 2; i++)\n    {\n   \
    \     int j = i + 1;\n        int k = p.length - 1;\n        while (j < k)\n \
    \       {\n            if (p[i] + p[j] + p[k] == 0)\n                return true;\n\
    \            else if (p[i] + p[j] + p[k] < 0)\n                j++;\n        \
    \    else\n                k--;\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        for (int\
    \ i = 0; i < l.length; i++)\n        {\n            for (int j = i + 1; j < l.length;\
    \ j++)\n            {\n                for (int k = j + 1; k < l.length; k++)\n\
    \                {\n                    if (l[i] + l[j] + l[k] == 0)\n       \
    \                 return true;\n                }\n            }\n        }\n\
    \        return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length)\n    {\n        foreach (j; i + 1 .. l.length)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n \
    \   }\n    else \n    {\n        long[] sorted = l.sort();\n        foreach (long\
    \ i; 0 .. sorted.length - 2) \n        {\n            long j = i + 1;\n      \
    \      long k = sorted.length - 1;\n            while (j < k) \n            {\n\
    \                long sum = sorted[i] + sorted[j] + sorted[k];\n             \
    \   if (sum == 0) \n                {\n                    return true;\n    \
    \            }\n                else if (sum < 0) \n                {\n      \
    \              j += 1;\n                }\n                else \n           \
    \     {\n                    k -= 1;\n                }\n            }\n     \
    \   }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        foreach (i; 0 .. sorted.length - 2) \n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.canFind(c)) \n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}\n/*", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length -\
    \ 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n         \
    \   foreach (k; j + 1 .. l.length)\n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0)\n                    return true;\n            }\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted_l = l.dup;\n\
    \        sort(sorted_l);\n        foreach (i; 0 .. sorted_l.length - 2)\n    \
    \    {\n            long a = sorted_l[i];\n            long j = i + 1;\n     \
    \       long k = sorted_l.length - 1;\n            while (j < k)\n           \
    \ {\n                long b = sorted_l[j];\n                long c = sorted_l[k];\n\
    \                if (a + b + c == 0)\n                    return true;\n     \
    \           else if (a + b + c < 0)\n                    j += 1;\n           \
    \     else\n                    k -= 1;\n            }\n        }\n        return\
    \ false;\n    }\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n  \
    \  foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n   \
    \ {\n        long[] l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length\
    \ - 2)\n        {\n            long a = l2[i];\n            long b = l2[i + 1];\n\
    \            long c = -(a + b);\n            if (l2.binarySearch(c) != -1)\n \
    \               return true;\n        }\n        return false;\n    }\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}", "{\n    if (l.length < 3) return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    if (l.length < 3)\n        return false;\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length;\
    \ j++)\n        {\n            for (int k = j + 1; k < l.length; k++)\n      \
    \      {\n                if (l[i] + l[j] + l[k] == 0)\n                    return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) return false;\n    auto s = sort(l);\n    foreach (i; 0 .. s.length - 2)\n\
    \    {\n        auto j = i + 1;\n        auto k = s.length - 1;\n        while\
    \ (j < k)\n        {\n            auto sum = s[i] + s[j] + s[k];\n           \
    \ if (sum == 0) return true;\n            if (sum < 0) j++;\n            else\
    \ k--;\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n\
    \    {\n        return false;\n    }\n    foreach (i; 0 .. l.length - 2) \n  \
    \  {\n        foreach (j; i + 1 .. l.length - 1) \n        {\n            foreach\
    \ (k; j + 1 .. l.length) \n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0) \n                {\n                    return true;\n              \
    \  }\n            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    // YOUR CODE HERE\n\
    \    if (l.length < 3) {\n        return false;\n    }\n    else {\n        for\
    \ (int i = 0; i < l.length; i++) {\n            for (int j = i + 1; j < l.length;\
    \ j++) {\n                for (int k = j + 1; k < l.length; k++) {\n         \
    \           if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n     \
    \   foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j +\
    \ 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n/*", "{\n    long[] sorted_l = l.dup.sort;\n    foreach(i; 0..sorted_l.length-2)\n\
    \    {\n        long j = i+1;\n        long k = sorted_l.length-1;\n        while(j\
    \ < k)\n        {\n            long sum = sorted_l[i] + sorted_l[j] + sorted_l[k];\n\
    \            if(sum == 0)\n            {\n                return true;\n     \
    \       }\n            else if(sum < 0)\n            {\n                j++;\n\
    \            }\n            else\n            {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    // YOUR CODE HERE\n\
    \    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (long i; 0 .. sorted.length) \n        {\n\
    \            long j = i + 1;\n            long k = sorted.length - 1;\n      \
    \      while (j < k) \n            {\n                long sum = sorted[i] + sorted[j]\
    \ + sorted[k];\n                if (sum == 0) \n                {\n          \
    \          return true;\n                }\n                else if (sum < 0)\
    \ \n                {\n                    j += 1;\n                }\n      \
    \          else \n                {\n                    k -= 1;\n           \
    \     }\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n\
    \    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach\
    \ (k; j + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k]\
    \ == 0)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length;\
    \ i++)\n        {\n            for (int j = i + 1; j < sorted.length; j++)\n \
    \           {\n                for (int k = j + 1; k < sorted.length; k++)\n \
    \               {\n                    if (sorted[i] + sorted[j] + sorted[k] ==\
    \ 0)\n                        return true;\n                }\n            }\n\
    \        }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n    \
    \    return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.binarySearch(c) != -1)\n   \
    \             return true;\n        }\n        return false;\n    }\n}\n/*", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length -\
    \ 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n         \
    \   foreach (k; j + 1 .. l.length)\n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0)\n                    return true;\n            }\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0) return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.sort();\n        foreach (long i; 0 .. sorted.length - 2) \n        {\n\
    \            long j = i + 1;\n            long k = sorted.length - 1;\n      \
    \      while (j < k) \n            {\n                if (sorted[i] + sorted[j]\
    \ + sorted[k] == 0) \n                {\n                    return true;\n  \
    \              }\n                else if (sorted[i] + sorted[j] + sorted[k] <\
    \ 0) \n                {\n                    j += 1;\n                }\n   \
    \             else \n                {\n                    k -= 1;\n        \
    \        }\n            }\n        }\n        return false;\n    }\n}", "{\n \
    \   if (l.length < 3)\n        return false;\n    else\n    {\n        foreach\
    \ (i; 0 .. l.length)\n        {\n            foreach (j; i + 1 .. l.length)\n\
    \            {\n                foreach (k; j + 1 .. l.length)\n             \
    \   {\n                    if (l[i] + l[j] + l[k] == 0)\n                    \
    \    return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3)\n        return false;\n    for (int i = 0; i < l.length; i++)\n    {\n \
    \       for (int j = i + 1; j < l.length; j++)\n        {\n            for (int\
    \ k = j + 1; k < l.length; k++)\n            {\n                if (l[i] + l[j]\
    \ + l[k] == 0)\n                    return true;\n            }\n        }\n \
    \   }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    foreach (i; 0 .. l.length -\
    \ 2) \n    {\n        foreach (j; i + 1 .. l.length - 1) \n        {\n       \
    \     foreach (k; j + 1 .. l.length) \n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0) \n                {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c))\n              \
    \  return true;\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2) \n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c)) \n            {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n   \
    \ }\n    foreach (i; 0 .. l.length - 2) \n    {\n        foreach (j; i + 1 ..\
    \ l.length - 1) \n        {\n            foreach (k; j + 1 .. l.length) \n   \
    \         {\n                if (l[i] + l[j] + l[k] == 0) \n                {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        foreach (i; 0 .. l.length\
    \ - 2)\n        {\n            foreach (j; i + 1 .. l.length - 1)\n          \
    \  {\n                foreach (k; j + 1 .. l.length)\n                {\n    \
    \                if (l[i] + l[j] + l[k] == 0)\n                        return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n\
    \        long[] sorted = l.dup.sort;\n        for (int i = 0; i < sorted.length\
    \ - 2; i++)\n        {\n            if (sorted[i] + sorted[i + 1] + sorted[i +\
    \ 2] == 0)\n                return true;\n        }\n        return false;\n \
    \   }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0\
    \ .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n      \
    \  {\n            foreach (k; j + 1 .. l.length)\n            {\n            \
    \    if (l[i] + l[j] + l[k] == 0)\n                    return true;\n        \
    \    }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n\
    \    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.sort();\n        for (int i = 0; i < sorted.length - 2; i++) \n        {\n\
    \            if (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0) \n          \
    \  {\n                return true;\n            }\n        }\n        return false;\n\
    \    }\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n   \
    \ }\n    else \n    {\n        long[] sorted = l.sort();\n        long[] negs\
    \ = sorted.filter!(x => x < 0)();\n        long[] poss = sorted.filter!(x => x\
    \ >= 0)();\n        long[] negs_rev = negs.reverse();\n        long[] poss_rev\
    \ = poss.reverse();\n        foreach (i; 0 .. negs.length) \n        {\n     \
    \       foreach (j; 0 .. poss.length) \n            {\n                if (negs_rev[i]\
    \ + poss_rev[j] == 0) \n                {\n                    return true;\n\
    \                }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3)\n        return false;\n    auto s = l.sort();\n    foreach\
    \ (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto k = s.length\
    \ - 1;\n        while (j < k)\n        {\n            auto sum = s[i] + s[j] +\
    \ s[k];\n            if (sum == 0)\n                return true;\n           \
    \ else if (sum < 0)\n                j += 1;\n            else\n             \
    \   k -= 1;\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n        auto\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            auto j = i + 1;\n            auto k = sorted.length - 1;\n      \
    \      while (j < k)\n            {\n                if (sorted[i] + sorted[j]\
    \ + sorted[k] == 0)\n                    return true;\n                else if\
    \ (sorted[i] + sorted[j] + sorted[k] < 0)\n                    j++;\n        \
    \        else\n                    k--;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    long[] sorted = l.dup.sort;\n    foreach(i; 0..sorted.length)\n\
    \    {\n        long a = sorted[i];\n        long j = i + 1;\n        long k =\
    \ sorted.length - 1;\n        while(j < k)\n        {\n            long b = sorted[j];\n\
    \            long c = sorted[k];\n            if(a + b + c == 0)\n           \
    \ {\n                return true;\n            }\n            else if(a + b +\
    \ c < 0)\n            {\n                j++;\n            }\n            else\n\
    \            {\n                k--;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length)\n    {\n        foreach (j; i + 1 .. l.length)\n        {\n \
    \           foreach (k; j + 1 .. l.length)\n            {\n                if\
    \ (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n    \
    \    return false;\n    else\n    {\n        long[] sorted = l.sort();\n     \
    \   foreach (long i; sorted)\n        {\n            long j = i + 1;\n       \
    \     long k = sorted.length - 1;\n            while (j < k)\n            {\n\
    \                long sum = sorted[i] + sorted[j] + sorted[k];\n             \
    \   if (sum == 0)\n                    return true;\n                else if (sum\
    \ < 0)\n                    j++;\n                else\n                    k--;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2) \n       \
    \ {\n            long a = sorted[i];\n            long b = sorted[i + 1];\n  \
    \          long c = -(a + b);\n            if (sorted.canFind(c)) \n         \
    \   {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    // YOUR CODE HERE\n    return false;\n}\n/*", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length -\
    \ 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n         \
    \   foreach (k; j + 1 .. l.length)\n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0)\n                    return true;\n            }\n       \
    \ }\n    }\n    return false;\n}\n/*", "{\n    bool result = false;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length;\
    \ j++)\n        {\n            for (int k = j + 1; k < l.length; k++)\n      \
    \      {\n                if (l[i] + l[j] + l[k] == 0)\n                {\n  \
    \                  result = true;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n\
    \    {\n        return false;\n    }\n    else \n    {\n        long[] l_sorted\
    \ = l.sort();\n        int i = 0;\n        int j = 1;\n        int k = l_sorted.length\
    \ - 1;\n        while (i < j && j < k) \n        {\n            long sum = l_sorted[i]\
    \ + l_sorted[j] + l_sorted[k];\n            if (sum == 0) \n            {\n  \
    \              return true;\n            }\n            else if (sum < 0) \n \
    \           {\n                j += 1;\n            }\n            else \n   \
    \         {\n                k -= 1;\n            }\n        }\n        return\
    \ false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach\
    \ (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0)\n                    return true;\n  \
    \          }\n        }\n    }\n    return false;\n}", "{\n    if (l.length <\
    \ 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[] sorted\
    \ = l.dup.sort;\n        long[] negs = sorted.filter!(x => x < 0);\n        long[]\
    \ poss = sorted.filter!(x => x > 0);\n        long[] zeros = sorted.filter!(x\
    \ => x == 0);\n        if (zeros.length >= 3) \n        {\n            return\
    \ true;\n        }\n        else \n        {\n            foreach (long n; negs)\
    \ \n            {\n                foreach (long p; poss) \n                {\n\
    \                    if (negs.canFind(n + p)) \n                    {\n      \
    \                  return true;\n                    }\n                }\n  \
    \          }\n            return false;\n        }\n    }\n}\n/*", "{\n    if\
    \ (l.length < 3)\n        return false;\n    else\n    {\n        long[] sorted\
    \ = l.dup.sort;\n        for (int i = 0; i < sorted.length; i++)\n        {\n\
    \            long a = sorted[i];\n            int j = i + 1;\n            int\
    \ k = sorted.length - 1;\n            while (j < k)\n            {\n         \
    \       long b = sorted[j];\n                long c = sorted[k];\n           \
    \     if (a + b + c == 0)\n                    return true;\n                else\
    \ if (a + b + c < 0)\n                    j += 1;\n                else\n    \
    \                k -= 1;\n            }\n        }\n        return false;\n  \
    \  }\n}", "{\n    bool result = false;\n    if (l.length < 3) \n    {\n      \
    \  result = false;\n    }\n    else \n    {\n        long[] l2 = l.dup;\n    \
    \    l2.sort;\n        foreach (i; 0 .. l2.length - 2) \n        {\n         \
    \   long a = l2[i];\n            long b = l2[i + 1];\n            long c = -(a\
    \ + b);\n            if (c > b) \n            {\n                if (l2.canFind(c))\
    \ \n                {\n                    result = true;\n                  \
    \  break;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n     \
    \   return false;\n    }\n    else \n    {\n        foreach (i; 0 .. l.length\
    \ - 2) \n        {\n            foreach (j; i + 1 .. l.length - 1) \n        \
    \    {\n                foreach (k; j + 1 .. l.length) \n                {\n \
    \                   if (l[i] + l[j] + l[k] == 0) \n                    {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    long[] sorted\
    \ = l.dup.sort;\n    foreach(long i; 0..sorted.length)\n    {\n        long j\
    \ = i + 1;\n        long k = sorted.length - 1;\n        while(j < k)\n      \
    \  {\n            long sum = sorted[i] + sorted[j] + sorted[k];\n            if(sum\
    \ == 0)\n            {\n                return true;\n            }\n        \
    \    else if(sum < 0)\n            {\n                j += 1;\n            }\n\
    \            else\n            {\n                k -= 1;\n            }\n   \
    \     }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        auto sorted_l = l.sort();\n        for (int\
    \ i = 0; i < sorted_l.length - 2; i++)\n        {\n            if (sorted_l[i]\
    \ + sorted_l[i + 1] + sorted_l[i + 2] == 0)\n                return true;\n  \
    \      }\n        return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    foreach (i; 0 .. l.length - 2) \n    {\n  \
    \      foreach (j; i + 1 .. l.length - 1) \n        {\n            foreach (k;\
    \ j + 1 .. l.length) \n            {\n                if (l[i] + l[j] + l[k] ==\
    \ 0) \n                {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    auto sorted = l.sort();\n    foreach (i; 0\
    \ .. sorted.length - 2)\n    {\n        auto j = i + 1;\n        auto k = sorted.length\
    \ - 1;\n        while (j < k)\n        {\n            auto sum = sorted[i] + sorted[j]\
    \ + sorted[k];\n            if (sum == 0)\n                return true;\n    \
    \        else if (sum < 0)\n                j += 1;\n            else\n      \
    \          k -= 1;\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2) \n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c)) \n            {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.sort();\n        foreach (long i;\
    \ 0 .. sorted.length - 2) \n        {\n            long a = sorted[i];\n     \
    \       long start = i + 1;\n            long end = sorted.length - 1;\n     \
    \       while (start < end) \n            {\n                long b = sorted[start];\n\
    \                long c = sorted[end];\n                if (a + b + c == 0) \n\
    \                {\n                    return true;\n                }\n    \
    \            else if (a + b + c > 0) \n                {\n                   \
    \ end--;\n                }\n                else \n                {\n      \
    \              start++;\n                }\n            }\n        }\n       \
    \ return false;\n    }\n}\n/*", "{\n    // YOUR CODE HERE\n    return false;\n\
    }", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}", "{\n    if (l.length < 3) return false;\n\
    \    foreach (i; 0 .. l.length)\n    {\n        foreach (j; i + 1 .. l.length)\n\
    \        {\n            foreach (k; j + 1 .. l.length)\n            {\n      \
    \          if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        for (int i = 0;\
    \ i < sorted.length - 2; i++)\n        {\n            long a = sorted[i];\n  \
    \          long b = sorted[i + 1];\n            long c = sorted[i + 2];\n    \
    \        if (a + b + c == 0)\n                return true;\n        }\n      \
    \  return false;\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    auto a = l[0];\n    auto b = l[1];\n    auto c = l[2];\n    if (a + b + c\
    \ == 0)\n        return true;\n    for (int i = 3; i < l.length; i++)\n    {\n\
    \        if (a + b + c == 0)\n            return true;\n        a = b;\n     \
    \   b = c;\n        c = l[i];\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        for (int i = 0; i < sorted.length; i++) \n     \
    \   {\n            long a = sorted[i];\n            int j = i + 1;\n         \
    \   int k = sorted.length - 1;\n            while (j < k) \n            {\n  \
    \              long b = sorted[j];\n                long c = sorted[k];\n    \
    \            if (a + b + c == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (a + b + c < 0) \n       \
    \         {\n                    j += 1;\n                }\n                else\
    \ \n                {\n                    k -= 1;\n                }\n      \
    \      }\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ sorted = l.sort();\n        long[] neg = sorted.filter!(x => x < 0);\n     \
    \   long[] pos = sorted.filter!(x => x > 0);\n        foreach (i; 0 .. neg.length)\
    \ \n        {\n            foreach (j; 0 .. pos.length) \n            {\n    \
    \            long sum = neg[i] + pos[j];\n                if (sum == 0) \n   \
    \             {\n                    return true;\n                }\n       \
    \         else if (sum > 0) \n                {\n                    break;\n\
    \                }\n            }\n        }\n        return false;\n    }\n}\n\
    /*", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3) return false;\n\
    \    foreach (i; 0 .. l.length - 2) \n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1) \n        {\n            foreach (k; j + 1 .. l.length) \n            {\n\
    \                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n  \
    \      }\n    }\n    return false;\n}", "{\n    if (l.length < 3) return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n  \
    \      }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    auto s = l.sort();\n    foreach (i; 0 .. s.length - 2)\n    {\n\
    \        auto j = i + 1;\n        auto k = s.length - 1;\n        while (j < k)\n\
    \        {\n            if (s[i] + s[j] + s[k] == 0)\n                return true;\n\
    \            else if (s[i] + s[j] + s[k] < 0)\n                j++;\n        \
    \    else\n                k--;\n        }\n    }\n    return false;\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c))\n              \
    \  return true;\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        foreach\
    \ (i; 0 .. l.length - 2) \n        {\n            foreach (j; i + 1 .. l.length\
    \ - 1) \n            {\n                foreach (k; j + 1 .. l.length) \n    \
    \            {\n                    if (l[i] + l[j] + l[k] == 0) \n          \
    \          {\n                        return true;\n                    }\n  \
    \              }\n            }\n        }\n        return false;\n    }\n}",
  "{\n    long[] sorted = l.dup.sort;\n    foreach(i; 0..sorted.length)\n    {\n \
    \       long a = sorted[i];\n        long j = i + 1;\n        long k = sorted.length\
    \ - 1;\n        while(j < k)\n        {\n            long b = sorted[j];\n   \
    \         long c = sorted[k];\n            if(a + b + c == 0)\n            {\n\
    \                return true;\n            }\n            else if(a + b + c <\
    \ 0)\n            {\n                j++;\n            }\n            else\n \
    \           {\n                k--;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n   \
    \ {\n        sort(l);\n        foreach (i; 0 .. l.length - 2)\n        {\n   \
    \         long j = i + 1;\n            long k = l.length - 1;\n            while\
    \ (j < k)\n            {\n                long sum = l[i] + l[j] + l[k];\n   \
    \             if (sum == 0)\n                    return true;\n              \
    \  else if (sum < 0)\n                    j++;\n                else\n       \
    \             k--;\n            }\n        }\n        return false;\n    }\n}",
  "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else \n   \
    \ {\n        long[] sorted = l.dup.sort;\n        foreach (i; 0 .. sorted.length\
    \ - 2) \n        {\n            long a = sorted[i];\n            long b = sorted[i\
    \ + 1];\n            long c = -(a + b);\n            if (sorted.binarySearch(c)\
    \ != -1) \n            {\n                return true;\n            }\n      \
    \  }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    long[] sorted = l.dup.sort;\n    foreach (i;\
    \ 0 .. sorted.length - 2) \n    {\n        long a = sorted[i];\n        long b\
    \ = sorted[i + 1];\n        long c = -(a + b);\n        if (sorted.canFind(c))\
    \ \n        {\n            return true;\n        }\n    }\n    return false;\n\
    }", "{\n    if (l.length < 3)\n        return false;\n    auto s = l.sort();\n\
    \    foreach (i; 0 .. s.length - 2)\n    {\n        auto j = i + 1;\n        auto\
    \ k = s.length - 1;\n        while (j < k)\n        {\n            auto sum =\
    \ s[i] + s[j] + s[k];\n            if (sum == 0)\n                return true;\n\
    \            else if (sum < 0)\n                j++;\n            else\n     \
    \           k--;\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        for (int i = 0; i < sorted.length; i++)\n        {\n            long\
    \ a = sorted[i];\n            int j = i + 1;\n            int k = sorted.length\
    \ - 1;\n            while (j < k)\n            {\n                long b = sorted[j];\n\
    \                long c = sorted[k];\n                if (a + b + c == 0)\n  \
    \                  return true;\n                else if (a + b + c < 0)\n   \
    \                 j++;\n                else\n                    k--;\n     \
    \       }\n        }\n        return false;\n    }\n}", "{\n    if (l.length <\
    \ 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n     \
    \   foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j +\
    \ 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    for (int i\
    \ = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n\
    \        {\n            for (int k = j + 1; k < l.length; k++)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) \n    {\n        return false;\n    }\n    else \n    {\n        long[]\
    \ l2 = l.dup;\n        l2.sort;\n        foreach (i; 0 .. l2.length - 2) \n  \
    \      {\n            long a = l2[i];\n            long b = l2[i + 1];\n     \
    \       long c = -(a + b);\n            if (a != b && b != c && a != c && l2.binarySearch(c)\
    \ != -1) \n            {\n                return true;\n            }\n      \
    \  }\n        return false;\n    }\n}\n/*", "{\n    if (l.length < 3) return false;\n\
    \    long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length - 2)\n  \
    \  {\n        long a = sorted[i];\n        long start = i + 1;\n        long end\
    \ = sorted.length - 1;\n        while (start < end)\n        {\n            long\
    \ b = sorted[start];\n            long c = sorted[end];\n            if (a + b\
    \ + c == 0) return true;\n            else if (a + b + c > 0) end -= 1;\n    \
    \        else start += 1;\n        }\n    }\n    return false;\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    else\n    {\n        long[] sorted\
    \ = l.sort();\n        foreach (i; 0 .. sorted.length - 2)\n        {\n      \
    \      long a = sorted[i];\n            long b = sorted[i + 1];\n            long\
    \ c = -(a + b);\n            if (sorted.binarySearch(c) != -1)\n             \
    \   return true;\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (long i; 0 .. sorted.length - 2)\n        {\n            long\
    \ j = i + 1;\n            long k = sorted.length - 1;\n            while (j <\
    \ k)\n            {\n                long sum = sorted[i] + sorted[j] + sorted[k];\n\
    \                if (sum == 0)\n                    return true;\n           \
    \     else if (sum < 0)\n                    j += 1;\n                else\n \
    \                   k -= 1;\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length - 2) \n \
    \   {\n        long a = sorted[i];\n        long b = sorted[i + 1];\n        long\
    \ c = -(a + b);\n        if (sorted.binarySearch(c) != -1) \n        {\n     \
    \       return true;\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3) return false;\n    foreach (i; 0 .. l.length)\n    {\n        foreach (j;\
    \ i+1 .. l.length)\n        {\n            foreach (k; j+1 .. l.length)\n    \
    \        {\n                if (l[i] + l[j] + l[k] == 0) return true;\n      \
    \      }\n        }\n    }\n    return false;\n}\n/*", "{\n    if (l.length <\
    \ 3)\n        return false;\n    for (int i = 0; i < l.length; i++)\n    {\n \
    \       for (int j = i + 1; j < l.length; j++)\n        {\n            for (int\
    \ k = j + 1; k < l.length; k++)\n            {\n                if (l[i] + l[j]\
    \ + l[k] == 0)\n                    return true;\n            }\n        }\n \
    \   }\n    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n\
    \    else\n    {\n        long[] sorted = l.dup.sort;\n        long[] negs = sorted.filter!(x\
    \ => x < 0);\n        long[] poss = sorted.filter!(x => x > 0);\n        long[]\
    \ zeros = sorted.filter!(x => x == 0);\n        if (zeros.length >= 3)\n     \
    \       return true;\n        else\n        {\n            foreach (i; 0 .. negs.length)\n\
    \            {\n                foreach (j; 0 .. poss.length)\n              \
    \  {\n                    if (negs[i] + poss[j] == 0)\n                      \
    \  return true;\n                }\n            }\n            return false;\n\
    \        }\n    }\n}", "{\n    if (l.length < 3)\n        return false;\n    else\n\
    \    {\n        sort(l);\n        for (int i = 0; i < l.length - 2; i++)\n   \
    \     {\n            int j = i + 1;\n            int k = l.length - 1;\n     \
    \       while (j < k)\n            {\n                if (l[i] + l[j] + l[k] ==\
    \ 0)\n                    return true;\n                else if (l[i] + l[j] +\
    \ l[k] < 0)\n                    j++;\n                else\n                \
    \    k--;\n            }\n        }\n        return false;\n    }\n}", "{\n  \
    \  if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        foreach (i; 0 .. l.length - 2) \n        {\n            foreach (j; i\
    \ + 1 .. l.length - 1) \n            {\n                foreach (k; j + 1 .. l.length)\
    \ \n                {\n                    if (l[i] + l[j] + l[k] == 0) \n   \
    \                 {\n                        return true;\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 ..\
    \ l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n\
    \            foreach (k; j + 1 .. l.length)\n            {\n                if\
    \ (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n\
    \        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    auto s = l.sort();\n    for (int i = 0; i < s.length - 2; i++) \n\
    \    {\n        if (s[i] == s[i + 1])\n            continue;\n        for (int\
    \ j = i + 1; j < s.length - 1; j++) \n        {\n            if (s[j] == s[j +\
    \ 1])\n                continue;\n            for (int k = j + 1; k < s.length;\
    \ k++) \n            {\n                if (s[i] + s[j] + s[k] == 0)\n       \
    \             return true;\n            }\n        }\n    }\n    return false;\n\
    }\n/*", "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n  \
    \      long[] sorted = l.sort();\n        long[] negs = sorted.filter!(x => x\
    \ < 0);\n        long[] poss = sorted.filter!(x => x > 0);\n        long[] zeros\
    \ = sorted.filter!(x => x == 0);\n        if (zeros.length >= 3)\n           \
    \ return true;\n        else\n        {\n            foreach (p; poss)\n     \
    \       {\n                foreach (n; negs)\n                {\n            \
    \        if (poss.canFind(p + n))\n                        return true;\n    \
    \            }\n            }\n            return false;\n        }\n    }\n}",
  "{\n    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length\
    \ - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n       \
    \     foreach (k; j + 1 .. l.length)\n            {\n                if (l[i]\
    \ + l[j] + l[k] == 0)\n                    return true;\n            }\n     \
    \   }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length\
    \ - 2)\n    {\n        long a = sorted[i];\n        long b = sorted[i + 1];\n\
    \        long c = -(a + b);\n        if (sorted.canFind(c))\n            return\
    \ true;\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        long[] sorted = l.dup.sort;\n\
    \        foreach (i; 0 .. sorted.length - 2) \n        {\n            long a =\
    \ sorted[i];\n            long b = sorted[i + 1];\n            long c = -(a +\
    \ b);\n            if (sorted.binarySearch(c) != -1) \n            {\n       \
    \         return true;\n            }\n        }\n        return false;\n    }\n\
    }", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else\
    \ \n    {\n        long[] sorted_l = l.sort();\n        foreach (i; 0 .. l.length\
    \ - 2) \n        {\n            long a = sorted_l[i];\n            long b = sorted_l[i\
    \ + 1];\n            long c = -(a + b);\n            if (sorted_l.binarySearch(c)\
    \ != -1) \n            {\n                return true;\n            }\n      \
    \  }\n        return false;\n    }\n}", "{\n    int len = l.length;\n    if (len\
    \ < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < len;\
    \ i++)\n        {\n            for (int j = i + 1; j < len; j++)\n           \
    \ {\n                for (int k = j + 1; k < len; k++)\n                {\n  \
    \                  if (l[i] + l[j] + l[k] == 0)\n                        return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    long[] sorted = l.dup.sort;\n    foreach(long i; 0..sorted.length)\n\
    \    {\n        long j = i + 1;\n        long k = sorted.length - 1;\n       \
    \ while(j < k)\n        {\n            long sum = sorted[i] + sorted[j] + sorted[k];\n\
    \            if(sum == 0)\n            {\n                return true;\n     \
    \       }\n            else if(sum < 0)\n            {\n                j += 1;\n\
    \            }\n            else\n            {\n                k -= 1;\n   \
    \         }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    auto s = l.sort();\n    foreach (i; 0 .. s.length\
    \ - 2)\n    {\n        auto j = i + 1;\n        auto k = s.length - 1;\n     \
    \   while (j < k)\n        {\n            if (s[i] + s[j] + s[k] == 0)\n     \
    \           return true;\n            else if (s[i] + s[j] + s[k] < 0)\n     \
    \           j += 1;\n            else\n                k -= 1;\n        }\n  \
    \  }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return false;\n\
    \    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        foreach (i; 0 .. l.length)\n\
    \        {\n            foreach (j; i + 1 .. l.length)\n            {\n      \
    \          foreach (k; j + 1 .. l.length)\n                {\n               \
    \     if (l[i] + l[j] + l[k] == 0)\n                        return true;\n   \
    \             }\n            }\n        }\n        return false;\n    }\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length)\n\
    \    {\n        foreach (j; i+1 .. l.length)\n        {\n            foreach (k;\
    \ j+1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n\
    \    {\n        return false;\n    }\n    long[] sorted = l.dup.sort;\n    foreach\
    \ (i; 0 .. sorted.length - 2) \n    {\n        long a = sorted[i];\n        long\
    \ b = sorted[i + 1];\n        long c = -(a + b);\n        if (sorted.binarySearch(c)\
    \ != -1) \n        {\n            return true;\n        }\n    }\n    return false;\n\
    }\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n    else\
    \ \n    {\n        long[] sorted = l.sort();\n        for (int i = 0; i < sorted.length\
    \ - 2; i++) \n        {\n            int j = i + 1;\n            int k = sorted.length\
    \ - 1;\n            while (j < k) \n            {\n                if (sorted[i]\
    \ + sorted[j] + sorted[k] == 0) \n                {\n                    return\
    \ true;\n                }\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0) \n                {\n                    j++;\n                }\n    \
    \            else \n                {\n                    k--;\n            \
    \    }\n            }\n        }\n        return false;\n    }\n}\n/*", "{\n \
    \   if (l.length < 3) \n    {\n        return false;\n    }\n    else \n    {\n\
    \        foreach (i; 0 .. l.length - 2) \n        {\n            foreach (j; i\
    \ + 1 .. l.length - 1) \n            {\n                foreach (k; j + 1 .. l.length)\
    \ \n                {\n                    if (l[i] + l[j] + l[k] == 0) \n   \
    \                 {\n                        return true;\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.sort();\n        foreach (long i;\
    \ sorted) \n        {\n            long[] sub = sorted[1..$];\n            if\
    \ (two_sum_to_zero(sub, -i)) \n            {\n                return true;\n \
    \           }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    else\n    {\n        long[] sorted = l.sort();\n\
    \        for (int i = 0; i < sorted.length - 2; i++)\n        {\n            long\
    \ a = sorted[i];\n            long b = sorted[i + 1];\n            long c = sorted[i\
    \ + 2];\n            if (a + b + c == 0)\n                return true;\n     \
    \   }\n        return false;\n    }\n}", "{\n    if (l.length < 3) \n    {\n \
    \       return false;\n    }\n    else \n    {\n        long[] sorted = l.sort();\n\
    \        for (int i = 0; i < sorted.length - 2; i++) \n        {\n           \
    \ if (sorted[i] + sorted[i + 1] + sorted[i + 2] == 0) \n            {\n      \
    \          return true;\n            }\n        }\n        return false;\n   \
    \ }\n}\n/*", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        long[] sorted = l.sort();\n        foreach (long i;\
    \ 0 .. sorted.length - 2) \n        {\n            long j = i + 1;\n         \
    \   long k = sorted.length - 1;\n            while (j < k) \n            {\n \
    \               if (sorted[i] + sorted[j] + sorted[k] == 0) \n               \
    \ {\n                    return true;\n                }\n                else\
    \ if (sorted[i] + sorted[j] + sorted[k] < 0) \n                {\n           \
    \         j += 1;\n                }\n                else \n                {\n\
    \                    k -= 1;\n                }\n            }\n        }\n  \
    \      return false;\n    }\n}", "{\n    if (l.length < 3) return false;\n   \
    \ foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length\
    \ - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n            {\n\
    \                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n  \
    \      }\n    }\n    return false;\n}", "{\n    if (l.length < 3) \n    {\n  \
    \      return false;\n    }\n    long[] sorted = l.sort();\n    for (int i = 0;\
    \ i < sorted.length - 2; i++) \n    {\n        if (sorted[i] + sorted[i + 1] +\
    \ sorted[i + 2] == 0) \n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}", "{\n    if (l.length < 3)\n        return false;\n   \
    \ long[] sorted = l.dup.sort;\n    foreach (i; 0 .. sorted.length - 2)\n    {\n\
    \        long a = sorted[i];\n        long start = i + 1;\n        long end =\
    \ sorted.length - 1;\n        while (start < end)\n        {\n            long\
    \ b = sorted[start];\n            long c = sorted[end];\n            if (a + b\
    \ + c == 0)\n                return true;\n            else if (a + b + c > 0)\n\
    \                end -= 1;\n            else\n                start += 1;\n  \
    \      }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n      \
    \  return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j;\
    \ i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}\n/*",
  "{\n    if (l.length < 3)\n        return false;\n    else\n    {\n        long[]\
    \ sorted = l.dup.sort;\n        foreach (i; 0 .. sorted.length - 2)\n        {\n\
    \            long a = sorted[i];\n            long b = sorted[i + 1];\n      \
    \      long c = -(a + b);\n            if (sorted.canFind(c))\n              \
    \  return true;\n        }\n        return false;\n    }\n}\n/*", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3) \n    {\n        return false;\n    }\n\
    \    else \n    {\n        auto s = sort(l);\n        for (int i = 0; i < s.length\
    \ - 2; i++) \n        {\n            auto j = i + 1;\n            auto k = s.length\
    \ - 1;\n            while (j < k) \n            {\n                auto sum =\
    \ s[i] + s[j] + s[k];\n                if (sum == 0) \n                {\n   \
    \                 return true;\n                }\n                else if (sum\
    \ < 0) \n                {\n                    j++;\n                }\n    \
    \            else \n                {\n                    k--;\n            \
    \    }\n            }\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length)\n    {\n\
    \        foreach (j; i + 1 .. l.length)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    else\n    {\n        long[] sorted = l.sort();\n \
    \       foreach (i; 0 .. sorted.length - 2)\n        {\n            long a = sorted[i];\n\
    \            long b = sorted[i + 1];\n            long c = -(a + b);\n       \
    \     if (sorted.binarySearch(c) != -1)\n                return true;\n      \
    \  }\n        return false;\n    }\n}", "{\n    if (l.length < 3)\n        return\
    \ false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach (j; i + 1\
    \ .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n  \
    \          {\n                if (l[i] + l[j] + l[k] == 0)\n                 \
    \   return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (l.length < 3)\n        return false;\n    foreach (i; 0 .. l.length -\
    \ 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n        {\n         \
    \   foreach (k; j + 1 .. l.length)\n            {\n                if (l[i] +\
    \ l[j] + l[k] == 0)\n                    return true;\n            }\n       \
    \ }\n    }\n    return false;\n}\n/*", "{\n    if (l.length < 3)\n        return\
    \ false;\n    else\n    {\n        long[] sorted = l.sort();\n        for (int\
    \ i = 0; i < sorted.length - 2; i++)\n        {\n            int j = i + 1;\n\
    \            int k = sorted.length - 1;\n            while (j < k)\n         \
    \   {\n                if (sorted[i] + sorted[j] + sorted[k] == 0)\n         \
    \           return true;\n                else if (sorted[i] + sorted[j] + sorted[k]\
    \ < 0)\n                    j++;\n                else\n                    k--;\n\
    \            }\n        }\n        return false;\n    }\n}", "{\n    if (l.length\
    \ < 3)\n        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n   \
    \     foreach (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j\
    \ + 1 .. l.length)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n\
    \                    return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    if (l.length < 3)\n        return false;\n    foreach (i;\
    \ 0 .. l.length - 2)\n    {\n        foreach (j; i + 1 .. l.length - 1)\n    \
    \    {\n            foreach (k; j + 1 .. l.length)\n            {\n          \
    \      if (l[i] + l[j] + l[k] == 0)\n                    return true;\n      \
    \      }\n        }\n    }\n    return false;\n}", "{\n    if (l.length < 3)\n\
    \        return false;\n    foreach (i; 0 .. l.length - 2)\n    {\n        foreach\
    \ (j; i + 1 .. l.length - 1)\n        {\n            foreach (k; j + 1 .. l.length)\n\
    \            {\n                if (l[i] + l[j] + l[k] == 0)\n               \
    \     return true;\n            }\n        }\n    }\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
