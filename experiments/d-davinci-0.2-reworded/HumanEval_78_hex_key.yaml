name: HumanEval_78_hex_key
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
  \ a function that receives \n    a hexadecimal number as a string and counts the\
  \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
  \ is a natural number \n    greater than 1 that is not a product of two smaller\
  \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
  \ B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
  \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11),\
  \ D (=decimal 13).\n    Note: you may assume the input is always correct or empty\
  \ string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n \
  \   >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n    2L\n    >>> hex_key(\"\
  ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\")\n    6L\n    >>> hex_key(\"\
  2020\")\n    2L\n    \n*/\nlong hex_key(string num) \n"
tests: "unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
  ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
  ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
  ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
  \    assert(candidate([]) == 0L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(c; num) \n    {\n        if(c == '2' || c == '3' ||\
    \ c == '5' || c == '7' || c == 'B' || c == 'D') \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n\
    \    foreach(char c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n\
    \            if(primes.canFind(c - '0'))\n                result++;\n        }\n\
    \        else if(c >= 'A' && c <= 'F')\n        {\n            if(primes.canFind(c\
    \ - 'A' + 10))\n                result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(i; num)\n    {\n   \
    \     if(i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            result++;\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    foreach(immutable char c; num)\n    {\n        if(c == '2' || c == '3' ||\
    \ c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            result++;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D')\n            result++;\n\
    \        else if(c == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(ch; num)\n\
    \    {\n        if(ch == '2' || ch == '3' || ch == '5' || ch == '7' || ch == 'B'\
    \ || ch == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n\
    \    foreach(char c; num)\n    {\n        long digit = c.to!long(16);\n      \
    \  if(primes.canFind(digit))\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char c; num)\n    {\n\
    \        long n = c.to!long(16);\n        if(n in primes)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(i; num)\n\
    \    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' ||\
    \ i == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c\
    \ == '1')\n                result++;\n            else if(c == '3' || c == '7')\n\
    \                result++;\n        }\n        else if(c >= 'A' && c <= 'F')\n\
    \        {\n            if(c == 'B' || c == 'D')\n                result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n   \
    \     if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n   \
    \ {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13];\n    foreach(i; 0 .. num.length)\n    {\n   \
    \     if(primes.canFind(to!long(num[i], 16)))\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            result++;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            result++;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(char c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n            result++;\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n   \
    \     if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  result++;\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(primes.canFind(num[i]))\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(i; 0 ..\
    \ num.length)\n    {\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5'\
    \ || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\n        {\n           \
    \ result++;\n        }\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    string hex_digits = \"0123456789ABCDEF\";\n    foreach(hex_digit; num)\n\
    \    {\n        if(hex_digit in hex_digits[2..$])\n        {\n            if(isPrime(to!int(hex_digit,\
    \ 16)))\n            {\n                result++;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13];\n    foreach(i; primes)\n    {\n        if(num.count(i.to!string(16).toUpper))\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          result++;\n        }\n    }\n    return result;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\nYou have been tasked\
    \ to write a function that receives a string \n    and returns a string with the\
    \ same characters but in reversed order.\n    Examples:\n    >>> reverse_string(\"\
    Hello\")\n    \"olleH\"\n    >>> reverse_string(\"World\")\n    \"dlroW\"\n  \
    \  >>> reverse_string(\"\")\n    \"\"\n    >>> reverse_string(\"a\")\n    \"a\"\
    \n*/\nstring reverse_string(string str) \n{\n    string result = \"\";\n    foreach(i;\
    \ str)\n    {\n        result = i ~ result;\n    }\n    return result;\n}\n/*\n\
    You have been tasked to write a function that receives a string \n    and returns\
    \ a string with the same characters but in reversed order.\n    Examples:\n  \
    \  >>> reverse_string(\"Hello\")\n    \"olleH\"\n    >>> reverse_string(\"World\"\
    )\n    \"dlroW\"\n    >>> reverse_string(\"\")\n    \"\"\n    >>> reverse_string(\"\
    a\")\n    \"a\"\n*/\nstring reverse_string(string str) \n{\n    string result\
    \ = \"\";\n    foreach(i; str)\n    {\n        result = i ~ result;\n    }\n \
    \   return result;\n}\n/*\nYou have been tasked to write a function that receives\
    \ a string \n    and returns a string with the same characters but in reversed\
    \ order.\n    Examples:\n    >>> reverse_string(\"Hello\")\n    \"olleH\"\n  \
    \  >>> reverse_string(\"World\")\n    \"dlroW\"\n    >>> reverse_string(\"\")\n\
    \    \"\"\n    >>> reverse_string(\"a\")\n    \"a\"\n*/\nstring reverse_string(string\
    \ str) \n{\n    string result = \"\";\n    foreach(i; str)\n    {\n        result\
    \ = i ~ result;\n    }\n    return result;\n}\n/*\n", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    long[] primes = [2, 3, 5, 7,\
    \ 11, 13];\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i] in \"2357BD\"\
    )\n        {\n            result += 1;\n        }\n        else if(num[i] in \"\
    ABCDEF\")\n        {\n            result += 1;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    auto primes = [2, 3, 5, 7, 11, 13];\n    auto hex_digits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    auto hex_digits_str\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    auto hex_digits_map = zip(hex_digits,\
    \ hex_digits_str);\n    auto hex_digits_map_str = zip(hex_digits_str, hex_digits);\n\
    \    auto hex_digits_map_str_primes = zip(hex_digits_str, primes);\n    auto hex_digits_map_primes\
    \ = zip(hex_digits, primes);\n    auto hex_digits_map_primes_str = zip(primes,\
    \ hex_digits_str);\n    auto hex_digits_map_primes_str_hex = zip(primes, hex_digits);\n\
    \    auto hex_digits_map_primes_hex = zip(primes, hex_digits);\n    auto hex_digits_map_primes_hex_str\
    \ = zip(primes, hex_digits_str);\n    auto hex_digits_map_primes_hex_str_hex =\
    \ zip(primes, hex_digits);\n    auto hex_digits_map_primes_hex_str_hex_str = zip(primes,\
    \ hex_digits_str);\n    auto hex_digits_map_primes_hex_str_hex_str_primes = zip(primes,\
    \ hex_digits_str);\n    auto hex_digits_map_primes_hex_str_hex_str_primes_hex\
    \ = zip(primes, hex_digits);\n    auto hex_digits_map_primes_hex_str_hex_str_primes_hex_str\
    \ = zip(primes, hex_digits_str);\n    auto hex_digits_map", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(immutable char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c in ['2', '3', '5', '7', 'B',\
    \ 'D'])\n            result++;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(c; num)\n    {\n\
    \        long n = c.to!long(16);\n        if(n in primes)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(i; num)\n\
    \    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' ||\
    \ i == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    string hex = \"0123456789ABCDEF\";\n    foreach(char c; num)\n   \
    \ {\n        if(hex.indexOf(c) < 11)\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char c; num)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            if(c - '0' in primes)\n\
    \                count++;\n        }\n        else if(c >= 'A' && c <= 'F')\n\
    \        {\n            if(c - 'A' + 10 in primes)\n                count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        switch(c)\n   \
    \     {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(immutable char c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(ch; num)\n    {\n        switch(ch)\n        {\n            case\
    \ '2':\n            case '3':\n            case '5':\n            case '7':\n\
    \            case 'B':\n            case 'D':\n                count++;\n    \
    \            break;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c\
    \ == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(char c; num)\n\
    \    {\n        switch(c)\n        {\n            case '2':\n            case\
    \ '3':\n            case '5':\n            case '7':\n            case 'B':\n\
    \            case 'D':\n                result++;\n                break;\n  \
    \          default:\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   result++;\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(i;\
    \ num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  result++;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    int[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char c; num)\n \
    \   {\n        if(c >= '0' && c <= '9')\n        {\n            if(c.to!int()\
    \ in primes)\n                count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'F')\n        {\n            if(c.to!int() - 55 in primes)\n          \
    \      count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n            result++;\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c\
    \ == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            result++;\n        }\n    }\n    return result;\n}", "{\n  \
    \  long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i; 0 .. num.length)\n\
    \    {\n        if(primes.canFind(to!long(num[i], 16)))\n        {\n         \
    \   result++;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5'\
    \ || i == '7' || i == 'B' || i == 'D')\n        {\n            result++;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n   \
    \     if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i;\
    \ num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D')\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(immutable char c; num)\n \
    \   {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    You have been tasked to write a function that receives a string \n    and returns\
    \ the number of words that start with a capital letter.\n    Examples:\n    >>>\
    \ capital_index(\"The quick brown fox jumps over the lazy dog.\")\n    2L\n  \
    \  >>> capital_index(\"The Quick Brown Fox Jumps Over The Lazy Dog.\")\n    2L\n\
    \    >>> capital_index(\"The quick brown fox jumps over the lazy dog. The quick\
    \ brown fox jumps over the lazy dog.\")\n    4L\n    >>> capital_index(\"The quick\
    \ brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\
    \ The quick brown fox jumps over the lazy dog.\")\n    6L\n    >>> capital_index(\"\
    \")\n    0L\n*/\nlong capital_index(string sentence) \n{\n    long count = 0;\n\
    \    foreach(string word; sentence.split())\n    {\n        if(word[0] == word[0].toupper)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    You have been tasked to write a function that receives a string \n    and returns\
    \ the number of words that start with a capital letter.\n    Examples:\n    >>>\
    \ capital_index(\"The quick brown fox jumps over the lazy dog.\")\n    2L\n  \
    \  >>> capital_index(\"The Quick Brown Fox Jumps Over The Lazy Dog.\")\n    2L\n\
    \    >>> capital_index(\"The quick brown fox jumps over the lazy dog. The quick\
    \ brown fox jumps over the lazy dog.\")\n    4L\n    >>> capital_index(\"The quick\
    \ brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\
    \ The quick brown fox jumps over the lazy dog.\")\n    6L\n    >>> capital_index(\"\
    \")\n    0L\n*/\nlong capital_index(string sentence) \n{\n    long count = 0;\n\
    \    foreach(string word; sentence.split", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n\
    \        switch(c)\n        {\n            case '2':\n            case '3':\n\
    \            case '5':\n            case '7':\n            case 'B':\n       \
    \     case 'D':\n                result++;\n                break;\n         \
    \   default:\n                break;\n        }\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    for(int i = 0; i < num.length; i++)\n\
    \    {\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D')\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
