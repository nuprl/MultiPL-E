name: HumanEval_162_string_to_md5
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string 'text',\
  \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
  \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \n    \n*/\nNullable!(string) string_to_md5(string text) \n"
tests: "unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
  \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
  \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
  A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
  \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (text.length == 0)\n        return null;\n    return md5(text);\n\
    }", "{\n    if (text.length == 0)\n        return null;\n    import std.digest.md;\n\
    \    return to!string(md5(text));\n}\n/*", "{\n    if (text.length == 0)\n   \
    \     return null;\n    return to!(Nullable!(string)) md5(text);\n}", "{\n   \
    \ if (text.length == 0)\n        return null;\n    import std.digest.md;\n   \
    \ return to!string(md5(text));\n}", "{\n    if (text.length == 0) return null;\n\
    \    import std.digest.md;\n    return text.md5;\n}", "{\n    if (text.length\
    \ == 0)\n        return null;\n    import std.digest.md;\n    return digest!MD5(text);\n\
    }\n/*", "{\n    if (text.length == 0) \n    {\n        return null;\n    }\n \
    \   import std.digest.md;\n    return to!string(md5(text));\n}", "{\n    if (text.length\
    \ == 0)\n        return null;\n    return to!(Nullable!(string))md5(text);\n}",
  "{\n    import std.digest.md;\n    import std.conv;\n    import std.string;\n  \
    \  import std.algorithm;\n    import std.array;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.traits;\n    import std.meta;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.algorithm;\n    import", "{\n\
    \    if (text.length == 0)\n        return null;\n    import std.digest.md;\n\
    \    return to!string(md5(text));\n}", "{\n    if (text.length == 0)\n       \
    \ return null;\n    import std.digest.md;\n    return md5(text);\n}", "{\n   \
    \ if (text.length == 0)\n        return null;\n    \n    import std.digest.md;\n\
    \    import std.conv;\n    import std.string;\n    import std.algorithm;\n   \
    \ import std.array;\n    import std.range;\n    import std.format;\n    \n   \
    \ auto md5 = MD5(text);\n    auto md5_array = md5.array;\n    auto md5_string\
    \ = format(\"%(%02x)\", md5_array);\n    return md5_string;\n}\n/*", "{\n    if\
    \ (text.length == 0)\n        return null;\n    import std.digest.md;\n    return\
    \ to!string(MD5(text));\n}", "{\n    if (text.length == 0)\n        return null;\n\
    \    return md5(text);\n}\n/*", "{\n    if (text.length == 0)\n        return\
    \ null;\n    import std.digest.md;\n    return to!string(md5(text));\n}", "{\n\
    \    if (text.length == 0)\n        return null;\n    return md5(text);\n}", "{\n\
    \    if (text.length == 0)\n        return null;\n    return md5(text);\n}", "{\n\
    \    if (text.length == 0)\n        return null;\n    import std.digest.md;\n\
    \    return to!string(MD5(text));\n}", "{\n    if (text.length == 0)\n       \
    \ return null;\n    auto md5 = new MD5;\n    md5.put(text);\n    return md5.finish().toHexString();\n\
    }", "{\n    if (text.length == 0)\n        return null;\n    return to!(Nullable!(string))(md5(text));\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
