name: HumanEval_106_f
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Implement the function f that\
  \ takes n as a parameter,\n    and returns an array of size n, such that the value\
  \ of the element at index i is the factorial of i if i is even\n    or the sum of\
  \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is\
  \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
  \    >>> f(5L)\n    [1L, 2L, 6L, 24L, 15L]\n    \n*/\nlong[] f(long n) \n"
tests: "unittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L,\
  \ 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L,\
  \ 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L,\
  \ 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            for (long j = 1; j <= i; j++)\n       \
    \     {\n                factorial *= j;\n            }\n            result[i\
    \ - 1] = factorial;\n            factorial = 1;\n        }\n        else\n   \
    \     {\n            result[i - 1] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n   \
    \ for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n\
    \    for(long i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n \
    \           arr[i] = factorial(i);\n        }\n        else\n        {\n     \
    \       arr[i] = sum(i);\n        }\n    }\n    return arr;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] arr\
    \ = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n        if(i % 2 ==\
    \ 0)\n        {\n            arr[i] = factorial(i);\n        }\n        else\n\
    \        {\n            arr[i] = sum(i);\n        }\n    }\n    return arr;\n}",
  "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}\nlong factorial(long n) \n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = sum(i);\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n          \
    \  result[i] = factorial(i);\n        } \n        else \n        {\n         \
    \   result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] res = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            res[i] = factorial(i);\n\
    \        }\n        else\n        {\n            res[i] = sum(1 .. i);\n     \
    \   }\n    }\n    return res;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}\nlong factorial(long n) \n{\n    long result = 1;\n   \
    \ for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] res = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            res[i] = factorial(i);\n        }\n        else\n\
    \        {\n            res[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n    long\
    \ i = 0;\n    foreach(index, value; arr)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            arr[index] = factorial(i);\n        }\n        else\n    \
    \    {\n            arr[index] = sum(i);\n        }\n        i++;\n    }\n   \
    \ return arr;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0;\
    \ i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] ret = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            ret[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            ret[i] = i\
    \ * (i + 1) / 2;\n        }\n    }\n    return ret;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n     \
    \   }\n        else\n        {\n            arr[i] = sum(i);\n        }\n    }\n\
    \    return arr;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n     \
    \   }\n        else\n        {\n            arr[i] = sum(i);\n        }\n    }\n\
    \    return arr;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n     \
    \   if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n        }\n\
    \        else\n        {\n            arr[i] = sum(i);\n        }\n    }\n   \
    \ return arr;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = i.factorial;\n\
    \        }\n        else\n        {\n            result[i] = i.sum;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n    \
    \        result[i] = factorial(i);\n        } \n        else \n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++) \n    {\n  \
    \      result *= i;\n    }\n    return result;\n}\nlong sum(long n) \n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = factorial(i);\n        } \n        else \n        {\n            result[i]\
    \ = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0..n)\n    {\n      \
    \  if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n\
    \        else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n\
    \        }\n        else\n        {\n            arr[i] = sum(i);\n        }\n\
    \    }\n    return arr;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for(long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for(long i = 1; i\
    \ <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] ret = new long[n];\n  \
    \  for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n \
    \           ret[i] = factorial(i);\n        }\n        else\n        {\n     \
    \       ret[i] = sum(i);\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ result = new long[n];\n    long factorial = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            factorial *= i;\n\
    \            result[i - 1] = factorial;\n        }\n        else\n        {\n\
    \            result[i - 1] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            arr[i] = sum(i);\n\
    \        }\n    }\n    return arr;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}\nlong factorial(long n) \n{\n    long result = 1;\n   \
    \ for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n}\n/*\n\
    \    Implement the function g that takes n as a parameter,\n    and returns an\
    \ array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5L)\n    [1L, 2L, 6L, 24L,\
    \ 15L]\n*/\nlong[] g(long n) \n{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n          \
    \  result[i] = factorial(i);\n        } \n        else \n        {\n         \
    \   result[i] = sum(i);\n        }\n    }\n    return result;\n}\n/*\n    Implement\
    \ the function h that takes n as a parameter,\n    and returns an array of size\
    \ n, such that the value of the element at index i is the factorial of i if i\
    \ is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from\
    \ 1.\n    the factorial of i is the multiplication of the numbers from 1 to i\
    \ (1 * 2 * ...", "{\n    long[] result = new long[n];\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            res[i] = factorial(i);\n        }\n      \
    \  else\n        {\n            res[i] = sum(1..i);\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n;\
    \ i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n \
    \   foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n           \
    \ result[i] = factorial(i);\n        }\n        else\n        {\n            result[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n   \
    \ for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0..n)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ arr = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n        if(i % 2\
    \ == 0)\n        {\n            arr[i] = factorial(i);\n        }\n        else\n\
    \        {\n            arr[i] = sum(i);\n        }\n    }\n    return arr;\n\
    }\nlong factorial(long n)\n{\n    long result = 1;\n    for(long i = 1; i <= n;\
    \ i++)\n    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long\
    \ n)\n{\n    long result = 0;\n    for(long i = 1; i <= n; i++)\n    {\n     \
    \   result += i;\n    }\n    return result;\n}\n/*\n Implement the function g\
    \ that takes n as a parameter,\n    and returns an array of size n, such that\
    \ the value of the element at index i is the factorial of i if i is even\n   \
    \ or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the\
    \ factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ...\
    \ * i).\n    Example:\n    >>> g(5L)\n    [1L, 2L, 6L, 24L, 15L]\n*/\nlong[] g(long\
    \ n) \n{\n    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n \
    \       }\n        else\n        {\n            arr[i] = sum(i);\n        }\n\
    \    }\n    return arr;\n}\n/*\n Implement the function h that takes n as a parameter,\n\
    \    and returns an array of size n, such that the value of the element at index\
    \ i is the factorial of i if i is even\n    or the sum of numbers from 1 to i\
    \ otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> h(5L",
  "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n \
    \       }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            res[i] = factorial(i);\n        }\n        else\n      \
    \  {\n            res[i] = i * (i + 1) / 2;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] res = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            res[i] = factorial(i);\n\
    \        }\n        else\n        {\n            res[i] = sum(1 .. i);\n     \
    \   }\n    }\n    return res;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(0\
    \ .. i);\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            res[i] = factorial(i);\n        }\n        else\n        {\n    \
    \        res[i] = sum(i);\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = factorial(i);\n        } \n        else \n        {\n            result[i]\
    \ = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] res = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            res[i] = factorial(i);\n        }\n        else\n        {\n    \
    \        res[i] = sum(1 .. i);\n        }\n    }\n    return res;\n}", "{\n  \
    \  long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n   \
    \     if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n    \
    \    }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = i.factorial;\n\
    \        }\n        else\n        {\n            result[i] = i.sum;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}\n/*\n Implement the function g that takes\
    \ n as a parameter,\n    and returns an array of size n, such that the value of\
    \ the element at index i is the factorial of i if i is even\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5L)\n    [1L, 2L, 6L, 24L, 15L]\n    \n*/\nlong[] g(long n) \n{\n \
    \   long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n   \
    \     }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\n/*\n Implement the function h that takes n as a\
    \ parameter,\n    and returns an array of size n, such that the value of the element\
    \ at index i is the factorial of i if i is even\n    or the sum of numbers from\
    \ 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> h(", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            res[i] = factorial(i);\n        }\n        else\n      \
    \  {\n            res[i] = sum(1..i);\n        }\n    }\n    return res;\n}",
  "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n          \
    \  result[i] = factorial(i);\n        } \n        else \n        {\n         \
    \   result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++) \n    {\n  \
    \      result *= i;\n    }\n    return result;\n}\nlong sum(long n) \n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = sum(i);\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n     \
    \   else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] arr = new long[n];\n    for(long i = 0; i < n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n\
    \        }\n        else\n        {\n            arr[i] = sum(i);\n        }\n\
    \    }\n    return arr;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n          \
    \  result[i] = factorial(i);\n        } \n        else \n        {\n         \
    \   result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}\nlong factorial(long n) \n{\n    long result = 1;\n   \
    \ for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n    \
    \    result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 1..n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            result[i - 1] = factorial(i);\n        }\n \
    \       else\n        {\n            result[i - 1] = i * (i + 1) / 2;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n  \
    \  foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i, ref e; result)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            e = factorial(i);\n        }\n        else\n        {\n\
    \            e = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n\
    \    {\n        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            arr[i] = sum(i);\n\
    \        }\n    }\n    return arr;\n}", "{\n    long[] arr = new long[n];\n  \
    \  for(long i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         arr[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     arr[i] = sum(i);\n        }\n    }\n    return arr;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = factorial(i);\n        } \n        else \n        {\n            result[i]\
    \ = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result[i] = factorial(i);\n        }\n        else\n       \
    \ {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0..n)\n    {\n      \
    \  if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n\
    \        else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            arr[i] = i\
    \ * (i + 1) / 2;\n        }\n    }\n    return arr;\n}", "{\n    long[] arr =\
    \ new long[n];\n    for(long i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            arr[i] = factorial(i);\n        }\n        else\n    \
    \    {\n            arr[i] = sum(i);\n        }\n    }\n    return arr;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for(long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] arr = new long[n];\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            arr[i] = sum(i);\n\
    \        }\n    }\n    return arr;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2\
    \ == 0)\n        {\n            result[i] = factorial(i);\n        }\n       \
    \ else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = i\
    \ * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] arr = new long[n];\n    long i = 0;\n    foreach(e; arr)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            e = factorial(i);\n   \
    \     }\n        else\n        {\n            e = sum(i);\n        }\n       \
    \ i++;\n    }\n    return arr;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result[i] = factorial(i);\n        }\n        else\n       \
    \ {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] res = new long[n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = factorial(i);\n\
    \        }\n        else\n        {\n            res[i] = sum(i);\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}\nlong factorial(long n) \n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n) \n    {\n   \
    \     if(i % 2 == 0) \n        {\n            result[i] = i.factorial;\n     \
    \   } \n        else \n        {\n            result[i] = i.iota.sum;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n  \
    \  for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n \
    \           result[i] = factorial(i);\n        }\n        else\n        {\n  \
    \          result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n  \
    \  for(long i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         arr[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     arr[i] = sum(i);\n        }\n    }\n    return arr;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for(long i = 1; i <= n; i++)\n    {\n     \
    \   result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] ret = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            ret[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            ret[i] = sum(i);\n\
    \        }\n    }\n    return ret;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n) \n    {\n        if(i % 2 == 0) \n        {\n        \
    \    result[i] = factorial(i);\n        } \n        else \n        {\n       \
    \     result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n \
    \   foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n           \
    \ result[i] = factorial(i);\n        }\n        else\n        {\n            result[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ arr = new long[n];\n    for(long i = 0; i < n; i++)\n    {\n        if(i % 2\
    \ == 0)\n        {\n            arr[i] = factorial(i);\n        }\n        else\n\
    \        {\n            arr[i] = sum(i);\n        }\n    }\n    return arr;\n}",
  "{\n    long[] result = new long[n];\n    foreach(i; 0..n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(1 .. i);\n        }\n    }\n    return result;\n}\n ", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] arr = new long[n];\n\
    \    for(long i = 0; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n \
    \           arr[i] = factorial(i);\n        }\n        else\n        {\n     \
    \       arr[i] = sum(i);\n        }\n    }\n    return arr;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] res = new\
    \ long[n];\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n \
    \           res[i] = factorial(i);\n        }\n        else\n        {\n     \
    \       res[i] = i * (i + 1) / 2;\n        }\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if (i % 2\
    \ == 0) \n        {\n            result[i] = factorial(i);\n        } \n     \
    \   else \n        {\n            result[i] = sum(i);\n        }\n    }\n    return\
    \ result;\n}\nlong factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return result;\n\
    }\nlong sum(long n) \n{\n    long result = 0;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        result += i;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] arr = new long[n];\n    for(long i = 0; i\
    \ < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n\
    \        }\n        else\n        {\n            arr[i] = sum(i);\n        }\n\
    \    }\n    return arr;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for(long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for(long i = 1; i\
    \ <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(1 .. i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
