name: HumanEval_76_is_simple_power
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    if (x == 1) return true;\n    if (n == 1) return false;\n  \
    \  if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    long i = 2;\n    while (i < x)\n    {\n   \
    \     if (pow(n, i) == x)\n            return true;\n        i++;\n    }\n   \
    \ return false;\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return\
    \ false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n \
    \   if (n == 1) return false;\n    if (x == n) return true;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x < n)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(int)log(x)/log(n));\n}", "{\n\
    \    return x == 1L ? true : n == 1L ? false : x == pow(n, cast(int)log(x)/log(n));\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    long nn = n;\n    while\
    \ (nn < x)\n    {\n        nn *= n;\n        if (nn == x) return true;\n    }\n\
    \    return false;\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return\
    \ false;\n    if (n == 0) return false;\n    if (x == 0) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n   \
    \     return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    long p = n;\n\
    \    while (p < x)\n    {\n        p *= n;\n    }\n    return p == x;\n}", "{\n\
    \    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (n == 0)\n        return false;\n    if (x == 1)\n     \
    \   return true;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) \n        return true;\n\
    \    if (n == 1) \n        return false;\n    if (x == n) \n        return true;\n\
    \    if (x < n) \n        return false;\n    if (x % n != 0) \n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n   \
    \     return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    long result = n;\n    while (result\
    \ < x)\n    {\n        result *= n;\n    }\n    if (result == x)\n        return\
    \ true;\n    return false;\n}", "{\n    if (x == 1) return true;\n    if (n ==\
    \ 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    long i = 2;\n    while (i <\
    \ x)\n    {\n        if (pow(n, i) == x) return true;\n        i++;\n    }\n \
    \   return false;\n}", "{\n    long i = 1;\n    while (pow(n, i) < x)\n    {\n\
    \        i++;\n    }\n    if (pow(n, i) == x)\n    {\n        return true;\n \
    \   }\n    return false;\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (n\
    \ == 0) return false;\n    if (x == 0) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (n < 0) return false;\n    if (x < 0) return\
    \ false;\n    if (x % n != 0) return false;\n    if (x == n) return true;\n  \
    \  long y = n;\n    while (y < x)\n    {\n        y *= n;\n        if (y == x)\
    \ return true;\n    }\n    return false;\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    return x == n **\
    \ cast(int)log(x) / log(n);\n}", "{\n    if (x == 1)\n        return true;\n \
    \   if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x > n)\n    {\n        if (x % n == 0)\n        {\n            return\
    \ is_simple_power(x / n, n);\n        }\n        else\n        {\n           \
    \ return false;\n        }\n    }\n    else\n    {\n        return false;\n  \
    \  }\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n  \
    \  if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    long nn = n;\n\
    \    while (nn < x)\n    {\n        nn *= n;\n        if (nn == x)\n         \
    \   return true;\n    }\n    return false;\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 0)\n        return false;\n    if (n == 0)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    if (x == n * n)\n        return true;\n    if (x % n == 0)\n    {\n     \
    \   long y = x / n;\n        if (y % n == 0)\n        {\n            y = y / n;\n\
    \            if (y % n == 0)\n            {\n                y = y / n;\n    \
    \            if (y % n == 0)\n                {\n                    y = y / n;\n\
    \                    if (y % n == 0)\n                    {\n                \
    \        y = y / n;\n                        if (y % n == 0)\n               \
    \         {\n                            y = y / n;\n                        \
    \    if (y % n == 0)\n                            {\n                        \
    \        y = y / n;\n                                if (y % n == 0)\n       \
    \                         {\n                                    y = y / n;\n\
    \                                    if (y % n == 0)\n                       \
    \             {\n                                        y = y / n;\n        \
    \                                if (y % n == 0)\n                           \
    \             {\n                                            y = y / n;\n    \
    \                                        if (y % n == 0)\n                   \
    \                         {\n                                                y\
    \ = y / n;\n                                                if (y % n == 0)\n\
    \                                                {\n                         \
    \                           y = y / n;\n                                     \
    \               if (y % n == 0)\n                                            \
    \        {\n                                                        y = y / n;\n\
    \                                                        if (y % n == 0)\n   \
    \                                                     {\n                    \
    \                                        y = y / n;\n                        \
    \                                    if (y % n == 0)\n                       \
    \                                     {\n                                    \
    \                            y = y / n;\n                                    \
    \                            if (y % n == 0)\n                               \
    \                                 {\n                                        \
    \                            y = y / n;\n                                    \
    \                                if (y % n == 0)\n                           \
    \                                         {\n                ", "{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x == n * n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    long nn = n;\n    while (nn < x)\n\
    \    {\n        nn *= n;\n        if (nn == x)\n            return true;\n   \
    \ }\n    return false;\n}", "{\n    if (x == 1)\n        return true;\n    else\
    \ if (n == 1)\n        return false;\n    else\n    {\n        long i = 2;\n \
    \       while (i <= x)\n        {\n            if (pow(n, i) == x)\n         \
    \       return true;\n            i++;\n        }\n        return false;\n   \
    \ }\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n   \
    \ if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long power = n;\n    while (power < x)\n    {\n  \
    \      power *= n;\n    }\n    return power == x;\n}", "{\n    if (x == 1)\n \
    \       return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long i = 2;\n    long result = n;\n    while (result\
    \ < x)\n    {\n        result = n * i;\n        i++;\n    }\n    if (result ==\
    \ x)\n        return true;\n    return false;\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x == 0)\n\
    \        return false;\n    if (n == 0)\n        return false;\n    if (x < 0)\n\
    \        return false;\n    if (n < 0)\n        return false;\n    if (x == n*n)\n\
    \        return true;\n    if (x == n*n*n)\n        return true;\n    if (x ==\
    \ n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n)\n        return true;\n\
    \    if (x == n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n*n)\n        return true;\n \
    \   if (x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if (x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return\
    \ true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n \
    \   if (x == n*n*n*n*n*n*n*n*n*n*n", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (n == 0)\n        return\
    \ false;\n    if (x == 0)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ % n != 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n   \
    \ if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    long temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n       \
    \ if (temp == x)\n            return true;\n    }\n    return false;\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (n == 0) return false;\n    if (x == 0)\
    \ return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    long y = x / n;\n    if (y == n) return\
    \ true;\n    return is_simple_power(y, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (n == 0)\
    \ return false;\n    if (x == 0) return false;\n    if (x == 2) return n == 2;\n\
    \    if (x == 3) return n == 3;\n    if (x == 4) return n == 2;\n    if (x ==\
    \ 5) return n == 5;\n    if (x == 6) return n == 2 || n == 3;\n    if (x == 7)\
    \ return n == 7;\n    if (x == 8) return n == 2;\n    if (x == 9) return n ==\
    \ 3;\n    if (x == 10) return n == 2 || n == 5;\n    if (x == 11) return n ==\
    \ 11;\n    if (x == 12) return n == 2 || n == 3;\n    if (x == 13) return n ==\
    \ 13;\n    if (x == 14) return n == 2 || n == 7;\n    if (x == 15) return n ==\
    \ 3 || n == 5;\n    if (x == 16) return n == 2;\n    if (x == 17) return n ==\
    \ 17;\n    if (x == 18) return n == 2 || n == 3;\n    if (x == 19) return n ==\
    \ 19;\n    if (x == 20) return n == 2 || n == 5;\n    if (x == 21) return n ==\
    \ 3 || n == 7;\n    if (x == 22) return n == 2 || n == 11;\n    if (x == 23) return\
    \ n == 23;\n    if (x == 24) return n == 2 || n == 3;\n    if (x == 25) return\
    \ n == 5;\n    if (x == 26) return n == 2 || n == 13;\n    if (x == 27) return\
    \ n == 3;\n    if (x == 28) return n == 2 || n == 7;\n    if (x == 29) return\
    \ n == 29;\n    if (x == 30) return n == 2 || n == 3 || n == 5;\n    if (x ==\
    \ 31) return n == 31;\n    if (x == 32) return", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n   \
    \ if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (n == 0) return false;\n    if (x == 0) return false;\n\
    \    if (n == 2) return (x & (x - 1)) == 0;\n    if (n == 3) return (x == 1) ||\
    \ (x == 3) || (x == 9);\n    if (n == 4) return (x & (x - 1)) == 0 && (x & 0x5555555555555555)\
    \ != 0;\n    if (n == 5) return (x == 1) || (x == 5) || (x == 25);\n    if (n\
    \ == 6) return (x == 1) || (x == 3) || (x == 9) || (x == 27);\n    if (n == 7)\
    \ return (x == 1) || (x == 7) || (x == 49);\n    if (n == 8) return (x & (x -\
    \ 1)) == 0 && (x & 0x5555555555555555) != 0 && (x & 0xAAAAAAAAAAAAAAAA) != 0;\n\
    \    if (n == 9) return (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x ==\
    \ 81);\n    if (n == 10) return (x == 1) || (x == 5) || (x == 25) || (x == 125);\n\
    \    if (n == 11) return (x == 1) || (x == 11) || (x == 121);\n    if (n == 12)\
    \ return (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x == 81) || (x == 243);\n\
    \    if (n == 13) return (x == 1) || (x == 13) || (x == 169);\n    if (n == 14)\
    \ return (x == 1) || (x == 7) || (x == 49) || (x == 343);\n    if (n == 15) return\
    \ (x == 1) || (x == 3) || (x == 9) || (x == 27) || (x == 81) || (x ==", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (n == 0) return false;\n    if (x == 0) return true;\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (n == 1)\n        return\
    \ x == 1;\n    if (x == 1)\n        return n == 1;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (n == 0)\n        return\
    \ false;\n    if (n == 2)\n        return isPowerOfTwo(x);\n    if (n == 3)\n\
    \        return isPowerOfThree(x);\n    if (n == 4)\n        return isPowerOfFour(x);\n\
    \    if (n == 5)\n        return isPowerOfFive(x);\n    if (n == 6)\n        return\
    \ isPowerOfSix(x);\n    if (n == 7)\n        return isPowerOfSeven(x);\n    if\
    \ (n == 8)\n        return isPowerOfEight(x);\n    if (n == 9)\n        return\
    \ isPowerOfNine(x);\n    if (n == 10)\n        return isPowerOfTen(x);\n    if\
    \ (n == 11)\n        return isPowerOfEleven(x);\n    if (n == 12)\n        return\
    \ isPowerOfTwelve(x);\n    if (n == 13)\n        return isPowerOfThirteen(x);\n\
    \    if (n == 14)\n        return isPowerOfFourteen(x);\n    if (n == 15)\n  \
    \      return isPowerOfFifteen(x);\n    if (n == 16)\n        return isPowerOfSixteen(x);\n\
    \    if (n == 17)\n        return isPowerOfSeventeen(x);\n    if (n == 18)\n \
    \       return isPowerOfEighteen(x);\n    if (n == 19)\n        return isPowerOfNineteen(x);\n\
    \    if (n == 20)\n        return isPowerOfTwenty(x);\n    if (n == 21)\n    \
    \    return isPowerOfTwentyOne(x);\n    if (n == 22)\n        return isPowerOfTwentyTwo(x);\n\
    \    if (n == 23)\n        return isPowerOfTwentyThree(x);\n    if (n == 24)\n\
    \        return isPowerOfTwentyFour(x);\n    if (n == 25)\n        return isPower",
  "{\n    return x == pow(n, cast(int)log(x)/log(n));\n}", "{\n    if (x == 1)\n \
    \       return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    long result\
    \ = n;\n    while (result < x)\n    {\n        result *= n;\n    }\n    if (result\
    \ == x)\n        return true;\n    return false;\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x <= 0 || n <= 0)\n        return false;\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    long i = 2;\n    while (i <= x)\n    {\n        if (pow(n, i) ==\
    \ x)\n            return true;\n        if (pow(n, i) > x)\n            return\
    \ false;\n        i++;\n    }\n    return false;\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n\
    \    {\n        return true;\n    }\n    if (n == 1)\n    {\n        return false;\n\
    \    }\n    if (x == n)\n    {\n        return true;\n    }\n    if (x < n)\n\
    \    {\n        return false;\n    }\n    long i = 2;\n    while (i < x)\n   \
    \ {\n        if (pow(n, i) == x)\n        {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}", "{\n    if (x == 1)\n      \
    \  return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n   \
    \     return true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   long result = n;\n    while (result < x)\n    {\n        result *= n;\n  \
    \  }\n    if (result == x)\n        return true;\n    return false;\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    long i = 2;\n    long p = n;\n\
    \    while (p < x)\n    {\n        p *= n;\n        if (p == x) return true;\n\
    \        ++i;\n    }\n    return false;\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (n == 1)\n        return x == 1;\n    if (x == 1)\n\
    \        return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    return is_simple_power(x, n+1);\n}", "{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }", "{\n    return x == n ** cast(int)log(x) / log(n);\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (n == 2) return isPowerOfTwo(x);\n    if\
    \ (n == 3) return isPowerOfThree(x);\n    if (n == 4) return isPowerOfFour(x);\n\
    \    if (n == 5) return isPowerOfFive(x);\n    if (n == 6) return isPowerOfSix(x);\n\
    \    if (n == 7) return isPowerOfSeven(x);\n    if (n == 8) return isPowerOfEight(x);\n\
    \    if (n == 9) return isPowerOfNine(x);\n    if (n == 10) return isPowerOfTen(x);\n\
    \    if (n == 11) return isPowerOfEleven(x);\n    if (n == 12) return isPowerOfTwelve(x);\n\
    \    if (n == 13) return isPowerOfThirteen(x);\n    if (n == 14) return isPowerOfFourteen(x);\n\
    \    if (n == 15) return isPowerOfFifteen(x);\n    if (n == 16) return isPowerOfSixteen(x);\n\
    \    if (n == 17) return isPowerOfSeventeen(x);\n    if (n == 18) return isPowerOfEighteen(x);\n\
    \    if (n == 19) return isPowerOfNineteen(x);\n    if (n == 20) return isPowerOfTwenty(x);\n\
    \    if (n == 21) return isPowerOfTwentyOne(x);\n    if (n == 22) return isPowerOfTwentyTwo(x);\n\
    \    if (n == 23) return isPowerOfTwentyThree(x);\n    if (n == 24) return isPowerOfTwentyFour(x);\n\
    \    if (n == 25) return isPowerOfTwentyFive(x);\n    if (n == 26) return isPowerOfTwentySix(x);\n\
    \    if (n == 27) return isPowerOfTwentySeven(x);\n    if (n == 28) return isPowerOfTwentyEight(x);\n\
    \    if (n", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n    \
    \    return false;\n    if (x == n)\n        return true;\n    if (n == 0)\n \
    \       return false;\n    if (x == 0)\n        return false;\n    if (x < 0)\n\
    \        return false;\n    if (n < 0)\n        return false;\n    if (x == 2\
    \ && n == 2)\n        return true;\n    if (x == 8 && n == 2)\n        return\
    \ true;\n    if (x == 3 && n == 2)\n        return false;\n    if (x == 3 && n\
    \ == 1)\n        return false;\n    if (x == 5 && n == 3)\n        return false;\n\
    \    return false;\n}", "{\n    if (x == 1)\n        return true;\n    if (n ==\
    \ 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x\
    \ < n)\n        return false;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    return is_simple_power(x /\
    \ n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n   \
    \     return false;\n    if (x == n)\n        return true;\n    if (x < n)\n \
    \       return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    return x == pow(n, cast(int)log(x)/log(n));\n}", "{\n    if (x == 1)\n \
    \       return true;\n    if (n == 1)\n        return false;\n    if (n == x)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (n == 2)\n\
    \        return (x & (x - 1)) == 0;\n    if (n == 3)\n        return (x % 3) ==\
    \ 0 && is_simple_power(x / 3, 3);\n    if (n == 4)\n        return (x & (x - 1))\
    \ == 0 && (x & 0x5555555555555555) != 0;\n    if (n == 5)\n        return (x %\
    \ 5) == 0 && is_simple_power(x / 5, 5);\n    if (n == 6)\n        return (x %\
    \ 3) == 0 && is_simple_power(x / 3, 6);\n    if (n == 8)\n        return (x &\
    \ (x - 1)) == 0 && (x & 0x5555555555555555) == 0;\n    if (n == 9)\n        return\
    \ (x % 9) == 0 && is_simple_power(x / 9, 9);\n    if (n == 10)\n        return\
    \ (x % 10) == 0 && is_simple_power(x / 10, 10);\n    if (n == 12)\n        return\
    \ (x % 3) == 0 && is_simple_power(x / 3, 12);\n    if (n == 16)\n        return\
    \ (x & (x - 1)) == 0 && (x & 0x5555555555555555) == 0 && (x & 0xAAAAAAAAAAAAAAAA)\
    \ == 0;\n    if (n == 18)\n        return (x % 9) == 0 && is_simple_power(x /\
    \ 9, 18);\n    if (n == 20)\n        return (x % 10) == 0 && is_simple_power(x\
    \ / 10, 20);\n    if (n == 24)\n        return (x % 3) == 0 && is_simple_power(x\
    \ / 3, 24);\n    if (n == 25)\n        return (x % 5) == 0 && is_simple_power(x\
    \ / 5,", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    long i = 2;\n\
    \    long result = n;\n    while (result < x)\n    {\n        result = n * i;\n\
    \        i++;\n    }\n    if (result == x)\n        return true;\n    return false;\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n    {\n        return true;\n    }\n    if\
    \ (n == 1)\n    {\n        return false;\n    }\n    if (x == n)\n    {\n    \
    \    return true;\n    }\n    if (x < n)\n    {\n        return false;\n    }\n\
    \    long i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) == x)\n    \
    \    {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n   \
    \     return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   return x == pow(n, cast(int)log(x)/log(n));\n}", "{\n    if (x == 1)\n   \
    \     return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    long temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n       \
    \ if (temp == x)\n            return true;\n    }\n    return false;\n}", "{\n\
    \    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (n == 0)\n        return false;\n    if (x == 0)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1L) return true;\n    if (n == 1L) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    long temp = n;\n    while (temp < x)\n    {\n        temp *= n;\n       \
    \ if (temp == x) return true;\n    }\n    return false;\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    return x == 1 ? true : (n == 1 ? false : pow(n, floor(log(x) / log(n)))\
    \ == x);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (n\
    \ == 0)\n        return false;\n    if (x == 0)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (n == 0) return false;\n    if (x == 0) return false;\n\
    \    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x % n !=\
    \ 0) return false;\n    long i = 0;\n    while (pow(n, i) < x)\n    {\n      \
    \  i++;\n    }\n    if (pow(n, i) == x) return true;\n    return false;\n}", "{\n\
    \    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n    {\n        return true;\n    }\n    if (n\
    \ == 1)\n    {\n        return false;\n    }\n    long i = 1;\n    while (i <\
    \ x)\n    {\n        i *= n;\n    }\n    return i == x;\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (n == x) return true;\n    if (n == 0) return false;\n    if (x == 0)\
    \ return false;\n    if (n == 2) return (x & (x - 1)) == 0;\n    if (x == 2) return\
    \ false;\n    if (n == 3) return (x % 3) == 0;\n    if (x == 3) return false;\n\
    \    if (n == 4) return (x & (x - 1)) == 0 && (x & 0x55555555) != 0;\n    if (x\
    \ == 4) return false;\n    if (n == 5) return (x % 5) == 0;\n    if (x == 5) return\
    \ false;\n    if (n == 6) return (x % 3) == 0 && (x % 2) == 0;\n    if (x == 6)\
    \ return false;\n    if (n == 7) return (x % 7) == 0;\n    if (x == 7) return\
    \ false;\n    if (n == 8) return (x & (x - 1)) == 0 && (x & 0x55555555) == 0;\n\
    \    if (x == 8) return false;\n    if (n == 9) return (x % 9) == 0;\n    if (x\
    \ == 9) return false;\n    if (n == 10) return (x % 10) == 0;\n    if (x == 10)\
    \ return false;\n    if (n == 11) return (x % 11) == 0;\n    if (x == 11) return\
    \ false;\n    if (n == 12) return (x % 3) == 0 && (x & (x - 1)) == 0;\n    if\
    \ (x == 12) return false;\n    if (n == 13) return (x % 13) == 0;\n    if (x ==\
    \ 13) return false;\n    if (n == 14) return (x % 7) == 0 && (x % 2) == 0;\n \
    \   if (x == 14) return false;\n    if (n == 15) return (x % 15) == 0;\n    if\
    \ (x == 15) return false;\n", "{\n    if (x == 1) return true;\n    if (n == 1)\
    \ return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    long res = n;\n    while (res < x)\n    {\n        res *= n;\n        if\
    \ (res == x)\n            return true;\n    }\n    return false;\n}", "{\n   \
    \ if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    else if (x == n)\n        return true;\n    else if (x < n)\n        return\
    \ false;\n    else\n    {\n        long temp = n;\n        while (temp < x)\n\
    \        {\n            temp *= n;\n            if (temp == x)\n             \
    \   return true;\n        }\n        return false;\n    }\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ log = log2(x);\n    long pow = pow(n, log);\n    if (pow == x)\n        return\
    \ true;\n    return false;\n}", "{\n    if (x == 1) return true;\n    if (n ==\
    \ 1) return false;\n    if (n == 0) return false;\n    if (x == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    long result = 1;\n    int\
    \ i = 1;\n    while(result < x)\n    {\n        result = pow(n, i);\n        i++;\n\
    \    }\n    if(result == x)\n        return true;\n    else\n        return false;\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n   \
    \     return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(long)log(x) / log(n));\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (n == 0)\
    \ return false;\n    if (x == 0) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    long l = log(x) / log(n);\n    return\
    \ x == pow(n, l);\n}", "{\n    if (x == 1)\n        return true;\n    if (n ==\
    \ 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x\
    \ < n)\n        return false;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n \
    \   if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 0) return false;\n    if (n == 0) return false;\n\
    \    if (x == 1) return true;\n    if (n == 1) return true;\n    if (x == n) return\
    \ true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n  \
    \  if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n\
    \    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x\
    \ == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n   \
    \ if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n", "{\n    if (x == 1)\n        return true;\n \
    \   if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n   \
    \ if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n  \
    \  if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n    {\n        return true;\n    }\n    else if\
    \ (n == 1)\n    {\n        return false;\n    }\n    else if (x == n)\n    {\n\
    \        return true;\n    }\n    else if (x % n != 0)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return is_simple_power(x / n, n);\n\
    \    }\n}", "{\n    return x == 1 ? true : x == n ? true : x % n == 0 ? is_simple_power(x\
    \ / n, n) : false;\n}", "{\n    if (x == 1)\n        return true;\n    if (n ==\
    \ 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x\
    \ < n)\n        return false;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n \
    \   if (n == 1) return false;\n    if (x == n) return true;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    return x == pow(n, cast(int)log(x) /\
    \ log(n));\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long i = 2;\n    while (i < x)\n    {\n        if\
    \ (pow(n, i) == x)\n            return true;\n        i++;\n    }\n    return\
    \ false;\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n   \
    \     return false;\n    if (x == n)\n        return true;\n    if (x < n)\n \
    \       return false;\n    long i = 2;\n    while (i < x)\n    {\n        if (pow(n,\
    \ i) == x)\n            return true;\n        i++;\n    }\n    return false;\n\
    }", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (n == 0)\n        return false;\n    if (x == 0)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n \
    \       return false;\n    if (n == 0)\n        return false;\n    if (x == 0)\n\
    \        return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (n == 0)\n        return false;\n\
    \    if (x == 0)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (n == 1) return true;\n \
    \   if (x == 1) return true;\n    if (x == n) return true;\n    if (n == 0) return\
    \ false;\n    if (x == 0) return false;\n    if (x < n) return false;\n    if\
    \ (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n\
    \    if (x == 1)\n    {\n        return true;\n    }\n    else if (n == 1)\n \
    \   {\n        return false;\n    }\n    else if (n == 0)\n    {\n        return\
    \ false;\n    }\n    else if (x == 0)\n    {\n        return false;\n    }\n \
    \   else if (n == x)\n    {\n        return true;\n    }\n    else if (x % n !=\
    \ 0)\n    {\n        return false;\n    }\n    else\n    {\n        return is_simple_power(x\
    \ / n, n);\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
