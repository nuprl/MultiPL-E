name: HumanEval_41_car_race_collision
language: d
prompt: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight infinitely\
  \ long line.\n    n cars are driving left to right;  simultaneously, a different\
  \ set of n cars\n    are driving right to left.   The two sets of cars start out\
  \ being very far from\n    each other.  All cars move in the same speed.  Two cars\
  \ are said to collide\n    when a car that's moving left to right hits a car that's\
  \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
  \ as a result, they continue moving\n    in their trajectory as if they did not\
  \ collide.\n\n    This function outputs the number of such collisions.\n    \n*/\n\
  long car_race_collision(long n) \n"
tests: "unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
  \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
  \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    long i, j, k, l;\n    long collision = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                collision++;\n\
    \            }\n        }\n    }\n    return collision;\n}", "{\n    long i;\n\
    \    long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz", "{\n\
    \    long i, j, k;\n    long collisions = 0;\n    float x[n], y[n];\n    float\
    \ x1[n], y1[n];\n    float x2[n], y2[n];\n    float x3[n], y3[n];\n    float x4[n],\
    \ y4[n];\n    float x5[n], y5[n];\n    float x6[n], y6[n];\n    float x7[n], y7[n];\n\
    \    float x8[n], y8[n];\n    float x9[n], y9[n];\n    float x10[n], y10[n];\n\
    \    float x11[n], y11[n];\n    float x12[n], y12[n];\n    float x13[n], y13[n];\n\
    \    float x14[n], y14[n];\n    float x15[n], y15[n];\n    float x16[n], y16[n];\n\
    \    float x17[n], y17[n];\n    float x18[n], y18[n];\n    float x19[n], y19[n];\n\
    \    float x20[n], y20[n];\n    float x21[n], y21[n];\n    float x22[n], y22[n];\n\
    \    float x23[n], y23[n];\n    float x24[n], y24[n];\n    float x25[n], y25[n];\n\
    \    float x26[n], y26[n];\n    float x27[n], y27[n];\n    float x28[n], y28[n];\n\
    \    float x29[n], y29[n];\n    float x30[n], y30[n];\n    float x31[n], y31[n];\n\
    \    float x32[n], y32[n];\n    float x33[n], y33[n];\n    float x34[n], y34[n];\n\
    \    float x35[n], y35[n];\n    float x36[n], y36[n];\n    float x37[n], y37[n];\n\
    \   ", "{\n    long i, j, k, l;\n    long m = n;\n    long count = 0;\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            for (k = 0; k\
    \ < m; k++) {\n                for (l = 0; l < m; l++) {\n                   \
    \ if (k == l) {\n                        continue;\n                    }\n  \
    \                  if (i == k && j == l) {\n                        continue;\n\
    \                    }\n                    if (i == l && j == k) {\n        \
    \                continue;\n                    }\n                    if (abs(i\
    \ - j) == abs(k - l)) {\n                        count++;\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long i, j, k, l;\n    long count = 0;\n    float x, y;\n    float x1, y1;\n\
    \    float x2, y2;\n    float x3, y3;\n    float x4, y4;\n    float x5, y5;\n\
    \    float x6, y6;\n    float x7, y7;\n    float x8, y8;\n    float x9, y9;\n\
    \    float x10, y10;\n    float x11, y11;\n    float x12, y12;\n    float x13,\
    \ y13;\n    float x14, y14;\n    float x15, y15;\n    float x16, y16;\n    float\
    \ x17, y17;\n    float x18, y18;\n    float x19, y19;\n    float x20, y20;\n \
    \   float x21, y21;\n    float x22, y22;\n    float x23, y23;\n    float x24,\
    \ y24;\n    float x25, y25;\n    float x26, y26;\n    float x27, y27;\n    float\
    \ x28, y28;\n    float x29, y29;\n    float x30, y30;\n    float x31, y31;\n \
    \   float x32, y32;\n    float x33, y33;\n    float x34, y34;\n    float x35,\
    \ y35;\n    float x36, y36;\n    float x37, y37;\n    float x38, y38;\n    float\
    \ x39, y39;\n    float x40, y40;\n    float x41, y41;\n    float x42, y42;\n \
    \   float x43, y43;\n    float x44, y44;\n    float x45, y45;\n    float x46,\
    \ y46;\n    float x47, y47;\n    float x48, y48;\n    float x49, y49;\n    float\
    \ x50, y50;\n    float x51, y51;\n    float x52, y52;\n    float x53, y53;\n \
    \   float x54, y54", "{\n    long i;\n    long j;\n    long count;\n    long temp;\n\
    \    long[] left_to_right;\n    long[] right_to_left;\n    count = 0;\n    left_to_right\
    \ = new long[n];\n    right_to_left = new long[n];\n    for (i = 0; i < n; i++)\
    \ \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = i + 1; j < n; j++)\
    \ \n        {\n            if (left_to_right[i] > left_to_right[j]) \n       \
    \     {\n                temp = left_to_right[i];\n                left_to_right[i]\
    \ = left_to_right[j];\n                left_to_right[j] = temp;\n            }\n\
    \            if (right_to_left[i] > right_to_left[j]) \n            {\n      \
    \          temp = right_to_left[i];\n                right_to_left[i] = right_to_left[j];\n\
    \                right_to_left[j] = temp;\n            }\n        }\n    }\n \
    \   for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n      \
    \  {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long num_collisions = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;",
  "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n    for (i = 0; i\
    \ < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n \
    \               count = count + 1;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long num_collisions = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc\
    \ = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n\
    \    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd\
    \ = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh\
    \ = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll\
    \ = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy\
    \ = 0;", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[]\
    \ left = new long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n;\
    \ i++) {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left[i]\
    \ == right[j]) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, k;\n    float x, y, z;\n    float a,\
    \ b, c;\n    float d;\n    float e;\n    float f;\n    float g;\n    float h;\n\
    \    float i;\n    float j;\n    float k;\n    float l;\n    float m;\n    float\
    \ n;\n    float o;\n    float p;\n    float q;\n    float r;\n    float s;\n \
    \   float t;\n    float u;\n    float v;\n    float w;\n    float x;\n    float\
    \ y;\n    float z;\n    float aa;\n    float bb;\n    float cc;\n    float dd;\n\
    \    float ee;\n    float ff;\n    float gg;\n    float hh;\n    float ii;\n \
    \   float jj;\n    float kk;\n    float ll;\n    float mm;\n    float nn;\n  \
    \  float oo;\n    float pp;\n    float qq;\n    float rr;\n    float ss;\n   \
    \ float tt;\n    float uu;\n    float vv;\n    float ww;\n    float xx;\n    float\
    \ yy;\n    float zz;\n    float aaa;\n    float bbb;\n    float ccc;\n    float\
    \ ddd;\n    float eee;\n    float fff;\n    float ggg;\n    float hhh;\n    float\
    \ iii;\n    float jjj;\n    float kkk;\n    float lll;\n    float mmm;\n    float\
    \ nnn;\n    float ooo;\n    float ppp;\n    float qqq;\n    float rrr;\n    float\
    \ sss;\n    float ttt;\n    float uuu;\n    float vvv;\n    float www;\n    float\
    \ xxx;\n    float yyy;\n    float zzz;\n    float aaaa;\n    float bbbb;\n   \
    \ float cccc;\n    float dddd;\n    float eeee;\n    float ffff;\n    float gggg;\n\
    \    float hhhh;\n    float iiii;\n    float jjjj;\n", "{\n    long collisions\
    \ = 0;\n    long left_to_right_cars = n;\n    long right_to_left_cars = n;\n \
    \   long left_to_right_car_speed = 1;\n    long right_to_left_car_speed = 1;\n\
    \    long left_to_right_car_position = 0;\n    long right_to_left_car_position\
    \ = 0;\n    long left_to_right_car_position_next = 0;\n    long right_to_left_car_position_next\
    \ = 0;\n    long left_to_right_car_position_prev = 0;\n    long right_to_left_car_position_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev = 0;\n    long right_to_left_car_position_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev = 0;\n    long right_to_left_car_position_prev_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev_prev = 0;\n    long\
    \ right_to_left_car_position_prev_prev_prev_prev = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev = 0;\n  \
    \  long left_to_right_car_position_prev_prev_prev_prev_prev_prev = 0;\n    long\
    \ right_to_left_car_position_prev_prev_prev_prev_prev_prev = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0", "{\n    long collisions = 0;\n    long i = 0;\n    while (i < n) {\n \
    \       long j = 0;\n        while (j < n) {\n            if (i == j) {\n    \
    \            j = j + 1;\n            } else {\n                collisions = collisions\
    \ + 1;\n                j = j + 1;\n            }\n        }\n        i = i +\
    \ 1;\n    }\n    return collisions;\n}", "{\n    long collisions = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long\
    \ pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt =\
    \ 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n\
    \    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n  \
    \  long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n  \
    \  long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n  \
    \  long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n  \
    \  long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n  \
    \  long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long collisions = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i, j, count = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (i < j) \n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    return n * (n - 1)\
    \ / 2;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n            }\n        }\n \
    \   }\n    return collisions;\n}", "{\n    long num_collisions = 0;\n    long\
    \ left_to_right_cars[n];\n    long right_to_left_cars[n];\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt", "{\n    long i, j, k, count;\n    float x,\
    \ y, z;\n    float[] a = new float[n];\n    float[] b = new float[n];\n    float[]\
    \ c = new float[n];\n    float[] d = new float[n];\n    float[] e = new float[n];\n\
    \    float[] f = new float[n];\n    float[] g = new float[n];\n    float[] h =\
    \ new float[n];\n    float[] i = new float[n];\n    float[] j = new float[n];\n\
    \    float[] k = new float[n];\n    float[] l = new float[n];\n    float[] m =\
    \ new float[n];\n    float[] n = new float[n];\n    float[] o = new float[n];\n\
    \    float[] p = new float[n];\n    float[] q = new float[n];\n    float[] r =\
    \ new float[n];\n    float[] s = new float[n];\n    float[] t = new float[n];\n\
    \    float[] u = new float[n];\n    float[] v = new float[n];\n    float[] w =\
    \ new float[n];\n    float[] x = new float[n];\n    float[] y = new float[n];\n\
    \    float[] z = new float[n];\n    float[] aa = new float[n];\n    float[] bb\
    \ = new float[n];\n    float[] cc = new float[n];\n    float[] dd = new float[n];\n\
    \    float[] ee = new float[n];\n    float[] ff = new float[n];\n    float[] gg\
    \ = new float[n];\n    float[] hh = new float[n];\n    float[] ii = new float[n];\n\
    \    float[] jj = new float[n];\n    float[] kk = new float[n];\n    float[] ll\
    \ = new float[n];\n    float[] mm = new float[n];\n    float[] nn = new float[n];\n\
    \    float[] oo = new float[n];\n    float[] pp = new float[n];\n    float[] qq\
    \ = new float[n];\n    float[] rr =", "{\n    long count = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i\
    \ < j) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, count;\n    count = 0;\n    for (i = 0; i < n;\
    \ i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (i\
    \ < j) \n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long i, j, k, count = 0;\n    float[] left_to_right\
    \ = new float[n];\n    float[] right_to_left = new float[n];\n    for (i = 0;\
    \ i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = i;\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (left_to_right[i] == right_to_left[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    return n * (n\
    \ - 1) / 2;\n}", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (i < j) {\n                count++;\n            }\n        }\n    }\n \
    \   return count;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            for (k = 0; k\
    \ < n; k++) {\n                if (k == i || k == j) {\n                    continue;\n\
    \                }\n                if (i < j && j < k) {\n                  \
    \  collisions++;\n                }\n            }\n        }\n    }\n    return\
    \ collisions;\n}", "{\n    long i;\n    long j;\n    long count;\n    count =\
    \ 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count = count\
    \ + 1;\n            }\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =", "{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;", "{\n    long count = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n       \
    \     if (i < j) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, count = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    return n * (n - 1) / 2;\n}", "{\n    long collisions = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if\
    \ (i < j) {\n                collisions++;\n            }\n        }\n    }\n\
    \    return collisions;\n}", "{\n    return n*(n-1)/2;\n}", "{\n    long i, j,\
    \ k;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}", "{\n    long i, j, count;\n    count = 0;\n    for (i = 0;\
    \ i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n         \
    \   if (i < j) \n            {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}", "{\n    return n*(n-1)/2;\n}", "{\n    long\
    \ i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e,\
    \ f, g, h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n  \
    \              for (l = 0; l < n; l++) {\n                    for (m = 0; m <\
    \ n; m++) {\n                        for (o = 0; o < n; o++) {\n             \
    \               for (p = 0; p < n; p++) {\n                                for\
    \ (q = 0; q < n; q++) {\n                                    for (r = 0; r < n;\
    \ r++) {\n                                        for (s = 0; s < n; s++) {\n\
    \                                            for (t = 0; t < n; t++) {\n     \
    \                                           for (u = 0; u < n; u++) {\n      \
    \                                              for (v = 0; v < n; v++) {\n   \
    \                                                     for (w = 0; w < n; w++)\
    \ {\n                                                            for (x = 0; x\
    \ < n; x++) {\n                                                              \
    \  for (y = 0; y < n; y++) {\n                                               \
    \                     for (z = 0; z < n; z++) {\n                            \
    \                                            for (a = 0; a < n; a++) {\n     \
    \                                                                       for (b\
    \ = 0; b < n; b++) {\n                                                       \
    \                         for (c = 0; c < n; c++) {\n                        \
    \                                                            for (d = 0; d < n;\
    \ d++) {\n                                                                   \
    \                     for (e = 0; e < n; e++) {\n                            \
    \                                                                for (f = 0; f\
    \ < n; f++) {\n                                                              \
    \                                  for (g = 0; g < n; g++) {\n               \
    \                                                                            \
    \         for (h = 0; h < n; h++) {\n                                        \
    \                                                                result = result\
    \ + 1;", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n\
    \    long", "{\n    return n * (n - 1) / 2;\n}", "{\n    long i;\n    long j;\n\
    \    long k;\n    long count;\n    long[] a;\n    long[] b;\n    long[] c;\n \
    \   long[] d;\n    long[] e;\n    long[] f;\n    long[] g;\n    long[] h;\n  \
    \  long[] i1;\n    long[] j1;\n    long[] k1;\n    long[] l;\n    long[] m;\n\
    \    long[] n1;\n    long[] o;\n    long[] p;\n    long[] q;\n    long[] r;\n\
    \    long[] s;\n    long[] t;\n    long[] u;\n    long[] v;\n    long[] w;\n \
    \   long[] x;\n    long[] y;\n    long[] z;\n    long[] aa;\n    long[] bb;\n\
    \    long[] cc;\n    long[] dd;\n    long[] ee;\n    long[] ff;\n    long[] gg;\n\
    \    long[] hh;\n    long[] ii;\n    long[] jj;\n    long[] kk;\n    long[] ll;\n\
    \    long[] mm;\n    long[] nn;\n    long[] oo;\n    long[] pp;\n    long[] qq;\n\
    \    long[] rr;\n    long[] ss;\n    long[] tt;\n    long[] uu;\n    long[] vv;\n\
    \    long[] ww;\n    long[] xx;\n    long[] yy;\n    long[] zz;\n    long[] aaa;\n\
    \    long[] bbb;\n    long[] ccc;\n    long[] ddd;\n    long[] eee;\n    long[]\
    \ fff;\n    long[] ggg;\n    long[] hhh;\n    long[] iii;\n    long[] jjj;\n \
    \   long[] kkk;\n    long[] lll;\n    long[] mmm;\n    long[] nnn;\n    long[]\
    \ ooo;\n    long[] ppp;\n    long[] qqq;\n    long[] rrr;\n    long[] sss;\n \
    \   long[] ttt;\n    long[] uuu;\n    long[] vvv;\n    long[]", "{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long ans;\n    ans = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          ans = ans + 1;\n            }\n        }\n    }\n    return ans;\n}",
  "{\n    long i, j, k, collisions;\n    float x[n], y[n], z[n];\n    float a[n],\
    \ b[n], c[n];\n    float t[n];\n    collisions = 0;\n    for (i = 0; i < n; i++)\
    \ {\n        x[i] = random();\n        y[i] = random();\n        z[i] = random();\n\
    \        a[i] = random();\n        b[i] = random();\n        c[i] = random();\n\
    \        t[i] = random();\n    }\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (t[i] < t[j]) {\n                k = i;\n\
    \                i = j;\n                j = k;\n            }\n            if\
    \ (x[i] - x[j] < 0) {\n                collisions++;\n            }\n        }\n\
    \    }\n    return collisions;\n}", "{\n    long i, j, k, l, m, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long A, B, C, D, E,\
    \ F, G, H;\n    long I, J, K, L, M, N, O, P;\n    long Q, R, S, T, U, V, W, X;\n\
    \    long Y, Z;\n    long AA, BB, CC, DD, EE, FF, GG, HH;\n    long II, JJ, KK,\
    \ LL, MM, NN, OO, PP;\n    long QQ, RR, SS, TT, UU, VV, WW, XX;\n    long YY,\
    \ ZZ;\n    long AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH;\n    long III, JJJ, KKK,\
    \ LLL, MMM, NNN, OOO, PPP;\n    long QQQ, RRR, SSS, TTT, UUU, VVV, WWW, XXX;\n\
    \    long YYY, ZZZ;\n    long AAAA, BBBB, CCCC, DDDD, EEEE, FFFF, GGGG, HHHH;\n\
    \    long IIII, JJJJ, KKKK, LLLL, MMMM, NNNN, OOOO, PPPP;\n    long QQQQ, RRRR,\
    \ SSSS, TTTT, UUUU, VVVV, WWWW, XXXX;\n    long YYYY, ZZZZ;\n    long AAAAA, BBBBB,\
    \ CCCCC, DDDDD, EEEEE, FFFFF, GGGGG, HHHHH;\n    long IIIII, JJJJJ, KKKKK, LLLLL,\
    \ MMMMM, NNNNN, OOOOO, PPPPP;\n    long QQQQQ, RRRRR, SSSSS, TTTTT, UUUUU, VVVVV,\
    \ WWWWW, XXXXX;\n    long YYYYY, ZZZZZ;\n    long AAAAAA, BBBBBB,", "{\n    return\
    \ n * (n - 1) / 2;\n}", "{\n    long i, j, k, l, m, o, p, q, r, s, t, u, v, w,\
    \ x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k =\
    \ 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n              \
    \      for (m = 0; m < n; m++) {\n                        for (o = 0; o < n; o++)\
    \ {\n                            for (p = 0; p < n; p++) {\n                 \
    \               for (q = 0; q < n; q++) {\n                                  \
    \  for (r = 0; r < n; r++) {\n                                        for (s =\
    \ 0; s < n; s++) {\n                                            for (t = 0; t\
    \ < n; t++) {\n                                                for (u = 0; u <\
    \ n; u++) {\n                                                    for (v = 0; v\
    \ < n; v++) {\n                                                        for (w\
    \ = 0; w < n; w++) {\n                                                       \
    \     for (x = 0; x < n; x++) {\n                                            \
    \                    for (y = 0; y < n; y++) {\n                             \
    \                                       for (z = 0; z < n; z++) {\n          \
    \                                                              for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \            for (b = 0; b < n; b++) {\n                                     \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \  for (d = 0; d < n; d++) {\n                                               \
    \                                         for (e = 0; e < n; e++) {\n        \
    \                                                                            \
    \        for (f = 0; f < n; f++) {\n                                         \
    \                                                       for (g = 0; g < n; g++)\
    \ {\n                                                                        \
    \                            for (h = 0; h < n; h++) {\n                     \
    \                                                                            \
    \       result++;\n                                                          \
    \                                          }", "{\n    long i = 0;\n    long j\
    \ = 0;\n    long count = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j\
    \ = 0; j < n; j++)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (i < j) {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long i, j, k;\n    long a[n];\n    long b[n];\n    long\
    \ c[n];\n    long d[n];\n    long count = 0;\n    for (i = 0; i < n; i++) {\n\
    \        a[i] = i;\n        b[i] = n - i;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        c[i] = a[i];\n        d[i] = b[i];\n    }\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            if (c[i] == d[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n    for (i\
    \ = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n    \
    \        if (i < j) \n            {\n                count = count + 1;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    long collisions =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long* left_to_right;\n    long*\
    \ right_to_left;\n    long* left_to_right_sorted;\n    long* right_to_left_sorted;\n\
    \    long* left_to_right_sorted_index;\n    long* right_to_left_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted;\n    long* right_to_left_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index;\n    long* right_to_left_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted;\n    long* right_to_left_sorted_index_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index;\n    long* right_to_left_sorted_index_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted;\n    long*\
    \ right_to_left_sorted_index_sorted_index_sorted_index_sorted;\n    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long* right_to_left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long* right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index", "{\n    long collisions =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                collisions++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }", "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = i + 1; j < n; j++) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p =\
    \ 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n   \
    \ long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y =\
    \ 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =\
    \ 0;\n    long bz", "{\n    long i, j, k;\n    long count = 0;\n    long* left_to_right\
    \ = new long[n];\n    long* right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    if (n < 1)\n        return 0;\n    return n *\
    \ (n - 1) / 2;\n}", "{\n    long i, j, k, l, m, n;\n    long a[n];\n    long b[n];\n\
    \    long c[n];\n    long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n\
    \    long h[n];\n    long i[n];\n    long j[n];\n    long k[n];\n    long l[n];\n\
    \    long m[n];\n    long n[n];\n    long o[n];\n    long p[n];\n    long q[n];\n\
    \    long r[n];\n    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n\
    \    long w[n];\n    long x[n];\n    long y[n];\n    long z[n];\n    long aa[n];\n\
    \    long ab[n];\n    long ac[n];\n    long ad[n];\n    long ae[n];\n    long\
    \ af[n];\n    long ag[n];\n    long ah[n];\n    long ai[n];\n    long aj[n];\n\
    \    long ak[n];\n    long al[n];\n    long am[n];\n    long an[n];\n    long\
    \ ao[n];\n    long ap[n];\n    long aq[n];\n    long ar[n];\n    long as[n];\n\
    \    long at[n];\n    long au[n];\n    long av[n];\n    long aw[n];\n    long\
    \ ax[n];\n    long ay[n];\n    long az[n];\n    long ba[n];\n    long bb[n];\n\
    \    long bc[n];\n    long bd[n];\n    long be[n];\n    long bf[n];\n    long\
    \ bg[n];\n    long bh[n];\n    long bi[n];\n    long bj[n];\n    long bk[n];\n\
    \    long bl[n];\n    long bm[n];\n    long bn[n];\n    long bo[n];\n    long\
    \ bp[n];\n    long", "{\n    long i = 0;\n    long j = 0;\n    long collision\
    \ = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left = new\
    \ long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n\
    \    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collision++;\n       \
    \     }\n        }\n    }\n    return collision;\n}", "{\n    long i, j, k, l,\
    \ m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n\
    \                        for (n = 0; n < n; n++) {\n                         \
    \   for (o = 0; o < n; o++) {\n                                for (p = 0; p <\
    \ n; p++) {\n                                    for (q = 0; q < n; q++) {\n \
    \                                       for (r = 0; r < n; r++) {\n          \
    \                                  for (s = 0; s < n; s++) {\n               \
    \                                 for (t = 0; t < n; t++) {\n                \
    \                                    for (u = 0; u < n; u++) {\n             \
    \                                           for (v = 0; v < n; v++) {\n      \
    \                                                      for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =", "{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long res;\n    res = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++)\
    \ {\n                for (l = 0; l < n; l++) {\n                    for (m = 0;\
    \ m < n; m++) {\n                        for (n = 0; n < n; n++) {\n         \
    \                   for (o = 0; o < n; o++) {\n                              \
    \  for (p = 0; p < n; p++) {\n                                    for (q = 0;\
    \ q < n; q++) {\n                                        for (r = 0; r < n; r++)\
    \ {\n                                            for (s = 0; s < n; s++) {\n \
    \                                               for (t = 0; t < n; t++) {\n  \
    \                                                  for (u = 0; u < n; u++) {\n\
    \                                                        for (v = 0; v < n; v++)\
    \ {\n                                                            for (w = 0; w\
    \ < n; w++) {\n                                                              \
    \  for (x = 0; x < n; x++) {\n                                               \
    \                     for (y = 0; y < n; y++) {\n                            \
    \                                            for (z = 0; z < n; z++) {\n     \
    \                                                                       for (a\
    \ = 0; a < n; a++) {\n                                                       \
    \                         for (b = 0; b < n; b++) {\n                        \
    \                                                            for (c = 0; c < n;\
    \ c++) {\n                                                                   \
    \                     for (d = 0; d < n; d++) {\n                            \
    \                                                                for (e = 0; e\
    \ < n; e++) {\n                                                              \
    \                                  for (f = 0; f < n; f++) {\n               \
    \                                                                            \
    \         for (g = 0; g < n; g++) {\n                                        \
    \                                                                for (h =", "{\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long collisions = 0;\n\
    \    long[] left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n   ", "{\n    long i, j, k;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i;\n   \
    \ long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n  \
    \          {\n                count = count + 1;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long result = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long\
    \ ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag =\
    \ 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n\
    \    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long\
    \ ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at =\
    \ 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n\
    \    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long\
    \ bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg =\
    \ 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n\
    \    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long\
    \ bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt =\
    \ 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n\
    \    long by = 0;\n    long bz", "{\n    long collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    while (i < n) {\n        while (j < n) {\n            if\
    \ (i == j) {\n                collisions++;\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    return collisions;\n}", "{\n    return n\
    \ * (n - 1) / 2;\n}", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n\
    \    while (i < n && j < n) \n    {\n        if (i == j) \n        {\n       \
    \     count++;\n            i++;\n            j++;\n        } \n        else if\
    \ (i < j) \n        {\n            i++;\n        } \n        else \n        {\n\
    \            j++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz", "{\n    long i, j,\
    \ k, count;\n    float x1, x2, y1, y2, m1, m2, c1, c2;\n    count = 0;\n    for\
    \ (i = 0; i < n; i++) {\n        x1 = random(0, 100);\n        y1 = random(0,\
    \ 100);\n        m1 = random(-1, 1);\n        c1 = y1 - m1 * x1;\n        for\
    \ (j = 0; j < n; j++) {\n            x2 = random(0, 100);\n            y2 = random(0,\
    \ 100);\n            m2 = random(-1, 1);\n            c2 = y2 - m2 * x2;\n   \
    \         if (m1 == m2) {\n                if (c1 == c2) {\n                 \
    \   count++;\n                }\n            } else {\n                k = (c2\
    \ - c1) / (m1 - m2);\n                if (k > 0 && k < 100) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y,\
    \ z;\n    long a, b, c, d, e, f, g, h;\n    long result = 0;\n    for (i = 0;\
    \ i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0; k\
    \ < n; k++) {\n                for (l = 0; l < n; l++) {\n                   \
    \ for (m = 0; m < n; m++) {\n                        for (n = 0; n < n; n++) {\n\
    \                            for (o = 0; o < n; o++) {\n                     \
    \           for (p = 0; p < n; p++) {\n                                    for\
    \ (q = 0; q < n; q++) {\n                                        for (r = 0; r\
    \ < n; r++) {\n                                            for (s = 0; s < n;\
    \ s++) {\n                                                for (t = 0; t < n; t++)\
    \ {\n                                                    for (u = 0; u < n; u++)\
    \ {\n                                                        for (v = 0; v < n;\
    \ v++) {\n                                                            for (w =\
    \ 0; w < n; w++) {\n                                                         \
    \       for (x = 0; x < n; x++) {\n                                          \
    \                          for (y = 0; y < n; y++) {\n                       \
    \                                                 for (z = 0; z < n; z++) {\n\
    \                                                                            for\
    \ (a = 0; a < n; a++) {\n                                                    \
    \                            for (b = 0; b < n; b++) {\n                     \
    \                                                               for (c = 0; c\
    \ < n; c++) {\n                                                              \
    \                          for (d = 0; d < n; d++) {\n                       \
    \                                                                     for (e =\
    \ 0; e < n; e++) {\n                                                         \
    \                                       for (f = 0; f < n; f++) {\n          \
    \                                                                            \
    \              for (g = 0; g < n; g++) {\n                                   \
    \                                                                     for (h =\
    \ 0; h <", "{\n    long i, j, k, l;\n    long collisions = 0;\n    long[] left_to_right_cars\
    \ = new long[n];\n    long[] right_to_left_cars = new long[n];\n    for (i = 0;\
    \ i < n; i++) \n    {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right_cars[i] == right_to_left_cars[j])\
    \ \n            {\n                collisions++;\n                for (k = j;\
    \ k < n - 1; k++) \n                {\n                    right_to_left_cars[k]\
    \ = right_to_left_cars[k + 1];\n                }\n                for (l = i;\
    \ l < n - 1; l++) \n                {\n                    left_to_right_cars[l]\
    \ = left_to_right_cars[l + 1];\n                }\n                n--;\n    \
    \            break;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[] left\
    \ = new long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n; i++)\
    \ \n    {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for\
    \ (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n \
    \           if (left[i] == right[j]) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long num_collisions = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n \
    \   long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n \
    \   long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;", "{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[] left = new\
    \ long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n; i++) \n  \
    \  {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n    i = 0;\n\
    \    j = 0;\n    while (i < n && j < n) \n    {\n        if (left[i] < right[j])\
    \ \n        {\n            count += j;\n            i++;\n        }\n        else\
    \ \n        {\n            j++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n    {\n        for\
    \ (j = 0; j < n; j++)\n        {\n            for (k = 0; k < n; k++)\n      \
    \      {\n                if (i < j && j < k)\n                {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[]\
    \ left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n    for\
    \ (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i;\n    long j;\n    long count;\n    count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count = count + 1;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n        if (i < j)\
    \ \n        {\n            count += j - i;\n            i++;\n        } \n   \
    \     else \n        {\n            j++;\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss,\
    \ tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh,\
    \ iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx,\
    \ yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj,\
    \ kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww,\
    \ xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg,\
    \ hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr,\
    \ sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb,\
    \ cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll,\
    \ mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv,\
    \ wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long", "{\n    long result = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long\
    \ pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt =\
    \ 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n\
    \    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n  \
    \  long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n  \
    \  long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long xxx = 0;\n   ", "{\n    long i, j, k, l;\n    long\
    \ count = 0;\n    float x[n], y[n];\n    float x1[n], y1[n];\n    float a[n],\
    \ b[n];\n    float c[n], d[n];\n    float e[n], f[n];\n    float g[n], h[n];\n\
    \    float m[n], p[n];\n    float q[n], r[n];\n    float s[n], t[n];\n    float\
    \ u[n], v[n];\n    float w[n], z[n];\n    float a1[n], b1[n];\n    float c1[n],\
    \ d1[n];\n    float e1[n], f1[n];\n    float g1[n], h1[n];\n    float m1[n], p1[n];\n\
    \    float q1[n], r1[n];\n    float s1[n], t1[n];\n    float u1[n], v1[n];\n \
    \   float w1[n], z1[n];\n    float a2[n], b2[n];\n    float c2[n], d2[n];\n  \
    \  float e2[n], f2[n];\n    float g2[n], h2[n];\n    float m2[n], p2[n];\n   \
    \ float q2[n], r2[n];\n    float s2[n], t2[n];\n    float u2[n], v2[n];\n    float\
    \ w2[n], z2[n];\n    float a3[n], b3[n];\n    float c3[n], d3[n];\n    float e3[n],\
    \ f3[n];\n    float g3[n], h3[n];\n    float m3[n], p3[n];\n    float q3[n], r3[n];\n\
    \    float s3[n], t3[n];\n    float u3[n], v3[n];\n    float w3[n], z3[n];\n \
    \   float a4[n], b4[n];\n    float c4", "{\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab\
    \ = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n\
    \    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long\
    \ ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao =\
    \ 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n\
    \    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long\
    \ ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb =\
    \ 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n\
    \    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long\
    \ bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo =\
    \ 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n\
    \    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long\
    \ bx = 0;\n    long by = 0;\n    long bz", "{\n    long i, j, k, l;\n    long[]\
    \ a = new long[n];\n    long[] b = new long[n];\n    long[] c = new long[n];\n\
    \    long[] d = new long[n];\n    long[] e = new long[n];\n    long[] f = new\
    \ long[n];\n    long[] g = new long[n];\n    long[] h = new long[n];\n    long[]\
    \ i1 = new long[n];\n    long[] j1 = new long[n];\n    long[] k1 = new long[n];\n\
    \    long[] l1 = new long[n];\n    long[] m = new long[n];\n    long[] n1 = new\
    \ long[n];\n    long[] o = new long[n];\n    long[] p = new long[n];\n    long[]\
    \ q = new long[n];\n    long[] r = new long[n];\n    long[] s = new long[n];\n\
    \    long[] t = new long[n];\n    long[] u = new long[n];\n    long[] v = new\
    \ long[n];\n    long[] w = new long[n];\n    long[] x = new long[n];\n    long[]\
    \ y = new long[n];\n    long[] z = new long[n];\n    long[] aa = new long[n];\n\
    \    long[] bb = new long[n];\n    long[] cc = new long[n];\n    long[] dd = new\
    \ long[n];\n    long[] ee = new long[n];\n    long[] ff = new long[n];\n    long[]\
    \ gg = new long[n];\n    long[] hh = new long[n];\n    long[] ii = new long[n];\n\
    \    long[] jj = new long[n];\n    long[] kk = new long[n];\n    long[] ll = new\
    \ long[n];\n    long[] mm = new long[n];\n    long[] nn = new long[n];\n    long[]\
    \ oo = new long[n];\n    long[] pp = new long[n];\n    long[] qq = new long[n];\n\
    \    long[] rr = new long[n", "{\n    long i, j, k, l, m, o, p, q, r, s, t, u,\
    \ v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result;\n    result\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         for (k = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n\
    \                    for (m = 0; m < n; m++) {\n                        for (o\
    \ = 0; o < n; o++) {\n                            for (p = 0; p < n; p++) {\n\
    \                                for (q = 0; q < n; q++) {\n                 \
    \                   for (r = 0; r < n; r++) {\n                              \
    \          for (s = 0; s < n; s++) {\n                                       \
    \     for (t = 0; t < n; t++) {\n                                            \
    \    for (u = 0; u < n; u++) {\n                                             \
    \       for (v = 0; v < n; v++) {\n                                          \
    \              for (w = 0; w < n; w++) {\n                                   \
    \                         for (x = 0; x < n; x++) {\n                        \
    \                                        for (y = 0; y < n; y++) {\n         \
    \                                                           for (z = 0; z < n;\
    \ z++) {\n                                                                   \
    \     for (a = 0; a < n; a++) {\n                                            \
    \                                for (b = 0; b < n; b++) {\n                 \
    \                                                               for (c = 0; c\
    \ < n; c++) {\n                                                              \
    \                      for (d = 0; d < n; d++) {\n                           \
    \                                                             for (e = 0; e <\
    \ n; e++) {\n                                                                \
    \                            for (f = 0; f < n; f++) {\n                     \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                for (h = 0; h < n; h++) {\n \
    \                                                                            \
    \                           result++;\n                                      \
    \          ", "{\n    long i, j, k, l, m, n;\n    long a[n];\n    long b[n];\n\
    \    long c[n];\n    long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n\
    \    long h[n];\n    long i[n];\n    long j[n];\n    long k[n];\n    long l[n];\n\
    \    long m[n];\n    long n[n];\n    long o[n];\n    long p[n];\n    long q[n];\n\
    \    long r[n];\n    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n\
    \    long w[n];\n    long x[n];\n    long y[n];\n    long z[n];\n    long aa[n];\n\
    \    long ab[n];\n    long ac[n];\n    long ad[n];\n    long ae[n];\n    long\
    \ af[n];\n    long ag[n];\n    long ah[n];\n    long ai[n];\n    long aj[n];\n\
    \    long ak[n];\n    long al[n];\n    long am[n];\n    long an[n];\n    long\
    \ ao[n];\n    long ap[n];\n    long aq[n];\n    long ar[n];\n    long as[n];\n\
    \    long at[n];\n    long au[n];\n    long av[n];\n    long aw[n];\n    long\
    \ ax[n];\n    long ay[n];\n    long az[n];\n    long ba[n];\n    long bb[n];\n\
    \    long bc[n];\n    long bd[n];\n    long be[n];\n    long bf[n];\n    long\
    \ bg[n];\n    long bh[n];\n    long bi[n];\n    long bj[n];\n    long bk[n];\n\
    \    long bl[n];\n    long bm[n];\n    long bn[n];\n    long bo[n];\n    long\
    \ bp[n];\n    long", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n\
    \    long[] left = new long[n];\n    long[] right = new long[n];\n    for (i =\
    \ 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (left[i] == right[j]) \n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long i,j,k,l;\n    long count = 0;\n    long a[n];\n    long b[n];\n    for(i=0;i<n;i++)\n\
    \    {\n        a[i] = i;\n        b[i] = i;\n    }\n    for(i=0;i<n;i++)\n  \
    \  {\n        for(j=0;j<n;j++)\n        {\n            if(a[i] == b[j])\n    \
    \        {\n                count = count + 1;\n            }\n        }\n   \
    \ }\n    return count;\n}", "{\n    long i;\n    long j;\n    long k;\n    long\
    \ l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long\
    \ r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long\
    \ x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n    long ac;\n   \
    \ long ad;\n    long ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n\
    \    long aj;\n    long ak;\n    long al;\n    long am;\n    long an;\n    long\
    \ ao;\n    long ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n\
    \    long au;\n    long av;\n    long aw;\n    long ax;\n    long ay;\n    long\
    \ az;\n    long ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n\
    \    long bf;\n    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long\
    \ bk;\n    long bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n\
    \    long bq;\n    long br;\n    long bs;\n    long bt;\n    long bu;\n    long\
    \ bv;\n    long bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n\
    \    long cb;\n    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long\
    \ cg;\n    long ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n\
    \    long cm;\n    long cn;\n    long co;\n    long cp;\n    long cq;\n    long\
    \ cr;\n    long cs;\n    long ct;\n    long cu;\n    long cv;\n    long cw;\n\
    \    long cx;\n    long cy;\n   ", "{\n    return n * (n - 1) / 2;\n}", "{\n \
    \   long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long\
    \ ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii =\
    \ 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n\
    \    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long", "{\n    long\
    \ collisions = 0;\n    long left_to_right_cars = n;\n    long right_to_left_cars\
    \ = n;\n    while (left_to_right_cars > 0 && right_to_left_cars > 0) {\n     \
    \   if (left_to_right_cars > right_to_left_cars) {\n            collisions +=\
    \ right_to_left_cars;\n            left_to_right_cars -= right_to_left_cars;\n\
    \            right_to_left_cars = 0;\n        } else {\n            collisions\
    \ += left_to_right_cars;\n            right_to_left_cars -= left_to_right_cars;\n\
    \            left_to_right_cars = 0;\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k, l, m, n;\n    long collision = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collision++;\n            }\n        }\n  \
    \  }\n    return collision;\n}", "{\n    long i, j, count = 0;\n    for (i = 0;\
    \ i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n         \
    \   if (i < j) \n            {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}", "{\n    long i, j, count = 0;\n    for (i\
    \ = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n    \
    \        if (i < j) \n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long i, j, k, count;\n    float\
    \ x, y, z;\n    float[] a = new float[n];\n    float[] b = new float[n];\n   \
    \ float[] c = new float[n];\n    float[] d = new float[n];\n    float[] e = new\
    \ float[n];\n    float[] f = new float[n];\n    float[] g = new float[n];\n  \
    \  float[] h = new float[n];\n    float[] i1 = new float[n];\n    float[] j1 =\
    \ new float[n];\n    float[] k1 = new float[n];\n    float[] l = new float[n];\n\
    \    float[] m = new float[n];\n    float[] n1 = new float[n];\n    float[] o\
    \ = new float[n];\n    float[] p = new float[n];\n    float[] q = new float[n];\n\
    \    float[] r = new float[n];\n    float[] s = new float[n];\n    float[] t =\
    \ new float[n];\n    float[] u = new float[n];\n    float[] v = new float[n];\n\
    \    float[] w = new float[n];\n    float[] x1 = new float[n];\n    float[] y1\
    \ = new float[n];\n    float[] z1 = new float[n];\n    float[] aa = new float[n];\n\
    \    float[] bb = new float[n];\n    float[] cc = new float[n];\n    float[] dd\
    \ = new float[n];\n    float[] ee = new float[n];\n    float[] ff = new float[n];\n\
    \    float[] gg = new float[n];\n    float[] hh = new float[n];\n    float[] ii\
    \ = new float[n];\n    float[] jj = new float[n];\n    float[] kk = new float[n];\n\
    \    float[] ll = new float[n];\n    float[] mm = new float[n];\n    float[] nn\
    \ = new float[n];\n    float[] oo = new float[n];\n    float[] pp = new float[n];\n\
    \    float[] qq = new float[n];", "{\n    long result = 0;\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n        {\n \
    \           if (i < j) \n            {\n                result++;\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    for\
    \ (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n  \
    \      {\n            if (i < j) \n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    return n*(n-1)/2;\n\
    }", "{\n    long i, j, k;\n    long cnt = 0;\n    long[] a = new long[n];\n  \
    \  long[] b = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        a[i]\
    \ = i;\n        b[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n\
    \        for (j = 0; j < n; j++) \n        {\n            if (a[i] > b[j]) \n\
    \            {\n                cnt++;\n            }\n        }\n    }\n    return\
    \ cnt;\n}", "{\n    long i, j, k, l;\n    long count = 0;\n    float x, y;\n \
    \   float x1, y1;\n    float x2, y2;\n    float x3, y3;\n    float x4, y4;\n \
    \   float x5, y5;\n    float x6, y6;\n    float x7, y7;\n    float x8, y8;\n \
    \   float x9, y9;\n    float x10, y10;\n    float x11, y11;\n    float x12, y12;\n\
    \    float x13, y13;\n    float x14, y14;\n    float x15, y15;\n    float x16,\
    \ y16;\n    float x17, y17;\n    float x18, y18;\n    float x19, y19;\n    float\
    \ x20, y20;\n    float x21, y21;\n    float x22, y22;\n    float x23, y23;\n \
    \   float x24, y24;\n    float x25, y25;\n    float x26, y26;\n    float x27,\
    \ y27;\n    float x28, y28;\n    float x29, y29;\n    float x30, y30;\n    float\
    \ x31, y31;\n    float x32, y32;\n    float x33, y33;\n    float x34, y34;\n \
    \   float x35, y35;\n    float x36, y36;\n    float x37, y37;\n    float x38,\
    \ y38;\n    float x39, y39;\n    float x40, y40;\n    float x41, y41;\n    float\
    \ x42, y42;\n    float x43, y43;\n    float x44, y44;\n    float x45, y45;\n \
    \   float x46, y46;\n    float x47, y47;\n    float x48, y48;\n    float x49,\
    \ y49;\n    float x50, y50;\n    float x51, y51;\n    float x52, y52;\n    float\
    \ x53, y53;\n    float x54, y54", "{\n    long collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    while (i < n && j < n) {\n        if (i == j) {\n      \
    \      collisions++;\n            i++;\n            j++;\n        } else if (i\
    \ < j) {\n            i++;\n        } else {\n            j++;\n        }\n  \
    \  }\n    return collisions;\n}", "{\n    long i, j, k, l, m, o, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result = 0;\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  for (k = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n    \
    \                for (m = 0; m < n; m++) {\n                        for (o = 0;\
    \ o < n; o++) {\n                            for (p = 0; p < n; p++) {\n     \
    \                           for (q = 0; q < n; q++) {\n                      \
    \              for (r = 0; r < n; r++) {\n                                   \
    \     for (s = 0; s < n; s++) {\n                                            for\
    \ (t = 0; t < n; t++) {\n                                                for (u\
    \ = 0; u < n; u++) {\n                                                    for\
    \ (v = 0; v < n; v++) {\n                                                    \
    \    for (w = 0; w < n; w++) {\n                                             \
    \               for (x = 0; x < n; x++) {\n                                  \
    \                              for (y = 0; y < n; y++) {\n                   \
    \                                                 for (z = 0; z < n; z++) {\n\
    \                                                                        for (a\
    \ = 0; a < n; a++) {\n                                                       \
    \                     for (b = 0; b < n; b++) {\n                            \
    \                                                    for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \        for (d = 0; d < n; d++) {\n                                         \
    \                                               for (e = 0; e < n; e++) {\n  \
    \                                                                            \
    \              for (f = 0; f < n; f++) {\n                                   \
    \                                                             for (g = 0; g <\
    \ n; g++) {\n                                                                \
    \                                    for (h = 0; h < n; h++) {\n             \
    \                                                                            \
    \               result++;\n                                                  \
    \                                                  }", "{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i, j, k,\
    \ l;\n    long collision = 0;\n    for (i = 0; i < n; i++) {\n        for (j =\
    \ 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    if (i == j || k == l) {\n       \
    \                 continue;\n                    }\n                    if (i\
    \ == k && j == l) {\n                        continue;\n                    }\n\
    \                    if (i < j && k > l) {\n                        collision++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return collision;\n}", "{\n    long i = 0;\n    long j = 0;\n    long count\
    \ = 0;\n    while (i < n) {\n        j = 0;\n        while (j < n) {\n       \
    \     if (i == j) {\n                j = j + 1;\n                continue;\n \
    \           }\n            if (i < j) {\n                count = count + 1;\n\
    \            }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n\
    \    return count;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v,\
    \ w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result;\n    long[]\
    \ left_to_right_cars;\n    long[] right_to_left_cars;\n    long[] collisions;\n\
    \    long num_collisions;\n    long num_left_to_right_cars;\n    long num_right_to_left_cars;\n\
    \    long num_cars;\n    long num_cars_per_direction;\n    long num_cars_per_direction_minus_one;\n\
    \    long num_cars_per_direction_minus_two;\n    long num_cars_per_direction_minus_three;\n\
    \    long num_cars_per_direction_minus_four;\n    long num_cars_per_direction_minus_five;\n\
    \    long num_cars_per_direction_minus_six;\n    long num_cars_per_direction_minus_seven;\n\
    \    long num_cars_per_direction_minus_eight;\n    long num_cars_per_direction_minus_nine;\n\
    \    long num_cars_per_direction_minus_ten;\n    long num_cars_per_direction_minus_eleven;\n\
    \    long num_cars_per_direction_minus_twelve;\n    long num_cars_per_direction_minus_thirteen;\n\
    \    long num_cars_per_direction_minus_fourteen;\n    long num_cars_per_direction_minus_fifteen;\n\
    \    long num_cars_per_direction_minus_sixteen;\n    long num_cars_per_direction_minus_seventeen;\n\
    \    long num_cars_per_direction_minus_eighteen;\n    long num_cars_per_direction_minus_nineteen;\n\
    \    long num_cars_per_direction_minus_twenty;\n    long num_cars_per_direction_minus_twenty_one;\n\
    \    long num_cars_per_direction_minus_twenty_two;\n    long num_cars_per_direction_minus_twenty_three;",
  "{\n    long i, j, k, l;\n    long count = 0;\n    long[] left = new long[n];\n\
    \    long[] right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n      \
    \  left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n;\
    \ i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i]\
    \ == right[j]) \n            {\n                count++;\n                for\
    \ (k = j; k < n - 1; k++) \n                {\n                    right[k] =\
    \ right[k + 1];\n                }\n                for (l = i; l < n - 1; l++)\
    \ \n                {\n                    left[l] = left[l + 1];\n          \
    \      }\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, k;\n    long count = 0;\n    long *left = new\
    \ long[n];\n    long *right = new long[n];\n    for (i = 0; i < n; i++) {\n  \
    \      left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i <\
    \ n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left[i] == right[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss,\
    \ tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh,\
    \ iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx,\
    \ yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj,\
    \ kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww,\
    \ xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg,\
    \ hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr,\
    \ sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb,\
    \ cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll,\
    \ mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv,\
    \ wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long", "{\n    long i, j, count = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = i + 1; j < n; j++) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i < j) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}", "{\n    long collisions = 0;\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n      \
    \  if (i < j) \n        {\n            collisions += j - i;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return collisions;\n}", "{\n    long i, j, k, l;\n    long collisions = 0;\n\
    \    long* left_to_right = new long[n];\n    long* right_to_left = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n                for (k = j;\
    \ k < n - 1; k++) \n                {\n                    right_to_left[k] =\
    \ right_to_left[k + 1];\n                }\n                for (l = i; l < n\
    \ - 1; l++) \n                {\n                    left_to_right[l] = left_to_right[l\
    \ + 1];\n                }\n                break;\n            }\n        }\n\
    \    }\n    return collisions;\n}", "{\n    return n * (n - 1) / 2;\n}", "{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[] left = new\
    \ long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n; i++) \n  \
    \  {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for (i =\
    \ 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n      \
    \      if (left[i] == right[j]) \n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}", "{\n    long i, j, count;\n\
    \    float x1, x2, y1, y2;\n    count = 0;\n    for (i = 0; i < n; i++) {\n  \
    \      x1 = random(0, 100);\n        y1 = random(0, 100);\n        for (j = 0;\
    \ j < n; j++) {\n            x2 = random(0, 100);\n            y2 = random(0,\
    \ 100);\n            if (x1 < x2 && y1 < y2) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k, l;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] > right[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < n && j < n) \n    {\n        if (i < j) \n        {\n            collisions\
    \ += j - i;\n            i++;\n        } \n        else \n        {\n        \
    \    j++;\n        }\n    }\n    return collisions;\n}", "{\n    long result =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk\
    \ = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n\
    \    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long\
    \ vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz =\
    \ 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n\
    \    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long\
    \ sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long\
    \ www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long\
    \ aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;", "{\n    return n*(n-1)/2;\n\
    }", "{\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    while (i <\
    \ n && j < n) {\n        if (i == j) {\n            count++;\n            i++;\n\
    \            j++;\n        } else if (i < j) {\n            i++;\n        } else\
    \ {\n            j++;\n        }\n    }\n    return count;\n}", "{\n    long i,j,k;\n\
    \    long count=0;\n    for(i=0;i<n;i++)\n    {\n        for(j=0;j<n;j++)\n  \
    \      {\n            if(i<j)\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}", "{\n    long collisions =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) {\n       \
    \ if (i < j) {\n            collisions += j - i;\n            i++;\n        }\
    \ else {\n            j++;\n        }\n    }\n    return collisions;\n}", "{\n\
    \    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee =\
    \ 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n\
    \    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long\
    \ pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt =\
    \ 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n\
    \    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n  \
    \  long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n  \
    \  long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ppp = 0;\n  \
    \  long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n  \
    \  long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n  \
    \  long yyy = 0;\n    long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0;\n",
  "{\n    long i;\n    long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n\
    \    long[] right_to_left;\n    long temp;\n    long temp2;\n    collisions =\
    \ 0;\n    left_to_right = new long[n];\n    right_to_left = new long[n];\n   \
    \ for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (left_to_right[i] > left_to_right[j]) {\n    \
    \            temp = left_to_right[i];\n                left_to_right[i] = left_to_right[j];\n\
    \                left_to_right[j] = temp;\n            }\n            if (right_to_left[i]\
    \ > right_to_left[j]) {\n                temp2 = right_to_left[i];\n         \
    \       right_to_left[i] = right_to_left[j];\n                right_to_left[j]\
    \ = temp2;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}", "{\n    long i;\n    long j;\n    long k;\n    long collisions;\n\
    \    long[] left_to_right;\n    long[] right_to_left;\n    left_to_right = new\
    \ long[n];\n    right_to_left = new long[n];\n    collisions = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ a, b, c, d, e, f, g, h;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n  \
    \              for (l = 0; l < n; l++) {\n                    for (m = 0; m <\
    \ n; m++) {\n                        for (n = 0; n < n; n++) {\n             \
    \               for (o = 0; o < n; o++) {\n                                for\
    \ (p = 0; p < n; p++) {\n                                    for (q = 0; q < n;\
    \ q++) {\n                                        for (r = 0; r < n; r++) {\n\
    \                                            for (s = 0; s < n; s++) {\n     \
    \                                           for (t = 0; t < n; t++) {\n      \
    \                                              for (u = 0; u < n; u++) {\n   \
    \                                                     for (v = 0; v < n; v++)\
    \ {\n                                                            for (w = 0; w\
    \ < n; w++) {\n                                                              \
    \  for (x = 0; x < n; x++) {\n                                               \
    \                     for (y = 0; y < n; y++) {\n                            \
    \                                            for (z = 0; z < n; z++) {\n     \
    \                                                                       for (a\
    \ = 0; a < n; a++) {\n                                                       \
    \                         for (b = 0; b < n; b++) {\n                        \
    \                                                            for (c = 0; c < n;\
    \ c++) {\n                                                                   \
    \                     for (d = 0; d < n; d++) {\n                            \
    \                                                                for (e = 0; e\
    \ < n; e++) {\n                                                              \
    \                                  for (f = 0; f < n; f++) {\n               \
    \                                                                            \
    \         for (g = 0; g < n; g++) {\n                                        \
    \                                                                for (h = 0; h\
    \ <", "{\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    while (i\
    \ < n && j < n) \n    {\n        if (i < j) \n        {\n            count +=\
    \ j - i;\n            i++;\n        } \n        else \n        {\n           \
    \ j++;\n        }\n    }\n    return count;\n}", "{\n    long i, j, k, l, m, n1,\
    \ n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18,\
    \ n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34,\
    \ n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\
    \ n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,\
    \ n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82,\
    \ n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98,\
    \ n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111,\
    \ n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124,\
    \ n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137,\
    \ n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150,\
    \ n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163,\
    \ n164, n165, n166", "{\n    long i,j,k;\n    long count = 0;\n    long[] a =\
    \ new long[n];\n    long[] b = new long[n];\n    for (i = 0; i < n; i++) {\n \
    \       a[i] = i;\n        b[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (a[i] > b[j]) {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n  \
    \  long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz",
  "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n  \
    \  long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz",
  "{\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n;\
    \ i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if\
    \ (i < j) {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long collisions = 0;\n    long i = 0;\n    long j = n -\
    \ 1;\n    while (i < n && j >= 0) \n    {\n        if (i == j) \n        {\n \
    \           collisions += 1;\n            i += 1;\n            j -= 1;\n     \
    \   } \n        else if (i < j) \n        {\n            collisions += j - i;\n\
    \            i += 1;\n        } \n        else \n        {\n            collisions\
    \ += i - j;\n            j -= 1;\n        }\n    }\n    return collisions;\n}",
  "{\n    long i, j, k, l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n\
    \    long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n\
    \    long i[n];\n    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n\
    \    long n[n];\n    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n\
    \    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n\
    \    long x[n];\n    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n\
    \    long ac[n];\n    long ad[n];\n    long ae[n];\n    long af[n];\n    long\
    \ ag[n];\n    long ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n\
    \    long al[n];\n    long am[n];\n    long an[n];\n    long ao[n];\n    long\
    \ ap[n];\n    long aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n\
    \    long au[n];\n    long av[n];\n    long aw[n];\n    long ax[n];\n    long\
    \ ay[n];\n    long az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n\
    \    long bd[n];\n    long be[n];\n    long bf[n];\n    long bg[n];\n    long\
    \ bh[n];\n    long bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n\
    \    long bm[n];\n    long bn[n];\n    long bo[n];\n    long bp[n];\n    long",
  "{\n    return n * (n - 1) / 2;\n}", "{\n    long i, j, k, l;\n    long count =\
    \ 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n    for\
    \ (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (left[i] > right[j]) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    return n * (n - 1) / 2;\n}",
  "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n  \
    \  long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n\
    \    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long\
    \ ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr\
    \ = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv\
    \ = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[] left = new\
    \ long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n; i++) {\n \
    \       left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i\
    \ < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left[i] == right[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, n;\n    long a[n], b[n];\n    long c[n];\n   \
    \ for (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = n - i;\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (a[i] == b[j]) {\n                c[i] = a[i];\n            }\n        }\n\
    \    }\n    return c;\n}", "{\n    long i, j, k;\n    long x[n], y[n];\n    long\
    \ count = 0;\n    for (i = 0; i < n; i++) {\n        x[i] = i;\n        y[i] =\
    \ i;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (x[i] > y[j]) {\n                count++;\n            }\n   \
    \     }\n    }\n    return count;\n}", "{\n    long i;\n    long j;\n    long\
    \ count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j\
    \ < n; j++) {\n            if (i == j) {\n                count = count + 1;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long collisions = 0;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n     \
    \                   for (n = 0; n < n; n++) {\n                            for\
    \ (o = 0; o < n; o++) {\n                                for (p = 0; p < n; p++)\
    \ {\n                                    for (q = 0; q < n; q++) {\n         \
    \                               for (r = 0; r < n; r++) {\n                  \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                         for (t = 0; t < n; t++) {\n                        \
    \                            for (u = 0; u < n; u++) {\n                     \
    \                                   for (v = 0; v < n; v++) {\n              \
    \                                              for (w = 0; w < n; w++) {\n   \
    \                                                             for (x = 0; x <\
    \ n; x++) {\n                                                                \
    \    for (y = 0; y < n; y++) {\n                                             \
    \                           for (z = 0; z < n; z++) {\n                      \
    \                                                      for (a = 0; a < n; a++)\
    \ {\n                                                                        \
    \        for (b = 0; b < n; b++) {\n                                         \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \      for (d = 0; d < n; d++) {\n                                           \
    \                                                 for (e = 0; e < n; e++) {\n\
    \                                                                            \
    \                    for (f = 0; f < n; f++) {\n                             \
    \                                                                       for (g\
    \ = 0; g < n; g++) {\n                                                       \
    \                                                 for (h = 0; h <", "{\n    long\
    \ i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e,\
    \ f, g, h;\n    long A, B, C, D, E, F, G, H;\n    long I, J, K, L, M, N, O, P,\
    \ Q, R, S, T, U, V, W, X, Y, Z;\n    long AA, BB, CC, DD, EE, FF, GG, HH;\n  \
    \  long II, JJ, KK, LL, MM, NN, OO, PP, QQ, RR, SS, TT, UU, VV, WW, XX, YY, ZZ;\n\
    \    long AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH;\n    long III, JJJ, KKK, LLL,\
    \ MMM, NNN, OOO, PPP, QQQ, RRR, SSS, TTT, UUU, VVV, WWW, XXX, YYY, ZZZ;\n    long\
    \ AAAA, BBBB, CCCC, DDDD, EEEE, FFFF, GGGG, HHHH;\n    long IIII, JJJJ, KKKK,\
    \ LLLL, MMMM, NNNN, OOOO, PPPP, QQQQ, RRRR, SSSS, TTTT, UUUU, VVVV, WWWW, XXXX,\
    \ YYYY, ZZZZ;\n    long AAAAA, BBBBB, CCCCC, DDDDD, EEEEE, FFFFF, GGGGG, HHHHH;\n\
    \    long IIIII, JJJJJ, KKKKK, LLLLL, MMMMM, NNNNN, OOOOO, PPPPP, QQQQQ, RRRRR,\
    \ SSSSS, TTTTT, UUUUU, VVVVV, WWWWW, XXXXX, YYYYY, ZZZZZ;\n    long AAAAAA, BBBBBB,\
    \ CCCCCC, DDDDDD, EEEEEE, FFFFFF, GGGGGG, HHHHHH;\n    long", "{\n    long count\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    long i = 0;\n    while (i < n) \n    {\n        long j = 0;\n      \
    \  while (j < n) \n        {\n            if (i != j) \n            {\n      \
    \          result = result + 1;\n            }\n            j = j + 1;\n     \
    \   }\n        i = i + 1;\n    }\n    return result;\n}", "{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;", "{\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long collisions = 0;\n    long[] left_to_right =\
    \ new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i < n;\
    \ i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n -\
    \ i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j <\
    \ n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j]) \n\
    \            {\n                collisions++;\n            }\n        }\n    }\n\
    \    return collisions;\n}", "{\n    long i;\n    long j;\n    long count;\n \
    \   count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count = count + 1;\n          \
    \  }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k;\n    long\
    \ count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k;\n    long\
    \ count = 0;\n    float[] x = new float[n];\n    float[] y = new float[n];\n \
    \   float[] a = new float[n];\n    float[] b = new float[n];\n    float[] c =\
    \ new float[n];\n    float[] d = new float[n];\n    float[] e = new float[n];\n\
    \    float[] f = new float[n];\n    float[] g = new float[n];\n    float[] h =\
    \ new float[n];\n    float[] i1 = new float[n];\n    float[] j1 = new float[n];\n\
    \    float[] k1 = new float[n];\n    float[] l = new float[n];\n    float[] m\
    \ = new float[n];\n    float[] n1 = new float[n];\n    float[] o = new float[n];\n\
    \    float[] p = new float[n];\n    float[] q = new float[n];\n    float[] r =\
    \ new float[n];\n    float[] s = new float[n];\n    float[] t = new float[n];\n\
    \    float[] u = new float[n];\n    float[] v = new float[n];\n    float[] w =\
    \ new float[n];\n    float[] x1 = new float[n];\n    float[] y1 = new float[n];\n\
    \    float[] z = new float[n];\n    float[] aa = new float[n];\n    float[] bb\
    \ = new float[n];\n    float[] cc = new float[n];\n    float[] dd = new float[n];\n\
    \    float[] ee = new float[n];\n    float[] ff = new float[n];\n    float[] gg\
    \ = new float[n];\n    float[] hh = new float[n];\n    float[] ii = new float[n];\n\
    \    float[] jj = new float[n];\n    float[] kk = new float[n];\n    float[] ll\
    \ = new float[n];\n    float[] mm = new float[n];\n    float[] nn = new float[n];\n\
    \    float[] oo = new float[n];\n    float[] pp =", "{\n    long result = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long result = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n  \
    \  long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                result++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long num_collisions = 0;\n    // TODO: Implement this function\n \
    \   return num_collisions;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n\
    \    long[] car_position = new long[n];\n    long[] car_speed = new long[n];\n\
    \    long[] car_direction = new long[n];\n    long[] car_position_2 = new long[n];\n\
    \    long[] car_speed_2 = new long[n];\n    long[] car_direction_2 = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        car_position[i] = random(1, 1000000);\n\
    \        car_speed[i] = random(1, 1000000);\n        car_direction[i] = random(0,\
    \ 1);\n        car_position_2[i] = random(1, 1000000);\n        car_speed_2[i]\
    \ = random(1, 1000000);\n        car_direction_2[i] = random(0, 1);\n    }\n \
    \   for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n           \
    \ if (car_direction[i] == 0 && car_direction_2[j] == 1) {\n                if\
    \ (car_position[i] < car_position_2[j]) {\n                    k = (car_position_2[j]\
    \ - car_position[i]) / (car_speed[i] + car_speed_2[j]);\n                    if\
    \ (k * (car_speed[i] + car_speed_2[j]) == (car_position_2[j] - car_position[i]))\
    \ {\n                        collisions++;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return collisions;\n}", "{\n  \
    \  long i, j, k;\n    long result;\n    float x, y;\n    float[] left_to_right_cars;\n\
    \    float[] right_to_left_cars;\n    float[] left_to_right_cars_speed;\n    float[]\
    \ right_to_left_cars_speed;\n    float[] left_to_right_cars_position;\n    float[]\
    \ right_to_left_cars_position;\n    float[] left_to_right_cars_time;\n    float[]\
    \ right_to_left_cars_time;\n    float[] left_to_right_cars_time_to_collision;\n\
    \    float[] right_to_left_cars_time_to_collision;\n    float[] left_to_right_cars_collision_position;\n\
    \    float[] right_to_left_cars_collision_position;\n    float[] left_to_right_cars_collision_time;\n\
    \    float[] right_to_left_cars_collision_time;\n    float[] left_to_right_cars_collision_time_to_collision;\n\
    \    float[] right_to_left_cars_collision_time_to_collision;\n    float[] left_to_right_cars_collision_speed;\n\
    \    float[] right_to_left_cars_collision_speed;\n    float[] left_to_right_cars_collision_position_x;\n\
    \    float[] right_to_left_cars_collision_position_x;\n    float[] left_to_right_cars_collision_position_y;\n\
    \    float[] right_to_left_cars_collision_position_y;\n    float[] left_to_right_cars_collision_time_x;\n\
    \    float[] right_to_left_cars_collision_time_x;\n    float[] left_to_right_cars_collision_time_y;\n\
    \    float[] right_to_left_cars_collision_time_y;\n    float[] left_to_right_cars_collision_time_to_collision_x;\n\
    \    float[] right_to_left_cars_collision_time_to_collision", "{\n    long i,\
    \ j, k, l;\n    long count = 0;\n    long[] left_to_right = new long[n];\n   \
    \ long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n       \
    \ left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i]\
    \ == right_to_left[j]) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n\
    \    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long\
    \ uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy =\
    \ 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n\
    \    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n\
    \    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n\
    \    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long", "{\n    long i, j, k, l, m, result;\n    result\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         for (k = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n\
    \                    for (m = 0; m < n; m++) {\n                        if (i\
    \ == j) {\n                            continue;\n                        }\n\
    \                        if (k == l) {\n                            continue;\n\
    \                        }\n                        if (m == i) {\n          \
    \                  continue;\n                        }\n                    \
    \    if (m == j) {\n                            continue;\n                  \
    \      }\n                        if (m == k) {\n                            continue;\n\
    \                        }\n                        if (m == l) {\n          \
    \                  continue;\n                        }\n                    \
    \    if (i < j) {\n                            if (k < l) {\n                \
    \                if (m < i) {\n                                    if (m < k)\
    \ {\n                                        result = result + 1;\n          \
    \                          }\n                                }\n            \
    \                }\n                        }\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return result;\n}", "{\n   \
    \ return n * (n - 1) / 2;\n}", "{\n    long result = 0;\n    for (long i = 0;\
    \ i < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n        {\n    \
    \        if (i < j) \n            {\n                result++;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j\
    \ = 0; j < n; j++) \n        {\n            if (i < j) \n            {\n     \
    \           result++;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long i, j, k;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n \
    \   long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u\
    \ = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n \
    \   long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n\
    \    long", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n  \
    \  for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n       \
    \ {\n            if (i < j) \n            {\n                count = count + 1;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n], d[n];\n    long e[n], f[n];\n\
    \    long g[n], h[n];\n    long x[n], y[n];\n    long z[n], w[n];\n    long p[n],\
    \ q[n];\n    long r[n], s[n];\n    long t[n], u[n];\n    long v[n], o[n];\n  \
    \  long collisions = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n  \
    \      b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] = i;\n  \
    \      f[i] = i;\n        g[i] = i;\n        h[i] = i;\n        x[i] = i;\n  \
    \      y[i] = i;\n        z[i] = i;\n        w[i] = i;\n        p[i] = i;\n  \
    \      q[i] = i;\n        r[i] = i;\n        s[i] = i;\n        t[i] = i;\n  \
    \      u[i] = i;\n        v[i] = i;\n        o[i] = i;\n    }\n    for (j = 0;\
    \ j < n; j++) {\n        for (k = 0; k < n; k++) {\n            if (a[j] > b[k])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    for (l\
    \ = 0; l < n; l++) {\n        for (m = 0; m < n; m++) {\n            if (c[l]\
    \ > d[m]) {\n                collisions++;\n            }\n        }\n    }\n\
    \    for (l = 0; l < n; l++) {\n        for (m = 0; m < n; m++) {\n          \
    \  if (e[l] > f[m]) {\n                collisions++;\n            }\n        }\n\
    \    }\n    for (l = 0; l", "{\n    return n * (n - 1) / 2;\n}", "{\n    long\
    \ collisions = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n\
    \    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long\
    \ ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww =\
    \ 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n\
    \    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n\
    \    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long", "{\n    long\
    \ collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll =\
    \ 0;\n    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr =\
    \ 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv =\
    \ 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz =\
    \ 0;\n    long aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;", "{\n    long\
    \ i;\n    long j;\n    long k;\n    long count;\n    long[] left_to_right;\n \
    \   long[] right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    count = 0;\n    left_to_right = new long[n];\n    right_to_left = new long[n];\n\
    \    left_to_right_sorted = new long[n];\n    right_to_left_sorted = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = random(0, 100000000);\n\
    \        right_to_left[i] = random(0, 100000000);\n    }\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n        right_to_left_sorted[i]\
    \ = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n    sort(right_to_left_sorted);\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (left_to_right_sorted[i] == left_to_right[j]) {\n                for (k\
    \ = 0; k < n; k++) {\n                    if (right_to_left_sorted[k] == right_to_left[j])\
    \ {\n                        count = count + 1;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    long i = 0;\n    while (i < n) \n    {\n \
    \       left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n       \
    \ i = i + 1;\n    }\n    long collisions = 0;\n    i = 0;\n    while (i < n) \n\
    \    {\n        long j = 0;\n        while (j < n) \n        {\n            if\
    \ (left_to_right[i] == right_to_left[j]) \n            {\n                collisions\
    \ = collisions + 1;\n            }\n            j = j + 1;\n        }\n      \
    \  i = i + 1;\n    }\n    return collisions;\n}", "{\n    long i, j, k;\n    long\
    \ count = 0;\n    long* left = new long[n];\n    long* right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] == right[j]) \n           \
    \ {\n                count++;\n                for (k = j; k < n - 1; k++) \n\
    \                {\n                    right[k] = right[k + 1];\n           \
    \     }\n                n--;\n                break;\n            }\n       \
    \ }\n    }\n    return count;\n}", "{\n    long collisions = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n        if (i < j)\
    \ \n        {\n            collisions++;\n            i++;\n        } \n     \
    \   else \n        {\n            j++;\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n  \
    \              if (i == j && j == k) {\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n) \n    {\n  \
    \      while (j < n) \n        {\n            if (i == j) \n            {\n  \
    \              j++;\n                continue;\n            }\n            if\
    \ (i > j) \n            {\n                count++;\n            }\n         \
    \   j++;\n        }\n        i++;\n    }\n    return count;\n}", "{\n    long\
    \ i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long\
    \ o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long\
    \ u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long\
    \ aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n\
    \    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long\
    \ al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n\
    \    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long\
    \ aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n\
    \    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long\
    \ bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n\
    \    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long\
    \ bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n\
    \    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long\
    \ cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n\
    \    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long\
    \ co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n\
    \    long cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   ", "{\n\
    \    long i, j, k;\n    long collisions = 0;\n    float[] left_to_right_cars =\
    \ new float[n];\n    float[] right_to_left_cars = new float[n];\n    float[] left_to_right_cars_copy\
    \ = new float[n];\n    float[] right_to_left_cars_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy = new float[n];\n    float[] right_to_left_cars_copy_copy\
    \ = new float[n];\n    float[] left_to_right_cars_copy_copy_copy = new float[n];\n\
    \    float[] right_to_left_cars_copy_copy_copy = new float[n];\n    float[] left_to_right_cars_copy_copy_copy_copy\
    \ = new float[n];\n    float[] right_to_left_cars_copy_copy_copy_copy = new float[n];\n\
    \    float[] left_to_right_cars_copy_copy_copy_copy_copy = new float[n];\n   \
    \ float[] right_to_left_cars_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ right_to_left_cars_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ right_to_left_cars_copy_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy_copy_copy = new float[n];\n\
    \    float[] right_to_left_cars_copy_copy_copy_copy_copy_copy_copy_copy = new\
    \ float[n];\n    float[] left_to_right_cars_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new float[n];\n    float[] right_to_left", "{\n    long i, j, count;\n   \
    \ count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (i - j == 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}", "{\n    long i, j, count = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k;\n    long a[n];\n    long b[n];\n    long c[n];\n  \
    \  long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n\
    \    long i1[n];\n    long j1[n];\n    long k1[n];\n    long l[n];\n    long m[n];\n\
    \    long n1[n];\n    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n\
    \    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n\
    \    long x[n];\n    long y[n];\n    long z[n];\n    long aa[n];\n    long bb[n];\n\
    \    long cc[n];\n    long dd[n];\n    long ee[n];\n    long ff[n];\n    long\
    \ gg[n];\n    long hh[n];\n    long ii[n];\n    long jj[n];\n    long kk[n];\n\
    \    long ll[n];\n    long mm[n];\n    long nn[n];\n    long oo[n];\n    long\
    \ pp[n];\n    long qq[n];\n    long rr[n];\n    long ss[n];\n    long tt[n];\n\
    \    long uu[n];\n    long vv[n];\n    long ww[n];\n    long xx[n];\n    long\
    \ yy[n];\n    long zz[n];\n    long aaa[n];\n    long bbb[n];\n    long ccc[n];\n\
    \    long ddd[n];\n    long eee[n];\n    long fff[n];\n    long ggg[n];\n    long\
    \ hhh[n];\n    long iii[n];\n    long jjj[n];\n    long kkk[n];\n    long lll[n];\n\
    \    long mmm[n];\n    long nnn[n];\n    long ooo", "{\n    long count = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i, j, k, l, m,\
    \ n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n \
    \   long result;\n    long a[n];\n    long b[n];\n    result = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i]\
    \ == b[j]) {\n                result = result + 1;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long i, j, k;\n    long count = 0;\n \
    \   for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n           \
    \ for (k = 0; k < n; k++) {\n                if (i == j || j == k || i == k) {\n\
    \                    continue;\n                }\n                if (i < j &&\
    \ j < k) {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}", "{\n    long i, j, count;\n    float\
    \ x1, x2, y1, y2;\n    count = 0;\n    for (i = 0; i < n; i++) {\n        x1 =\
    \ random();\n        y1 = random();\n        for (j = 0; j < n; j++) {\n     \
    \       x2 = random();\n            y2 = random();\n            if (x1 > x2 &&\
    \ y1 < y2) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n\
    \    long", "{\n    long i, j, k;\n    long result = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i < j) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k;\n    long\
    \ count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] < right[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    for (i = 0;\
    \ i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n           \
    \ if (i == j)\n            {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
