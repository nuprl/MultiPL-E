name: HumanEval_118_get_closest_vowel
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\
  \n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\"\
  )\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n\
    \    int index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i > 0 && i <\
    \ word.length - 1)\n            {\n                if(vowels.canFind(word[i -\
    \ 1]) == false && vowels.canFind(word[i + 1]) == false)\n                {\n \
    \                   if(abs(i - word.length) < min_distance)\n                \
    \    {\n                        min_distance = abs(i - word.length);\n       \
    \                 index = i;\n                    }\n                }\n     \
    \       }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    int distance = 0;\n    int\
    \ index = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n\
    \        {\n            distance = word.length - i - 1;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n                index = i;\n            }\n     \
    \   }\n    }\n    if(index == 0)\n        return \"\";\n    if(consonants.find(word[index\
    \ - 1]) == -1)\n        return \"\";\n    if(consonants.find(word[index + 1])\
    \ == -1)\n        return \"\";\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = -1;\n    int distance\
    \ = -1;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n  \
    \      {\n            if(i > 0 && i < word.length - 1)\n            {\n      \
    \          if(vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) == -1)\n\
    \                {\n                    if(distance == -1 || distance > abs(i\
    \ - word.length))\n                    {\n                        distance = abs(i\
    \ - word.length);\n                        index = i;\n                    }\n\
    \                }\n            }\n        }\n    }\n    if(index != -1)\n   \
    \ {\n        result = word[index..$];\n    }\n    return result;\n}", "{\n   \
    \ string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index =\
    \ 0;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if (index != 0)\n    {\n        result\
    \ = word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ v; word)\n    {\n        if(vowels.canFind(v))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = v;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, v; word)\n    {\n        if(vowels.find(v) != -1)\n        {\n\
    \            int distance = 0;\n            int j = i;\n            while(j >=\
    \ 0)\n            {\n                if(consonants.find(word[j]) != -1)\n    \
    \            {\n                    distance = i - j;\n                    break;\n\
    \                }\n                j--;\n            }\n            if(distance\
    \ > 0)\n            {\n                j = i;\n                while(j < word.length)\n\
    \                {\n                    if(consonants.find(word[j]) != -1)\n \
    \                   {\n                        distance += j - i;\n          \
    \              break;\n                    }\n                    j++;\n     \
    \           }\n            }\n            if(distance > 0 && distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = v;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string closest = \"\";\n    int dist = 0;\n  \
    \  int min_dist = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                closest = c;\n\
    \            }\n        }\n    }\n    return closest;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(c in\
    \ vowels)\n        {\n            int j = i;\n            while(j < word.length\
    \ && word[j] in vowels)\n                j++;\n            if(j < word.length)\n\
    \            {\n                distance = j - i;\n                if(distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i..j];\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = int.max;\n    int distance =\
    \ 0;\n    int index = 0;\n    int word_length = word.length;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            distance\
    \ = word_length - i - 1;\n            if(distance < min_distance)\n          \
    \  {\n                min_distance = distance;\n                index = i;\n \
    \           }\n        }\n    }\n    if(min_distance != int.max)\n    {\n    \
    \    result = word[index..index];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_consonant_index = -1;\n    int word_length = word.length;\n    for (int\
    \ i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (closest_consonant_index != -1)\n            {\n  \
    \              if (closest_vowel_index == -1)\n                {\n           \
    \         closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n                else if (i - closest_consonant_index < closest_vowel_index\
    \ - closest_consonant_index)\n                {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        }\n        else if (consonants.find(word[i]) != -1)\n    \
    \    {\n            closest_consonant_index = i;\n        }\n    }\n    return\
    \ closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n     \
    \   if(consonants.find(c) != -1)\n        {\n            foreach(j, v; vowels)\n\
    \            {\n                if(word.find(v, i) != -1)\n                {\n\
    \                    if(word.find(v, i) - i < min_distance)\n                \
    \    {\n                        min_distance = word.find(v, i) - i;\n        \
    \                result = v;\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length - 1;\n \
    \   while (index > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n  \
    \      {\n            if (vowels.find(word[index - 1]) == -1)\n            {\n\
    \                result = word[index];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i != 0 && i != word.length - 1)\n              \
    \  {\n                    if(consonants.find(word[i - 1]) != -1 && consonants.find(word[i\
    \ + 1]) != -1)\n                    {\n                        min_distance =\
    \ distance;\n                        result = c;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = -1;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(i - word.length))\n                    {\n\
    \                        min_distance = abs(i - word.length);\n              \
    \          index = i;\n                    }\n                }\n            }\n\
    \        }\n    }\n    if (index != -1)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int pos = word.length - 1;\n    while (pos > 0)\n    {\n\
    \        if (vowels.find(word[pos]) != -1)\n        {\n            if (vowels.find(word[pos\
    \ - 1]) == -1)\n            {\n                result = word[pos];\n         \
    \       break;\n            }\n        }\n        pos--;\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = -1;\n    int min = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n            {\n                if(abs(i - word.length/2) < min)\n  \
    \              {\n                    min = abs(i - word.length/2);\n        \
    \            index = i;\n                }\n            }\n        }\n    }\n\
    \    if(index != -1)\n    {\n        result = word[index..$];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    if (min_distance > abs(i - word.length))\n                    {\n       \
    \                 min_distance = abs(i - word.length);\n                     \
    \   result = word[i..$];\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    int vowel_index\
    \ = -1;\n    int distance = word.length;\n    while (index >= 0)\n    {\n    \
    \    if (vowels.find(word[index]) != -1)\n        {\n            if (vowel_index\
    \ == -1)\n            {\n                vowel_index = index;\n            }\n\
    \            else\n            {\n                if (index - vowel_index < distance)\n\
    \                {\n                    distance = index - vowel_index;\n    \
    \                result = word[vowel_index];\n                }\n            \
    \    vowel_index = index;\n            }\n        }\n        index--;\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int j = i;\n            while (j >= 0 && consonants.find(word[j])\
    \ != -1)\n            {\n                j--;\n            }\n            if (j\
    \ >= 0 && consonants.find(word[j]) == -1)\n            {\n                j++;\n\
    \            }\n            if (j < i)\n            {\n                int k =\
    \ i;\n                while (k < word.length && consonants.find(word[k]) != -1)\n\
    \                {\n                    k++;\n                }\n            \
    \    if (k < word.length && consonants.find(word[k]) == -1)\n                {\n\
    \                    k--;\n                }\n                if (k > i)\n   \
    \             {\n                    int distance = min(i - j, k - i);\n     \
    \               if (distance < min_distance)\n                    {\n        \
    \                min_distance = distance;\n                        index = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (index != 0)\n    {\n        result = word[index..$];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int i = word.length - 1;\n    while (i > 0)\n    {\n        if (consonants.find(word[i])\
    \ != -1)\n        {\n            if (vowels.find(word[i - 1]) != -1)\n       \
    \     {\n                result = word[i - 1];\n                break;\n     \
    \       }\n            else\n            {\n                i--;\n           \
    \ }\n        }\n        else\n        {\n            i--;\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int index = -1;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                min_distance = distance;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index != -1)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ >= 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n     \
    \       if (index == word.length - 1)\n            {\n                if (vowels.find(word[index\
    \ - 1]) == -1)\n                {\n                    result = word[index];\n\
    \                    break;\n                }\n            }\n            else\
    \ if (index == 0)\n            {\n                if (vowels.find(word[index +\
    \ 1]) == -1)\n                {\n                    result = word[index];\n \
    \                   break;\n                }\n            }\n            else\
    \ if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n\
    \            {\n                result = word[index];\n                break;\n\
    \            }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = 0;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = 0;\n            int j = i;\n            while(j >=\
    \ 0 && consonants.find(word[j]) != -1)\n            {\n                j--;\n\
    \                distance++;\n            }\n            j = i;\n            while(j\
    \ < word.length && consonants.find(word[j]) != -1)\n            {\n          \
    \      j++;\n                distance++;\n            }\n            if(distance\
    \ > 2 && (min_distance == 0 || distance < min_distance))\n            {\n    \
    \            min_distance = distance;\n                index = i;\n          \
    \  }\n        }\n    }\n    if(min_distance != 0)\n    {\n        result = word[index..index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = word.length;\n    int index = 0;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n        \
    \    if(i > 0 && vowels.find(word[i-1]) == -1)\n            {\n              \
    \  if(i < distance)\n                {\n                    distance = i;\n  \
    \                  index = i;\n                }\n            }\n        }\n \
    \   }\n    if(distance != word.length)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int left = i - 1;\n            int right = i + 1;\n            while\
    \ (left >= 0 && vowels.find(word[left]) != -1)\n            {\n              \
    \  left--;\n            }\n            while (right < word.length && vowels.find(word[right])\
    \ != -1)\n            {\n                right++;\n            }\n           \
    \ if (left >= 0 && right < word.length)\n            {\n                int distance\
    \ = right - left - 1;\n                if (distance < min_distance)\n        \
    \        {\n                    min_distance = distance;\n                   \
    \ result = word[i..i+1];\n                }\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            distance\
    \ = min(left_distance, right_distance);\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int left = word[0..i].find_last_of(consonants);\n            int\
    \ right = word[i..$].find_first_of(consonants);\n            if(left != -1 &&\
    \ right != -1)\n            {\n                distance = right - left;\n    \
    \            if(distance < min_distance)\n                {\n                \
    \    min_distance = distance;\n                    result = c;\n             \
    \   }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    int distance = 0;\n    foreach(i, c; word)\n    {\n      \
    \  if(vowels.canFind(c))\n        {\n            distance = word.length - i;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if (vowels.canFind(c))\n        {\n \
    \           index = i;\n            distance = word.length - index;\n        \
    \    if (distance < minDistance)\n            {\n                minDistance =\
    \ distance;\n                result = c;\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ minDistance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            foreach(j, d; word[i..$])\n            {\n  \
    \              if(consonants.find(d) != -1)\n                {\n             \
    \       distance = j;\n                    break;\n                }\n       \
    \     }\n            if(distance < minDistance)\n            {\n             \
    \   minDistance = distance;\n                result = c;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min = word.length;\n  \
    \  for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && consonants.find(word[i-1]) != -1)\n\
    \            {\n                if (i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                {\n                    if (min > abs(word.length - i))\n\
    \                    {\n                        min = abs(word.length - i);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if (index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = word.length;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n \
    \   int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv\
    \ = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n \
    \   int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n\
    \    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int\
    \ nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    int word_length = word.length;\n    for (int\
    \ i = 0; i < word_length; i++)\n    {\n        if (consonants.find(word[i]) !=\
    \ -1)\n        {\n            for (int j = i + 1; j < word_length; j++)\n    \
    \        {\n                if (vowels.find(word[j]) != -1)\n                {\n\
    \                    if (closest_vowel_distance == -1)\n                    {\n\
    \                        closest_vowel_distance = j - i;\n                   \
    \     closest_vowel_index = j;\n                    }\n                    else\
    \ if (j - i < closest_vowel_distance)\n                    {\n               \
    \         closest_vowel_distance = j - i;\n                        closest_vowel_index\
    \ = j;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index != -1)\n    {\n        closest_vowel = word[closest_vowel_index];\n\
    \    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ right_consonant_index = word.find_first_of(consonants, i + 1);\n           \
    \ if(right_consonant_index == -1)\n                break;\n            int left_consonant_index\
    \ = word.find_last_of(consonants, i - 1);\n            if(left_consonant_index\
    \ == -1)\n                continue;\n            int distance = right_consonant_index\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left_distance\
    \ = i;\n            int right_distance = word.length - i - 1;\n            if(left_distance\
    \ > 0 && right_distance > 0)\n            {\n                if(vowels.canFind(word[i-1])\
    \ || vowels.canFind(word[i+1]))\n                {\n                    continue;\n\
    \                }\n                else\n                {\n                \
    \    if(min_distance > min(left_distance, right_distance))\n                 \
    \   {\n                        min_distance = min(left_distance, right_distance);\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            foreach(j, v; vowels)\n            {\n                if(word.find(v,\
    \ i) != -1)\n                {\n                    if(word.find(v, i) - i < min_distance)\n\
    \                    {\n                        min_distance = word.find(v, i)\
    \ - i;\n                        index = word.find(v, i);\n                   \
    \     result = v;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = 0;\n  \
    \  int current_vowel_distance = 0;\n    int current_vowel_index = -1;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            current_vowel_index\
    \ = i;\n            current_vowel_distance = word.length - i;\n            if(current_vowel_distance\
    \ > closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = current_vowel_distance;\n                closest_vowel_index = current_vowel_index;\n\
    \            }\n        }\n    }\n    if(closest_vowel_index == -1)\n    {\n \
    \       return \"\";\n    }\n    return word[closest_vowel_index..$];\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            foreach(j, v; vowels)\n            {\n                if(word.find(v,\
    \ i) != -1)\n                {\n                    if(word.find(v, i) - i < min_distance)\n\
    \                    {\n                        min_distance = word.find(v, i)\
    \ - i;\n                        index = word.find(v, i);\n                   \
    \     result = v;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = 0;\n    int min_index = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n\
    \    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n    int N = 0;\n\
    \    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n    int S = 0;\n\
    \    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n    int X = 0;\n\
    \    int Y = 0;\n    int Z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp =", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    int distance = word.length\
    \ - i;\n                    if (distance < min_distance)\n                   \
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    int i = word.length - 1;\n  \
    \  while (i > 0)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (vowels.find(word[i-1]) == -1)\n            {\n              \
    \  distance = word.length - i;\n                if (distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         index = i;\n                }\n            }\n        }\n        i--;\n\
    \    }\n    if (min_distance != word.length)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_dist = int.max;\n    foreach(i, c; word)\n    {\n     \
    \   if(vowels.canFind(c))\n        {\n            int dist = 0;\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.canFind(word[j]))\n\
    \                {\n                    dist = j - i;\n                    break;\n\
    \                }\n            }\n            if(dist < min_dist)\n         \
    \   {\n                min_dist = dist;\n                result = c;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int closest_distance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            int left_distance = word.length;\n            int\
    \ right_distance = word.length;\n            for (int j = i - 1; j >= 0; j--)\n\
    \            {\n                if (consonants.find(word[j]) != -1)\n        \
    \        {\n                    left_distance = i - j;\n                    break;\n\
    \                }\n            }\n            for (int j = i + 1; j < word.length;\
    \ j++)\n            {\n                if (consonants.find(word[j]) != -1)\n \
    \               {\n                    right_distance = j - i;\n             \
    \       break;\n                }\n            }\n            if (left_distance\
    \ + right_distance < closest_distance)\n            {\n                closest_distance\
    \ = left_distance + right_distance;\n                result = word[i];\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string closest_vowel = \"\";\n    int closest_vowel_index =\
    \ word.length;\n    foreach(vowel; vowels)\n    {\n        int vowel_index = word.findLast(vowel);\n\
    \        if(vowel_index != -1 && vowel_index < closest_vowel_index)\n        {\n\
    \            closest_vowel = vowel;\n            closest_vowel_index = vowel_index;\n\
    \        }\n    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i == 0)\n                {\n                   \
    \ if(consonants.find(word[i+1]) != -1)\n                    {\n              \
    \          min_distance = distance;\n                        result = c;\n   \
    \                 }\n                }\n                else if(i == word.length\
    \ - 1)\n                {\n                    if(consonants.find(word[i-1]) !=\
    \ -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \                else\n                {\n                    if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n                    {\n        \
    \                min_distance = distance;\n                        result = c;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = -1;\n    int min = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i > 0 && consonants.canFind(word[i-1])\
    \ && i < word.length-1 && consonants.canFind(word[i+1]))\n            {\n    \
    \            if(i < min)\n                {\n                    min = i;\n  \
    \                  index = i;\n                }\n            }\n        }\n \
    \   }\n    if(index != -1)\n    {\n        result = word[index..index];\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = 0;\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            foreach(j, d; word[i..$])\n            {\n                if(consonants.find(d)\
    \ != -1)\n                {\n                    distance = j;\n             \
    \       break;\n                }\n            }\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(min_distance != word.length)\n\
    \    {\n        result = word[index..index];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_dist\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int dist = word.length\
    \ - i;\n            if (dist < min_dist)\n            {\n                min_dist\
    \ = dist;\n                result = word[i];\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    int\
    \ index = 0;\n    int i = 0;\n    int j = 0;\n    foreach(i, char c; word)\n \
    \   {\n        if(vowels.find(c) != -1)\n        {\n            index = i;\n \
    \           distance = 0;\n            for(j = index; j < word.length; j++)\n\
    \            {\n                if(vowels.find(word[j]) == -1)\n             \
    \   {\n                    distance++;\n                }\n                else\n\
    \                {\n                    break;\n                }\n          \
    \  }\n            if(distance < min_distance)\n            {\n               \
    \ min_distance = distance;\n                result = c;\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n   \
    \ string result = \"\";\n    int min_distance = word.length;\n    int distance\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n      \
    \  {\n            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n\
    \    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n\
    \    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n\
    \    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n\
    \    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n\
    \    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr =", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    int distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (abs(index - i) < distance)\n\
    \                    {\n                        distance = abs(index - i);\n \
    \                       result = word[i];\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            distance = word.length - i - 1;\n           \
    \ if(distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if(min_distance\
    \ == word.length)\n    {\n        return result;\n    }\n    else\n    {\n   \
    \     return word[index..$];\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index > 0 && index < word.length\
    \ - 1)\n    {\n        if(!vowels.canFind(word[index - 1]) && !vowels.canFind(word[index\
    \ + 1]))\n        {\n            result = word[index..$];\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i > 0 && i < word.length - 1)\n            {\n\
    \                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1])\
    \ == -1)\n                {\n                    distance = word.length - i;\n\
    \                    if (distance < min_distance)\n                    {\n   \
    \                     min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n   \
    \ string result = \"\";\n    int index = 0;\n    int closest = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int left = i;\n            int right = i;\n            while(left\
    \ >= 0 && consonants.find(word[left]) != -1)\n                left--;\n      \
    \      while(right < word.length && consonants.find(word[right]) != -1)\n    \
    \            right++;\n            if(left >= 0 && right < word.length)\n    \
    \        {\n                if(abs(i - left) < closest)\n                {\n \
    \                   closest = abs(i - left);\n                    index = i;\n\
    \                }\n            }\n        }\n    }\n    if(index != 0)\n    \
    \    result = word[index..index];\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ letter; word)\n    {\n        if(vowels.find(letter) != -1)\n        {\n   \
    \         int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \                {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = letter;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n\
    \    int minDistance = word.length;\n    for (int i = word.length - 1; i >= 0;\
    \ i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  distance = word.length - i;\n            if (distance < minDistance)\n    \
    \        {\n                minDistance = distance;\n                result =\
    \ word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n \
    \   string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left_distance\
    \ = i;\n            int right_distance = word.length - i - 1;\n            if(left_distance\
    \ > 0 && right_distance > 0)\n            {\n                if(consonants.canFind(word[i-1])\
    \ && consonants.canFind(word[i+1]))\n                {\n                    if(min_distance\
    \ > left_distance)\n                    {\n                        min_distance\
    \ = left_distance;\n                        result = c;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index == 0)\n        return result;\n    else\n        return\
    \ word[index..$];\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = -1;\n    int distance = 0;\n    int temp = 0;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i == 0)\n            {\n                continue;\n\
    \            }\n            else if (i == word.length - 1)\n            {\n  \
    \              continue;\n            }\n            else if (consonants.find(word[i\
    \ - 1]) != -1 && consonants.find(word[i + 1]) != -1)\n            {\n        \
    \        temp = abs(i - word.length);\n                if (index == -1)\n    \
    \            {\n                    index = i;\n                    distance =\
    \ temp;\n                }\n                else if (temp < distance)\n      \
    \          {\n                    index = i;\n                    distance = temp;\n\
    \                }\n            }\n        }\n    }\n    if (index != -1)\n  \
    \  {\n        result = word[index];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (min_distance > abs(word.length\
    \ - i - 1))\n                    {\n                        min_distance = abs(word.length\
    \ - i - 1);\n                        result = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i;\n            if(distance < minDistance)\n\
    \            {\n                minDistance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n\
    \            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i != 0 && i != word.length - 1)\n              \
    \  {\n                    if(consonants.find(word[i - 1]) != -1 && consonants.find(word[i\
    \ + 1]) != -1)\n                    {\n                        min_distance =\
    \ distance;\n                        result = c;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int temp = 0;\n    int index = 0;\n\
    \    foreach(i, c; word)\n    {\n        if (vowels.canFind(c))\n        {\n \
    \           temp = word.length - i;\n            if (temp > distance)\n      \
    \      {\n                distance = temp;\n                result = c;\n    \
    \            index = i;\n            }\n        }\n    }\n    if (index == 0 ||\
    \ index == word.length - 1)\n        return \"\";\n    if (word[index - 1] ==\
    \ ' ' || word[index + 1] == ' ')\n        return \"\";\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i;\n            if(distance < minDistance)\n\
    \            {\n                minDistance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n  \
    \  int min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if(index != 0)\n\
    \    {\n        result = word[index..$];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            if(left_distance\
    \ != 0 && right_distance != 0)\n            {\n                int distance =\
    \ min(left_distance, right_distance);\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(i - word.length))\n                    {\n\
    \                        min_distance = abs(i - word.length);\n              \
    \          result = word[i];\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          if(i != 0 && i != word.length - 1)\n            {\n               \
    \ if(!vowels.canFind(word[i - 1]) && !vowels.canFind(word[i + 1]))\n         \
    \       {\n                    if(abs(i - word.length) < min)\n              \
    \      {\n                        min = abs(i - word.length);\n              \
    \          index = i;\n                    }\n                }\n            }\n\
    \        }\n    }\n    if(index != 0)\n    {\n        result = word[index..index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = -1;\n    int min_distance = int.max;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if(index != -1)\n    {\n        result = word[index..index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = 0;\n    int min = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int j\
    \ = i;\n            while(j >= 0 && vowels.canFind(word[j]))\n            {\n\
    \                j--;\n            }\n            if(j >= 0 && !vowels.canFind(word[j]))\n\
    \            {\n                j++;\n                if(i - j < min)\n      \
    \          {\n                    min = i - j;\n                    index = i;\n\
    \                }\n            }\n        }\n    }\n    if(min != word.length)\n\
    \    {\n        result = word[index..$];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index == 0)\n        return result;\n\
    \    if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index +\
    \ 1]) != -1)\n        return word[index..$];\n    return result;\n}", "{\n   \
    \ string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = -1;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \                {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != -1)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int tmp_distance = word.length - i;\n            if(tmp_distance\
    \ < min_distance)\n            {\n                min_distance = tmp_distance;\n\
    \                result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string closest_vowel = \"\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n   \
    \ foreach(i, char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n\
    \            int distance = word.length - i;\n            if(closest_vowel_distance\
    \ == -1 || distance < closest_vowel_distance)\n            {\n               \
    \ closest_vowel_distance = distance;\n                closest_vowel_index = i;\n\
    \                closest_vowel = c;\n            }\n        }\n    }\n    if(closest_vowel_index\
    \ == -1)\n        return \"\";\n    if(closest_vowel_index == 0)\n        return\
    \ \"\";\n    if(closest_vowel_index == word.length - 1)\n        return \"\";\n\
    \    if(vowels.canFind(word[closest_vowel_index - 1]))\n        return \"\";\n\
    \    if(vowels.canFind(word[closest_vowel_index + 1]))\n        return \"\";\n\
    \    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = 0;\n    int distance = 0;\n    int index\
    \ = 0;\n    foreach(i, vowel; word)\n    {\n        if(vowels.canFind(vowel))\n\
    \        {\n            distance = word.length - i;\n            if(distance >\
    \ min_distance)\n            {\n                min_distance = distance;\n   \
    \             result = vowel;\n                index = i;\n            }\n   \
    \     }\n    }\n    if(index == 0 || index == word.length - 1)\n    {\n      \
    \  return \"\";\n    }\n    else\n    {\n        return result;\n    }\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(v;\
    \ word)\n    {\n        if(vowels.canFind(v))\n        {\n            int index\
    \ = word.indexOf(v);\n            int distance = word.length - index;\n      \
    \      if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = v;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(i - word.length))\n                    {\n\
    \                        min_distance = abs(i - word.length);\n              \
    \          result = word[i];\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(consonants.find(c) != -1)\n        {\n         \
    \   foreach(j, v; vowels)\n            {\n                if(word.find(v, i) !=\
    \ -1)\n                {\n                    int distance = word.find(v, i) -\
    \ i;\n                    if(distance < min_distance)\n                    {\n\
    \                        min_distance = distance;\n                        result\
    \ = v;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = word.length;\n    foreach(i, vowel; vowels)\n\
    \    {\n        int index = word.find(vowel);\n        if(index != -1)\n     \
    \   {\n            if(index > 0 && index < word.length - 1)\n            {\n \
    \               if(!isLetter(word[index - 1]) && !isLetter(word[index + 1]))\n\
    \                {\n                    if(index < distance)\n               \
    \     {\n                        distance = index;\n                        result\
    \ = vowel;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int\
    \ closest = word.length;\n    string closest_vowel = \"\";\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left\
    \ = i;\n            int right = word.length - i - 1;\n            if(left > 0\
    \ && right > 0)\n            {\n                if(vowels.canFind(word[i - 1])\
    \ || vowels.canFind(word[i + 1]))\n                    continue;\n           \
    \     if(left + right < closest)\n                {\n                    closest\
    \ = left + right;\n                    closest_vowel = c;\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int closest = 0;\n    int distance = 0;\n  \
    \  int temp = 0;\n    int temp2 = 0;\n    int temp3 = 0;\n    int temp4 = 0;\n\
    \    int temp5 = 0;\n    int temp6 = 0;\n    int temp7 = 0;\n    int temp8 = 0;\n\
    \    int temp9 = 0;\n    int temp10 = 0;\n    int temp11 = 0;\n    int temp12\
    \ = 0;\n    int temp13 = 0;\n    int temp14 = 0;\n    int temp15 = 0;\n    int\
    \ temp16 = 0;\n    int temp17 = 0;\n    int temp18 = 0;\n    int temp19 = 0;\n\
    \    int temp20 = 0;\n    int temp21 = 0;\n    int temp22 = 0;\n    int temp23\
    \ = 0;\n    int temp24 = 0;\n    int temp25 = 0;\n    int temp26 = 0;\n    int\
    \ temp27 = 0;\n    int temp28 = 0;\n    int temp29 = 0;\n    int temp30 = 0;\n\
    \    int temp31 = 0;\n    int temp32 = 0;\n    int temp33 = 0;\n    int temp34\
    \ = 0;\n    int temp35 = 0;\n    int temp36 = 0;\n    int temp37 = 0;\n    int\
    \ temp38 = 0;\n    int temp39 = 0;\n    int temp40 = 0;\n    int temp41 = 0;\n\
    \    int temp42 = 0;\n    int temp43 = 0;\n    int temp44 = 0;\n    int temp45\
    \ = 0;\n    int temp46 = 0;\n    int temp47 = 0;\n    int temp48 = 0;\n    int\
    \ temp49 = 0;\n    int temp50 = 0;\n    int temp51 = 0;\n    int temp52 = 0;\n\
    \    int temp53 = 0;\n    int temp54 = 0;\n    int temp55 = 0;\n", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n        \
    \    int left_consonant_index = word[0..i].find_last_of(consonants);\n       \
    \     int right_consonant_index = word[i+1..$].find_first_of(consonants);\n  \
    \          if(left_consonant_index != -1 && right_consonant_index != -1)\n   \
    \         {\n                int distance = right_consonant_index;\n         \
    \       if(distance < min_distance)\n                {\n                    min_distance\
    \ = distance;\n                    result = c;\n                }\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            if(i > 0 && consonants.find(word[i-1]) != -1)\n            {\n  \
    \              if(i < word.length - 1 && consonants.find(word[i+1]) != -1)\n \
    \               {\n                    if(abs(word.length - i) < min)\n      \
    \              {\n                        min = abs(word.length - i);\n      \
    \                  index = i;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int j = i;\n    \
    \        while(j > 0 && vowels.canFind(word[j]))\n                j--;\n     \
    \       if(!vowels.canFind(word[j]))\n            {\n                j--;\n  \
    \              while(j > 0 && vowels.canFind(word[j]))\n                    j--;\n\
    \                if(!vowels.canFind(word[j]))\n                {\n           \
    \         if(i - j < distance)\n                    {\n                      \
    \  distance = i - j;\n                        result = c;\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                if(i > 0 && consonants.canFind(word[i-1]))\n                {\n\
    \                    if(i < word.length - 1 && consonants.canFind(word[i+1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n\
    \        {\n            if (vowels.find(word[index - 1]) == -1)\n            {\n\
    \                result = word[index];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n  \
    \  int distance = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(min_distance != word.length)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = 0;\n    int min = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int j\
    \ = word.length - 1;\n            while(j > i)\n            {\n              \
    \  if(vowels.canFind(word[j]))\n                {\n                    j--;\n\
    \                }\n                else\n                {\n                \
    \    break;\n                }\n            }\n            if(j > i)\n       \
    \     {\n                if(j - i < min)\n                {\n                \
    \    min = j - i;\n                    index = i;\n                }\n       \
    \     }\n        }\n    }\n    if(min != word.length)\n    {\n        result =\
    \ word[index..index];\n    }\n    return result;\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left_distance\
    \ = i;\n            int right_distance = word.length - i - 1;\n            if(left_distance\
    \ > 0 && right_distance > 0)\n            {\n                if(consonants.canFind(word[i-1])\
    \ && consonants.canFind(word[i+1]))\n                {\n                    if(min_distance\
    \ > left_distance)\n                    {\n                        min_distance\
    \ = left_distance;\n                        result = c;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = 0;\n            for(int j = i; j < word.length; j++)\n          \
    \  {\n                if(consonants.find(word[j]) != -1)\n                {\n\
    \                    distance = j - i;\n                    break;\n         \
    \       }\n            }\n            if(distance < min_distance)\n          \
    \  {\n                min_distance = distance;\n                result = c;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ minDistance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            distance = word.length - i;\n            if(distance\
    \ < minDistance)\n            {\n                minDistance = distance;\n   \
    \             index = i;\n            }\n        }\n    }\n    if(index == 0)\n\
    \    {\n        return result;\n    }\n    else\n    {\n        if(consonants.find(word[index\
    \ - 1]) != -1 && consonants.find(word[index + 1]) != -1)\n        {\n        \
    \    result = word[index..index];\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n        \
    \    int left_distance = -1;\n            int right_distance = -1;\n         \
    \   for(int j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            if(left_distance\
    \ != -1 && right_distance != -1)\n            {\n                int distance\
    \ = min(left_distance, right_distance);\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int pos = word.length - 1;\n    while (pos > 0)\n    {\n      \
    \  if (vowels.find(word[pos]) != -1)\n        {\n            if (vowels.find(word[pos-1])\
    \ == -1)\n            {\n                result = word[pos];\n               \
    \ break;\n            }\n        }\n        pos--;\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min = int.max;\n    int index = 0;\n   \
    \ foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n     \
    \       int left = i;\n            int right = i;\n            while(left >= 0\
    \ && consonants.canFind(word[left]))\n                left--;\n            while(right\
    \ < word.length && consonants.canFind(word[right]))\n                right++;\n\
    \            if(left >= 0 && right < word.length)\n            {\n           \
    \     if(right - left < min)\n                {\n                    min = right\
    \ - left;\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if(min != int.max)\n        result = word[index..index];\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i > 0 && i < word.length - 1)\n            {\n\
    \                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1])\
    \ == -1)\n                {\n                    distance = word.length - i;\n\
    \                    if (distance < min_distance)\n                    {\n   \
    \                     min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n   \
    \ string result = \"\";\n    int min_distance = word.length;\n    foreach(i, c;\
    \ word)\n    {\n        if(consonants.find(c) == -1)\n        {\n            continue;\n\
    \        }\n        int j = i + 1;\n        while(j < word.length)\n        {\n\
    \            if(vowels.find(word[j]) != -1)\n            {\n                if(j\
    \ - i < min_distance)\n                {\n                    min_distance = j\
    \ - i;\n                    result = word[j..$];\n                }\n        \
    \        break;\n            }\n            j++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(consonants.find(c) != -1)\n        {\n         \
    \   int j = i + 1;\n            while(j < word.length)\n            {\n      \
    \          if(vowels.find(word[j]) != -1)\n                {\n               \
    \     distance = j - i;\n                    if(distance < min_distance)\n   \
    \                 {\n                        min_distance = distance;\n      \
    \                  result = word[j];\n                    }\n                \
    \    break;\n                }\n                j++;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int\
    \ closest = -1;\n    int distance = int.max;\n    for (int i = word.length - 1;\
    \ i >= 0; i--)\n    {\n        if (vowels.canFind(word[i]))\n        {\n     \
    \       int d = word.length - i;\n            if (d < distance)\n            {\n\
    \                distance = d;\n                closest = i;\n            }\n\
    \        }\n    }\n    return closest == -1 ? \"\" : word[closest..closest];\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int index_vowel = 0;\n \
    \   int index_consonant = 0;\n    int index_vowel_temp = 0;\n    int index_consonant_temp\
    \ = 0;\n    int distance = 0;\n    int distance_temp = 0;\n    foreach(i; 0 ..\
    \ word.length)\n    {\n        if(consonants.canFind(word[i]))\n        {\n  \
    \          index_consonant_temp = i;\n            foreach(j; i .. word.length)\n\
    \            {\n                if(vowels.canFind(word[j]))\n                {\n\
    \                    index_vowel_temp = j;\n                    distance_temp\
    \ = index_vowel_temp - index_consonant_temp;\n                    if(distance_temp\
    \ > distance)\n                    {\n                        distance = distance_temp;\n\
    \                        index_vowel = index_vowel_temp;\n                   \
    \     index_consonant = index_consonant_temp;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    if(distance > 0)\n    {\n  \
    \      result = word[index_vowel];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_dist = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int dist = word.length - i;\n            if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n            {\n                if(dist\
    \ < min_dist)\n                {\n                    min_dist = dist;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(index != 0)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int i = word.length - 1;\n    while (i >= 0)\n\
    \    {\n        if (consonants.find(word[i]) != -1)\n        {\n            if\
    \ (i == word.length - 1)\n            {\n                i--;\n              \
    \  continue;\n            }\n            if (vowels.find(word[i + 1]) != -1)\n\
    \            {\n                result = word[i + 1];\n                break;\n\
    \            }\n        }\n        i--;\n    }\n    return result;\n}", "{\n \
    \   string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, ch; word)\n    {\n        if(vowels.canFind(ch))\n\
    \        {\n            int j = i;\n            while(j >= 0 && consonants.canFind(word[j]))\n\
    \            {\n                j--;\n            }\n            if(j >= 0)\n\
    \            {\n                j = i;\n                while(j < word.length\
    \ && consonants.canFind(word[j]))\n                {\n                    j++;\n\
    \                }\n                if(j < word.length)\n                {\n \
    \                   distance = j - i;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     index = i;\n                    }\n                }\n \
    \           }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i < word.length - 1 && vowels.find(word[i + 1]) == -1)\n    \
    \        {\n                if (min_distance > i)\n                {\n       \
    \             min_distance = i;\n                    result = word[i];\n     \
    \           }\n            }\n            if (i > 0 && vowels.find(word[i - 1])\
    \ == -1)\n            {\n                if (min_distance > word.length - i)\n\
    \                {\n                    min_distance = word.length - i;\n    \
    \                result = word[i];\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n   \
    \ string result = \"\";\n    int index = 0;\n    foreach(i, c; word)\n    {\n\
    \        if(consonants.find(c) != -1)\n        {\n            index = i;\n   \
    \         break;\n        }\n    }\n    foreach(i, c; word[index..$])\n    {\n\
    \        if(vowels.find(c) != -1)\n        {\n            result = c;\n      \
    \      break;\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string res = \"\";\n    int min_dist = word.length;\n    foreach(i, v;\
    \ word)\n    {\n        if(vowels.find(v) != -1)\n        {\n            int dist\
    \ = word.length - i;\n            if(dist < min_dist)\n            {\n       \
    \         if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        res = v;\n          \
    \              min_dist = dist;\n                    }\n                }\n  \
    \              else if(i == word.length - 1)\n                {\n            \
    \        if(consonants.find(word[i-1]) != -1)\n                    {\n       \
    \                 res = v;\n                        min_dist = dist;\n       \
    \             }\n                }\n                else\n                {\n\
    \                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        res = v;\n          \
    \              min_dist = dist;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            distance = word.length - i;\n            if(distance <\
    \ min_distance)\n            {\n                min_distance = distance;\n   \
    \             result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int\
    \ closest_vowel_distance = 0;\n    int word_length = word.length;\n    int word_index\
    \ = 0;\n    int vowel_index = 0;\n    int vowel_distance = 0;\n    int consonant_index\
    \ = 0;\n    int consonant_distance = 0;\n    int last_consonant_index = 0;\n \
    \   int last_consonant_distance = 0;\n    int last_vowel_index = 0;\n    int last_vowel_distance\
    \ = 0;\n    int vowel_count = 0;\n    int consonant_count = 0;\n    int last_consonant_count\
    \ = 0;\n    int last_vowel_count = 0;\n    bool found_vowel = false;\n    bool\
    \ found_consonant = false;\n    bool found_last_vowel = false;\n    bool found_last_consonant\
    \ = false;\n    bool found_closest_vowel = false;\n    bool found_closest_consonant\
    \ = false;\n    bool found_last_closest_vowel = false;\n    bool found_last_closest_consonant\
    \ = false;\n    bool found_last_closest_vowel_distance = false;\n    bool found_last_closest_consonant_distance\
    \ = false;\n    bool found_closest_vowel_distance = false;\n    bool found_closest_consonant_distance\
    \ = false;\n    bool found_last_vowel_distance = false;\n    bool found_last_consonant_distance\
    \ = false;\n    bool found_vowel_distance = false;\n    bool found_consonant_distance\
    \ = false;\n    bool found_last_vowel_index = false;\n    bool found_last_consonant_index\
    \ = false", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\";\n   \
    \ int closest_index = 0;\n    int closest_distance = 0;\n    int distance = 0;\n\
    \    int index = 0;\n    foreach(vowel; vowels)\n    {\n        index = word.find(vowel);\n\
    \        if(index != -1)\n        {\n            distance = word.length - index;\n\
    \            if(distance > closest_distance)\n            {\n                closest_distance\
    \ = distance;\n                closest_index = index;\n                result\
    \ = vowel;\n            }\n        }\n    }\n    if(closest_index == 0)\n    {\n\
    \        return \"\";\n    }\n    else\n    {\n        if(consonants.find(word[closest_index\
    \ - 1]) != -1 && consonants.find(word[closest_index + 1]) != -1)\n        {\n\
    \            return result;\n        }\n        else\n        {\n            return\
    \ \"\";\n        }\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, char c; word)\n    {\n        if(consonants.find(c) != -1)\n \
    \       {\n            foreach(j, char v; vowels)\n            {\n           \
    \     if(word.find(v, i) != -1)\n                {\n                    if(word.find(v,\
    \ i) - i < min_distance)\n                    {\n                        min_distance\
    \ = word.find(v, i) - i;\n                        index = word.find(v, i);\n \
    \                       result = v;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = -1;\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            distance = word.length - i;\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     index = i;\n                    }\n                }\n \
    \           }\n        }\n    }\n    if (index != -1)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \                {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            if(i > 0 && consonants.find(word[i-1]) != -1)\n            {\n  \
    \              if(i < word.length - 1 && consonants.find(word[i+1]) != -1)\n \
    \               {\n                    distance = i;\n                    if(distance\
    \ < minDistance)\n                    {\n                        minDistance =\
    \ distance;\n                        result = c;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    bool found = false;\n    while (index >= 0 && !found)\n\
    \    {\n        if (vowels.find(word[index]) != -1)\n        {\n            if\
    \ (index == 0)\n            {\n                result = \"\";\n              \
    \  found = true;\n            }\n            else if (vowels.find(word[index -\
    \ 1]) == -1)\n            {\n                result = word[index];\n         \
    \       found = true;\n            }\n        }\n        index--;\n    }\n   \
    \ return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(i, vowel; word)\n    {\n \
    \       if(vowels.canFind(vowel))\n        {\n            int distance = 0;\n\
    \            foreach(j, consonant; word[i..$])\n            {\n              \
    \  if(consonants.canFind(consonant))\n                {\n                    distance\
    \ = j;\n                    break;\n                }\n            }\n       \
    \     if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = vowel;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int min = word.length;\n    foreach(i, ch;\
    \ word)\n    {\n        if(vowels.canFind(ch))\n        {\n            if(i >\
    \ 0 && consonants.canFind(word[i-1]) && i < word.length-1 && consonants.canFind(word[i+1]))\n\
    \            {\n                if(i < min)\n                {\n             \
    \       min = i;\n                    result = ch;\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = 0;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance > min_distance)\n\
    \            {\n                index = i;\n                min_distance = distance;\n\
    \            }\n        }\n    }\n    if(min_distance > 1)\n    {\n        if(consonants.find(word[index-1])\
    \ != -1 && consonants.find(word[index+1]) != -1)\n        {\n            result\
    \ = word[index..index];\n        }\n    }\n    return result;\n}", "{\n    auto\
    \ vowels = \"aeiouAEIOU\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    auto closest_vowel = \"\";\n    auto closest_vowel_distance = word.length;\n\
    \    auto word_length = word.length;\n    auto word_reverse = word.dup.reverse;\n\
    \    foreach(i, c; word_reverse)\n    {\n        if(consonants.canFind(c))\n \
    \       {\n            foreach(j, v; word_reverse[i..$])\n            {\n    \
    \            if(vowels.canFind(v))\n                {\n                    if(j\
    \ < closest_vowel_distance)\n                    {\n                        closest_vowel_distance\
    \ = j;\n                        closest_vowel = v;\n                    }\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.find(word[i-1]) != -1)\n                    {\n     \
    \                   min_distance = distance;\n                        result =\
    \ c;\n                    }\n                }\n                else\n       \
    \         {\n                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance\
    \ = -1;\n    int word_length = word.length;\n    for (int i = 0; i < word_length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i == 0 || i == word_length - 1)\n            {\n                continue;\n\
    \            }\n            else\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (closest_vowel_distance == -1 || abs(word_length - i) < closest_vowel_distance)\n\
    \                    {\n                        closest_vowel_distance = abs(word_length\
    \ - i);\n                        closest_vowel_index = i;\n                  \
    \  }\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1)\n    {\n        return \"\";\n    }\n    else\n    {\n        return\
    \ word[closest_vowel_index..closest_vowel_index];\n    }\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = int.max;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = 0;\n            int j = i;\n            while(j >= 0 && consonants.canFind(word[j]))\n\
    \            {\n                j--;\n                distance++;\n          \
    \  }\n            j = i;\n            while(j < word.length && consonants.canFind(word[j]))\n\
    \            {\n                j++;\n                distance++;\n          \
    \  }\n            if(distance < min_distance)\n            {\n               \
    \ min_distance = distance;\n                result = c;\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    int index = -1;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word) {\n        if(vowels.canFind(c)) {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance) {\n                min_distance\
    \ = distance;\n                index = i;\n            }\n        }\n    }\n \
    \   if(index == -1) {\n        return \"\";\n    }\n    return word[index..$];\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int minDistance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i > 0 && i < word.length - 1)\n            {\n\
    \                if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) ==\
    \ -1)\n                {\n                    distance = word.length - i;\n  \
    \                  if (distance < minDistance)\n                    {\n      \
    \                  minDistance = distance;\n                        index = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (index != 0)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            if(consonants.canFind(word[i - 1]) && consonants.canFind(word[i\
    \ + 1]))\n            {\n                distance = abs(i - word.length / 2);\n\
    \                if(distance < min_distance)\n                {\n            \
    \        min_distance = distance;\n                    index = i;\n          \
    \      }\n            }\n        }\n    }\n    if(index != 0)\n    {\n       \
    \ result = word[index..index];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_dist = word.length;\n\
    \    int dist;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                result = c;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int left = i;\n            int right = i;\n            while(left\
    \ >= 0 && consonants.find(word[left]) != -1)\n            {\n                left--;\n\
    \            }\n            while(right < word.length && consonants.find(word[right])\
    \ != -1)\n            {\n                right++;\n            }\n           \
    \ if(left >= 0 && right < word.length)\n            {\n                distance\
    \ = right - left - 1;\n                if(distance < minDistance)\n          \
    \      {\n                    minDistance = distance;\n                    result\
    \ = c;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    while(index > 0)\n    {\n        if(vowels.canFind(word[index]))\n\
    \        {\n            if(index == word.length-1)\n            {\n          \
    \      if(vowels.canFind(word[index-1]))\n                {\n                \
    \    index--;\n                    continue;\n                }\n            \
    \    else\n                {\n                    result = word[index];\n    \
    \                break;\n                }\n            }\n            else\n\
    \            {\n                if(vowels.canFind(word[index-1]))\n          \
    \      {\n                    index--;\n                    continue;\n      \
    \          }\n                else\n                {\n                    result\
    \ = word[index];\n                    break;\n                }\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                if(i == 0)\n                {\n                    if(consonants.canFind(word[i+1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.canFind(word[i-1]))\n                    {\n        \
    \                min_distance = distance;\n                        result = c;\n\
    \                    }\n                }\n                else\n            \
    \    {\n                    if(consonants.canFind(word[i-1]) && consonants.canFind(word[i+1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    int n = word.length;\n    int min_dist = n;\n    string closest_vowel\
    \ = \"\";\n    for (int i = 0; i < n; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int dist = n - i;\n            if (dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                closest_vowel\
    \ = word[i..$];\n            }\n        }\n    }\n    return closest_vowel;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int closest\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (abs(i - word.length)\
    \ < closest)\n                    {\n                        closest = abs(i -\
    \ word.length);\n                        result = word[i];\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance = 0;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            int j =\
    \ i;\n            while(j >= 0 && consonants.find(word[j]) != -1)\n          \
    \  {\n                left_distance++;\n                j--;\n            }\n\
    \            j = i;\n            while(j < word.length && consonants.find(word[j])\
    \ != -1)\n            {\n                right_distance++;\n                j++;\n\
    \            }\n            if(left_distance != 0 && right_distance != 0)\n  \
    \          {\n                if(min_distance > min(left_distance, right_distance))\n\
    \                {\n                    min_distance = min(left_distance, right_distance);\n\
    \                    result = c;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int index = word.length;\n    bool found_vowel = false;\n    bool\
    \ found_consonant = false;\n    while (index > 0)\n    {\n        if (found_vowel\
    \ && found_consonant)\n        {\n            return result;\n        }\n    \
    \    if (vowels.find(word[index]) != -1)\n        {\n            found_vowel =\
    \ true;\n            result = word[index];\n        }\n        else if (consonants.find(word[index])\
    \ != -1)\n        {\n            found_consonant = true;\n        }\n        index--;\n\
    \    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   if(i > 0 && consonants.canFind(word[i-1]))\n                {\n          \
    \          if(i < word.length - 1 && consonants.canFind(word[i+1]))\n        \
    \            {\n                        min_distance = distance;\n           \
    \             result = c;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    for (int i = 0; i < word.length; i++)\n  \
    \  {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (closest_vowel_distance == -1 || distance\
    \ < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n                closest_vowel\
    \ = word[i..$];\n            }\n        }\n    }\n    return closest_vowel;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && consonants.find(word[i-1]) != -1)\n\
    \            {\n                distance = 1;\n                while (i+distance\
    \ < word.length && consonants.find(word[i+distance]) != -1)\n                {\n\
    \                    distance++;\n                }\n                if (distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i..$];\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(min_distance != word.length)\n\
    \    {\n        result = word[index..$];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i == 0 || i == word.length - 1)\n       \
    \     {\n                continue;\n            }\n            else\n        \
    \    {\n                if (consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                {\n                    distance = word.length - i;\n\
    \                    if (distance < min_distance)\n                    {\n   \
    \                     min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int last_vowel_index = -1;\n   \
    \ int last_consonant_index = -1;\n    int min_distance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            last_vowel_index = i;\n            if (last_consonant_index\
    \ != -1)\n            {\n                if (last_vowel_index - last_consonant_index\
    \ < min_distance)\n                {\n                    min_distance = last_vowel_index\
    \ - last_consonant_index;\n                    result = word[last_vowel_index];\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      last_consonant_index = i;\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ dist_left = 0;\n            int dist_right = 0;\n            for(int j = i -\
    \ 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    dist_left = i - j;\n        \
    \            break;\n                }\n            }\n            for(int j =\
    \ i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    dist_right = j - i;\n       \
    \             break;\n                }\n            }\n            if(dist_left\
    \ != 0 && dist_right != 0)\n            {\n                int dist = min(dist_left,\
    \ dist_right);\n                if(dist < min_dist)\n                {\n     \
    \               min_dist = dist;\n                    result = c;\n          \
    \      }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (min_distance > abs(i\
    \ - word.length))\n                    {\n                        min_distance\
    \ = abs(i - word.length);\n                        result = word[i];\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    int min_dist = word.length;\n    string closest_vowel = \"\";\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int dist\
    \ = word.length - i;\n            if(dist < min_dist)\n            {\n       \
    \         min_dist = dist;\n                closest_vowel = c;\n            }\n\
    \        }\n    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.indexOf(c) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                int left = i - 1;\n                int right =\
    \ i + 1;\n                if(left >= 0 && right < word.length)\n             \
    \   {\n                    if(consonants.indexOf(word[left]) != -1 && consonants.indexOf(word[right])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    int word_len = word.length;\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word_len;\n    for (int i = 0;\
    \ i < word_len; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n       \
    \ {\n            if (i == 0)\n            {\n                continue;\n     \
    \       }\n            else if (i == word_len - 1)\n            {\n          \
    \      continue;\n            }\n            else if (vowels.find(word[i-1]) !=\
    \ -1)\n            {\n                continue;\n            }\n            else\
    \ if (vowels.find(word[i+1]) != -1)\n            {\n                continue;\n\
    \            }\n            else\n            {\n                distance = word_len\
    \ - i;\n                if (distance < min_distance)\n                {\n    \
    \                min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance\
    \ = word.length;\n    int index = 0;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            if(i > 0 && i < word.length -\
    \ 1)\n            {\n                if(!vowels.canFind(word[i - 1]) && !vowels.canFind(word[i\
    \ + 1]))\n                {\n                    if(abs(i - word.length) < distance)\n\
    \                    {\n                        distance = abs(i - word.length);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index .. index];\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i + 1 < word.length && vowels.find(word[i\
    \ + 1]) == -1)\n            {\n                if (i + 1 < min_distance)\n   \
    \             {\n                    min_distance = i + 1;\n                 \
    \   result = word[i..$];\n                }\n            }\n            if (i\
    \ - 1 >= 0 && vowels.find(word[i - 1]) == -1)\n            {\n               \
    \ if (word.length - i < min_distance)\n                {\n                   \
    \ min_distance = word.length - i;\n                    result = word[i..$];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = word.length - 1;\n    int vowel_index = -1;\n    while (index\
    \ >= 0)\n    {\n        if (consonants.find(word[index]) != -1)\n        {\n \
    \           if (vowel_index != -1)\n            {\n                return word[vowel_index..$];\n\
    \            }\n        }\n        else if (vowels.find(word[index]) != -1)\n\
    \        {\n            vowel_index = index;\n        }\n        index--;\n  \
    \  }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length - 1;\n \
    \   int distance = word.length;\n    int temp = 0;\n    while (index >= 0)\n \
    \   {\n        if (vowels.find(word[index]) != -1)\n        {\n            temp\
    \ = index;\n            while (temp >= 0)\n            {\n                if (vowels.find(word[temp])\
    \ == -1)\n                {\n                    if (distance > index - temp)\n\
    \                    {\n                        distance = index - temp;\n   \
    \                     result = word[index];\n                    }\n         \
    \           break;\n                }\n                temp--;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            if(i > 0 && i < word.length - 1)\n            {\n    \
    \            if(!vowels.canFind(word[i - 1]) && !vowels.canFind(word[i + 1]))\n\
    \                {\n                    if(abs(i - word.length) < min_distance)\n\
    \                    {\n                        min_distance = abs(i - word.length);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n   \
    \ foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n     \
    \       int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = int.max;\n    int index = 0;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            foreach(j, v; vowels)\n            {\n                if(word.find(v,\
    \ i) != -1)\n                {\n                    if(word.find(v, i) - i < distance)\n\
    \                    {\n                        distance = word.find(v, i) - i;\n\
    \                        index = word.find(v, i);\n                        result\
    \ = v;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i - 1;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n      \
    \      if (vowels.find(word[index - 1]) == -1)\n            {\n              \
    \  return word[index..$];\n            }\n        }\n        index--;\n    }\n\
    \    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index = -1;\n   \
    \ int min_distance = -1;\n    for (int i = 0; i < word.length; i++)\n    {\n \
    \       if (vowels.find(word[i]) != -1)\n        {\n            int distance =\
    \ word.length - i;\n            if (consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n            {\n                if (min_distance == -1 || distance <\
    \ min_distance)\n                {\n                    min_distance = distance;\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    if (index == -1)\n        return \"\";\n    return word[index..$];\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int min_distance = word.length;\n    int index = 0;\n   \
    \ foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n  \
    \          distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n                index = i;\n            }\n        }\n    }\n    if(index\
    \ == 0 || index == word.length - 1)\n        return \"\";\n    else\n        return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int index = 0;\n    int min_index = 0;\n    int min_distance = 0;\n    int\
    \ distance = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          if(i > 0 && i < word.length - 1)\n            {\n                if(!vowels.canFind(word[i-1])\
    \ && !vowels.canFind(word[i+1]))\n                {\n                    if(abs(word.length\
    \ - i) < min_distance)\n                    {\n                        min_distance\
    \ = abs(word.length - i);\n                        index = i;\n              \
    \      }\n                }\n            }\n        }\n    }\n    if(index !=\
    \ 0)\n    {\n        result = word[index..$];\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance\
    \ = 0;\n    int minDistance = 0;\n    int index = 0;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            if(i != 0 &&\
    \ i != word.length - 1)\n            {\n                if(vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            distance = abs(i - word.length);\n                    if(minDistance\
    \ == 0 || distance < minDistance)\n                    {\n                   \
    \     minDistance = distance;\n                        index = i;\n          \
    \          }\n                }\n            }\n        }\n    }\n    if(index\
    \ != 0)\n    {\n        result = word[index];\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    int word_length = word.length;\n    for (int\
    \ i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int j = i + 1;\n            while (j < word_length &&\
    \ consonants.find(word[j]) != -1)\n            {\n                j++;\n     \
    \       }\n            if (j < word_length && vowels.find(word[j]) == -1)\n  \
    \          {\n                int distance = j - i;\n                if (closest_vowel_distance\
    \ == -1 || distance < closest_vowel_distance)\n                {\n           \
    \         closest_vowel_distance = distance;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ != -1)\n    {\n        closest_vowel = word[closest_vowel_index..closest_vowel_index];\n\
    \    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              index = i;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    if (index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = word.length - 1;\n    int vowel_index = -1;\n\
    \    while (index >= 0)\n    {\n        if (vowels.find(word[index]) != -1)\n\
    \        {\n            vowel_index = index;\n            break;\n        }\n\
    \        index--;\n    }\n    if (vowel_index == -1)\n        return result;\n\
    \    index = vowel_index - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ == -1)\n        {\n            result = word[vowel_index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n           \
    \ int distance = word.length - i;\n            if(distance < min_distance)\n \
    \           {\n                if(i == 0)\n                {\n               \
    \     if(consonants.canFind(word[i+1]))\n                    {\n             \
    \           min_distance = distance;\n                        result = c;\n  \
    \                  }\n                }\n                else if(i == word.length\
    \ - 1)\n                {\n                    if(consonants.canFind(word[i-1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \                else\n                {\n                    if(consonants.canFind(word[i-1])\
    \ && consonants.canFind(word[i+1]))\n                    {\n                 \
    \       min_distance = distance;\n                        result = c;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, char c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, letter; word)\n    {\n        if(vowels.find(letter) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if(index == 0)\n\
    \    {\n        return result;\n    }\n    else\n    {\n        if(consonants.find(word[index\
    \ - 1]) != -1 && consonants.find(word[index + 1]) != -1)\n        {\n        \
    \    result = word[index..index];\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (consonants.find(word[index]) != -1)\n        {\n  \
    \          if (vowels.find(word[index - 1]) != -1)\n            {\n          \
    \      result = word[index - 1];\n                break;\n            }\n    \
    \    }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    int vowel_index\
    \ = -1;\n    int consonant_index = -1;\n    while (index >= 0)\n    {\n      \
    \  if (vowels.find(word[index]) != -1)\n        {\n            vowel_index = index;\n\
    \            break;\n        }\n        index--;\n    }\n    if (vowel_index ==\
    \ -1)\n        return result;\n    index = vowel_index - 1;\n    while (index\
    \ >= 0)\n    {\n        if (consonants.find(word[index]) != -1)\n        {\n \
    \           consonant_index = index;\n            break;\n        }\n        index--;\n\
    \    }\n    if (consonant_index == -1)\n        return result;\n    return word[vowel_index..vowel_index];\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                if(i > 0 && consonants.canFind(word[i-1]))\n                {\n\
    \                    if(i < word.length - 1 && consonants.canFind(word[i+1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    bool found_vowel = false;\n    bool found_consonant\
    \ = false;\n    int index = 0;\n    int distance = 0;\n    int min_distance =\
    \ word.length;\n    foreach(c; word)\n    {\n        if(found_vowel && found_consonant)\n\
    \        {\n            if(distance < min_distance)\n            {\n         \
    \       min_distance = distance;\n                result = c;\n            }\n\
    \            found_vowel = false;\n            found_consonant = false;\n    \
    \        distance = 0;\n        }\n        if(vowels.indexOf(c) != -1)\n     \
    \   {\n            found_vowel = true;\n        }\n        else if(consonants.indexOf(c)\
    \ != -1)\n        {\n            found_consonant = true;\n        }\n        distance++;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   if(i != 0 && i != word.length - 1)\n                {\n                  \
    \  if(consonants.find(word[i - 1]) != -1 && consonants.find(word[i + 1]) != -1)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n   \
    \             {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = int.max;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.canFind(word[i]))\n\
    \        {\n            int j = i + 1;\n            while (j < word.length &&\
    \ vowels.canFind(word[j]))\n            {\n                j++;\n            }\n\
    \            if (j < word.length)\n            {\n                int distance\
    \ = j - i;\n                if (distance < min_distance)\n                {\n\
    \                    min_distance = distance;\n                    result = word[i..i+1];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            index = i;\n            break;\n        }\n \
    \   }\n    if (index == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        for (int i = index; i >= 0; i--)\n        {\n            if (vowels.find(word[i])\
    \ == -1)\n            {\n                result = word[index];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = -1;\n            int right_distance = -1;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            if(left_distance\
    \ != -1 && right_distance != -1)\n            {\n                int distance\
    \ = min(left_distance, right_distance);\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n     \
    \   if(vowels.find(c) != -1)\n        {\n            int right_distance = word.length\
    \ - i - 1;\n            int left_distance = i;\n            if(left_distance >\
    \ 0 && right_distance > 0)\n            {\n                if(consonants.find(word[i\
    \ - 1]) != -1 && consonants.find(word[i + 1]) != -1)\n                {\n    \
    \                if(min_distance > min(left_distance, right_distance))\n     \
    \               {\n                        min_distance = min(left_distance, right_distance);\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    while (index > 0)\n    {\n        if (vowels.canFind(word[index]))\n\
    \        {\n            if (!vowels.canFind(word[index - 1]))\n            {\n\
    \                result = word[index];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            if(i\
    \ == 0)\n                continue;\n            if(i == word.length - 1)\n   \
    \             continue;\n            if(consonants.find(word[i - 1]) != -1 &&\
    \ consonants.find(word[i + 1]) != -1)\n            {\n                if(i < min_distance)\n\
    \                {\n                    min_distance = i;\n                  \
    \  result = c;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int pos = word.length - 1;\n    while (pos >\
    \ 0)\n    {\n        if (vowels.canFind(word[pos]))\n        {\n            if\
    \ (!vowels.canFind(word[pos - 1]))\n            {\n                result = word[pos];\n\
    \                break;\n            }\n        }\n        pos--;\n    }\n   \
    \ return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
