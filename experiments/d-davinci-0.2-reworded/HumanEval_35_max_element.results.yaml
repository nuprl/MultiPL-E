name: HumanEval_35_max_element
language: d
results:
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    foreach(e; l)\n    {\n        if(e < min)\n\
    \        {\n            min = e;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_array([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_array([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    156L\n\
    */\nlong sum_array(long[] l) \n{\n    long sum = 0;\n    foreach(e; l)\n    {\n\
    \        sum += e;\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_array([1L, 2L, 3L])\n    6L\n    >>> product_array([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -1215000L\n*/\nlong product_array(long[]\
    \ l) \n{\n    long product = 1;\n    foreach(e; l)\n    {\n        product *=\
    \ e;\n    }\n    return product;\n}\n/*\nReturn average of all elements in the\
    \ array.\n    >>> average_array([1L, 2L, 3L])\n    2L\n    >>> average_array([5L,\
    \ 3L, -5L, 2L, -\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ptvh_al.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ptvh_al.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    foreach(i; l)\n    {\n        if(i < min)\n\
    \        {\n            min = i;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_array([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_array([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    158L\n\
    */\nlong sum_array(long[] l) \n{\n    long sum = 0;\n    foreach(i; l)\n    {\n\
    \        sum += i;\n    }\n    return sum;\n}\n/*\nReturn the mean of all elements\
    \ in the array.\n    >>> mean_array([1L, 2L, 3L])\n    2L\n    >>> mean_array([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    14L\n*/\nlong mean_array(long[]\
    \ l) \n{\n    return sum_array(l) / l.length;\n}\n/*\nReturn the median of all\
    \ elements in the array.\n    >>> median_array([1L, 2L, 3L])\n    2L\n    >>>\
    \ median_array([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqr6n__k.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqr6n__k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long e; l)\n    {\n        if(e > max)\n        {\n   \
    \         max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    foreach(i; l)\n    {\n        if(i < min)\n\
    \        {\n            min = i;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  166L\n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    foreach(i;\
    \ l)\n    {\n        sum += i;\n    }\n    return sum;\n}\n/*\nReturn average\
    \ value of all elements in the array.\n    >>> average_elements([1L, 2L, 3L])\n\
    \    2L\n    >>> average_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    15L\n*/\nlong average_elements(long[] l) \n{\n    long sum = 0;\n\
    \    foreach(i; l)\n    {\n        sum += i;\n    }\n    return sum / l.length;\n\
    }\n/*\nReturn median value of all elements in the array.\n    >>> median_elements([1L,\
    \ 2L, 3L])\n    2L\n    >>> median_elements([5L, 3\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2u5uvl9.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2u5uvl9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max)\n\
    \        {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l) \n    {\n        if (e > max) \n        {\n     \
    \       max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max)\n\
    \        {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(x; l)\n    {\n        if(x > max)\n        {\n        \
    \    max = x;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l) \n    {\n        if (i > max) \n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    foreach(i; l)\n    {\n        if(i < min)\n\
    \        {\n            min = i;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ mean value of the array.\n    >>> mean([1L, 2L, 3L])\n    2L\n    >>> mean([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    8L\n*/\nlong mean(long[]\
    \ l) \n{\n    long sum = 0;\n    foreach(i; l)\n    {\n        sum += i;\n   \
    \ }\n    return sum / l.length;\n}\n/*\nReturn median value of the array.\n  \
    \  >>> median([1L, 2L, 3L])\n    2L\n    >>> median([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    2L\n*/\nlong median(long[] l) \n{\n    long[]\
    \ sorted = l.dup;\n    std.algorithm.sort(sorted);\n    return sorted[(sorted.length\
    \ - 1) / 2];\n}\n/*\nReturn variance of the array.\n    >>> variance([1L, 2L,\
    \ 3L])\n    1L\n    >>> variance([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6boi67u1.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6boi67u1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l) \n    {\n        if (i > max) \n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(e; l)\n    {\n        if(e > max)\n        {\n        \
    \    max = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
