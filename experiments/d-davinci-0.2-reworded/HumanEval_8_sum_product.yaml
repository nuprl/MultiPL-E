name: HumanEval_8_sum_product
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n For a given array of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
  \    Empty sum should be equal to 0 and empty product should be equal to 1.\n  \
  \  >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n\
  \    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n"
tests: "unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
  \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n  \
  \  assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
  \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n\
    \    {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(i; numbers)\n    {\n  \
    \      sum += i;\n        product *= i;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(i; numbers)\n    {\n        sum += i;\n        product *=\
    \ i;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i; numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number;\
    \ numbers) \n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers) \n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(num; numbers)\n    {\n        sum += num;\n        product *= num;\n\
    \    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers) \n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }\n/*\n    Given a string, return a tuple of two strings, one with all the characters\
    \ in the string in lower case and the other with all the characters in the string\
    \ in upper case.\n    >>> case_swap(\"Hello World\")\n    tuple(\"hello world\"\
    , \"HELLO WORLD\")\n    >>> case_swap(\"\")\n    tuple(\"\", \"\")\n*/\nTuple!(string,\
    \ string) case_swap(string s)\n{\n    string lower = \"\";\n    string upper =\
    \ \"\";\n    foreach(c; s)\n    {\n        lower ~= toLower(c);\n        upper\
    \ ~= toUpper(c);\n    }\n    return tuple(lower, upper);\n}\n/*\n    Given a string,\
    \ return a tuple of two strings, one with all the characters in the string in\
    \ lower case and the other with all the characters in the string in upper case.\n\
    \    >>> case_swap(\"Hello World\")\n    tuple(\"hello world\", \"HELLO WORLD\"\
    )\n    >>> case_swap(\"\")\n    tuple(\"\", \"\")\n*/\nTuple!(string, string)\
    \ case_swap2(string s)\n{\n    string lower = \"\";\n    string upper = \"\";\n\
    \    foreach(c; s)\n    {\n        lower ~= toLower(c);\n        upper ~= toUpper(c);\n\
    \    }\n    return tuple(lower, upper);\n}\n/*\n    Given a string, return a tuple\
    \ of two strings, one with all the characters in the string in lower case and\
    \ the other with all the characters in the string in upper case.\n    >>> case_swap(\"\
    Hello World\")\n    tuple(\"hello world\", \"HELLO WORLD\")\n    >>> case_swap(\"\
    \")\n    tuple(\"\", \"\")\n*/\nTuple!(string, string) case_swap3(string s)\n\
    {\n    string lower = \"\";\n    string upper = \"\";\n    foreach(c; s)\n   \
    \ {\n        lower ~", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers) \n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(num;\
    \ numbers)\n    {\n        sum += num;\n        product *= num;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(num; numbers)\n    {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n \
    \       sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(num; numbers) \n    {\n        sum += num;\n     \
    \   product *= num;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\
    \ \n    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers)\n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }\n/*\n    Given a list of strings, return a list of tuples, where each tuple\
    \ contains a string and its length.\n    >>> string_lengths([\"Hello\", \"World\"\
    ])\n    [tuple(\"Hello\", 5L), tuple(\"World\", 5L)]\n*/\nTuple!(string, long)[]\
    \ string_lengths(string[] strings) \n{\n    Tuple!(string, long)[] result;\n \
    \   foreach(s; strings)\n    {\n        result ~= tuple(s, s.length);\n    }\n\
    \    return result;\n}\n/*\n    Given a list of integers, return a list of tuples,\
    \ where each tuple contains a number and its square.\n    >>> square_numbers([1L,\
    \ 2L, 3L, 4L])\n    [tuple(1L, 1L), tuple(2L, 4L), tuple(3L, 9L), tuple(4L, 16L)]\n\
    */\nTuple!(long, long)[] square_numbers(long[] numbers) \n{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(n; numbers)\n    {\n        result ~= tuple(n,\
    \ n*n);\n    }\n    return result;\n}\n/*\n    Given a list of integers, return\
    \ a list of tuples, where each tuple contains a number and its cube.\n    >>>\
    \ cube_numbers([1L, 2L, 3L, 4L])\n    [tuple(1L, 1L), tuple(2L, 8L), tuple(3L,\
    \ 27L), tuple(4L, 64L)]\n*/\nTuple!(long, long)[] cube_numbers(long[] numbers)\
    \ \n{\n    Tuple!(long, long)[] result;\n    foreach(n; numbers)\n    {\n    \
    \    result ~= tuple(n, n*n*n);\n    }\n    return result;\n}\n/*\n    Given a\
    \ list of integers, return a list", "{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number; numbers) \n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number; numbers) \n    {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(num; numbers)\n    {\n        sum += num;\n      \
    \  product *= num;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers)\n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n \
    \       sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(number; numbers) \n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}\n/*\n Given\
    \ a list of integers, return a list of integers where each integer is multiplied\
    \ by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n    >>> double_list([])\n\
    \    []\n*/\nlong[] double_list(long[] numbers) \n{\n    long[] result = new long[];\n\
    \    foreach(number; numbers) \n    {\n        result ~= number * 2;\n    }\n\
    \    return result;\n}\n/*\n Given a list of integers, return a list of integers\
    \ where each integer is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    >>> double_list([])\n    []\n*/\nlong[] double_list(long[]\
    \ numbers) \n{\n    long[] result = new long[];\n    foreach(number; numbers)\
    \ \n    {\n        result ~= number * 2;\n    }\n    return result;\n}\n/*\n Given\
    \ a list of integers, return a list of integers where each integer is multiplied\
    \ by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n    >>> double_list([])\n\
    \    []\n*/\nlong[] double_list(long[] numbers) \n{\n    long[] result = new long[];\n\
    \    foreach(number; numbers) \n    {\n        result ~= number * 2;\n    }\n\
    \    return result;\n}\n/*\n Given a list of integers, return a list of integers\
    \ where each integer is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    >>> double_list([])\n    []\n*/\nlong[] double_list(long[]\
    \ numbers) \n{\n    long[] result = new long[];\n    foreach(number; numbers)\
    \ \n   ", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n\
    \    {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(i; numbers)\n    {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(num; numbers)\n    {\n        sum += num;\n        product *= num;\n\
    \    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n\
    \    {\n        sum += num;\n        product *= num;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number;\
    \ numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n \
    \       sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(num; numbers) \n    {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number; numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers)\n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n     \
    \   sum += number;\n        product *= number;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n\
    \    {\n        sum += num;\n        product *= num;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number;\
    \ numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(num; numbers)\n    {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number; numbers) \n    {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers) \n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n  \
    \      product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(num;\
    \ numbers)\n    {\n        sum += num;\n        product *= num;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(num; numbers)\n    {\n        sum += num;\n        product *= num;\n\
    \    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers) \n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number; numbers)\n    {\n     \
    \   sum += number;\n        product *= number;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers) \n \
    \   {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(number; numbers)\n    {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number; numbers) \n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n    {\n\
    \        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(i; numbers)\n  \
    \  {\n        sum += i;\n        product *= i;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n  \
    \  {\n        sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(num; numbers)\n\
    \    {\n        sum += num;\n        product *= num;\n    }\n    return tuple(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(n;\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(n; numbers) \n    {\n        sum += n;\n        product *= n;\n    }\n\
    \    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long sum = 0;\n \
    \   long product = 1;\n    foreach(n; numbers)\n    {\n        sum += n;\n   \
    \     product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(n; numbers)\n    {\n  \
    \      sum += n;\n        product *= n;\n    }\n    return tuple(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number; numbers)\
    \ \n    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ tuple(sum, product);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
