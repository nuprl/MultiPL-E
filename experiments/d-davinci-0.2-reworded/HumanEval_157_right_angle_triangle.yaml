name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n    sides form a right-angled\
  \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
  \ right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    long a = sides[0];\n    long b = sides[1];\n    long c = sides[2];\n    return\
    \ a * a + b * b == c * c;\n}", "{\n    // your code goes here\n    return false;\n\
    }", "{\n    // your code goes here\n    long[] arr = [a, b, c];\n    sort(arr);\n\
    \    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n  \
    \  if (a == 0 || b == 0 || c == 0)\n        return false;\n    // Pythagorean\
    \ theorem\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 == c^2\n    return a * a +\
    \ b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a;\n}", "{\n\
    \    if (a < b)\n        swap(a, b);\n    if (a < c)\n        swap(a, c);\n  \
    \  if (b < c)\n        swap(b, c);\n    return a * a == b * b + c * c;\n}", "{\n\
    \    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto min_sides\
    \ = min(sides);\n    auto mid_side = max_side == sides[0] ? (max_side == sides[1]\
    \ ? sides[2] : sides[1]) : sides[0];\n    return max_side * max_side == min_sides\
    \ * min_sides + mid_side * mid_side;\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[3] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    // your code goes here\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    long a2 = sides[0] * sides[0];\n    long b2 = sides[1] * sides[1];\n    long\
    \ c2 = sides[2] * sides[2];\n    return a2 + b2 == c2;\n}", "{\n    long[3] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // your code goes here\n    long[] arr = [a, b, c];\n    sort(arr);\n\
    \    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a,\
    \ b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]);\n}", "{\n    // your code goes here\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n \
    \   sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    auto t = tuple(a,\
    \ b, c);\n    auto max = maxElement(t);\n    auto sum = a + b + c;\n    return\
    \ (sum - max) > max;\n}", "{\n    // TODO: implement\n    return false;\n}", "{\n\
    \    // your code goes here\n    long max = max(a, max(b, c));\n    long min =\
    \ min(a, min(b, c));\n    long mid = a + b + c - max - min;\n    return max *\
    \ max == mid * mid + min * min;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto sum_of_squares = reduce!((a, b) => a + b * b)(sides);\n    return max_side\
    \ * max_side == sum_of_squares - max_side * max_side;\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]);\n}", "{\n    long[3] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    if (a == 0 || b == 0 || c == 0)\n        return false;\n    long max = max(a,\
    \ max(b, c));\n    long sum = a + b + c;\n    return sum - max == max * 2;\n}",
  "{\n    long[] triangle = [a, b, c];\n    sort(triangle);\n    return triangle[0]*triangle[0]\
    \ + triangle[1]*triangle[1] == triangle[2]*triangle[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n \
    \   sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // your code goes here\n    return false;\n}", "{\n\
    \    long[] arr = [a, b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1]\
    \ * arr[1] == arr[2] * arr[2];\n}", "{\n    if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    long max = max(a, max(b, c));\n    long sum = a +\
    \ b + c;\n    return sum - max == max * 2;\n}", "{\n    long[] arr = [a, b, c];\n\
    \    sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    return a*a + b*b == c*c;\n}", "{\n    // TODO: implement\n    return false;\n\
    }", "{\n    // TODO: implement\n    return false;\n}", "{\n    long[] sides =\
    \ [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] arr = [a, b, c];\n    sort(arr);\n    return\
    \ arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sides.sort();\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n    long b2 = sides[1]\
    \ * sides[1];\n    long c2 = sides[2] * sides[2];\n    return a2 + b2 == c2;\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    // TODO\n    return true;\n}\n/*\n    Given\
    \ a string, return a new string where the first and last chars have been\n   \
    \ exchanged.\n    Example:\n    >>> swap_first_last(\"Hello\")\n    \"oellH\"\n\
    \    >>> swap_first_last(\"World\")\n    \"dlorW\"\n*/\nstring swap_first_last(string\
    \ s) \n{\n    // TODO\n    return \"\";\n}\n/*\n    Given a string, return a new\
    \ string where the first and last chars have been\n    exchanged.\n    Example:\n\
    \    >>> swap_first_last(\"Hello\")\n    \"oellH\"\n    >>> swap_first_last(\"\
    World\")\n    \"dlorW\"\n*/\nstring swap_first_last(string s) \n{\n    // TODO\n\
    \    return \"\";\n}\n/*\n    Given a string, return a new string where the first\
    \ and last chars have been\n    exchanged.\n    Example:\n    >>> swap_first_last(\"\
    Hello\")\n    \"oellH\"\n    >>> swap_first_last(\"World\")\n    \"dlorW\"\n*/\n\
    string swap_first_last(string s) \n{\n    // TODO\n    return \"\";\n}\n/*\n \
    \   Given a string, return a new string where the first and last chars have been\n\
    \    exchanged.\n    Example:\n    >>> swap_first_last(\"Hello\")\n    \"oellH\"\
    \n    >>> swap_first_last(\"World\")\n    \"dlorW\"\n*/\nstring swap_first_last(string\
    \ s) \n{\n    // TODO\n    return \"\";\n}\n/*\n    Given a string, return a new\
    \ string where the first and last chars have been\n    exchanged.\n    Example:\n\
    \    >>> swap_first_last(\"Hello\")\n    \"oellH\"\n    >>> swap_first_last(\"\
    World\")\n    \"dlorW\"\n*/\nstring swap_first_last(string s) \n{\n    // TODO\n\
    \    return \"\";\n}\n/*\n    Given a string, return a new string where the first\
    \ and last chars have been\n    exchanged.\n    Example:\n    >>> swap_first_last(\"\
    Hello", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    long a = sides[0];\n    long b = sides[1];\n    long c\
    \ = sides[2];\n    return a * a + b * b == c * c;\n}", "{\n    long[] sides =\
    \ [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    // Your code here\n    return false;\n}",
  "{\n    long[] sides = tuple(a, b, c);\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // your code here\n\
    \    return false;\n}", "{\n    // TODO: Implement me\n    return false;\n}",
  "{\n    // TODO: implement\n    return false;\n}", "{\n    // TODO: Implement this\
    \ function\n    // Hint: use the Pythagorean theorem\n    long max = max(max(a,\
    \ b), c);\n    long min = min(min(a, b), c);\n    long mid = a + b + c - max -\
    \ min;\n    return max * max == mid * mid + min * min;\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    // TODO: implement me\n    return false;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] arr = [a, b, c];\n  \
    \  sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: implement this function\n\
    \    return false;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n \
    \   return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return (sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}", "{\n    long[]\
    \ arr = [a, b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1]\
    \ == arr[2] * arr[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] arr = [a, b, c];\n    sort(arr);\n    return (arr[0] * arr[0]\
    \ + arr[1] * arr[1] == arr[2] * arr[2]);\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[3]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    return (a > 0 && b > 0 && c > 0 && a * a + b * b ==\
    \ c * c);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    if (a < 0 || b < 0 || c < 0)\n        return false;\n    if (a == 0 || b\
    \ == 0 || c == 0)\n        return false;\n    if (a == b && b == c)\n        return\
    \ false;\n    if (a == b || b == c || a == c)\n        return false;\n    if (a\
    \ > b && a > c)\n        return a * a == b * b + c * c;\n    if (b > a && b >\
    \ c)\n        return b * b == a * a + c * c;\n    if (c > a && c > b)\n      \
    \  return c * c == a * a + b * b;\n    return false;\n}", "{\n    auto sides =\
    \ tuple(a, b, c);\n    // sort the sides by length\n    sort(sides);\n    // Pythagorean\
    \ theorem\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n\
    }", "{\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n    if (a\
    \ == b && b == c)\n        return false;\n    if (a == b || b == c || a == c)\n\
    \        return true;\n    if (a > b && a > c)\n        return a * a == b * b\
    \ + c * c;\n    if (b > a && b > c)\n        return b * b == a * a + c * c;\n\
    \    if (c > a && c > b)\n        return c * c == a * a + b * b;\n    return false;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto sum_of_other_sides = sum(sides)\
    \ - max_side;\n    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // your\
    \ code here\n    return false;\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // your\
    \ code here\n    return true;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]);\n}", "{\n    // your code here\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    // TODO: Implement this function.\n   \
    \ // You can use the following functions:\n    //  - std.math.pow\n    //  - std.math.sqrt\n\
    \    //  - std.math.abs\n    //  - std.math.max\n    //  - std.math.min\n    //\
    \  - std.typecons.Tuple\n    //  - std.typecons.Tuple.opSlice\n    //  - std.typecons.Tuple.opCat\n\
    \    //  - std.typecons.Tuple.opCatAssign\n    //  - std.typecons.Tuple.opCatRight\n\
    \    //  - std.typecons.Tuple.opCatRightAssign\n    //  - std.typecons.Tuple.opDollar\n\
    \    //  - std.typecons.Tuple.opDollarAssign\n    //  - std.typecons.Tuple.opIndex\n\
    \    //  - std.typecons.Tuple.opIndexAssign\n    //  - std.typecons.Tuple.opIndexOpAssign\n\
    \    //  - std.typecons.Tuple.opSlice\n    //  - std.typecons.Tuple.opSliceAssign\n\
    \    //  - std.typecons.Tuple.opSliceOpAssign\n    //  - std.typecons.Tuple.opUnary\n\
    \    //  - std.typecons.Tuple.opUnaryRight\n    //  - std.typecons.Tuple.opBinary\n\
    \    //  - std.typecons.Tuple.opBinaryRight\n    //  - std.typecons.Tuple.opOpAssign\n\
    \    //  - std.typecons.Tuple.opOpBinaryRightAssign\n    //  - std.typecons.Tuple.opDispatch\n\
    \    //  - std.typecons.Tuple.opDispatchRight\n    //  - std.typecons.Tuple.opEquals\n\
    \    //  - std.typecons.Tuple.opCmp\n    //  - std.typecons.Tuple.opCmpRight\n\
    \    //  - std.typecons.Tuple.opCmpLeft\n    //  - std.", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO\n    return false;\n}",
  "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    auto max = maxElement(sides);\n    auto sum = a + b +\
    \ c;\n    return max * max == sum - max * max;\n}", "{\n    // TODO: implement\
    \ this function\n    long[] arr = [a, b, c];\n    sort(arr);\n    return arr[0]\
    \ * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] arr = [a, b, c];\n  \
    \  sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // your code here\n\
    \    return false;\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    if(a ==\
    \ 0 || b == 0 || c == 0)\n        return false;\n    long max = max(a, max(b,\
    \ c));\n    long min = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if(max * max == min * min + mid * mid)\n        return true;\n    return\
    \ false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto sum_of_other_sides = sum(sides) - max_side;\n    return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    // TODO: Implement this function\n    return\
    \ false;\n}", "{\n    // TODO: implement this function\n    return false;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // Check if the triangle is right-angled\n    if(a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    else if(a < 0 || b < 0 || c < 0)\n  \
    \      return false;\n    else if(a == b && b == c)\n        return false;\n \
    \   else if(a == b || b == c || a == c)\n        return false;\n    else if(a\
    \ > b && a > c)\n    {\n        if(a*a == b*b + c*c)\n            return true;\n\
    \        else\n            return false;\n    }\n    else if(b > a && b > c)\n\
    \    {\n        if(b*b == a*a + c*c)\n            return true;\n        else\n\
    \            return false;\n    }\n    else if(c > a && c > b)\n    {\n      \
    \  if(c*c == a*a + b*b)\n            return true;\n        else\n            return\
    \ false;\n    }\n    else\n        return false;\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n    long b2 =\
    \ sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return a2 + b2\
    \ == c2;\n}", "{\n    // TODO: implement this function\n    return false;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    // TODO: implement\n    //throw new Error(\"\
    Not implemented\");\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n    auto sides\
    \ = tuple(a, b, c);\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max = maxElement(sides);\n    auto sum = reduce!((a, b) =>\
    \ a + b)(sides);\n    return max * max == sum - max * max;\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: Implement\
    \ this function\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // TODO: implement this function\n    return false;\n}", "{\n    //\
    \ your code goes here\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[3] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    long a2 = sides[0]\
    \ * sides[0];\n    long b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n\
    \    return a2 + b2 == c2;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    long a = sides[0];\n\
    \    long b = sides[1];\n    long c = sides[2];\n    return a * a + b * b == c\
    \ * c;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // your\
    \ code here\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = tuple(a, b, c);\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
