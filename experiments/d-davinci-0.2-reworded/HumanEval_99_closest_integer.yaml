name: HumanEval_99_closest_integer
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ takes a value (string) representing a number\n    and returns the closest integer\
  \ to it. If the number is equidistant\n    from two integers, round it away from\
  \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
  15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
  \ number is equidistant\n    from two integers, the one you should return is the\
  \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
  ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \n\
  */\nlong closest_integer(string value) \n"
tests: "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
  10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
  -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
  0\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    return round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    double d = to!double(value);\n \
    \   return cast(long)round(d);\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long) ceil(d);\n    }\n    else\n    {\n       \
    \ result = cast(long) floor(d);\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n    if (abs(d\
    \ - result) >= 0.5)\n    {\n        if (d > 0)\n            result++;\n      \
    \  else\n            result--;\n    }\n    return result;\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d == 0)\n        return 0;\n    if (d < 0)\n\
    \    {\n        result = cast(long)ceil(d);\n        if (result == d)\n      \
    \      result--;\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \        if (result == d)\n            result++;\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n   \
    \ {\n        result = cast(long)floor(d);\n        if (d - result > 0.5)\n   \
    \         result++;\n    }\n    else\n    {\n        result = cast(long)ceil(d);\n\
    \        if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else if (d < 0)\n    {\n        result = cast(long)floor(d);\n   \
    \ }\n    else\n    {\n        result = 0;\n    }\n    return result;\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return to!long(value);\n}", "{\n    auto x = to!double(value);\n \
    \   return cast(long)round(x);\n}", "{\n    return round(to!double(value));\n}",
  "{\n    // convert to double\n    double d = to!double(value);\n    // round to\
    \ nearest integer\n    long l = round(d);\n    // return the result\n    return\
    \ l;\n}", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)d;\n        if (d - result\
    \ > 0.5)\n            result++;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \        if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    return cast(long)round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    auto val =\
    \ to!double(value);\n    auto int_val = cast(long) val;\n    auto diff = val -\
    \ int_val;\n    if (diff > 0.5)\n        return int_val + 1;\n    else if (diff\
    \ < -0.5)\n        return int_val - 1;\n    else\n        return int_val;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    long l = to!long(d);\n    if (d\
    \ - l > 0.5)\n        return l + 1;\n    else\n        return l;\n}", "{\n   \
    \ auto d = to!double(value);\n    return d > 0 ? cast(long)ceil(d) : cast(long)floor(d);\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    // TODO: Implement this\
    \ function\n    return 0;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double f = floor(d);\n    double c = ceil(d);\n    if (d - f < c - d)\n \
    \       result = cast(long)f;\n    else\n        result = cast(long)c;\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d == 0.0)\n\
    \        return 0;\n    if (d > 0.0)\n    {\n        result = cast(long)d;\n \
    \       if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long) d;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    auto d = to!double(value);\n    if (d == 0)\n        return 0;\n \
    \   auto sign = d < 0 ? -1 : 1;\n    return sign * cast(long) floor(abs(d) + 0.5);\n\
    }", "{\n    auto result = to!long(value);\n    auto diff = to!double(value) -\
    \ result;\n    if (diff > 0.5)\n        return result + 1;\n    else if (diff\
    \ < -0.5)\n        return result - 1;\n    else\n        return result;\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    // TODO: implement\n    return 0;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d2\
    \ = floor(d);\n    double d3 = ceil(d);\n    if (d - d2 > d3 - d)\n        result\
    \ = cast(long)d3;\n    else\n        result = cast(long)d2;\n    return result;\n\
    }", "{\n    long result = 0;\n    double number = to!double(value);\n    if (number\
    \ == 0.0)\n    {\n        return 0;\n    }\n    else if (number > 0.0)\n    {\n\
    \        result = cast(long)ceil(number);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(number);\n    }\n    return result;\n}", "{\n    double d\
    \ = to!double(value);\n    long l = to!long(value);\n    if (d - l > 0.5)\n  \
    \      return l + 1;\n    else if (d - l < -0.5)\n        return l - 1;\n    else\n\
    \        return l;\n}", "{\n    return cast(long)round(to!double(value));\n}",
  "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    auto d = to!double(value);\n    return\
    \ cast(long) round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)d;\n}", "{\n  \
    \  return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    auto d = to!double(value);\n    return cast(long) d;\n}", "{\n   \
    \ return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)value.to!double;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    long l = cast(long) d;\n    if (d\
    \ == l)\n        return l;\n    if (d > 0)\n        return l + 1;\n    return\
    \ l - 1;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n   \
    \ long result = 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    double d_int_plus_one = d_int + 1;\n    double d_int_minus_one = d_int -\
    \ 1;\n    double d_int_plus_one_diff = abs(d_int_plus_one - d);\n    double d_int_minus_one_diff\
    \ = abs(d_int_minus_one - d);\n    if (d_int_plus_one_diff < d_int_minus_one_diff)\n\
    \    {\n        result = to!long(d_int_plus_one);\n    }\n    else\n    {\n  \
    \      result = to!long(d_int_minus_one);\n    }\n    return result;\n}", "{\n\
    \    auto d = to!double(value);\n    return cast(long)round(d);\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double fractional = d - cast(long)d;\n    if (fractional < 0.5)\n    {\n\
    \        result = cast(long)d;\n    }\n    else\n    {\n        result = cast(long)d\
    \ + 1;\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    long l = cast(long)d;\n    if (abs(d - l) >= 0.5)\n        l += (d > 0) ?\
    \ 1 : -1;\n    return l;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n        result\
    \ = cast(long)d - 1;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    return round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!real(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  if (d >= 0)\n    {\n        result = cast(long) (d + 0.5);\n    }\n    else\n\
    \    {\n        result = cast(long) (d - 0.5);\n    }\n    return result;\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    result = cast(long)d;\n    if(d - result\
    \ > 0.5)\n        result++;\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    long l = cast(long)d;\n    if (d\
    \ - l >= 0.5)\n        return l + 1;\n    else\n        return l;\n}", "{\n  \
    \  return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    double d = to!double(value);\n  \
    \  return cast(long)round(d);\n}", "{\n    return round(to!double(value));\n}",
  "{\n    return cast(long)round(to!double(value));\n}", "{\n    auto val = to!double(value);\n\
    \    auto int_val = to!long(val);\n    if(abs(val - int_val) > 0.5)\n        return\
    \ int_val + (val > 0 ? 1 : -1);\n    return int_val;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double d1 = floor(d);\n    double\
    \ d2 = ceil(d);\n    if (abs(d - d1) < abs(d - d2))\n        result = cast(long)d1;\n\
    \    else\n        result = cast(long)d2;\n    return result;\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (abs(d - f) < abs(d - c))\n        result = cast(long)f;\n    else\n  \
    \      result = cast(long)c;\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}",
  "{\n    // TODO: Implement\n    return 0;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    double val\
    \ = to!double(value);\n    return cast(long)round(val);\n}", "{\n    // TODO\n\
    \    return long.max;\n}", "{\n    double d = to!double(value);\n    if (d > 0)\n\
    \        return cast(long)ceil(d);\n    else\n        return cast(long)floor(d);\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    auto result\
    \ = to!long(value);\n    auto fractional = to!double(value) - result;\n    if\
    \ (fractional > 0.5)\n        return result + 1;\n    else if (fractional < -0.5)\n\
    \        return result - 1;\n    else\n        return result;\n}", "{\n    double\
    \ d = to!double(value);\n    return cast(long)round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long) (d > 0 ? ceil(d) : floor(d));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    auto x = to!double(value);\n    return cast(long)x;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n \
    \   if (d - result > 0.5)\n        result++;\n    return result;\n}", "{\n   \
    \ return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto result = to!long(value);\n    auto fraction = to!double(value)\
    \ - result;\n    if (fraction > 0.5)\n        return result + 1;\n    else if\
    \ (fraction < -0.5)\n        return result - 1;\n    else\n        return result;\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n    if (d\
    \ - result > 0.5)\n        result++;\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d == 0)\n\
    \        return 0;\n    if (d < 0)\n    {\n        if (d > -1)\n            return\
    \ -1;\n        result = cast(long)d;\n        if (d - result > -0.5)\n       \
    \     return result;\n        else\n            return result - 1;\n    }\n  \
    \  else\n    {\n        if (d < 1)\n            return 1;\n        result = cast(long)d;\n\
    \        if (d - result < 0.5)\n            return result;\n        else\n   \
    \         return result + 1;\n    }\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    // TODO: implement\n    return 0;\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double d1 = to!double(value.split(\".\"\
    )[0]);\n    double d2 = to!double(value.split(\".\")[1]);\n    if(d2 >= 5)\n \
    \   {\n        result = cast(long)d1 + 1;\n    }\n    else\n    {\n        result\
    \ = cast(long)d1;\n    }\n    return result;\n}", "{\n    long result = 0;\n \
    \   double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n   \
    \ return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n \
    \   double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result > 0.5)\n            result += 1;\n    }\n    else\n  \
    \  {\n        result = cast(long)ceil(d);\n        if (result - d > 0.5)\n   \
    \         result -= 1;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    if (d - d_int >= 0.5)\n        result = to!long(d) + 1;\n    else\n     \
    \   result = to!long(d);\n    return result;\n}", "{\n    // TODO: Implement this\
    \ function\n    return 0;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double f = floor(d);\n    double c = ceil(d);\n    if (d - f > c - d)\n \
    \       result = cast(long)c;\n    else\n        result = cast(long)f;\n    return\
    \ result;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n   \
    \ double d = to!double(value);\n    return cast(long)round(d);\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    long l = to!long(value);\n    if (abs(d - l) < 0.5)\n\
    \        return l;\n    else\n        return l + sign(d);\n}", "{\n    double\
    \ d = to!double(value);\n    long l = cast(long)d;\n    if (d - l >= 0.5)\n  \
    \      return l + 1;\n    else\n        return l;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double d2 = d - to!double(to!long(d));\n\
    \    if (d2 >= 0.5)\n    {\n        result = to!long(d) + 1;\n    }\n    else\n\
    \    {\n        result = to!long(d);\n    }\n    return result;\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double number =\
    \ to!double(value);\n    double fractional = number - cast(long)number;\n    if\
    \ (fractional < 0.5)\n    {\n        result = cast(long)number;\n    }\n    else\n\
    \    {\n        result = cast(long)number + 1;\n    }\n    return result;\n}",
  "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}", "{\n \
    \   return round(to!real(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    auto num = to!double(value);\n \
    \   auto floor = cast(long) floor(num);\n    auto ceil = cast(long) ceil(num);\n\
    \    if (abs(num - floor) < abs(num - ceil))\n        return floor;\n    else\n\
    \        return ceil;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    double d_int = to!double(to!long(d));\n \
    \   double d_int_plus_one = d_int + 1;\n    double d_int_minus_one = d_int - 1;\n\
    \    double d_int_plus_one_diff = abs(d_int_plus_one - d);\n    double d_int_minus_one_diff\
    \ = abs(d_int_minus_one - d);\n    if (d_int_plus_one_diff < d_int_minus_one_diff)\n\
    \    {\n        result = to!long(d_int_plus_one);\n    }\n    else if (d_int_plus_one_diff\
    \ > d_int_minus_one_diff)\n    {\n        result = to!long(d_int_minus_one);\n\
    \    }\n    else\n    {\n        if (d_int_plus_one > 0)\n        {\n        \
    \    result = to!long(d_int_plus_one);\n        }\n        else\n        {\n \
    \           result = to!long(d_int_minus_one);\n        }\n    }\n    return result;\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    double d_int = to!double(to!long(d));\n    double d_int_plus_one\
    \ = d_int + 1;\n    double d_int_minus_one = d_int - 1;\n    double d_int_plus_one_diff\
    \ = abs(d_int_plus_one - d);\n    double d_int_minus_one_diff = abs(d_int_minus_one\
    \ - d);\n    double d_int_diff = abs(d_int - d);\n    if (d_int_plus_one_diff\
    \ < d_int_diff)\n    {\n        result = to!long(d_int_plus_one);\n    }\n   \
    \ else if (d_int_minus_one_diff < d_int_diff)\n    {\n        result = to!long(d_int_minus_one);\n\
    \    }\n    else\n    {\n        result = to!long(d_int);\n    }\n    return result;\n\
    }", "{\n    auto d = to!double(value);\n    return cast(long)round(d);\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    return round(to!double(value));\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
