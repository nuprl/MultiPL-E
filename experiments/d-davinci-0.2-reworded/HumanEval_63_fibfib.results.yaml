name: HumanEval_63_fibfib
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        for (long i = 3; i <= n; i++)\n        {\n            d = a +\
    \ b + c;\n            a = b;\n            b = c;\n            c = d;\n       \
    \ }\n        return d;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5hljnetd.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp5hljnetd.__unittest_L38_C1()\
    \ [0x427ad9]\\n??:? void tmp5hljnetd.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x32ab4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        return -1;\n    }\n    if\
    \ (n == 0) \n    {\n        return 0;\n    }\n    if (n == 1) \n    {\n      \
    \  return 0;\n    }\n    if (n == 2) \n    {\n        return 1;\n    }\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n    for (long i =\
    \ 3; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        long d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\n/*\nWrite a function that takes a string and returns a new string with all\
    \ vowels removed.\n    >>> remove_vowels(\"Hello, world!\")\n    'Hll, wrld!'\n\
    \    >>> remove_vowels(\"Foo Bar\")\n    'F Br'\n    >>> remove_vowels(\"aeiou\"\
    )\n    ''\n*/\nstring remove_vowels(string s) \n{\n    string result;\n    foreach\
    \ (c; s) \n    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u')\n            result ~= c;\n    }\n    return result;\n}\n/*\nWrite\
    \ a function that takes a string and returns a new string with all vowels removed.\n\
    \    >>> remove_vowels(\"Hello, world!\")\n    'Hll, wrld!'\n    >>> remove_vowels(\"\
    Foo Bar\")\n    'F Br'\n    >>> remove_vowels(\"aeiou\")\n    ''\n*/\nstring remove_vowels(string\
    \ s) \n{\n    string result;\n    foreach (c; s) \n    {\n        if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n            result ~= c;\n\
    \    }\n    return result;\n}\n/*\nWrite a function that takes a string and returns\
    \ a new string with all vowels removed.\n    >>> remove_vowels(\"Hello, world!\"\
    )\n    'Hll, wrld!'\n    >>> remove_vowels(\"Foo Bar\")\n    'F Br'\n    >>> remove_vowels(\"\
    aeiou\")\n    ''\n*/\nstring remove_vowels(string s) \n{\n\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswt7kwlx.d(82): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswt7kwlx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_fcrh6_i.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmp_fcrh6_i.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmp_fcrh6_i.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xcde8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return\
    \ 0;\n    else if (n == 2)\n        return 1;\n    else\n    {\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return d;\n \
    \   }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    if\
    \ (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n      \
    \  return 1;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L) \n    {\n        return 0L;\n    }\n  \
    \  else if (n == 1L) \n    {\n        return 0L;\n    }\n    else if (n == 2L)\
    \ \n    {\n        return 1L;\n    }\n    else \n    {\n        return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    long i = 3;\n    while (i <= n)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \        i++;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw8zia_s.d(91): Error: semicolon expected, not `unittest`\\n/tmp/tmpgw8zia_s.d(91):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgw8zia_s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    } \n   \
    \ else if (n == 1) \n    {\n        return 0;\n    } \n    else if (n == 2) \n\
    \    {\n        return 1;\n    } \n    else \n    {\n        return fibfib(n -\
    \ 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) return 0;\n    if (n == 2) return 1;\n  \
    \  long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; i++) \n    {\n    \
    \    long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n   \
    \ }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        long d = a\
    \ + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 0) \n    {\n        return 0;\n    }\n    else if (n == 1) \n    {\n\
    \        return 0;\n    }\n    else if (n == 2) \n    {\n        return 1;\n \
    \   }\n    else \n    {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 1;\n    }\n    else \n    {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nunittest\n{\n    alias candidate =\
    \ fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz46slo4n.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpz46slo4n.__unittest_L24_C1()\
    \ [0x427ac9]\\n??:? void tmpz46slo4n.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x658ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0, b = 0, c = 1;\n    foreach (i; 2 .. n) \n \
    \   {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    long a = 0, b = 0, c\
    \ = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long tmp = c;\n            c = a + b + c;\n            a\
    \ = b;\n            b = tmp;\n        }\n        return c;\n    }\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp86fvfg9g.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmp86fvfg9g.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmp86fvfg9g.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xf91d1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    } \n   \
    \ else if (n == 1) \n    {\n        return 0;\n    } \n    else if (n == 2) \n\
    \    {\n        return 1;\n    } \n    else \n    {\n        return fibfib(n -\
    \ 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            a = b;\n            b = c;\n            c = a + b + c;\n\
    \        }\n        return c;\n    }\n}\n/*\n    Given a string, return the first\
    \ character that does not repeat itself.\n    >>> firstNonRepeatingCharacter(\"\
    abcdabcd\")\n    'e'\n    >>> firstNonRepeatingCharacter(\"abcbad\")\n    'c'\n\
    \    >>> firstNonRepeatingCharacter(\"abcabcffab\")\n    '\\0'\n*/\nchar firstNonRepeatingCharacter(string\
    \ s)\n{\n    char[] c = s.dup;\n    c.sort;\n    for (size_t i = 0; i < c.length;\
    \ i++)\n    {\n        if (c[i] != c[i + 1] && c[i] != c[i - 1])\n           \
    \ return c[i];\n    }\n    return '\\0';\n}\n/*\n    Given an array of integers,\
    \ return the indices of the two numbers such that they add up to a specific target.\n\
    \    You may assume that each input would have exactly one solution, and you may\
    \ not use the same element twice.\n    >>> twoSum([2, 7, 11, 15], 9)\n    [0,\
    \ 1]\n    >>> twoSum([3, 2, 4], 6)\n    [1, 2]\n    >>> twoSum([3, 3], 6)\n  \
    \  [0, 1]\n*/\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqkf538et.d(46): Error: no property `sort` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkf538et.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    while (n > 0)\n    {\n        d = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        n--;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp38itazkn.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp38itazkn.__unittest_L38_C1()\
    \ [0x427ad9]\\n??:? void tmp38itazkn.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xe22c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpecni49mx.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmpecni49mx.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpecni49mx.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecni49mx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        while (n > 3)\n        {\n            d = a + b + c;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            n--;\n     \
    \   }\n        return d;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0, b = 0, c = 1;\n    foreach (i; 2 .. n) \n \
    \   {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi2683yia.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpi2683yia.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpi2683yia.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xb6c6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7yw57z0r.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmp7yw57z0r.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmp7yw57z0r.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x96740554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long i\
    \ = 3;\n        while (i <= n)\n        {\n            long tmp = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = tmp;\n            i++;\n\
    \        }\n        return c;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbi9eqjqu.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpbi9eqjqu.__unittest_L39_C1()\
    \ [0x427ad5]\\n??:? void tmpbi9eqjqu.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xf4681554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            long d = a + b + c;\n          \
    \  a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm9zdei29.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpm9zdei29.__unittest_L37_C1()\
    \ [0x427ad5]\\n??:? void tmpm9zdei29.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x2284f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        return -1;\n    }\n    if\
    \ (n == 0) \n    {\n        return 0;\n    }\n    if (n == 1) \n    {\n      \
    \  return 0;\n    }\n    if (n == 2) \n    {\n        return 1;\n    }\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n    for (long i =\
    \ 3; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        long d = a\
    \ + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n\
    \    long d = 0;\n    foreach (i; 1 .. n-2)\n    {\n        d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb0gv5tul.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpb0gv5tul.__unittest_L36_C1()\
    \ [0x427b05]\\n??:? void tmpb0gv5tul.__modtest() [0x427ba0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427bb3]\\\
    n??:? __libc_start_main [0xa264554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nunittest\n{\n    alias candidate =\
    \ fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpflo3wuix.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpflo3wuix.__unittest_L24_C1()\
    \ [0x427ac9]\\n??:? void tmpflo3wuix.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xc1fe1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long[] fibfibs = new long[3];\n    fibfibs[0] = 0;\n\
    \    fibfibs[1] = 0;\n    fibfibs[2] = 1;\n    if (n < 3)\n        return fibfibs[n];\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        fibfibs[0] = fibfibs[1];\n\
    \        fibfibs[1] = fibfibs[2];\n        fibfibs[2] = fibfibs[0] + fibfibs[1]\
    \ + fibfibs[2];\n    }\n    return fibfibs[2];\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzmh5gx4w.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpzmh5gx4w.__unittest_L34_C1()\
    \ [0x427f21]\\n??:? void tmpzmh5gx4w.__modtest() [0x427fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fcf]\\\
    n??:? __libc_start_main [0xfebf5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n;\n    long a = 0, b = 0,\
    \ c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk76y4h8a.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpk76y4h8a.__unittest_L32_C1()\
    \ [0x427a8c]\\n??:? void tmpk76y4h8a.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x2a816554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwsznq_i5.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpwsznq_i5.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpwsznq_i5.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xb7d1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    auto a = 0L;\n    auto b = 0L;\n    auto c = 1L;\n    for\
    \ (auto i = 3L; i <= n; i++)\n    {\n        auto d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n{\n \
    \   alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        long d = a\
    \ + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n;\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpijqh2_n1.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpijqh2_n1.__unittest_L25_C1()\
    \ [0x427a88]\\n??:? void tmpijqh2_n1.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xec891554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 1;\n    }\n    else \n    {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        while (n > 3)\n        {\n            d = a + b + c;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            n--;\n     \
    \   }\n        return d;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            long d = a + b + c;\n          \
    \  a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplj367111.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmplj367111.__unittest_L37_C1()\
    \ [0x427ad5]\\n??:? void tmplj367111.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x5d4b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    // TODO: implement\n    return 0;\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2kr3sbxx.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmp2kr3sbxx.__unittest_L23_C1()\
    \ [0x427a20]\\n??:? void tmp2kr3sbxx.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0x45136554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1pucveh.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmph1pucveh.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmph1pucveh.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1pucveh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) return n;\n    long a = 0, b = 0, c = 1;\n\
    \    foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmfgugcrk.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpmfgugcrk.__unittest_L31_C1()\
    \ [0x427a90]\\n??:? void tmpmfgugcrk.__modtest() [0x427b6c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b7f]\\\
    n??:? __libc_start_main [0x7e9c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8f74as94.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmp8f74as94.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp8f74as94.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f74as94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n;\n    long a = 0;\n   \
    \ long b = 1;\n    long c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n   \
    \     long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n  \
    \  }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpop3fyvfw.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpop3fyvfw.__unittest_L34_C1()\
    \ [0x427a90]\\n??:? void tmpop3fyvfw.__modtest() [0x427b6c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b7f]\\\
    n??:? __libc_start_main [0x88f38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxi_kp12g.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmpxi_kp12g.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpxi_kp12g.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxi_kp12g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long t = c;\n            c = a + b + c;\n            a =\
    \ b;\n            b = t;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpndxv75v4.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpndxv75v4.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpndxv75v4.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x785e5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L) \n    {\n        return 0L;\n    }\n  \
    \  if (n == 1L) \n    {\n        return 0L;\n    }\n    if (n == 2L) \n    {\n\
    \        return 1L;\n    }\n    long a = 0L;\n    long b = 0L;\n    long c = 1L;\n\
    \    long d = 0L;\n    long i = 3L;\n    for (; i <= n; i++) \n    {\n       \
    \ d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n\
    \    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    \    Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n    >>> fibfib(1L)\n    0L\n    >>> fibfib(5L)\n    4L\n \
    \   >>> fibfib(8L)\n    24L\n    \n*/\nlong fibfib2(long n) \n{\n    if (n ==\
    \ 0L) \n    {\n        return 0L;\n    }\n    if (n == 1L) \n    {\n        return\
    \ 0L;\n    }\n    if (n == 2L) \n    {\n        return 1L;\n    }\n    long a\
    \ = 0L;\n    long b = 0L;\n    long c = 1L;\n    long d = 0L;\n    long i = 3L;\n\
    \    for (; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = d;\n    }\n    return d;\n}\n/*\nGiven a list of integers,\
    \ return a list of the integers, omitting any\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshqbu8ic.d(89): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshqbu8ic.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    else \n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++) \n \
    \       {\n            long d = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv3sgf7q5.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpv3sgf7q5.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpv3sgf7q5.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xf082b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppe58jcjf.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmppe58jcjf.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmppe58jcjf.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xa0ef0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) return n-1;\n    long a = 0, b = 0, c = 1;\n\
    \    for (long i = 3; i <= n; i++) {\n        long d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n{\n \
    \   alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n;\
    \ i++) \n    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    else \n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n       \nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tx2sdbl.d(92): Error: found `unittest` instead of statement\\\
    n/tmp/tmp5tx2sdbl.d(104): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tx2sdbl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        a = b;\n    \
    \    b = c;\n        c = a + b + c;\n    }\n    return c;\n}\nunittest\n{\n  \
    \  alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6owip746.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmp6owip746.__unittest_L31_C1()\
    \ [0x427ac5]\\n??:? void tmp6owip746.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0x76c82554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L)\n        return 0L;\n    if (n == 1L)\n\
    \        return 0L;\n    if (n == 2L)\n        return 1L;\n    return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n   \
    \     a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy697qsou.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpy697qsou.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpy697qsou.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xd56e5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwox00cp8.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpwox00cp8.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpwox00cp8.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xa278b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n   \nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztt7svn_.d(91): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztt7svn_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n;\n    return fibfib(n -\
    \ 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7l1vfjvw.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp7l1vfjvw.__unittest_L24_C1()\
    \ [0x427a88]\\n??:? void tmp7l1vfjvw.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x53e26554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        while (n > 3)\n        {\n            d = a + b + c;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            n--;\n     \
    \   }\n        return d;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return 0;\n    if (n == 0)\n   \
    \     return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n       \
    \ return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n \
    \   alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L)\n        return 0L;\n    if (n == 1L)\n\
    \        return 0L;\n    if (n == 2L)\n        return 1L;\n    return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0;\n\
    \    long b = 1;\n    long c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n\
    \        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpadohgv6_.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpadohgv6_.__unittest_L34_C1()\
    \ [0x427ad5]\\n??:? void tmpadohgv6_.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x18f0d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    if\
    \ (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n      \
    \  return 1;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long[] fibfib = new long[n+1];\n    fibfib[0] = 0;\n\
    \    fibfib[1] = 0;\n    fibfib[2] = 1;\n    foreach(i; 3..n+1)\n    {\n     \
    \   fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    }\n    return fibfib[n];\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpr49fgdst.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42825e]\\n??:? long tmpr49fgdst.fibfib(long) [0x427d23]\\\
    n??:? void tmpr49fgdst.__unittest_L30_C1() [0x427e5a]\\n??:? void tmpr49fgdst.__modtest()\
    \ [0x427f2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b03e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430255]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b015]\\n??:? runModuleUnitTests [0x42bf81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428670]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f7]\\n??:? _d_run_main [0x428562]\\n??:? main [0x427f3f]\\\
    n??:? __libc_start_main [0x95a13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    long i = 3;\n    while (i <= n)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \        i++;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    } \n   \
    \ else if (n == 1) \n    {\n        return 0;\n    } \n    else if (n == 2) \n\
    \    {\n        return 1;\n    } \n    else \n    {\n        return fibfib(n -\
    \ 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdk3b_b64.d(91): Error: semicolon expected, not `unittest`\\n/tmp/tmpdk3b_b64.d(91):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdk3b_b64.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n\
    \    long d = 0;\n    for (int i = 3; i <= n; i++)\n    {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long[] fib = new long[n];\n        fib[0] = 0;\n        fib[1] = 0;\n\
    \        fib[2] = 1;\n        for (long i = 3; i < n; i++)\n        {\n      \
    \      fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return\
    \ fib[n - 1];\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcq5b5nv3.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281ad]\\n??:? void tmpcq5b5nv3.__unittest_L35_C1()\
    \ [0x427e95]\\n??:? void tmpcq5b5nv3.__modtest() [0x427f30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b03e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430255]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b015]\\n??:? runModuleUnitTests [0x42bf81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428670]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f7]\\n??:? _d_run_main [0x428562]\\n??:? main [0x427f43]\\\
    n??:? __libc_start_main [0xa752d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyl484ko.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmpbyl484ko.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpbyl484ko.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyl484ko.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4eor4n1.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpt4eor4n1.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpt4eor4n1.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xda5d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n;\
    \ i++) \n    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        return -1;\n    }\n    if\
    \ (n == 0 || n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n   \
    \ {\n        return 1;\n    }\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 1;\n    long d = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) return n - 1;\n    long a = 0, b = 0, c =\
    \ 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n{\n \
    \   alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n;\n    long a = 0, b = 0,\
    \ c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4z5yie_q.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp4z5yie_q.__unittest_L32_C1()\
    \ [0x427a8c]\\n??:? void tmp4z5yie_q.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0xd627c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    while (n-- > 2)\n    {\n        d = a + b + c;\n        a = b;\n \
    \       b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 1;\n    }\n    else \n    {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n\
    \    long d = 0;\n    for (long i = 3; i <= n; i++) {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n\
    \        return 0;\n    else if (n == 2)\n        return 1;\n    else\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nunittest\n{\n    alias candidate =\
    \ fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgor7516p.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpgor7516p.__unittest_L24_C1()\
    \ [0x427ac9]\\n??:? void tmpgor7516p.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xa40a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn72edfn9.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmpn72edfn9.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpn72edfn9.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn72edfn9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvauewnbs.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpvauewnbs.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpvauewnbs.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xc66d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n  \
    \      return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n      \
    \  return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d =\
    \ 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n    \
    \    a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_doley8r.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmp_doley8r.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp_doley8r.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_doley8r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvl_bng_k.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmpvl_bng_k.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpvl_bng_k.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvl_bng_k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpupdx94bg.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpupdx94bg.__unittest_L35_C1()\
    \ [0x427ad5]\\n??:? void tmpupdx94bg.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xc6792554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 1;\n    }\n    else \n    {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        long d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p\
    \ = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n      \
    \  long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n\
    \        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa\
    \ = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n   \
    \     long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah\
    \ = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n   \
    \     long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao\
    \ = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n   \
    \     long as = 0;\n        long at = 0;\n        long au = 0;\n        long av\
    \ = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n   \
    \     long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc\
    \ = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n   \
    \     long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj\
    \ = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n   \
    \     long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long b\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3tc0ioe3.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmp3tc0ioe3.d(92):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp3tc0ioe3.d(104): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tc0ioe3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    for (long i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n   \
    \     a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1si1toj.d(91): Error: semicolon expected, not `unittest`\\n/tmp/tmpe1si1toj.d(91):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpe1si1toj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
