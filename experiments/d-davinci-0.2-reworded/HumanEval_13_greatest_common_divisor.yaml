name: HumanEval_13_greatest_common_divisor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common divisor\
  \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n   \
  \ >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
  \ a, long b) \n"
tests: "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
  \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
  \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
completions: ["{\n    long c;\n    while (a != 0) {\n        c = a;\n        a = b\
    \ % a;\n        b = c;\n    }\n    return b;\n}", "{\n    if (a == 0L)\n     \
    \   return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_of_list([3L, 5L])\n   \
    \ 15L\n    >>> least_common_multiple_of_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_of_list(long[]\
    \ a) \n{\n    long result = a[0];\n    for (int i = 1; i < a.length; i++)\n  \
    \      result = least_common_multiple(result, a[i]);\n    return result;\n}\n\
    /*\n Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor_of_list([3L,\
    \ 5L])\n    1L\n    >>> greatest_common_divisor_of_list([25L, 15L])\n    5L\n\
    */\nlong greatest_common_divisor_of_list(long[] a) \n{\n    long result = a[0];\n\
    \    for (int i = 1; i < a.length; i++)\n        result = greatest_common_divisor(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a list of prime factors of a number\n\
    \    >>> prime_factors(15L)\n    [3L, 5L]\n    >>> prime_factors(25L)\n    [5L]\n\
    */\nlong[] prime_factors(long n) \n{\n    long[] result = new long[0];\n    long\
    \ d = 2L;\n    while (n > 1L) \n    {\n        while (", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    long\
    \ c;\n    while (a != 0) {\n        c = a; a = b % a;  b = c;\n    }\n    return\
    \ b;\n}", "{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n   \
    \ if (a < 0)\n        a = -a;\n    if (b < 0)\n        b = -b;\n    while (a !=\
    \ b)\n    {\n        if (a > b)\n            a -= b;\n        else\n         \
    \   b -= a;\n    }\n    return a;\n}", "{\n    if (a == 0)\n        return b;\n\
    \    if (b == 0)\n        return a;\n    if (a == b)\n        return a;\n    if\
    \ (a == 1 || b == 1)\n        return 1;\n    if ((a & 1) == 0)\n        return\
    \ (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) : greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1;\n    if ((b & 1) == 0)\n        return greatest_common_divisor(a,\
    \ b >> 1);\n    if (a > b)\n        return greatest_common_divisor((a - b) >>\
    \ 1, b);\n    return greatest_common_divisor((b - a) >> 1, a);\n}", "{\n    if\
    \ (a < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ long[] a) \n{\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n   \
    \     result = greatest_common_divisor(result, a[i]);\n    return result;\n}\n\
    /*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    375L\n\
    */\nlong least_common_multiple(in long[] a) \n{\n    long result = a[0];\n   \
    \ foreach (i; 1 .. a.length)\n        result = least_common_multiple(result, a[i]);\n\
    \    return result;\n}\n/*\n Return a greatest common divisor of a list of integers\n\
    \    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L,\
    \ 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in long[] a) \n{\n    long\
    \ result = a[0];\n    foreach (i; 1 .. a.length)\n        result = greatest_common_",
  "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n\
    \    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a >\
    \ b)\n        return greatest_common_divisor(a % b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b % a);\n}", "{\n    while (b != 0) {\n        long\
    \ t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n \
    \   if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n   \
    \ if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n  \
    \      return greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0L)\n \
    \       return b;\n    if (b == 0L)\n        return a;\n    if (a > b)\n     \
    \   return greatest_common_divisor(a % b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b % a);\n}", "{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n \
    \       return a;\n    if (a > b) \n        return greatest_common_divisor(a %\
    \ b, b);\n    else \n        return greatest_common_divisor(a, b % a);\n}", "{\n\
    \    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b %\
    \ 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n  \
    \  if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    225L\n\
    \    \n*/\nlong least_common_multiple(long[] a) \n{\n    long result = 1L;\n \
    \   foreach (i; a)\n        result = least_common_multiple(result, i);\n    return\
    \ result;\n}\n/*\n Return a greatest common divisor of a list of integers\n  \
    \  >>> greatest_common_div", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n \
    \       return a;\n    if (a == b) \n        return a;\n    if (a == 1L || b ==\
    \ 1L) \n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) \n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L) \n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L\
    \ != 0L && b % 2L == 0L) \n        return greatest_common_divisor(a, b / 2L);\n\
    \    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a\
    \ == 0L)\n    {\n        return b;\n    }\n    else if (b == 0L)\n    {\n    \
    \    return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}", "{\n    if (a == 0L)\n    {\n        return b;\n    }\n\
    \    else if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n   \
    \     return greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    else\n        return greatest_common_divisor(a, b - a);\n}", "{\n\
    \    if (a == 0L) return b;\n    if (b == 0L) return a;\n    if (a == b) return\
    \ a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L == 0L && b % 2L ==\
    \ 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L ==\
    \ 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L, b);\n    if (a %\
    \ 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a < b)\n  \
    \      return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b, a);\n\
    \    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    else if (b == 0L)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a greatest common divisor of a list of integers\n    >>> greatest_common_divisor([3L,\
    \ 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n\
    */\nlong greatest_common_divisor(in long[] a) \n{\n    if (a.length == 0)\n  \
    \      return 0L;\n    else if (a.length == 1)\n        return a[0];\n    else\n\
    \        return a.reduce!greatest_common_divisor;\n}\n/*\n Return a least common\
    \ multiple of a list of integers\n    >>> least_common_multiple([3L, 5L, 7L])\n\
    \    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    375L\n*/\nlong\
    \ least_common_multiple(in long[] a) \n{\n    if (a.length == 0)\n        return\
    \ 0L;\n    else if (a.length == 1)\n        return a[0];\n    else\n        return\
    \ a.reduce!least_common_multiple;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ long[] a) \n{\n    if (a.length == 0)\n        return 0L;", "{\n    if (a ==\
    \ 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a\
    \ % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a /\
    \ 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    else\n        return greatest_common_divisor((b - a) / 2L, a);\n}",
  "{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if\
    \ (a == 1 || b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    if (a > b)\
    \ return greatest_common_divisor((a - b) / 2, b);\n    return greatest_common_divisor((b\
    \ - a) / 2, a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    while (b != 0) {\n\
    \        long t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n\
    }", "{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n        return\
    \ a;\n    if (a == b) \n        return a;\n    if (a == 1L || b == 1L) \n    \
    \    return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) \n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L) \n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L) \n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b) \n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b) \n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    while\
    \ (b != 0) {\n        long t = b;\n        b = a % b;\n        a = t;\n    }\n\
    \    return a;\n}", "{\n    long c;\n    while (b != 0) {\n        c = a % b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a & 1)\
    \ == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) : (greatest_common_divisor(a\
    \ >> 1, b) << 1);\n    if ((b & 1) == 0)\n        return greatest_common_divisor(a,\
    \ b >> 1);\n    if (a > b)\n        return greatest_common_divisor((a - b) >>\
    \ 1, b);\n    return greatest_common_divisor((b - a) >> 1, a);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b\
    \ == 0L)\n        return a;\n    if (a == b)\n        return a;\n    if (a ==\
    \ 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n\
    \        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L\
    \ == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a / 2L, b);\n\
    \    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return greatest_common_divisor((a\
    \ - b) / 2L, b);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return\
    \ greatest_common_divisor((b - a) / 2L, a);\n    return 1L;\n}", "{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b\
    \ == 0L)\n        return a;\n    if (a == b)\n        return a;\n    if (a ==\
    \ 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n\
    \        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L\
    \ == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a / 2L, b);\n\
    \    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L) \n\
    \    {\n        return b;\n    }\n    if (b == 0L) \n    {\n        return a;\n\
    \    }\n    if (a > b) \n    {\n        return greatest_common_divisor(a % b,\
    \ b);\n    }\n    else \n    {\n        return greatest_common_divisor(a, b %\
    \ a);\n    }\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b\
    \ == 0L)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n\
    \    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n\
    \    if (a == 0L) \n    {\n        return b;\n    }\n    if (b == 0L) \n    {\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a >\
    \ b)\n        return greatest_common_divisor(a % b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b % a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n     \
    \   return a;\n    }\n    if (a > b) \n    {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(long[] a) \n{\n    long result = 1L;\n    foreach\
    \ (i; a) \n    {\n        result = least_common_multiple(result, i);\n    }\n\
    \    return result;\n}\n/*\n Return a least common multiple of a list of integers\n\
    \    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n*/\nlong least_common_multiple_list(Tuple!(long[]) a) \n{\n\
    \    long result = 1L;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    while (b != 0) {\n\
    \        long t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n\
    }", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if\
    \ (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n\
    }", "{\n    long c;\n    while (a != 0) {\n        c = a; a = b % a;  b = c;\n\
    \    }\n    return b;\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) {\n        long t = b;\n        b = a %\
    \ b;\n        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[] a) \n\
    {\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list", "{\n    if\
    \ (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n  \
    \      return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a < 0L)\n        a = -a;\n\
    \    if (b < 0L)\n        b = -b;\n    while (a != b)\n    {\n        if (a >\
    \ b)\n            a -= b;\n        else\n            b -= a;\n    }\n    return\
    \ a;\n}", "{\n    if (a < b)\n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}", "{\n \
    \   if (a == 0L) return b;\n    if (b == 0L) return a;\n    if (a == b) return\
    \ a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L == 0L && b % 2L ==\
    \ 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L ==\
    \ 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L, b);\n    if (a %\
    \ 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0) return\
    \ b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 ||\
    \ b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    if (a > b)\
    \ return greatest_common_divisor((a - b) / 2, b);\n    return greatest_common_divisor((b\
    \ - a) / 2, a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return -1L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L,\
    \ 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n*/\nlong greatest_common_divisor(long[]\
    \ a) \n{\n    if (a.length == 0)\n        return 0L;\n    if (a.length == 1)\n\
    \        return a[0];\n    long result = greatest_common_divisor(a[0], a[1]);\n\
    \    for (long", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n \
    \       return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b ==\
    \ 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L !=\
    \ 0L && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n  \
    \  return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) :\
    \ greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) == 0)\n     \
    \   return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return\
    \ greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n  \
    \      b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long c;\n    while (a != 0) {\n        c = a;\n       \
    \ a = b % a;\n        b = c;\n    }\n    return b;\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    else if (b == 0L)\n        return a;\n    else\n     \
    \   return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L) \n   \
    \ {\n        return b;\n    } \n    else if (b == 0L) \n    {\n        return\
    \ a;\n    }\n    else \n    {\n        return greatest_common_divisor(b, a % b);\n\
    \    }\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    else if (b == 0L)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n \
    \       return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    return\
    \ a == 0 ? b : greatest_common_divisor(b % a, a);\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a < b)\n   \
    \     return greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n\
    \    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n   \
    \     return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n      \
    \  return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    else\n        return greatest_common_divisor((b - a) / 2L, a);\n}",
  "{\n    long c;\n    while (a != 0) \n    {\n        c = a;\n        a = b % a;\n\
    \        b = c;\n    }\n    return b;\n}", "{\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L) return b;\n   \
    \ if (b == 0L) return a;\n    if (a == b) return a;\n    if (a == 1L || b == 1L)\
    \ return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L,\
    \ 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong\
    \ greatest_common_divisor(long a, long b) \n{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor\
    \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n \
    \   >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    long c;\n    while (a != 0) {\n        c = a; a = b % a;  b = c;\n    }\n\
    \    return b;\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n    \
    \    b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    while (b !=\
    \ 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n    }\n\
    \    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0L) \n    {\n        return b;\n    }\n    if (b == 0L) \n    {\n\
    \        return a;\n    }\n    if (a == b) \n    {\n        return a;\n    }\n\
    \    if (a == 1L || b == 1L) \n    {\n        return 1L;\n    }\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n     \
    \   return greatest_common_divisor(a / 2L, b);\n    }\n    if (a % 2L != 0L &&\
    \ b % 2L == 0L) \n    {\n        return greatest_common_divisor(a, b / 2L);\n\
    \    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n \
    \   if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n   \
    \ if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n    {\n        return b;\n    }\n    else if (b == 0L)\n  \
    \  {\n        return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}", "{\n    long c;\n    while (a != 0) {\n        c = a;\n\
    \        a = b % a;\n        b = c;\n    }\n    return b;\n}\n/*\n Return a least\
    \ common multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n\
    \    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n\
    \    2520L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result\
    \ = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    2520L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1 || b == 1)\n        return 1;\n    if ((a % 2 == 0) && (b % 2\
    \ == 0))\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if ((a\
    \ % 2 == 0) && (b % 2 != 0))\n        return greatest_common_divisor(a / 2, b);\n\
    \    if ((a % 2 != 0) && (b % 2 == 0))\n        return greatest_common_divisor(a,\
    \ b / 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ list) \n{\n    long result = 1L;\n    foreach (elem; list)\n        result =\
    \ least_common_multiple(result, elem);\n    return result;\n}\n/*\n Return a least\
    \ common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(long[] list) \n{\n    long result = 1L;\n    foreach\
    \ (elem; list)\n        result = least_common_multiple(result, elem);\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n*/\nlong least_common_multiple_list(long[] list) \n{\n    long\
    \ result = 1L;\n    foreach (elem; list)\n        result = least_common_multiple(result,\
    \ elem);\n    return result;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n    >>> least_common_multiple_list([3L,", "{\n    if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a >> 1, b\
    \ >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n        return ((b\
    \ & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n    \
    \    b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a == 0)\n       \
    \ return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b\
    \ = -b;\n    while (a != b)\n    {\n        if (a > b)\n            a -= b;\n\
    \        else\n            b -= a;\n    }\n    return a;\n}", "{\n    if (a ==\
    \ 0L) return b;\n    if (b == 0L) return a;\n    if (a == b) return a;\n    if\
    \ (a == 1L || b == 1L) return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L) return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L && b\
    \ % 2L == 0L) return greatest_common_divisor(a, b / 2L);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}\n/*\n Return a least common multiple of two integers a\
    \ and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common\
    \ multiple of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n\
    \    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n    \n*/\n\
    long least_common_multiple_list(long[] a) \n{\n    long result = 1L;\n    foreach\
    \ (i; a) \n    {\n        result = least_common_multiple(result, i);\n    }\n\
    \    return result;\n}\n/*\n Return a least common multiple of a list of integers\n\
    \    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    \n*/\nlong least_common_multiple_list(long[] a) \n{\n  \
    \  long result = 1L;\n    foreach (i; a) \n    {\n        result = least_", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    while (b != 0) \n  \
    \  {\n        long t = b;\n        b = a % b;\n        a = t;\n    }\n    return\
    \ a;\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n        return\
    \ a;\n    if (a > b) \n        return greatest_common_divisor(a % b, b);\n   \
    \ else \n        return greatest_common_divisor(a, b % a);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) :\
    \ greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) == 0)\n     \
    \   return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return\
    \ greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n\
    \    if (b == 0L) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long\
    \ result = a[0];\n    for (int i = 1; i < a.length; i++) \n    {\n        result\
    \ = least_common_multiple(result, a[i]);\n    }\n    return result;\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 5L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = a[0];\n    for (int i = 1; i < a.length; i++) \n \
    \   {\n        result = least_common_multiple(result, a[i]);\n    }\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15", "{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else if (b ==\
    \ 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}", "{\n    if (a == 0L)\n        return b;\n    else if (b\
    \ == 0L)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a < b)\n   \
    \     return greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n\
    \    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n   \
    \     return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a <\
    \ 0L)\n        a = -a;\n    if (b < 0L)\n        b = -b;\n    if (a > b)\n   \
    \     return greatest_common_divisor(b, a);\n    return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n  \
    \      return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b ==\
    \ 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L !=\
    \ 0L && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n  \
    \  if (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b %\
    \ 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n  \
    \  if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a == 2L || b == 2L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L\
    \ == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if\
    \ (a % 2L == 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (b\
    \ % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n\
    \ Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor([3L,\
    \ 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n\
    */\nlong greatest_common_divisor(in long[] a) \n{\n    if (a.length == 0)\n  \
    \      return 0L;\n    if (a.length == 1)\n        return a[0];\n    long result\
    \ = greatest_common_divisor(a[0], a[1]);\n    for (size_t i = 2; i < a.length;\
    \ i++)\n        result = greatest_common_divisor(result, a[i]);\n    return result;\n\
    }\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7", "{\n    while (b != 0) \n    {\n        long t = b;\n        b = a %\
    \ b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a < 0L)\n        a = -a;\n\
    \    if (b < 0L)\n        b = -b;\n    while (a != b) {\n        if (a > b)\n\
    \            a -= b;\n        else\n            b -= a;\n    }\n    return a;\n\
    }", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ list) \n{\n    if (list.length == 0)\n        return 1L;\n    if (list.length\
    \ == 1)\n        return list[0];\n    return least_common_multiple(list[0], least_common_multiple_list(list[1\
    \ .. $]));\n}\n/*\n Return a least common multiple of a list of integers\n   \
    \ >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n\
    \    \n*/\nlong least_common_multiple_list(long[] list) \n{\n    if (list.length\
    \ == 0)\n        return 1L;\n    if (list.length == 1)\n        return list[0];\n\
    \    return least_common_multiple(list[0], least_common_multiple_list(list[1 ..\
    \ $]));\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    long\
    \ c;\n    while (a != 0) {\n        c = a;\n        a = b % a;\n        b = c;\n\
    \    }\n    return b;\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1 ||\
    \ b == 1)\n        return 1;\n    if ((a & 1) == 0)\n        return ((b & 1) ==\
    \ 0) ? greatest_common_divisor(a >> 1, b >> 1) << 1 : greatest_common_divisor(a\
    \ >> 1, b);\n    else\n        return ((b & 1) == 0) ? greatest_common_divisor(a,\
    \ b >> 1) : greatest_common_divisor(b, abs(a - b));\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    else\n        return greatest_common_divisor((b - a) / 2L, a);\n}\n\
    /*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple_list([25L, 15L, 75L])\n  \
    \  75L\n*/\nlong least_common_multiple_list(in long[] a) \n{\n    long result\
    \ = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result, i);\n\
    \    return result;\n}\n/*\n Return a greatest common divisor of a list of integers\n\
    \    >>> greatest_common_divisor_list([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor_list([25L,\
    \ 15L, 75L])", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n      \
    \  a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple of two\
    \ integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common\
    \ multiple of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n\
    \    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L])\n\
    \    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L, 2L])\n    150L\n\
    \    \n*/\nlong least_common_multiple_list(long[] list) \n{\n    long result =\
    \ 1L;\n    foreach (i; list) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L])\n\
    \    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L, 2L])\n    150L\n\
    \    \n*/\nlong least_common_multiple_list(long[] list) \n{\n    long result =\
    \ 1L;\n    foreach (i; list) {", "{\n    if (a == 0L)\n        return b;\n   \
    \ if (b == 0L)\n        return a;\n    if (a < 0L)\n        a = -a;\n    if (b\
    \ < 0L)\n        b = -b;\n    while (a != b)\n    {\n        if (a > b)\n    \
    \        a -= b;\n        else\n            b -= a;\n    }\n    return a;\n}",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a <\
    \ 0L)\n        a = -a;\n    if (b < 0L)\n        b = -b;\n    while (a != b) {\n\
    \        if (a > b)\n            a -= b;\n        else\n            b -= a;\n\
    \    }\n    return a;\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a > b) \n    {\n      \
    \  return greatest_common_divisor(a % b, b);\n    }\n    else \n    {\n      \
    \  return greatest_common_divisor(a, b % a);\n    }\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a == 0L)\n      \
    \  return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L &&\
    \ b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    long c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n     \
    \   b = c;\n    }\n    return a;\n}", "{\n    if (b == 0)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n    {\n        return b;\n    }\n    if (b\
    \ == 0L)\n    {\n        return a;\n    }\n    if (a > b)\n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    if (b\
    \ == 0L)\n    {\n        return a;\n    }\n    if (a > b)\n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
