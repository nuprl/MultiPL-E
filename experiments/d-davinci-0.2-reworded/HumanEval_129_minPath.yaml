name: HumanEval_129_minPath
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a grid with N rows\
  \ and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains\
  \ a value. Every integer in the range [1, N * N]\n    inclusive appears exactly\
  \ once on the cells of the grid.\n\n    You have to find the minimum path of length\
  \ k in the grid. You can start\n    from any cell, and in each step you can move\
  \ to any of the neighbor cells,\n    in other words, you can go to cells which share\
  \ an edge with you current\n    cell.\n    Please note that a path of length k means\
  \ visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off\
  \ the grid.\n    A path A (of length k) is considered less than a path B (of length\
  \ k) if\n    after making the ordered arrays of the values on the cells that A and\
  \ B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n    than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n   \
  \ lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return\
  \ an ordered array of the values on the cells that the minimum path go through.\n\
  \n    Examples:    \n    >>> minPath([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]],\
  \ 3L)\n    [1L, 2L, 1L]\n\n    >>> minPath([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L,\
  \ 2L]], 1L)\n    [1L]\n    \n*/\nlong[] minPath(long[][] grid, long k) \n"
tests: "unittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L,\
  \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L,\
  \ 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L)\
  \ == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L,\
  \ 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L,\
  \ 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L,\
  \ 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L,\
  \ 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L)\
  \ == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L,\
  \ 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L,\
  \ 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L],\
  \ [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L,\
  \ 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n\
  \    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L,\
  \ 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L,\
  \ 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    import std.algorithm;\n    import std.range;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.iteration;\n    import std.algorithm.mutation;\n   \
    \ import std.algorithm.searching;\n    import std.array;\n    import std.conv;\n\
    \    import std.functional;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.typecons;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm.comparison;\n    import std.algorithm.iteration;\n\
    \    import std.algorithm.mutation;\n    import std.algorithm.searching;\n   \
    \ import std.array;\n    import std.conv;\n    import std.functional;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.stdio;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.iteration;\n    import std.algorithm.mutation;\n   \
    \ import std.algorithm.searching;\n    import std.array;\n    import std.conv;\n\
    \    import std.functional;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.typecons;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm.comparison;\n    import std.algorithm.iteration;\n\
    \    import std.algorithm.mutation;\n    import std.algorithm.searching;\n   \
    \ import std.array;\n    import std.conv;\n    import std.functional;\n    import\
    \ std", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto\
    \ dp = new long[][][](n, m, k + 1);\n    auto path = new long[][][](n, m, k +\
    \ 1);\n    foreach (i, j; 0 .. n)\n    {\n        foreach (l; 0 .. k + 1)\n  \
    \      {\n            dp[i][j][l] = long.max;\n            path[i][j][l] = -1;\n\
    \        }\n    }\n    foreach (i, j; 0 .. n)\n    {\n        dp[i][j][1] = grid[i][j];\n\
    \        path[i][j][1] = grid[i][j];\n    }\n    foreach (l; 2 .. k + 1)\n   \
    \ {\n        foreach (i, j; 0 .. n)\n        {\n            foreach (x, y; i -\
    \ 1 .. i + 1)\n            {\n                if (x < 0 || x >= n || y < 0 ||\
    \ y >= m)\n                    continue;\n                if (dp[x][y][l - 1]\
    \ + grid[i][j] < dp[i][j][l])\n                {\n                    dp[i][j][l]\
    \ = dp[x][y][l - 1] + grid[i][j];\n                    path[i][j][l] = grid[i][j];\n\
    \                }\n            }\n        }\n    }\n    auto ans = new long[k];\n\
    \    auto min = long.max;\n    foreach (i, j; 0 .. n)\n    {\n        if (dp[i][j][k]\
    \ < min)\n        {\n            min = dp[i][j][k];\n            ans[0] = grid[i][j];\n\
    \        }\n    }\n    foreach (l; k - 1 .. 0)\n    {\n        foreach (i, j;\
    \ 0 .. n)\n        {\n            if (path[i][j][l + 1] != -1)\n            {\n\
    \                foreach (x, y; i - 1 .. i + 1)\n                {\n         \
    \          ", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    long[] res = new\
    \ long[(int)k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n\
    \        res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n            x", "{\n    long N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    for (long i = 0; i < N; i++)\n        for (long j = 0; j <\
    \ N; j++)\n            dp[i][j] = grid[i][j];\n    for (long i = 0; i < N; i++)\n\
    \        for (long j = 0; j < N; j++)\n            for (long x = 0; x < N; x++)\n\
    \                for (long y = 0; y < N; y++)\n                    if (abs(x -\
    \ i) + abs(y - j) == 1)\n                        dp[i][j] = min(dp[i][j], dp[x][y]\
    \ + grid[i][j]);\n    long[] ans = new long[(int)k];\n    for (long i = 0; i <\
    \ k; i++)\n        ans[(int)i] = dp[0][0];\n    return ans;\n}", "{\n    long\
    \ n = grid.length;\n    long[] res = new long[(int)k];\n    int[][] dp = new int[(int)n][(int)n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = -1;\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            if (grid[i][j] == 1)\n                dp[i][j] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      if (dp[i][j] != -1)\n            {\n                if (i > 0 && dp[i -\
    \ 1][j] == -1)\n                    dp[i - 1][j] = dp[i][j] + 1;\n           \
    \     if (i < n - 1 && dp[i + 1][j] == -1)\n                    dp[i + 1][j] =\
    \ dp[i][j] + 1;\n                if (j > 0 && dp[i][j - 1] == -1)\n          \
    \          dp[i][j - 1] = dp[i][j] + 1;\n                if (j < n - 1 && dp[i][j\
    \ + 1] == -1)\n                    dp[i][j + 1] = dp[i][j] + 1;\n            }\n\
    \    long min = n * n + 1;\n    int[] pos = new int[2];\n    for (int i = 0; i\
    \ < n; i++)\n        for (int j = 0; j < n; j++)\n            if (dp[i][j] ==\
    \ k - 1)\n            {\n                if (grid[i][j] < min)\n             \
    \   {\n                    min = grid[i][j];\n                    pos[0] = i;\n\
    \                    pos[1] = j;\n                }\n            }\n    res[0]\
    \ = min;\n    int cur = 1;\n    while (cur", "{\n    int N = grid.length;\n  \
    \  int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n   \
    \ for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n\
    \            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int\
    \ cur = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \            if (dp[i][j] == cur)\n            {\n                path[cur] =\
    \ grid[i][j];\n                cur++;\n                if (cur == k)\n       \
    \             return path;\n                if (i > 0)\n                    dp[i\
    \ - 1][j] = int.max;\n                if (j > 0)\n                    dp[i][j\
    \ - 1] = int.max;\n            }\n    return path;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_prev\
    \ = new long[n][n];\n    long[][] path_next = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            prev[i][j] = i * n + j;\n    \
    \        next[i][j] = i * n + j;\n            path[i][j] = grid[i][j];\n     \
    \       path_prev[i][j] = i * n + j;\n            path_next[i][j] = i * n + j;\n\
    \        }\n    }\n    for (long step = 1; step < k; step++)\n    {\n        for\
    \ (long i = 0; i < n; i++)\n        {\n            for (long j = 0; j < n; j++)\n\
    \            {\n                long min = dp[i][j];\n                long min_prev\
    \ = prev[i][j];\n                long min_next = next[i][j];\n               \
    \ long min_path = path[i][j];\n                long min_path_prev = path_prev[i][j];\n\
    \                long min_path_next = path_next[i][j];\n                if (i\
    \ > 0)\n                {\n                    if (dp[i - 1][j] < min)\n     \
    \               {\n                        min = dp[i - 1][j];\n             \
    \           min_prev = prev[i - 1][j];\n                        min_next = next[i\
    \ - 1][j];\n                        min_path = path[i - 1][j];\n             \
    \           min_path_prev = path_prev[i - 1][j];\n                        min_path_next\
    \ = path_next[i - 1][j];\n                    }\n                    else if (dp[",
  "{\n    int n = grid.length;\n    long[][] dp = new long[n][n];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = 1L << 62;\n    dp[0][0] = grid[0][0];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n     \
    \           dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n           \
    \ if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[(int)k];\n    int i = 0, j = 0;\n    for\
    \ (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        if (i\
    \ == n - 1 && j == n - 1)\n            break;\n        if (i == n - 1)\n     \
    \       j++;\n        else if (j == n - 1)\n            i++;\n        else if\
    \ (dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n            j++;\n\
    \    }\n    return res;\n}", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n      \
    \      dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n              \
    \  dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n      \
    \  }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j = n - 1;\n\
    \    foreach(idx; k .. 0)\n    {\n        res[idx] = grid[i][j];\n        if(i\
    \ > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n        else\n\
    \            j--;\n    }\n    return res;\n}", "{\n    // Write your code here\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = -1;\n\
    \    dp[0][0] = 0;\n    int[][] dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0,\
    \ -1}};\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \            for (int d = 0; d < 4; d++)\n            {\n                int x\
    \ = i + dir[d][0];\n                int y = j + dir[d][1];\n                if\
    \ (x >= 0 && x < n && y >= 0 && y < n && dp[x][y] != -1)\n                {\n\
    \                    if (dp[i][j] == -1 || dp[i][j] > dp[x][y] + (grid[i][j] <\
    \ grid[x][y] ? 1 : 0))\n                        dp[i][j] = dp[x][y] + (grid[i][j]\
    \ < grid[x][y] ? 1 : 0);\n                }\n            }\n    int[][] path =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            path[i][j] = -1;\n    path[0][0] = 0;\n    for (int i =\
    \ 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int d\
    \ = 0; d < 4; d++)\n            {\n                int x = i + dir[d][0];\n  \
    \              int y = j + dir[d][1];\n                if (x >= 0 && x < n &&\
    \ y >= 0 && y < n && path[x][y] != -1)\n                {\n                  \
    \  if (path[i][j] == -", "{\n    auto N = grid.length;\n    auto M = grid[0].length;\n\
    \    auto dp = new long[N][M][k + 1];\n    foreach (i; 0 .. N)\n        foreach\
    \ (j; 0 .. M)\n            foreach (l; 0 .. k + 1)\n                dp[i][j][l]\
    \ = -1;\n    dp[0][0][0] = grid[0][0];\n    foreach (i; 0 .. N)\n        foreach\
    \ (j; 0 .. M)\n            foreach (l; 0 .. k)\n            {\n              \
    \  if (i > 0)\n                    dp[i][j][l + 1] = max(dp[i][j][l + 1], dp[i\
    \ - 1][j][l]);\n                if (j > 0)\n                    dp[i][j][l + 1]\
    \ = max(dp[i][j][l + 1], dp[i][j - 1][l]);\n                if (i < N - 1)\n \
    \                   dp[i][j][l + 1] = max(dp[i][j][l + 1], dp[i + 1][j][l]);\n\
    \                if (j < M - 1)\n                    dp[i][j][l + 1] = max(dp[i][j][l\
    \ + 1], dp[i][j + 1][l]);\n                if (dp[i][j][l + 1] != -1)\n      \
    \              dp[i][j][l + 1] += grid[i][j];\n            }\n    auto res = new\
    \ long[k];\n    res[0] = grid[0][0];\n    auto i = 0;\n    auto j = 0;\n    foreach\
    \ (l; 1 .. k)\n    {\n        if (i > 0 && dp[i - 1][j][l] == dp[i][j][l] - grid[i][j])\n\
    \        {\n            res[l] = grid[i - 1][j];\n            i--;\n        }\n\
    \        else if (j > 0 && dp[i][j - 1][l] == dp[i][j][l] -", "{\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[] res = new int[k];\n    int x = 0, y\
    \ = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n\
    \        if (x < n - 1 && dp[x + 1][y] == dp[x][y] + 1)\n            x++;\n  \
    \      else if (y < n - 1 && dp[x][y + 1] == dp[x][y] + 1)\n            y++;\n\
    \        else\n            break;\n    }\n    return res;\n}", "{\n    auto n\
    \ = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    auto res = new long[][](n, m);\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n\
    \        {\n            dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n\
    \            res[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 1; i\
    \ < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n         \
    \   if (dp[i - 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j];\n                path[i][j] = path[i - 1][j];\n                res[i][j]\
    \ = res[i - 1][j];\n            }\n            else if (dp[i - 1][j] == dp[i][j])\n\
    \            {\n                path[i][j] += path[i - 1][j];\n              \
    \  if (res[i - 1][j] < res[i][j])\n                {\n                    res[i][j]\
    \ = res[i - 1][j];\n                }\n            }\n        }\n    }\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        for (int j = 1; j < m; j++)\n      \
    \  {\n            if (dp[i][j - 1] < dp[i][j])\n            {\n              \
    \  dp[i][j] = dp[i][j - 1];\n                path[i][j] = path[i][j - 1];\n  \
    \              res[i][j] = res[i][j - 1];\n            }\n            else if\
    \ (dp[i][j - 1] == dp[i][j])\n            {\n                path[i][j] += path[i][j\
    \ - 1];", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n \
    \   long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n   \
    \ long[][] dist = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = -1;\n            next[i][j] = -1;\n            dist[i][j]\
    \ = 1;\n        }\n    }\n    long[][] dirs = new long[][]{{1, 0}, {-1, 0}, {0,\
    \ 1}, {0, -1}};\n    for (long i = 0; i < k - 1; i++)\n    {\n        for (long\
    \ x = 0; x < n; x++)\n        {\n            for (long y = 0; y < n; y++)\n  \
    \          {\n                for (long[] dir : dirs)\n                {\n   \
    \                 long nx = x + dir[0];\n                    long ny = y + dir[1];\n\
    \                    if (nx < 0 || nx >= n || ny < 0 || ny >= n)\n           \
    \         {\n                        continue;\n                    }\n      \
    \              if (dp[nx][ny] > dp[x][y] || (dp[nx][ny] == dp[x][y] && dist[nx][ny]\
    \ > dist[x][y] + 1))\n                    {\n                        dp[nx][ny]\
    \ = dp[x][y];\n                        prev[nx][ny] = x * n + y;\n           \
    \             next[nx][ny] = -1;\n                        dist[nx][ny] = dist[x][y]\
    \ + 1;\n                    }\n                }\n            }\n        }\n \
    \       for (long x = 0; x < n; x++)\n        {\n            for (long y = 0;\
    \ y < n; y++)\n            {\n                dp[x][y] += grid", "{\n    // TODO:\
    \ Implement your solution here\n    return new long[0];\n}", "{\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ m; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1]);\n        }\n    long[] res = new long[(int)k];\n    int x = 0;\n\
    \    int y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = dp[x][y];\n\
    \        if (i + 1 < k)\n        {\n            if (x + 1 < n && dp[x + 1][y]\
    \ < dp[x][y + 1])\n                x++;\n            else\n                y++;\n\
    \        }\n    }\n    return res;\n}", "{\n    // Write your code here\n    int\
    \ n = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n\
    \    long[][] path = new long[n][m];\n    for (int i = 0; i < n; i++)\n    {\n\
    \        for (int j = 0; j < m; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            path[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 1; i\
    \ < k; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   for (int l = 0; l < m; l++)\n            {\n                long min = dp[j][l];\n\
    \                long minPath = path[j][l];\n                if (j > 0 && dp[j\
    \ - 1][l] < min)\n                {\n                    min = dp[j - 1][l];\n\
    \                    minPath = path[j - 1][l];\n                }\n          \
    \      if (j < n - 1 && dp[j + 1][l] < min)\n                {\n             \
    \       min = dp[j + 1][l];\n                    minPath = path[j + 1][l];\n \
    \               }\n                if (l > 0 && dp[j][l - 1] < min)\n        \
    \        {\n                    min = dp[j][l - 1];\n                    minPath\
    \ = path[j][l - 1];\n                }\n                if (l < m - 1 && dp[j][l\
    \ + 1] < min)\n                {\n                    min = dp[j][l + 1];\n  \
    \                  minPath = path[j][l + 1];\n                }\n            \
    \    dp[j][l] = min + grid[j][l];\n                path[j][l] = minPath * 10 +\
    \ grid[j][l];\n            }\n        }\n    }\n    long min = dp[0][0];\n   \
    \ long minPath = path[0][0];\n    for (int i = 0; i < n; i++)\n    {", "{\n  \
    \  int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[] dx = [0, 0, 1, -1];\n    int[] dy =\
    \ [1, -1, 0, 0];\n    int[][] p = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            p[i][j] = -1;\n    p[0][0] =\
    \ 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n \
    \       {\n            if (i > 0 && dp[i - 1][j] + 1 == dp[i][j])\n          \
    \      p[i][j] = 0;\n            if (j > 0 && dp[i][j - 1] + 1 == dp[i][j])\n\
    \                p[i][j] = 1;\n        }\n    int x = 0;\n    int y = 0;\n   \
    \ long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n        res[i]\
    \ = grid[x][y];\n        int nx = x + dx[p[x][y]];\n        int ny = y + dy[p[x][y]];\n\
    \        x = nx;\n        y = ny;\n", "{\n    int N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n \
    \           dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0\
    \ .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    int i = 0, j = 0;\n    foreach(idx;\
    \ 0 .. k)\n    {\n        res[idx] = grid[i][j];\n        if(i + 1 < N && dp[i\
    \ + 1][j] + grid[i][j] == dp[i][j])\n            i++;\n        else\n        \
    \    j++;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int cur = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      if (dp[i][j] == cur)\n            {\n                path[cur] = grid[i][j];\n\
    \                cur++;\n                if (cur == k)\n                    return\
    \ path;\n                if (i > 0)\n                    dp[i - 1][j] = int.max;\n\
    \                if (j > 0)\n                    dp[i][j - 1] = int.max;\n   \
    \         }\n    return path;\n}", "{\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n\
    \            if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j\
    \ + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j]\
    \ = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[", "{\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.array;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \   ", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n      \
    \  }\n    int[][] path = new int[n][n];\n    for (int i = 0; i < n; i++)\n   \
    \     for (int j = 0; j < n; j++)\n            path[i][j] = -1;\n    path[0][0]\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i][j] == dp[i - 1][j] + grid[i][j])\n\
    \                path[i][j] = 0;\n            if (j > 0 && dp[i][j] == dp[i][j\
    \ - 1] + grid[i][j])\n                path[i][j] = 1;\n        }\n    int x =\
    \ n - 1;\n    int y = n - 1;\n    long[] res = new long[k];\n    for (int i =\
    \ 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n        if (path[x][y]\
    \ == 0)\n            x--;\n        else\n            y--;\n    }\n    return res;\n\
    }", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][]\
    \ dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \        {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n  \
    \          prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j];\n                prev[i][j] = i - 1;\n\
    \                next[i][j] = j;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1];\n\
    \                prev[i][j] = i;\n                next[i][j] = j - 1;\n      \
    \      }\n            if (i < n - 1 && dp[i + 1][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j];\n                prev[i][j] = i + 1;\n\
    \                next[i][j] = j;\n            }\n            if (j < n - 1 &&\
    \ dp[i][j + 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1];\n                prev[i][j] = i;\n                next[i][j] = j + 1;\n\
    \            }\n        }\n    }\n    long[] res = new long[k];\n    long i =\
    \ 0;\n    long j = 0;\n    for (long l", "{\n    // Your code here\n    long n\
    \ = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n\
    \    long[][] next = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n\
    \    for (long step = 1; step < k; step++)\n    {\n        for (long i = 0; i\
    \ < n; i++)\n        {\n            for (long j = 0; j < n; j++)\n           \
    \ {\n                long min = dp[i][j];\n                long min_i = i;\n \
    \               long min_j = j;\n                if (i > 0 && dp[i - 1][j] < min)\n\
    \                {\n                    min = dp[i - 1][j];\n                \
    \    min_i = i - 1;\n                    min_j = j;\n                }\n     \
    \           if (i < n - 1 && dp[i + 1][j] < min)\n                {\n        \
    \            min = dp[i + 1][j];\n                    min_i = i + 1;\n       \
    \             min_j = j;\n                }\n                if (j > 0 && dp[i][j\
    \ - 1] < min)\n                {\n                    min = dp[i][j - 1];\n  \
    \                  min_i = i;\n                    min_j = j - 1;\n          \
    \      }\n                if (j < n - 1 && dp[i][j + 1] < min)\n             \
    \   {\n                    min = dp[i][j + 1];\n                    min_i = i;\n\
    \                    min_j = j + 1;\n                }\n                dp[i][j]\
    \ += min;\n                prev[i][j] = min_i * n + min_j;\n            }\n  \
    \      }\n    }\n    long min = dp[0][0", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n            {\n   \
    \             dp[i][j] = dp[i - 1][j];\n                prev[i][j] = i - 1;\n\
    \                next[i][j] = j;\n            }\n            if (j > 0 && dp[i][j]\
    \ > dp[i][j - 1])\n            {\n                dp[i][j] = dp[i][j - 1];\n \
    \               prev[i][j] = i;\n                next[i][j] = j - 1;\n       \
    \     }\n            if (i < n - 1 && dp[i][j] > dp[i + 1][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j];\n                prev[i][j] = i + 1;\n\
    \                next[i][j] = j;\n            }\n            if (j < n - 1 &&\
    \ dp[i][j] > dp[i][j + 1])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1];\n                prev[i][j] = i;\n                next[i][j] = j + 1;\n\
    \            }\n        }\n    }\n    long[] res = new long[(int)k];\n    long\
    \ cur = 0;\n    for (long i = 0; i", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next\
    \ = new long[n][n];\n    long[][] visited = new long[n][n];\n    long[][] path\
    \ = new long[n][n];\n    long[][] path_prev = new long[n][n];\n    long[][] path_next\
    \ = new long[n][n];\n    long[][] path_visited = new long[n][n];\n    long[][]\
    \ path_grid = new long[n][n];\n    long[][] path_grid_prev = new long[n][n];\n\
    \    long[][] path_grid_next = new long[n][n];\n    long[][] path_grid_visited\
    \ = new long[n][n];\n    long[][] path_grid_visited_prev = new long[n][n];\n \
    \   long[][] path_grid_visited_next = new long[n][n];\n    long[][] path_grid_visited_prev_prev\
    \ = new long[n][n];\n    long[][] path_grid_visited_next_next = new long[n][n];\n\
    \    long[][] path_grid_visited_prev_prev_prev = new long[n][n];\n    long[][]\
    \ path_grid_visited_next_next_next = new long[n][n];\n    long[][] path_grid_visited_prev_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_grid_visited_next_next_next_next = new\
    \ long[n][n];\n    long[][] path_grid_visited_prev_prev_prev_prev_prev = new long[n][n];\n\
    \    long[][] path_grid_visited_next_next_next_next_next = new long[n][n];\n \
    \   long[][] path_grid_visited_prev_prev_prev_prev_prev_prev = new long[n][n];\n\
    \    long[][]", "{\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.", "{\n    int N = grid.length;\n    int M = grid[0].length;\n    long[][]\
    \ dp = new long[N][M];\n    long[][] prev = new long[N][M];\n    for (int i =\
    \ 0; i < N; i++)\n    {\n        for (int j = 0; j < M; j++)\n        {\n    \
    \        dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n        }\n   \
    \ }\n    for (int i = 1; i < N; i++)\n    {\n        if (dp[i][0] > dp[i - 1][0])\n\
    \        {\n            dp[i][0] = dp[i - 1][0];\n            prev[i][0] = i -\
    \ 1;\n        }\n    }\n    for (int j = 1; j < M; j++)\n    {\n        if (dp[0][j]\
    \ > dp[0][j - 1])\n        {\n            dp[0][j] = dp[0][j - 1];\n         \
    \   prev[0][j] = j - 1;\n        }\n    }\n    for (int i = 1; i < N; i++)\n \
    \   {\n        for (int j = 1; j < M; j++)\n        {\n            if (dp[i][j]\
    \ > dp[i - 1][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n \
    \               prev[i][j] = i - 1;\n            }\n            if (dp[i][j] >\
    \ dp[i][j - 1])\n            {\n                dp[i][j] = dp[i][j - 1];\n   \
    \             prev[i][j] = j - 1;\n            }\n        }\n    }\n    long[]\
    \ ans = new long[k];\n    int cur = 0;\n    for (int i = 0; i < N; i++)\n    {\n\
    \        for (int j = 0; j < M; j++)\n        {\n            if (dp[i][j] == grid[i][j])\n\
    \           ", "{\n    int n = grid.length;\n    long[] res = new long[(int)k];\n\
    \    int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    int[][] visited =\
    \ new int[n][n];\n    visited[0][0] = 1;\n    res[0] = grid[0][0];\n    for (int\
    \ i = 1; i < k; i++) {\n        long min = long.max;\n        int min_x = 0;\n\
    \        int min_y = 0;\n        for (int j = 0; j < i; j++) {\n            int\
    \ x = (int)(res[j] - 1) / n;\n            int y = (int)(res[j] - 1) % n;\n   \
    \         foreach (int[] dir; dirs) {\n                int nx = x + dir[0];\n\
    \                int ny = y + dir[1];\n                if (nx >= 0 && nx < n &&\
    \ ny >= 0 && ny < n && visited[nx][ny] == 0) {\n                    if (grid[nx][ny]\
    \ < min) {\n                        min = grid[nx][ny];\n                    \
    \    min_x = nx;\n                        min_y = ny;\n                    }\n\
    \                }\n            }\n        }\n        visited[min_x][min_y] =\
    \ 1;\n        res[i] = grid[min_x][min_y];\n    }\n    return res;\n}", "{\n \
    \   // Write your code here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[] res = new int[k];\n    int cur = 0;\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        res[i] = grid[cur / n][cur % n];\n        if (cur\
    \ / n > 0 && dp[cur / n - 1][cur % n] + grid[cur / n][cur % n] == dp[cur / n][cur\
    \ % n])\n            cur -= n;\n        else\n            cur--;\n    }\n    return\
    \ res;\n}", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    long[][] prev_i = new long[n][n];\n\
    \    long[][] prev_j = new long[n][n];\n    long[][] min_path = new long[n][n];\n\
    \    long[][] min_path_i = new long[n][n];\n    long[][] min_path_j = new long[n][n];\n\
    \    long[][] min_path_prev = new long[n][n];\n    long[][] min_path_prev_i =\
    \ new long[n][n];\n    long[][] min_path_prev_j = new long[n][n];\n    long[][]\
    \ min_path_prev_prev = new long[n][n];\n    long[][] min_path_prev_prev_i = new\
    \ long[n][n];\n    long[][] min_path_prev_prev_j = new long[n][n];\n    long[][]\
    \ min_path_prev_prev_prev = new long[n][n];\n    long[][] min_path_prev_prev_prev_i\
    \ = new long[n][n];\n    long[][] min_path_prev_prev_prev_j = new long[n][n];\n\
    \    long[][] min_path_prev_prev_prev_prev = new long[n][n];\n    long[][] min_path_prev_prev_prev_prev_i\
    \ = new long[n][n];\n    long[][] min_path_prev_prev_prev_prev_j = new long[n][n];\n\
    \    long[][] min_path_prev_prev_prev_prev_prev = new long[n][n];\n    long[][]\
    \ min_path_prev_prev_prev_prev_prev_i = new long[n][n];\n    long[][] min_path_prev_prev_prev_prev_prev_j\
    \ = new long[n][n];\n    long[][] min_path_prev_prev_prev_", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int\
    \ cur = dp[n - 1][n - 1];\n    int i = n - 1;\n    int j = n - 1;\n    for (int\
    \ l = 0; l < k; l++)\n    {\n        path[l] = grid[i][j];\n        if (i > 0\
    \ && dp[i - 1][j] + grid[i][j] == cur)\n        {\n            cur -= grid[i][j];\n\
    \            i--;\n        }\n        else if (j > 0 && dp[i][j - 1] + grid[i][j]\
    \ == cur)\n        {\n            cur -= grid[i][j];\n            j--;\n     \
    \   }\n    }\n    return path;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            for (int x = 0; x < n;\
    \ x++)\n                for (int y = 0; y < n; y++)\n                    if (abs(x\
    \ - i) + abs(y - j) == 1)\n                        dp[i][j] = min(dp[i][j], dp[x][y]\
    \ + grid[i][j]);\n    int[] res = new int[(int)k];\n    int x = 0, y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n        int\
    \ min = dp[x][y];\n        int nx = x, ny = y;\n        if (x > 0 && dp[x - 1][y]\
    \ < min)\n        {\n            min = dp[x - 1][y];\n            nx = x - 1;\n\
    \            ny = y;\n        }\n        if (x < n - 1 && dp[x + 1][y] < min)\n\
    \        {\n            min = dp[x + 1][y];\n            nx = x + 1;\n       \
    \     ny = y;\n        }\n        if (y > 0 && dp[x][y - 1] < min)\n        {\n\
    \            min = dp[x][y - 1];\n            nx = x;\n            ny = y - 1;\n\
    \        }\n        if (y < n - 1 && dp[x][y + 1] < min)\n        {\n        \
    \    min = dp[x][y + 1];\n            nx = x;\n            ny = y + 1;\n     \
    \   }\n        x = nx;\n        y = ny;\n    }\n    return res;", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      for (int x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n\
    \                    if (i != x || j != y)\n                        dp[i][j] =\
    \ min(dp[i][j], dp[x][y] + grid[i][j]);\n    int[][] dp2 = new int[n][n];\n  \
    \  for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        \
    \    dp2[i][j] = dp[i][j];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            for (int x = 0; x < n; x++)\n              \
    \  for (int y = 0; y < n; y++)\n                    if (i != x || j != y)\n  \
    \                      dp2[i][j] = min(dp2[i][j], dp[x][y] + dp[i][j]);\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp3[i][j] = dp2[i][j];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            for (int x = 0; x\
    \ < n; x++)\n                for (int y = 0; y < n; y++)\n                   \
    \ if (i != x || j != y)\n                        dp3[i][j] = min(dp3[i][j], dp2[x",
  "{\n    long[] result = new long[(int)k];\n    long[] temp = new long[(int)k];\n\
    \    long[] temp2 = new long[(int)k];\n    long[] temp3 = new long[(int)k];\n\
    \    long[] temp4 = new long[(int)k];\n    long[] temp5 = new long[(int)k];\n\
    \    long[] temp6 = new long[(int)k];\n    long[] temp7 = new long[(int)k];\n\
    \    long[] temp8 = new long[(int)k];\n    long[] temp9 = new long[(int)k];\n\
    \    long[] temp10 = new long[(int)k];\n    long[] temp11 = new long[(int)k];\n\
    \    long[] temp12 = new long[(int)k];\n    long[] temp13 = new long[(int)k];\n\
    \    long[] temp14 = new long[(int)k];\n    long[] temp15 = new long[(int)k];\n\
    \    long[] temp16 = new long[(int)k];\n    long[] temp17 = new long[(int)k];\n\
    \    long[] temp18 = new long[(int)k];\n    long[] temp19 = new long[(int)k];\n\
    \    long[] temp20 = new long[(int)k];\n    long[] temp21 = new long[(int)k];\n\
    \    long[] temp22 = new long[(int)k];\n    long[] temp23 = new long[(int)k];\n\
    \    long[] temp24 = new long[(int)k];\n    long[] temp25 = new long[(int)k];\n\
    \    long[] temp26 = new long[(int)k];\n    long[] temp27 = new long[(int)k];\n\
    \    long[] temp28 = new long[(int)k];\n    long[] temp29 = new long[(int)k];\n\
    \    long[] temp30 = new long[(int)k];\n    long[] temp31 = new long[(int)k];\n\
    \    long[] temp32 = new long[(int)k];\n    long[] temp33 = new long[(int)k];\n\
    \   ", "{\n    auto N = grid.length;\n    auto M = grid[0].length;\n    auto dp\
    \ = new long[][][](N, M, k + 1);\n    auto path = new long[][][](N, M, k + 1);\n\
    \    auto res = new long[][](N, M);\n    for (auto i = 0; i < N; i++)\n    {\n\
    \        for (auto j = 0; j < M; j++)\n        {\n            dp[i][j][1] = grid[i][j];\n\
    \            path[i][j][1] = grid[i][j];\n        }\n    }\n    for (auto i =\
    \ 0; i < N; i++)\n    {\n        for (auto j = 0; j < M; j++)\n        {\n   \
    \         for (auto l = 2; l <= k; l++)\n            {\n                dp[i][j][l]\
    \ = long.max;\n                if (i > 0)\n                {\n               \
    \     if (dp[i - 1][j][l - 1] < dp[i][j][l])\n                    {\n        \
    \                dp[i][j][l] = dp[i - 1][j][l - 1];\n                        path[i][j][l]\
    \ = path[i - 1][j][l - 1];\n                    }\n                    else if\
    \ (dp[i - 1][j][l - 1] == dp[i][j][l])\n                    {\n              \
    \          if (path[i - 1][j][l - 1] < path[i][j][l])\n                      \
    \  {\n                            path[i][j][l] = path[i - 1][j][l - 1];\n   \
    \                     }\n                    }\n                }\n          \
    \      if (j > 0)\n                {\n                    if (dp[i][j - 1][l -\
    \ 1] < dp[i][j][l])\n                    {\n                        dp[i][j][l]\
    \ = dp[i][j - 1][l - 1];\n                        path[i][j][l] = path[i][j -\
    \ 1][l - 1];\n                    }\n                    else if (dp[i][j - 1][l\
    \ - 1]", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto\
    \ dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n            path[i][j] = 1;\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (i\
    \ > 0) {\n                if (dp[i][j] > dp[i - 1][j]) {\n                   \
    \ dp[i][j] = dp[i - 1][j];\n                    path[i][j] = path[i - 1][j];\n\
    \                } else if (dp[i][j] == dp[i - 1][j]) {\n                    path[i][j]\
    \ += path[i - 1][j];\n                }\n            }\n            if (j > 0)\
    \ {\n                if (dp[i][j] > dp[i][j - 1]) {\n                    dp[i][j]\
    \ = dp[i][j - 1];\n                    path[i][j] = path[i][j - 1];\n        \
    \        } else if (dp[i][j] == dp[i][j - 1]) {\n                    path[i][j]\
    \ += path[i][j - 1];\n                }\n            }\n        }\n    }\n   \
    \ auto res = new long[][](n, m);\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = 0; j < m; j++) {\n            res[i][j] = dp[i][j] * path[i][j];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < m; j++) {\n            if (i > 0) {\n                if (res[i][j] > res[i\
    \ - 1][j", "{\n    // your code here\n    long[] result = new long[(int)k];\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j] =\
    \ -1;\n        }\n    }\n    int[][] dir = new int[][]{{0, 1}, {0, -1}, {1, 0},\
    \ {-1, 0}};\n    int[] min = new int[1];\n    min[0] = Integer.MAX_VALUE;\n  \
    \  for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n    \
    \        dfs(grid, dp, dir, i, j, k, 0, 0, min, result);\n        }\n    }\n \
    \   return result;\n}", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n   \
    \         {\n                dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n     \
    \           prev[i - 1][j] = 1;\n            }\n            if (j > 0 && dp[i][j]\
    \ + grid[i][j - 1] < dp[i][j - 1])\n            {\n                dp[i][j - 1]\
    \ = dp[i][j] + grid[i][j - 1];\n                prev[i][j - 1] = 2;\n        \
    \    }\n            if (i < N - 1 && dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n\
    \            {\n                dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n  \
    \              prev[i + 1][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n            {\n                dp[i][j\
    \ + 1] = dp[i][j] + grid[i][j + 1];\n                prev[i][j + 1] = 4;\n   \
    \         }\n        }\n    int[] path = new int[k];\n    int i = N - 1, j = N\
    \ - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        path", "{\n    auto\
    \ n = grid.length;\n    auto m = grid[0].length;\n    auto visited = new bool[][](n,\
    \ m);\n    auto minPath = new long[][](n, m);\n    auto minPathValue = new long[][](n,\
    \ m);\n    auto minPathValueMin = new long[][](n, m);\n    auto minPathValueMax\
    \ = new long[][](n, m);\n    auto minPathValueSum = new long[][](n, m);\n    auto\
    \ minPathValueSumMin = new long[][](n, m);\n    auto minPathValueSumMax = new\
    \ long[][](n, m);\n    auto minPathValueSumMinMax = new long[][](n, m);\n    auto\
    \ minPathValueSumMinMaxSum = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMin\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMax = new long[][](n,\
    \ m);\n    auto minPathValueSumMinMaxSumMinMaxSum = new long[][](n, m);\n    auto\
    \ minPathValueSumMinMaxSumMinMaxSumMin = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMax\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSum =\
    \ new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMin\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMinMax\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMinMaxSum\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMin\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMax\
    \ = new long[][](n, m);\n    auto minPathValueSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSum\
    \ = new long[][](n, m);\n", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][][](n, m, k + 1);\n    auto path = new long[][][](n,\
    \ m, k + 1);\n    foreach (i, j; 0 .. n)\n    {\n        dp[i][j][0] = grid[i][j];\n\
    \        path[i][j][0] = grid[i][j];\n    }\n    foreach (i, j; 0 .. n)\n    {\n\
    \        foreach (l; 1 .. k + 1)\n        {\n            if (i > 0)\n        \
    \    {\n                if (dp[i][j][l] == 0 || dp[i][j][l] > dp[i - 1][j][l -\
    \ 1])\n                {\n                    dp[i][j][l] = dp[i - 1][j][l - 1];\n\
    \                    path[i][j][l] = path[i - 1][j][l - 1];\n                }\n\
    \                if (dp[i][j][l] == dp[i - 1][j][l - 1])\n                {\n\
    \                    path[i][j][l] = min(path[i][j][l], path[i - 1][j][l - 1]);\n\
    \                }\n            }\n            if (i < n - 1)\n            {\n\
    \                if (dp[i][j][l] == 0 || dp[i][j][l] > dp[i + 1][j][l - 1])\n\
    \                {\n                    dp[i][j][l] = dp[i + 1][j][l - 1];\n \
    \                   path[i][j][l] = path[i + 1][j][l - 1];\n                }\n\
    \                if (dp[i][j][l] == dp[i + 1][j][l - 1])\n                {\n\
    \                    path[i][j][l] = min(path[i][j][l], path[i + 1][j][l - 1]);\n\
    \                }\n            }\n            if (j > 0)\n            {\n   \
    \             if (dp[i][j][", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 2;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 3;\n            }\n        }\n    int[]\
    \ path = new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n\
    \    {\n        path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n\
    \            case 0:\n                x--;\n                break;\n         \
    \   case 1:\n                y--;\n                break;\n            case 2:\n\
    \                x++;\n                break;\n            case", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            prev[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 0;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 1;\n            }\n            if (i\
    \ < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n     \
    \       }\n        }\n    }\n    long[] res = new long[k];\n    int i = n - 1;\n\
    \    int j = n - 1;\n    for (int t = k - 1; t >= 0; t--)\n    {\n        res[t]\
    \ = grid[i][j];\n        if (prev[i][j] == 0)\n            i--", "{\n    int N\
    \ = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 1;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 2;\n            }\n            if (i\
    \ + 1 < N && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j + 1 < N && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[k];\n    int i = 0;\n    int j\
    \ = 0;\n    for (int l = 0; l < k; l++)\n    {\n        path[l] = grid[i][j];\n\
    \        if (prev[i][j] == 1)\n            i--;\n        else if (prev[i][j] ==\
    \ 2)\n            j--;\n        else if (prev[i][j] == 3)\n            i", "{\n\
    \    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j <\
    \ N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n         \
    \   if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n               \
    \ dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n      \
    \          dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n   \
    \         }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n     \
    \       {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = 0, y = 0;\n    long[]\
    \ res = new long[(int)k];\n    for (int i = 0; i < k; i++)\n    {\n        res[i]\
    \ = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n        else\
    \ if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y] == 3)\n\
    \            x", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n    {\n        foreach(j;\
    \ 0 .. n)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n\
    \    {\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n       \
    \     {\n                if(dp[i - 1][j] + grid[i][j] < dp[i][j])\n          \
    \      {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n        \
    \            prev[i][j] = 0;\n                }\n            }\n            if(j\
    \ > 0)\n            {\n                if(dp[i][j - 1] + grid[i][j] < dp[i][j])\n\
    \                {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                    prev[i][j] = 1;\n                }\n            }\n     \
    \   }\n    }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j =\
    \ n - 1;\n    foreach(t; 0 .. k)\n    {\n        res[k - t - 1] = grid[i][j];\n\
    \        if(prev[i][j] == 0)\n        {\n            i--;\n        }\n       \
    \ else\n        {\n            j--;\n        }\n    }\n    return res;\n}", "{\n\
    \    // Write your code here\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    long[][] dp2 = new long[n][m];\n    long[][]\
    \ dp3 = new long[n][m];\n    long[][] dp4 = new long[n][m];\n    for (int i =\
    \ 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n    \
    \        dp[i][j] = grid[i][j];\n            dp2[i][j] = grid[i][j];\n       \
    \     dp3[i][j] = grid[i][j];\n            dp4[i][j] = grid[i][j];\n        }\n\
    \    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m;\
    \ j++)\n        {\n            if (i > 0)\n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n            if (j\
    \ > 0)\n            {\n                dp2[i][j] = min(dp2[i][j], dp2[i][j - 1]\
    \ + grid[i][j]);\n            }\n            if (i < n - 1)\n            {\n \
    \               dp3[i][j] = min(dp3[i][j], dp3[i + 1][j] + grid[i][j]);\n    \
    \        }\n            if (j < m - 1)\n            {\n                dp4[i][j]\
    \ = min(dp4[i][j], dp4[i][j + 1] + grid[i][j]);\n            }\n        }\n  \
    \  }\n    long min = dp[n - 1][m - 1];\n    int x = n - 1;\n    int y = m - 1;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0", "{\n    // Write\
    \ your code here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n     \
    \   {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int\
    \ i = 0, j = 0;\n    foreach(idx; 0 .. k)\n    {\n        res[idx] = grid[i][j];\n\
    \        if(i == n - 1 && j == n - 1)\n            break;\n        if(i == n -\
    \ 1)\n            j++;\n        else if(j == n - 1)\n            i++;\n      \
    \  else if(dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n    \
    \        j++;\n    }\n    return res;\n}", "{\n    long n = grid.length;\n   \
    \ long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    foreach (i; 0 .. n)\n    {\n        foreach (j;\
    \ 0 .. n)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n            next[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n \
    \   foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. n)\n        {\n     \
    \       if (i > 0)\n            {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n\
    \                {\n                    dp[i][j] = dp[i - 1][j] + 1;\n       \
    \             prev[i][j] = i - 1;\n                    next[i][j] = j;\n     \
    \           }\n                else if (dp[i - 1][j] + 1 == dp[i][j])\n      \
    \          {\n                    if (grid[i - 1][j] < grid[prev[i][j]][next[i][j]])\n\
    \                    {\n                        prev[i][j] = i - 1;\n        \
    \                next[i][j] = j;\n                    }\n                }\n \
    \           }\n            if (j > 0)\n            {\n                if (dp[i][j\
    \ - 1] + 1 < dp[i][j])\n                {\n                    dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                    prev[i][j] = i;\n                    next[i][j]\
    \ = j - 1;\n                }\n                else if (dp[i][j - 1] + 1 == dp[i][j])\n\
    \                {\n                    if (grid[i][j - 1] < grid[prev[i][j]][next[i][j]])\n\
    \                    {\n                        prev[i][j] = i;\n            \
    \            next[i][j] = j - 1;", "{\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    int[][] path = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j] = int.max;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = 0; j < n; j++) {\n            if (i > 0 && dp[i - 1][j] + 1\
    \ < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j] + 1;\n              \
    \  path[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j]) {\n                dp[i][j] = dp[i][j - 1] + 1;\n                path[i][j]\
    \ = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                path[i][j]\
    \ = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\
    \ {\n                dp[i][j] = dp[i][j + 1] + 1;\n                path[i][j]\
    \ = 4;\n            }\n        }\n    }\n    long[] res = new long[k];\n    int\
    \ x = 0;\n    int y = 0;\n    for (int i = 0; i < k; i++) {\n        res[i] =\
    \ grid[x][y];\n        if (path[x][y] == 1) {\n            x--;\n        } else\
    \ if (path[x][y] == 2) {\n            y--;\n        } else if (path[x][y] == 3",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    long[][] path =\
    \ new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = -1;\n            next[i][j] = -1;\n            path[i][j] =\
    \ -1;\n        }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n       \
    \         prev[i][j] = i - 1;\n                next[i][j] = j;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] < dp[i][j])\n            {\n          \
    \      dp[i][j] = dp[i][j - 1];\n                prev[i][j] = i;\n           \
    \     next[i][j] = j - 1;\n            }\n            if (i < N - 1 && dp[i +\
    \ 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j];\n\
    \                prev[i][j] = i + 1;\n                next[i][j] = j;\n      \
    \      }\n            if (j < N - 1 && dp[i][j + 1] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1];\n                prev[i][j] = i;\n \
    \               next[i][j] = j + 1;\n            }\n        }\n    }\n    long[]",
  "{\n    // Write your code here\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0;\
    \ j < n; j++)\n        {\n            dp[i][j] = int.max;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j\
    \ = 0; j < n; j++)\n        {\n            if (i > 0)\n            {\n       \
    \         dp[i][j] = min(dp[i][j], dp[i - 1][j] + (grid[i][j] < grid[i - 1][j]\
    \ ? 1 : 0));\n            }\n            if (j > 0)\n            {\n         \
    \       dp[i][j] = min(dp[i][j], dp[i][j - 1] + (grid[i][j] < grid[i][j - 1] ?\
    \ 1 : 0));\n            }\n        }\n    }\n    if (dp[n - 1][n - 1] > k)\n \
    \   {\n        return new long[0];\n    }\n    int[][] prev = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            prev[i][j] = -1;\n        }\n    }\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n            {\n                if (dp[i][j] == dp[i - 1][j]\
    \ + (grid[i][j] < grid[i - 1][j] ? 1 : 0))\n                {\n              \
    \      prev[i][j] = 0;\n                }\n            }\n            if (j >\
    \ 0)\n            {\n                if (dp[i][j] == dp[i][j - 1] + (", "{\n \
    \   int N = grid.length;\n    long[][] dp = new long[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ grid[i][j];\n    for (int i = 1; i < N; i++)\n        dp[0][i] += dp[0][i -\
    \ 1];\n    for (int i = 1; i < N; i++)\n        dp[i][0] += dp[i - 1][0];\n  \
    \  for (int i = 1; i < N; i++)\n        for (int j = 1; j < N; j++)\n        \
    \    dp[i][j] += min(dp[i - 1][j], dp[i][j - 1]);\n    long[] res = new long[(int)k];\n\
    \    int i = 0, j = 0;\n    for (int l = 0; l < k; l++)\n    {\n        res[l]\
    \ = grid[i][j];\n        if (i == N - 1)\n            j++;\n        else if (j\
    \ == N - 1)\n            i++;\n        else if (dp[i + 1][j] < dp[i][j + 1])\n\
    \            i++;\n        else\n            j++;\n    }\n    return res;\n}",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] prev\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j\
    \ = 0; j < n; j++)\n        {\n            dp[i][j] = int.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[(int)k];\n\
    \    int x = n - 1;\n    int y = n - 1;\n    for (int i = (int)k - 1; i >= 0;\
    \ i--)\n    {\n        res[i] = grid[x][y];\n        switch (prev[x][y])\n", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    long[][] dist =\
    \ new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = -1;\n            next[i][j] = -1;\n            dist[i][j] =\
    \ -1;\n        }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] >\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n       \
    \         prev[i][j] = i - 1;\n                next[i][j] = j;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] > dp[i][j])\n            {\n          \
    \      dp[i][j] = dp[i][j - 1];\n                prev[i][j] = i;\n           \
    \     next[i][j] = j - 1;\n            }\n            if (i < N - 1 && dp[i +\
    \ 1][j] > dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j];\n\
    \                prev[i][j] = i + 1;\n                next[i][j] = j;\n      \
    \      }\n            if (j < N - 1 && dp[i][j + 1] > dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1];\n                prev[i][j] = i;\n \
    \               next[i][j] = j + 1;\n            }\n        }\n    }\n    long[]",
  "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    auto res = new long[][](n, m);\n\
    \    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n    \
    \        if (i == 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n\
    \                path[i][j] = 0;\n            }\n            else if (i == 0)\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          path[i][j] = 1;\n            }\n            else if (j == 0)\n    \
    \        {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n          \
    \      path[i][j] = 2;\n            }\n            else\n            {\n     \
    \           if (dp[i - 1][j] < dp[i][j - 1])\n                {\n            \
    \        dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j]\
    \ = 2;\n                }\n                else\n                {\n         \
    \           dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    path[i][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    auto i = n - 1;\n\
    \    auto j = m - 1;\n    auto l = k - 1;\n    while (l >= 0)\n    {\n       \
    \ res[l] = grid[i][j];\n        if (path[i][j] == 1)\n        {\n            j--;\n\
    \        }\n        else\n        {\n            i--;\n        }\n        l--;\n\
    \    }\n    return res;\n}", "{\n    // Write your code here\n    long N = grid.length;\n\
    \    long[] res = new long[(int)k];\n    long[][] dp = new long[(int)N][(int)N];\n\
    \    for (int i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            if (i > 0)\n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j]);\n            }\n            if (j > 0)\n            {\n     \
    \           dp[i][j] = min(dp[i][j], dp[i][j - 1]);\n            }\n        }\n\
    \    }\n    int i = 0;\n    int j = 0;\n    for (int l = 0; l < k; l++)\n    {\n\
    \        res[l] = dp[i][j];\n        if (i > 0 && dp[i - 1][j] == dp[i][j])\n\
    \        {\n            i--;\n        }\n        else if (j > 0 && dp[i][j - 1]\
    \ == dp[i][j])\n        {\n            j--;\n        }\n        else\n       \
    \ {\n            i++;\n        }\n    }\n    return res;\n}", "{\n    int n =\
    \ grid.length;\n    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n      \
    \      dp[i][j] = -1;\n    dp[0][0] = grid[0][0];\n    long[][] path = new long[n][m];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n      \
    \      path[i][j] = -1;\n    path[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < m; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] != -1)\n            {\n                if (dp[i][j] == -1 || dp[i][j]\
    \ > dp[i - 1][j] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j];\n                    path[i][j] = i - 1;\n    \
    \            }\n            }\n            if (j > 0 && dp[i][j - 1] != -1)\n\
    \            {\n                if (dp[i][j] == -1 || dp[i][j] > dp[i][j - 1]\
    \ + grid[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1]\
    \ + grid[i][j];\n                    path[i][j] = j - 1;\n                }\n\
    \            }\n        }\n    long[] res = new long[k];\n    int x = n - 1;\n\
    \    int y = m - 1;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] =\
    \ grid[x][y];\n        if (path[x][y] == -1)\n            break;\n        if (path[x][y]\
    \ < n)", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][]\
    \ prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n     \
    \       }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    long[] res = new\
    \ long[k];\n    int i = 0, j = 0;\n    for (int l = 0; l < k; l++)\n    {\n  \
    \      res[l] = grid[i][j];\n        switch (prev[i][j])\n        {\n        \
    \    case 1:\n                i--;\n                break;\n            case 2:\n\
    \                j--;\n                break;\n            case 3:\n         \
    \       i++;\n                break;\n            case", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            prev[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (j < n\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int[] path = new int[k];\n    int x = 0;\n    int y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n       \
    \ switch (prev[x][y])\n        {\n            case 0:\n                x--;\n",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j\
    \ = 0; j < n; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                path[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                path[i][j] = 1;\n            }\n      \
    \      if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                path[i][j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                path[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[k];\n    int\
    \ i = 0;\n    int j = 0;\n    for (int l = 0; l < k; l++)\n    {\n        res[l]\
    \ = grid[i][j];\n        switch (path[i][j])\n        {\n            case 0:\n\
    \                i--;\n", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n          \
    \  dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n              \
    \  dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n      \
    \  }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j = n - 1;\n\
    \    foreach(idx; k)\n    {\n        res[idx - 1] = grid[i][j];\n        if(i\
    \ > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n        else\n\
    \            j--;\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int\
    \ x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n          \
    \          if (abs(x - i) + abs(y - j) == 1)\n                        dp[i][j]\
    \ = min(dp[i][j], grid[i][j] + dp[x][y]);\n    int[] res = new int[(int)k];\n\
    \    res[0] = dp[0][0];\n    int x = 0, y = 0;\n    for (int i = 1; i < k; i++)\n\
    \    {\n        int mn = dp[x][y];\n        int nx = x, ny = y;\n        if (x\
    \ > 0 && dp[x - 1][y] < mn)\n        {\n            mn = dp[x - 1][y];\n     \
    \       nx = x - 1;\n            ny = y;\n        }\n        if (x < n - 1 &&\
    \ dp[x + 1][y] < mn)\n        {\n            mn = dp[x + 1][y];\n            nx\
    \ = x + 1;\n            ny = y;\n        }\n        if (y > 0 && dp[x][y - 1]\
    \ < mn)\n        {\n            mn = dp[x][y - 1];\n            nx = x;\n    \
    \        ny = y - 1;\n        }\n        if (y < n - 1 && dp[x][y + 1] < mn)\n\
    \        {\n            mn = dp[x][y + 1];\n            nx = x;\n            ny\
    \ = y + 1;\n        }\n        res[i] = mn - res[", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int N = grid.length;\n    int[][] grid_int = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      grid_int[i][j] = cast(int)grid[i][j];\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = -1;\n    int[] min_path = new int[k];\n    int[] min_path_value\
    \ = new int[k];\n    int[] min_path_value_copy = new int[k];\n    int[] min_path_copy\
    \ = new int[k];\n    int min_path_value_sum = int.max;\n    int[][] directions\
    \ = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    int[] path = new int[k];\n    int[]\
    \ path_value = new int[k];\n    int[] path_value_copy = new int[k];\n    int[]\
    \ path_copy = new int[k];\n    int path_value_sum = 0;\n    int[] start = [0,\
    \ 0];\n    int[] end = [0, 0];\n    int[] current = [0, 0];\n    int[] next =\
    \ [0, 0];\n    int[] direction = [0, 0];\n    int[] temp = [0, 0];\n    int[][]\
    \ visited = new int[N][N];\n    int[][] visited_copy = new int[N][N];\n    int[][]\
    \ visited_copy_2 = new int[N][N];\n    int[][] visited_copy_3 = new int[N][N];\n\
    \    int[][] visited_copy_4 = new int[N][N];\n    int[][] visited_copy_5 = new\
    \ int[N][N];\n    int[][] visited_copy_6 = new int[N][N];\n    int[][] visited_copy_7\
    \ = new", "{\n    auto N = grid.length;\n    auto M = grid[0].length;\n    auto\
    \ dp = new long[][][]();\n    foreach (i; 0 .. N)\n    {\n        dp ~= new long[][]();\n\
    \        foreach (j; 0 .. M)\n        {\n            dp[i] ~= new long[]();\n\
    \            foreach (l; 0 .. k)\n            {\n                dp[i][j] ~= 0L;\n\
    \            }\n        }\n    }\n    foreach (i; 0 .. N)\n    {\n        foreach\
    \ (j; 0 .. M)\n        {\n            dp[i][j][0] = grid[i][j];\n        }\n \
    \   }\n    foreach (l; 1 .. k)\n    {\n        foreach (i; 0 .. N)\n        {\n\
    \            foreach (j; 0 .. M)\n            {\n                dp[i][j][l] =\
    \ dp[i][j][l - 1];\n                if (i > 0)\n                {\n          \
    \          dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1]);\n            \
    \    }\n                if (i < N - 1)\n                {\n                  \
    \  dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n \
    \               if (j > 0)\n                {\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j - 1][l - 1]);\n                }\n              \
    \  if (j < M - 1)\n                {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    auto res = new long[]();\n    auto cur = tuple(0L, 0L);\n    foreach (l;\
    \ 0 .. k)\n    {\n        res ~= dp[cur[0]][cur[1]][l];\n        if (cur", "{\n\
    \    auto N = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[][][](N,\
    \ M, k + 1);\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. M)\n  \
    \      {\n            foreach (l; 0 .. k + 1)\n            {\n               \
    \ dp[i][j][l] = long.max;\n            }\n        }\n    }\n    foreach (i; 0\
    \ .. N)\n    {\n        foreach (j; 0 .. M)\n        {\n            dp[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    foreach (i; 0 .. N)\n    {\n        foreach\
    \ (j; 0 .. M)\n        {\n            foreach (l; 2 .. k + 1)\n            {\n\
    \                if (i > 0)\n                {\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i - 1][j][l - 1]);\n                }\n              \
    \  if (i < N - 1)\n                {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j > 0)\n     \
    \           {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j - 1][l\
    \ - 1]);\n                }\n                if (j < M - 1)\n                {\n\
    \                    dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l - 1]);\n  \
    \              }\n            }\n        }\n    }\n    auto ans = new long[k];\n\
    \    auto cur = tuple(0L, 0L, k);\n    foreach (i; 0 .. k)\n    {\n        ans[i]\
    \ = grid[cur[0]][cur[1]];\n        if (cur[0] > 0 && dp[cur[0] - 1][cur[1]][cur[2]\
    \ - 1] == dp[cur", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 3;\n            }\n        }\n    long[] res = new\
    \ long[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n  \
    \      res[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n        \
    \    case 0:\n                x--;\n                break;\n            case 1:\n\
    \                y--;\n                break;\n            case 2:\n         \
    \       x++;\n                break;\n            case", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            prev[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (j < n\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int[] path = new int[k];\n    int x = 0;\n    int y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n       \
    \ switch (prev[x][y])\n        {\n            case 0:\n                x--;\n",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0 && dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n            {\n\
    \                dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n                prev[i\
    \ - 1][j] = j;\n            }\n            if (j > 0 && dp[i][j] + grid[i][j -\
    \ 1] < dp[i][j - 1])\n            {\n                dp[i][j - 1] = dp[i][j] +\
    \ grid[i][j - 1];\n                prev[i][j - 1] = j;\n            }\n      \
    \      if (i < N - 1 && dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n          \
    \  {\n                dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n            \
    \    prev[i + 1][j] = j;\n            }\n            if (j < N - 1 && dp[i][j]\
    \ + grid[i][j + 1] < dp[i][j + 1])\n            {\n                dp[i][j + 1]\
    \ = dp[i][j] + grid[i][j + 1];\n                prev[i][j + 1] = j;\n        \
    \    }\n        }\n    int[] path = new int[k];\n    path[0] = 0;\n    for (int\
    \ i = 1; i < k; i++)\n        path[i] = prev[path[i - 1]", "{\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    int[][] dp = new int[n][m];\n    int[][] prev\
    \ = new int[n][m];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < m; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n        {\n       \
    \     if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n             \
    \   dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n          \
    \  }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n\
    \            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < m - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = 0;\n    int y = 0;\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n     \
    \   res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n   \
    \     else if (prev[x][y] == 2)\n            y--;\n        else if (prev", "{\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + (grid[i][j] < grid[i - 1][j] ? 1 : 0));\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + (grid[i][j] < grid[i][j\
    \ - 1] ? 1 : 0));\n        }\n    int[] path = new int[k];\n    int i = n - 1;\n\
    \    int j = n - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        path[l]\
    \ = grid[i][j];\n        if (i > 0 && dp[i][j] == dp[i - 1][j] + (grid[i][j] <\
    \ grid[i - 1][j] ? 1 : 0))\n            i--;\n        else\n            j--;\n\
    \    }\n    return path;\n}", "{\n    int N = grid.length;\n    int K = cast(int)k;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            dp[i][j] = cast(int)grid[i][j];\n            prev[i][j] = -1;\n \
    \       }\n    }\n    for (int i = 1; i < K; i++)\n    {\n        for (int j =\
    \ 0; j < N; j++)\n        {\n            for (int l = 0; l < N; l++)\n       \
    \     {\n                int min = dp[j][l];\n                int min_prev = prev[j][l];\n\
    \                if (j > 0 && dp[j - 1][l] < min)\n                {\n       \
    \             min = dp[j - 1][l];\n                    min_prev = 0;\n       \
    \         }\n                if (j < N - 1 && dp[j + 1][l] < min)\n          \
    \      {\n                    min = dp[j + 1][l];\n                    min_prev\
    \ = 1;\n                }\n                if (l > 0 && dp[j][l - 1] < min)\n\
    \                {\n                    min = dp[j][l - 1];\n                \
    \    min_prev = 2;\n                }\n                if (l < N - 1 && dp[j][l\
    \ + 1] < min)\n                {\n                    min = dp[j][l + 1];\n  \
    \                  min_prev = 3;\n                }\n                dp[j][l]\
    \ += min;\n                prev[j][l] = min_prev;\n            }\n        }\n\
    \    }\n    int min = dp[0][0];\n    int min_prev = prev[0][0];\n    int min_i\
    \ = 0;\n    int min_j = 0;\n    for (int i = 0; i < N; i++)\n    {\n        for\
    \ (int j = 0; j < N; j++)\n        {\n", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 3;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n            }\n      \
    \  }\n    int cur_i = 0;\n    int cur_j = 0;\n    long[] res = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[cur_i][cur_j];\n\
    \        if (prev[cur_i][cur_j] == 1)\n            cur_i--;\n        else if (prev[cur_i][cur_j]\
    \ == 2)\n            cur_", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            dp[i][j] =\
    \ int.max;\n            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 2;\n            }\n            if (j < n - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 3;\n            }\n        }\n    }\n\
    \    long[] res = new long[(int)k];\n    int x = n - 1;\n    int y = n - 1;\n\
    \    for (int i = (int)k - 1; i >= 0; i--)\n    {\n        res[i] = grid[x][y];\n\
    \        switch (prev[x][y])\n", "{\n    int N = grid.length;\n    long[] res\
    \ = new long[(int)k];\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n         \
    \   }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = 0, y = 0;\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n        if (prev[x][y]\
    \ == 1)\n            x--;\n        else if (prev[x][y] == 2)\n            y--;\n\
    \        else if (prev[x][y] == 3)\n            x", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int\
    \ x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n          \
    \          if (i != x || j != y)\n                        dp[i][j] = min(dp[i][j],\
    \ dp[x][y] + abs(i - x) + abs(j - y));\n    int[] res = new int[(int)k];\n   \
    \ int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] =\
    \ grid[x][y];\n        int min = dp[x][y];\n        if (x > 0 && dp[x - 1][y]\
    \ < min)\n        {\n            min = dp[x - 1][y];\n            x--;\n     \
    \   }\n        else if (x < n - 1 && dp[x + 1][y] < min)\n        {\n        \
    \    min = dp[x + 1][y];\n            x++;\n        }\n        else if (y > 0\
    \ && dp[x][y - 1] < min)\n        {\n            min = dp[x][y - 1];\n       \
    \     y--;\n        }\n        else if (y < n - 1 && dp[x][y + 1] < min)\n   \
    \     {\n            min = dp[x][y + 1];\n            y++;\n        }\n    }\n\
    \    return res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    int i = 0;\n    int j = 0;\n  \
    \  for (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        if\
    \ (i == n - 1 && j == n - 1)\n            break;\n        if (i == n - 1)\n  \
    \          j++;\n        else if (j == n - 1)\n            i++;\n        else\
    \ if (dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n         \
    \   j++;\n    }\n    return res;\n}", "{\n    // Write your code here\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j] = int.max;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = 0; j < n; j++) {\n            if (i > 0) {\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n      \
    \      if (j > 0) {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \            }\n        }\n    }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dp2[i][j]\
    \ = int.max;\n        }\n    }\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n\
    \ - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n          \
    \  if (i < n - 1) {\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j]\
    \ + grid[i][j]);\n            }\n            if (j < n - 1) {\n              \
    \  dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n            }\n  \
    \      }\n    }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++) {\n        for (int j = 0; j < n; j++) {\n           ", "{\n    long N\
    \ = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n\
    \    long[][] next = new long[N][N];\n    long[][] path = new long[N][N];\n  \
    \  long[][] path_prev = new long[N][N];\n    long[][] path_next = new long[N][N];\n\
    \    long[][] path_prev_prev = new long[N][N];\n    long[][] path_next_next =\
    \ new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = grid[i][j];\n            next[i][j] = grid[i][j];\n        \
    \    path[i][j] = grid[i][j];\n            path_prev[i][j] = grid[i][j];\n   \
    \         path_next[i][j] = grid[i][j];\n            path_prev_prev[i][j] = grid[i][j];\n\
    \            path_next_next[i][j] = grid[i][j];\n        }\n    }\n    for (long\
    \ i = 1; i < k; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n\
    \            for (long l = 0; l < N; l++)\n            {\n                prev[j][l]\
    \ = next[j][l];\n                path_prev[j][l] = path_next[j][l];\n        \
    \        path_prev_prev[j][l] = path_next_next[j][l];\n            }\n       \
    \ }\n        for (long j = 0; j < N; j++)\n        {\n            for (long l\
    \ = 0; l < N; l++)\n            {\n                if (j > 0)\n              \
    \  {\n                    if (prev[j - 1][l] < next[j][l])\n                 \
    \   {\n                        next[j][l", "{\n    import std.algorithm;\n   \
    \ import std.array;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;", "{\n    int N = grid.length;\n    long[]\
    \ res = new long[(int)k];\n    int[][] dp = new int[N][N];\n    int[][] prev =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j\
    \ < N; j++) {\n            dp[i][j] = Integer.MAX_VALUE;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\
    \ {\n        for (int j = 0; j < N; j++) {\n            if (i > 0 && dp[i - 1][j]\
    \ + 1 < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j] + 1;\n          \
    \      prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] +\
    \ 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j - 1] + 1;\n            \
    \    prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j]\
    \ + 1 < dp[i][j]) {\n                dp[i][j] = dp[i + 1][j] + 1;\n          \
    \      prev[i][j] = 2;\n            }\n            if (j < N - 1 && dp[i][j +\
    \ 1] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j + 1] + 1;\n       \
    \         prev[i][j] = 3;\n            }\n        }\n    }\n    int x = N - 1;\n\
    \    int y = N - 1;\n    for (int i = (int)k - 1; i >= 0; i--) {\n        res[i]\
    \ = grid[x][y];\n        if (prev[x][y] == 0) {\n            x--;\n        } else\
    \ if (prev[", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    prev[0][0] = -1;\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    long[] res = new long[k];\n    int x = 0, y = 0;\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        res[i] = grid[x][y];\n        switch (prev[x][y])\n\
    \        {\n            case 0:\n                x--;\n                break;\n\
    \            case 1:\n                y--;\n                break;\n         \
    \   case 2", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n \
    \   for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n       \
    \     dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[] path = new int[k];\n    int x = 0, y = 0;\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n        if (x < N\
    \ - 1 && dp[x + 1][y] + grid[x][y] == dp[x][y])\n            x++;\n        else\n\
    \            y++;\n    }\n    return path;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    for\
    \ (int i = 0; i < k; i++)\n        res[i] = grid[0][0];\n    int x = 0, y = 0;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        if (x < n - 1 && dp[x + 1][y]\
    \ == dp[x][y] + grid[x + 1][y])\n        {\n            x++;\n            res[i]\
    \ = grid[x][y];\n        }\n        else if (y < n - 1 && dp[x][y + 1] == dp[x][y]\
    \ + grid[x][y + 1])\n        {\n            y++;\n            res[i] = grid[x][y];\n\
    \        }\n    }\n    return res;\n}", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    for (long i = 0; i < n; i++)\n        for (long j\
    \ = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (long i = 1; i\
    \ < k; i++)\n    {\n        long[][] tmp = new long[n][n];\n        for (long\
    \ j = 0; j < n; j++)\n            for (long l = 0; l < n; l++)\n            {\n\
    \                long min = dp[j][l];\n                if (j > 0 && dp[j - 1][l]\
    \ < min)\n                    min = dp[j - 1][l];\n                if (j < n -\
    \ 1 && dp[j + 1][l] < min)\n                    min = dp[j + 1][l];\n        \
    \        if (l > 0 && dp[j][l - 1] < min)\n                    min = dp[j][l -\
    \ 1];\n                if (l < n - 1 && dp[j][l + 1] < min)\n                \
    \    min = dp[j][l + 1];\n                tmp[j][l] = min;\n            }\n  \
    \      dp = tmp;\n    }\n    long[] res = new long[k];\n    long i = 0;\n    long\
    \ j = 0;\n    for (long l = 0; l < k; l++)\n    {\n        res[l] = dp[i][j];\n\
    \        long min = dp[i][j];\n        if (i > 0 && dp[i - 1][j] < min)\n    \
    \    {\n            min = dp[i - 1][j];\n            i--;\n        }\n       \
    \ else if (i < n - 1 && dp[i + 1][j] < min)\n        {\n            min = dp[i\
    \ + 1][j];\n            i++;\n        }\n        else if (j > 0 && dp[i][j - 1]\
    \ < min)\n        {\n            min = dp[i][j - 1];\n            j--;", "{\n\
    \    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new\
    \ int[k];\n    int cur = dp[N - 1][N - 1];\n    int i = N - 1;\n    int j = N\
    \ - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        path[l] = grid[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == cur)\n        {\n         \
    \   cur -= grid[i][j];\n            i--;\n        }\n        else if (j > 0 &&\
    \ dp[i][j - 1] + grid[i][j] == cur)\n        {\n            cur -= grid[i][j];\n\
    \            j--;\n        }\n    }\n    return path;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int\
    \ x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n          \
    \          if (abs(x - i) + abs(y - j) == 1)\n                        dp[i][j]\
    \ = min(dp[i][j], dp[x][y]);\n    long[] res = new long[(int)k];\n    for (int\
    \ i = 0; i < k; i++)\n        res[i] = dp[0][0];\n    return res;\n}", "{\n  \
    \  int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n    {\n        for (int j = 0;\
    \ j < N; j++)\n        {\n            dp[i][j] = int.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \    {\n        for (int j = 0; j < N; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n     \
    \       }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    int i = N - 1;\n    int j = N - 1;\n\
    \    long[] res = new long[k];\n    for (int l = k - 1; l >= 0; l--)\n    {\n\
    \        res[l] = grid[i][j];\n        if (prev[i][j] == 0)\n            i--",
  "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            if (i > 0 && dp[i][j] > dp[i - 1][j] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = 2;\n            }\n            if (i < n - 1 && dp[i][j]\
    \ > dp[i + 1][j] + grid[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j] + grid[i][j];\n                prev[i][j] = 3;\n            }\n    \
    \        if (j < n - 1 && dp[i][j] > dp[i][j + 1] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1] + grid[i][j];\n                prev[i][j]\
    \ = 4;\n            }\n        }\n    }\n    long[] res = new long[k];\n    long\
    \ i = n - 1;\n    long j = n - 1;\n    for (long l = k - 1;", "{\n    long N =\
    \ grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n\
    \    long[][] next = new long[N][N];\n    long[][] visited = new long[N][N];\n\
    \    long[][] path = new long[N][N];\n    long[][] path_prev = new long[N][N];\n\
    \    long[][] path_next = new long[N][N];\n    long[][] path_visited = new long[N][N];\n\
    \    long[][] path_visited_prev = new long[N][N];\n    long[][] path_visited_next\
    \ = new long[N][N];\n    long[][] path_visited_prev_prev = new long[N][N];\n \
    \   long[][] path_visited_next_next = new long[N][N];\n    long[][] path_visited_prev_prev_prev\
    \ = new long[N][N];\n    long[][] path_visited_next_next_next = new long[N][N];\n\
    \    long[][] path_visited_prev_prev_prev_prev = new long[N][N];\n    long[][]\
    \ path_visited_next_next_next_next = new long[N][N];\n    long[][] path_visited_prev_prev_prev_prev_prev\
    \ = new long[N][N];\n    long[][] path_visited_next_next_next_next_next = new\
    \ long[N][N];\n    long[][] path_visited_prev_prev_prev_prev_prev_prev = new long[N][N];\n\
    \    long[][] path_visited_next_next_next_next_next_next = new long[N][N];\n \
    \   long[][] path_visited_prev_prev_prev_prev_prev_prev_prev = new long[N][N];\n\
    \    long[][] path_visited_next_next_next_next_next_next_next = new long[N][N];\n\
    \    long[][] path_vis", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[] path = new int[k];\n    int cur = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            if (dp[i][j] ==\
    \ cur)\n            {\n                path[cur] = grid[i][j];\n             \
    \   cur++;\n                if (cur == k)\n                    return path;\n\
    \                if (i > 0)\n                    dp[i - 1][j] = int.max;\n   \
    \             if (j > 0)\n                    dp[i][j - 1] = int.max;\n      \
    \      }\n    return path;\n}", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     for (int j = 0; j < n; j++)\n        {\n            dp[i][j] = int.max;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \        {\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + (grid[i][j]\
    \ < grid[i - 1][j] ? 1 : 0));\n            }\n            if (j > 0)\n       \
    \     {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + (grid[i][j] <\
    \ grid[i][j - 1] ? 1 : 0));\n            }\n        }\n    }\n    int[] path =\
    \ new int[k];\n    int i = n - 1;\n    int j = n - 1;\n    for (int p = k - 1;\
    \ p >= 0; p--)\n    {\n        path[p] = grid[i][j];\n        if (i > 0 && dp[i][j]\
    \ == dp[i - 1][j] + (grid[i][j] < grid[i - 1][j] ? 1 : 0))\n        {\n      \
    \      i--;\n        }\n        else\n        {\n            j--;\n        }\n\
    \    }\n    return path;\n}", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n\
    \    {\n        foreach(j; 0 .. n)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[k];\n    long\
    \ i = n - 1;\n    long j = n - 1;\n    foreach(x; 0 .. k)\n    {\n        res[x]\
    \ = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n            i--;\n \
    \       }\n        else if (prev[i][j] == 1)\n       ", "{\n    long N = grid.length;\n\
    \    long[] result = new long[(int)k];\n    long[][] dp = new long[(int)N][(int)N];\n\
    \    long[][] prev = new long[(int)N][(int)N];\n    long[][] next = new long[(int)N][(int)N];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[(int)i][(int)j] = grid[(int)i][(int)j];\n         \
    \   prev[(int)i][(int)j] = -1;\n            next[(int)i][(int)j] = -1;\n     \
    \   }\n    }\n    for (long i = 0; i < k - 1; i++)\n    {\n        for (long j\
    \ = 0; j < N; j++)\n        {\n            for (long l = 0; l < N; l++)\n    \
    \        {\n                long min = dp[(int)j][(int)l];\n                long\
    \ min_i = j;\n                long min_j = l;\n                if (j > 0 && dp[(int)j\
    \ - 1][(int)l] < min)\n                {\n                    min = dp[(int)j\
    \ - 1][(int)l];\n                    min_i = j - 1;\n                    min_j\
    \ = l;\n                }\n                if (j < N - 1 && dp[(int)j + 1][(int)l]\
    \ < min)\n                {\n                    min = dp[(int)j + 1][(int)l];\n\
    \                    min_i = j + 1;\n                    min_j = l;\n        \
    \        }\n                if (l > 0 && dp[(int)j][(int)l - 1] < min)\n     \
    \           {\n                    min = dp[(int)j][(int)l - 1];\n           \
    \         min_i = j;\n                    min_j = l - 1;\n                }\n\
    \                if (l < N - 1 && dp[(int)", "{\n    int n = grid.length;\n  \
    \  int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int x = 0;\
    \ x < n; x++)\n                for (int y = 0; y < n; y++)\n                 \
    \   if (i != x || j != y)\n                        dp[i][j] = min(dp[i][j], dp[x][y]\
    \ + grid[i][j]);\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = dp[i][j];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      for (int x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n\
    \                    if (i != x || j != y)\n                        dp2[i][j]\
    \ = min(dp2[i][j], dp[x][y] + dp[i][j]);\n    int[][] dp3 = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n       \
    \     dp3[i][j] = dp2[i][j];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            for (int x = 0; x < n; x++)\n              \
    \  for (int y = 0; y < n; y++)\n                    if (i != x || j != y)\n  \
    \                      dp3[i][j] = min(dp3[i][j], dp2[x", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    long[][] prev = new long[grid.length][grid[0].length];\n\
    \    long[][] next = new long[grid.length][grid[0].length];\n    long[][] dir\
    \ = new long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    long[][] dir_prev = new long[][]{{0,-1},{-1,0},{0,1},{1,0}};\n\
    \    long[][] dir_next = new long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    long[][]\
    \ dir_prev_next = new long[][]{{0,-1},{-1,0},{0,1},{1,0}};\n    long[][] dir_next_prev\
    \ = new long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    long[][] dir_next_next = new\
    \ long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    long[][] dir_prev_prev = new long[][]{{0,-1},{-1,0},{0,1},{1,0}};\n\
    \    long[][] dir_prev_prev_prev = new long[][]{{0,-1},{-1,0},{0,1},{1,0}};\n\
    \    long[][] dir_next_next_next = new long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n\
    \    long[][] dir_prev_prev_prev_prev = new long[][]{{0,-1},{-1,0},{0,1},{1,0}};\n\
    \    long[][] dir_next_next_next_next = new long[][]{{0,1},{1,0},{0,-1},{-1,0}};\n\
    \    long[][] dir_prev_prev_prev", "{\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    int[][] from = new int[n][n];\n    int[][] to = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                from[i][j] = i - 1;\n                to[i][j] = j;\n \
    \           }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j - 1] + 1;\n                from[i][j]\
    \ = i;\n                to[i][j] = j - 1;\n            }\n            if (i <\
    \ n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                from[i][j] = i + 1;\n                to[i][j]\
    \ = j;\n            }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ from[i][j] = i;\n                to[i][j] = j + 1;\n            }\n        }\n\
    \    long[] res = new long[(int)k];\n    int cur = n - 1;\n    for (int i = (int)k\
    \ - 1; i >= 0; i--", "{\n    // Write your code here\n    // To print results\
    \ to the standard output you can use Console.WriteLine()\n    // Example: Console.WriteLine(\"\
    Hello world!\");\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] =\
    \ 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0)\n            {\n                dp[i][j] =\
    \ min(dp[i][j], dp[i - 1][j] + (grid[i][j] < grid[i - 1][j] ? 1 : 0));\n     \
    \       }\n            if (j > 0)\n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + (grid[i][j] < grid[i][j - 1] ? 1 : 0));\n            }\n    \
    \    }\n    }\n    int[] path = new int[k];\n    int i = n - 1;\n    int j = n\
    \ - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        path[l] = grid[i][j];\n\
    \        if (i > 0 && dp[i][j] == dp[i - 1][j] + (grid[i][j] < grid[i - 1][j]\
    \ ? 1 : 0))\n        {\n            i--;\n        }\n        else\n        {\n\
    \            j--;\n        }\n    }\n    return path;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n  \
    \          prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j];\n                prev[i][j] = (i - 1)\
    \ * n + j;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1])\n\
    \            {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j]\
    \ = i * n + j - 1;\n            }\n            if (i < n - 1 && dp[i][j] > dp[i\
    \ + 1][j])\n            {\n                dp[i][j] = dp[i + 1][j];\n        \
    \        prev[i][j] = (i + 1) * n + j;\n            }\n            if (j < n -\
    \ 1 && dp[i][j] > dp[i][j + 1])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1];\n                prev[i][j] = i * n + j + 1;\n            }\n        }\n\
    \    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j <\
    \ n; j++)\n        {\n            if (prev[i][j] == -1)\n            {\n     \
    \          ", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n\
    \ - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1;\
    \ j >= 0; j--)\n        {\n            if (i < n - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n         \
    \       dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int min =\
    \ int.max;\n    int x = 0;\n    int y = 0;\n    for (int i = 0; i < n;", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    foreach (i; 0 ..\
    \ N)\n    {\n        foreach (j; 0 .. N)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n\
    \        {\n            if (i > 0)\n            {\n                if (dp[i][j]\
    \ + grid[i - 1][j] < dp[i - 1][j])\n                {\n                    dp[i\
    \ - 1][j] = dp[i][j] + grid[i - 1][j];\n                    prev[i - 1][j] = i\
    \ * N + j;\n                }\n            }\n            if (j > 0)\n       \
    \     {\n                if (dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n     \
    \           {\n                    dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n\
    \                    prev[i][j - 1] = i * N + j;\n                }\n        \
    \    }\n            if (i < N - 1)\n            {\n                if (dp[i][j]\
    \ + grid[i + 1][j] < dp[i + 1][j])\n                {\n                    dp[i\
    \ + 1][j] = dp[i][j] + grid[i + 1][j];\n                    prev[i + 1][j] = i\
    \ * N + j;\n                }\n            }\n            if (j < N - 1)\n   \
    \         {\n                if (dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n \
    \               {\n                    dp[i][j + 1] = dp", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][]\
    \ next = new long[N][N];\n    foreach (i; 0 .. N)\n    {\n        foreach (j;\
    \ 0 .. N)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n            next[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n \
    \   foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n     \
    \       if (i > 0)\n            {\n                if (dp[i][j] + grid[i - 1][j]\
    \ < dp[i - 1][j])\n                {\n                    dp[i - 1][j] = dp[i][j]\
    \ + grid[i - 1][j];\n                    prev[i - 1][j] = i * N + j;\n       \
    \         }\n            }\n            if (j > 0)\n            {\n          \
    \      if (dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n                {\n    \
    \                dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n                 \
    \   prev[i][j - 1] = i * N + j;\n                }\n            }\n          \
    \  if (i < N - 1)\n            {\n                if (dp[i][j] + grid[i + 1][j]\
    \ < dp[i + 1][j])\n                {\n                    dp[i + 1][j] = dp[i][j]\
    \ + grid[i + 1][j];\n                    prev[i + 1][j] = i * N + j;\n       \
    \         }\n            }\n            if (j < N - 1)\n            {\n      \
    \          if (dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n                {\n\
    \                    dp[i][j + 1] = dp", "{\n    // write your code here\n   \
    \ int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0;\
    \ j < n; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                path[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                path[i][j] = 1;\n            }\n      \
    \      if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                path[i][j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                path[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[(int)k];\n\
    \    int i = 0;\n    int j = 0;\n    for (int l = 0; l < k; l++)\n    {\n    \
    \    res[l] = grid[i][j];\n        switch (path[i][j])\n        {\n", "{\n   \
    \ int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i\
    \ < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = grid[0][0];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n \
    \   long[] res = new long[k];\n    int x = 0, y = 0;\n    for (int i = 0; i <\
    \ k; i++)\n    {\n        res[i] = grid[x][y];\n        if (x < n - 1 && dp[x\
    \ + 1][y] < dp[x][y + 1])\n            x++;\n        else\n            y++;\n\
    \    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[] res = new\
    \ long[(int)k];\n    long[][] dp = new long[(int)N][(int)N];\n    for (long i\
    \ = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n            dp[(int)i][(int)j]\
    \ = grid[(int)i][(int)j];\n    for (long i = 0; i < N; i++)\n        for (long\
    \ j = 0; j < N; j++)\n            for (long x = 0; x < N; x++)\n             \
    \   for (long y = 0; y < N; y++)\n                    if (abs(i - x) + abs(j -\
    \ y) == 1)\n                        dp[(int)i][(int)j] = min(dp[(int)i][(int)j],\
    \ grid[(int)i][(int)j] + dp[(int)x][(int)y]);\n    long min = dp[0][0];\n    long\
    \ x = 0;\n    long y = 0;\n    for (long i = 0; i < N; i++)\n        for (long\
    \ j = 0; j < N; j++)\n            if (dp[(int)i][(int)j] < min)\n            {\n\
    \                min = dp[(int)i][(int)j];\n                x = i;\n         \
    \       y = j;\n            }\n    res[0] = grid[(int)x][(int)y];\n    for (long\
    \ i = 1; i < k; i++)\n    {\n        long min1 = dp[(int)x][(int)y];\n       \
    \ long x1 = x;\n        long y1 = y;\n        for (long j = 0; j < N; j++)\n \
    \           for (long l = 0; l < N; l++)\n                if (abs(x - j) + abs(y\
    \ - l) == 1)\n                    if (dp[(int)j][(int)l] < min1)\n           \
    \         {\n                        min1 = dp[(int)j][(int)", "{\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int\
    \ x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n\
    \        if (x == n - 1 && y == n - 1)\n            break;\n        if (x == n\
    \ - 1)\n            y++;\n        else if (y == n - 1)\n            x++;\n   \
    \     else if (dp[x + 1][y] < dp[x][y + 1])\n            x++;\n        else\n\
    \            y++;\n    }\n    return path;\n}", "{\n    auto n = grid.length;\n\
    \    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n    auto path\
    \ = new long[][](n, m);\n    dp[0][0] = grid[0][0];\n    path[0][0] = 0;\n   \
    \ for (long i = 1; i < n; i++)\n    {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n\
    \        path[i][0] = i - 1;\n    }\n    for (long j = 1; j < m; j++)\n    {\n\
    \        dp[0][j] = dp[0][j - 1] + grid[0][j];\n        path[0][j] = j - 1;\n\
    \    }\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = 1; j <\
    \ m; j++)\n        {\n            if (dp[i - 1][j] < dp[i][j - 1])\n         \
    \   {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n               \
    \ path[i][j] = i - 1;\n            }\n            else\n            {\n      \
    \          dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j] =\
    \ j - 1;\n            }\n        }\n    }\n    auto res = new long[k];\n    auto\
    \ i = n - 1;\n    auto j = m - 1;\n    for (long l = k - 1; l >= 0; l--)\n   \
    \ {\n        res[l] = grid[i][j];\n        auto tmp = path[i][j];\n        if\
    \ (tmp < j)\n        {\n            j = tmp;\n        }\n        else\n      \
    \  {\n            i = tmp;\n        }\n    }\n    return res;\n}", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[] res = new\
    \ int[k];\n    for (int i = 0; i < k; i++)\n        res[i] = grid[0][0];\n   \
    \ int cur = 0;\n    int x = 0;\n    int y = 0;\n    while (cur < k)\n    {\n \
    \       if (x + 1 < N && dp[x + 1][y] == dp[x][y] + grid[x + 1][y])\n        {\n\
    \            x++;\n            res[cur] = grid[x][y];\n        }\n        else\
    \ if (y + 1 < N && dp[x][y + 1] == dp[x][y] + grid[x][y + 1])\n        {\n   \
    \         y++;\n            res[cur] = grid[x][y];\n        }\n        cur++;\n\
    \    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 4;\n            }\n        }\n    long[]\
    \ res = new long[k];\n    int i = 0, j = 0;\n    for (int t = 0; t < k; t++)\n\
    \    {\n        res[t] = grid[i][j];\n        if (prev[i][j] == 1)\n         \
    \   i--;\n        else if (prev[i][j] == 2)\n            j--;\n        else if\
    \ (prev[i][j] == 3)\n            i++;\n       ", "{\n    auto n = grid.length;\n\
    \    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n    auto path\
    \ = new long[][](n, m);\n    auto res = new long[][](n, m);\n    for (int i =\
    \ 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n    \
    \        dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n            res[i][j]\
    \ = grid[i][j];\n        }\n    }\n    for (int i = 1; i < n; i++)\n    {\n  \
    \      for (int j = 0; j < m; j++)\n        {\n            if (dp[i - 1][j] <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n       \
    \         path[i][j] = path[i - 1][j];\n                res[i][j] = res[i - 1][j];\n\
    \            }\n            else if (dp[i - 1][j] == dp[i][j])\n            {\n\
    \                path[i][j] += path[i - 1][j];\n                if (res[i - 1][j]\
    \ < res[i][j])\n                {\n                    res[i][j] = res[i - 1][j];\n\
    \                }\n            }\n        }\n    }\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        for (int j = 1; j < m; j++)\n        {\n            if\
    \ (dp[i][j - 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1];\n                path[i][j] = path[i][j - 1];\n                res[i][j]\
    \ = res[i][j - 1];\n            }\n            else if (dp[i][j - 1] == dp[i][j])\n\
    \            {\n                path[i][j] += path[i][j - 1];", "{\n    int n\
    \ = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j] = int.max;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = 0; j < n; j++) {\n            if (i > 0) {\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n      \
    \      if (j > 0) {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \            }\n        }\n    }\n    long[] res = new long[k];\n    int i = 0;\n\
    \    int j = 0;\n    for (int l = 0; l < k; l++) {\n        res[l] = grid[i][j];\n\
    \        if (i < n - 1 && dp[i + 1][j] < dp[i][j + 1]) {\n            i++;\n \
    \       } else {\n            j++;\n        }\n    }\n    return res;\n}", "{\n\
    \    int n = grid.length;\n    if (n == 0) return new long[0];\n    int m = grid[0].length;\n\
    \    if (m == 0) return new long[0];\n    if (k == 0) return new long[0];\n  \
    \  if (k == 1) return new long[]{grid[0][0]};\n    if (k == n * m)\n    {\n  \
    \      long[] res = new long[k];\n        int i = 0;\n        foreach (row; grid)\n\
    \            foreach (elem; row)\n                res[i++] = elem;\n        return\
    \ res;\n    }\n    long[][] dp = new long[n][m];\n    foreach (i, row; grid)\n\
    \        foreach (j, elem; row)\n            dp[i][j] = elem;\n    for (int i\
    \ = 1; i < n; i++)\n        dp[i][0] += dp[i - 1][0];\n    for (int j = 1; j <\
    \ m; j++)\n        dp[0][j] += dp[0][j - 1];\n    for (int i = 1; i < n; i++)\n\
    \        for (int j = 1; j < m; j++)\n            dp[i][j] += min(dp[i - 1][j],\
    \ dp[i][j - 1]);\n    long[] res = new long[k];\n    int i = 0;\n    int j = 0;\n\
    \    for (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n      \
    \  if (i == n - 1)\n            j++;\n        else if (j == m - 1)\n         \
    \   i++;\n        else if (dp[i + 1][j] < dp[i][j + 1])\n            i++;\n  \
    \      else\n            j++;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] path = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                path[i][j] = 1;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j] = 2;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + grid[i][j];\n      \
    \          path[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j\
    \ + 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + grid[i][j];\n                path[i][j] = 4;\n            }\n       \
    \ }\n    long[] res = new long[k];\n    int i = 0, j = 0;\n    for (int l = 0;\
    \ l < k; l++)\n    {\n        res[l] = grid[i][j];\n        switch (path[i][j])\n\
    \        {\n            case 1:\n                i", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                prev[i][j] = 1;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i][j - 1] + grid[i][j];\n                prev[i][j] = 2;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + grid[i][j];\n      \
    \          prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j\
    \ + 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + grid[i][j];\n                prev[i][j] = 4;\n            }\n       \
    \ }\n    long[] res = new long[k];\n    int x = 0, y = 0;\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        res[i] = grid[x][y];\n        if (prev[x][y] ==\
    \ 1)\n            x--;\n        else", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    long[] res = new long[k];\n    int idx = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            if (dp[i][j]\
    \ == k)\n            {\n                res[idx++] = grid[i][j];\n           \
    \     return res;\n            }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    long[][] visited = new long[n][n];\n    long[][]\
    \ path = new long[n][n];\n    long[][] path_prev = new long[n][n];\n    long[][]\
    \ path_next = new long[n][n];\n    long[][] path_visited = new long[n][n];\n \
    \   long[][] path_visited_prev = new long[n][n];\n    long[][] path_visited_next\
    \ = new long[n][n];\n    long[][] path_visited_prev_prev = new long[n][n];\n \
    \   long[][] path_visited_next_next = new long[n][n];\n    long[][] path_visited_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_visited_next_next_next = new long[n][n];\n\
    \    long[][] path_visited_prev_prev_prev_prev = new long[n][n];\n    long[][]\
    \ path_visited_next_next_next_next = new long[n][n];\n    long[][] path_visited_prev_prev_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_visited_next_next_next_next_next = new\
    \ long[n][n];\n    long[][] path_visited_prev_prev_prev_prev_prev_prev = new long[n][n];\n\
    \    long[][] path_visited_next_next_next_next_next_next = new long[n][n];\n \
    \   long[][] path_visited_prev_prev_prev_prev_prev_prev_prev = new long[n][n];\n\
    \    long[][] path_visited_next_next_next_next_next_next_next = new long[n][n];\n\
    \    long[][] path_vis", "{\n    // Write your code here\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] res = new int[k];\n    int\
    \ x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n\
    \        if (x < N - 1 && dp[x + 1][y] < dp[x][y + 1])\n            x++;\n   \
    \     else\n            y++;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n \
    \   for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n       \
    \     dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1;\
    \ i >= 0; i--)\n        for (int j = N - 1; j >= 0; j--)\n        {\n        \
    \    if (i < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j]\
    \ + grid[i][j]);\n            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n \
    \   int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            prev[i][j] = -1;\n    for (int i = 0; i\
    \ < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if (i\
    \ > 0)\n            {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n\
    \                {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = 0;\n                }\n            }\n     \
    \       if (j > 0)\n            {\n                if (dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1]\
    \ + grid[i][j];\n                    prev[i][j] = 1;\n                }\n    \
    \        }\n        }\n    int[] path = new int[k];\n    int cur = 0;\n    int\
    \ x = N - 1;\n    int y = N - 1;\n    for (int i = 0; i < k", "{\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n   \
    \ for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n         \
    \   for (int x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n\
    \                    if (abs(x - i) + abs(y - j) == 1)\n                     \
    \   dp[i][j] = min(dp[i][j], dp[x][y] + grid[i][j]);\n    int[] ans = new int[k];\n\
    \    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        ans[i]\
    \ = grid[x][y];\n        int min = dp[x][y];\n        int nx = x, ny = y;\n  \
    \      if (x > 0 && dp[x - 1][y] < min)\n        {\n            min = dp[x - 1][y];\n\
    \            nx = x - 1;\n            ny = y;\n        }\n        if (x < n -\
    \ 1 && dp[x + 1][y] < min)\n        {\n            min = dp[x + 1][y];\n     \
    \       nx = x + 1;\n            ny = y;\n        }\n        if (y > 0 && dp[x][y\
    \ - 1] < min)\n        {\n            min = dp[x][y - 1];\n            nx = x;\n\
    \            ny = y - 1;\n        }\n        if (y < n - 1 && dp[x][y + 1] < min)\n\
    \        {\n            min = dp[x][y + 1];\n            nx = x;\n           \
    \ ny = y + 1;\n        }\n        x = nx;\n        y = ny;\n    }\n    return\
    \ ans;\n}", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto\
    \ dp = new long[][][](n, m, k + 1);\n    auto path = new long[][][](n, m, k +\
    \ 1);\n    for (auto i = 0; i < n; i++)\n    {\n        for (auto j = 0; j < m;\
    \ j++)\n        {\n            dp[i][j][1] = grid[i][j];\n            path[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    for (auto i = 0; i < n; i++)\n    {\n \
    \       for (auto j = 0; j < m; j++)\n        {\n            for (auto l = 2;\
    \ l <= k; l++)\n            {\n                dp[i][j][l] = long.max;\n     \
    \           path[i][j][l] = long.max;\n                if (i > 0)\n          \
    \      {\n                    if (dp[i - 1][j][l - 1] < dp[i][j][l])\n       \
    \             {\n                        dp[i][j][l] = dp[i - 1][j][l - 1];\n\
    \                        path[i][j][l] = path[i - 1][j][l - 1];\n            \
    \        }\n                }\n                if (i < n - 1)\n              \
    \  {\n                    if (dp[i + 1][j][l - 1] < dp[i][j][l])\n           \
    \         {\n                        dp[i][j][l] = dp[i + 1][j][l - 1];\n    \
    \                    path[i][j][l] = path[i + 1][j][l - 1];\n                \
    \    }\n                }\n                if (j > 0)\n                {\n   \
    \                 if (dp[i][j - 1][l - 1] < dp[i][j][l])\n                   \
    \ {\n                        dp[i][j][l] = dp[i][j - 1][l - 1];\n            \
    \            path[i][j][l] = path[i][j - 1][l - 1];\n                    }\n \
    \               }\n                if (j", "{\n    long N = grid.length;\n   \
    \ long[] minPath = new long[k];\n    long[] curPath = new long[k];\n    long[]\
    \ minPathVal = new long[k];\n    long[] curPathVal = new long[k];\n    long[]\
    \ curPos = new long[2];\n    long[] minPos = new long[2];\n    long[] curPosVal\
    \ = new long[2];\n    long[] minPosVal = new long[2];\n    long[][] visited =\
    \ new long[N][N];\n    long[][] minVisited = new long[N][N];\n    long[][] curVisited\
    \ = new long[N][N];\n    long[][] curVisitedVal = new long[N][N];\n    long[][]\
    \ minVisitedVal = new long[N][N];\n    long[][] curVisitedPos = new long[N][N];\n\
    \    long[][] minVisitedPos = new long[N][N];\n    long[][] curVisitedPosVal =\
    \ new long[N][N];\n    long[][] minVisitedPosVal = new long[N][N];\n    long[][]\
    \ curVisitedPath = new long[N][N];\n    long[][] minVisitedPath = new long[N][N];\n\
    \    long[][] curVisitedPathVal = new long[N][N];\n    long[][] minVisitedPathVal\
    \ = new long[N][N];\n    long[][] curVisitedPathPos = new long[N][N];\n    long[][]\
    \ minVisitedPathPos = new long[N][N];\n    long[][] curVisitedPathPosVal = new\
    \ long[N][N];\n    long[][] minVisitedPathPosVal = new long[N][N];\n    long[][]\
    \ curVisitedPathPosValPath = new long[N][N];\n    long[][] minVisitedPathPosValPath\
    \ = new long[N][N];\n    long[][] curVisitedPathPosValPathVal = new long[N][N];\n\
    \    long[][] minVisitedPathPosValPathVal = new long[N][N];\n    long[", "{\n\
    \    // Write your code here\n    int n = grid.length;\n    if (n == 0)\n    \
    \    return new long[0];\n    int m = grid[0].length;\n    if (m == 0)\n     \
    \   return new long[0];\n    if (k == 0)\n        return new long[0];\n    if\
    \ (k == 1)\n        return new long[]{grid[0][0]};\n    if (k == n * m)\n    \
    \    return flatten(grid);\n    long[][] dp = new long[n][m];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    for (int i = 1; i < k; i++)\n    {\n        long[][] dp2\
    \ = new long[n][m];\n        for (int j = 0; j < n; j++)\n            for (int\
    \ l = 0; l < m; l++)\n            {\n                dp2[j][l] = dp[j][l];\n \
    \               if (j > 0)\n                    dp2[j][l] = min(dp2[j][l], dp[j\
    \ - 1][l]);\n                if (j < n - 1)\n                    dp2[j][l] = min(dp2[j][l],\
    \ dp[j + 1][l]);\n                if (l > 0)\n                    dp2[j][l] =\
    \ min(dp2[j][l], dp[j][l - 1]);\n                if (l < m - 1)\n            \
    \        dp2[j][l] = min(dp2[j][l], dp[j][l + 1]);\n            }\n        dp\
    \ = dp2;\n    }\n    long min = dp[0][0];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < m; j++)\n            min = min(min, dp[i][j]);\n \
    \   long[] res = new long[k];\n    res[0] = min;\n    int", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n  \
    \          prev[i][j] = i * n + j;\n            next[i][j] = i * n + j;\n    \
    \    }\n    }\n    for (long step = 1; step < k; step++)\n    {\n        for (long\
    \ i = 0; i < n; i++)\n        {\n            for (long j = 0; j < n; j++)\n  \
    \          {\n                long min = dp[i][j];\n                long prev_i\
    \ = i;\n                long prev_j = j;\n                if (i > 0 && dp[i -\
    \ 1][j] < min)\n                {\n                    min = dp[i - 1][j];\n \
    \                   prev_i = i - 1;\n                    prev_j = j;\n       \
    \         }\n                if (i < n - 1 && dp[i + 1][j] < min)\n          \
    \      {\n                    min = dp[i + 1][j];\n                    prev_i\
    \ = i + 1;\n                    prev_j = j;\n                }\n             \
    \   if (j > 0 && dp[i][j - 1] < min)\n                {\n                    min\
    \ = dp[i][j - 1];\n                    prev_i = i;\n                    prev_j\
    \ = j - 1;\n                }\n                if (j < n - 1 && dp[i][j + 1] <\
    \ min)\n                {\n                    min = dp[i][j + 1];\n         \
    \           prev_i = i;\n                    prev_j = j + 1;\n               \
    \ }\n                dp[i][j] = min;\n                prev[i][j] = prev[prev_i][prev_j];\n\
    \                next[prev[i][j]][prev[i][j] % n]", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][]\
    \ next = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n  \
    \          prev[i][j] = i * N + j;\n            next[i][j] = i * N + j;\n    \
    \    }\n    }\n    for (long step = 1; step < k; step++)\n    {\n        for (long\
    \ i = 0; i < N; i++)\n        {\n            for (long j = 0; j < N; j++)\n  \
    \          {\n                long min = dp[i][j];\n                long min_prev\
    \ = prev[i][j];\n                long min_next = next[i][j];\n               \
    \ if (i > 0 && dp[i - 1][j] < min)\n                {\n                    min\
    \ = dp[i - 1][j];\n                    min_prev = prev[i - 1][j];\n          \
    \          min_next = next[i - 1][j];\n                }\n                if (i\
    \ < N - 1 && dp[i + 1][j] < min)\n                {\n                    min =\
    \ dp[i + 1][j];\n                    min_prev = prev[i + 1][j];\n            \
    \        min_next = next[i + 1][j];\n                }\n                if (j\
    \ > 0 && dp[i][j - 1] < min)\n                {\n                    min = dp[i][j\
    \ - 1];\n                    min_prev = prev[i][j - 1];\n                    min_next\
    \ = next[i][j - 1];\n                }\n                if (j < N - 1 && dp[i][j\
    \ + 1] < min)\n                {\n                    min = dp[i][j + 1];\n  \
    \                  min_prev = prev[i][j + 1];\n                    min_next =\
    \ next[i][j + 1];\n                }\n                d", "{\n    // TODO: Implement\
    \ your solution here\n    return new long[0];\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int\
    \ x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n          \
    \          if (abs(i - x) + abs(j - y) == 1)\n                        dp[i][j]\
    \ = min(dp[i][j], dp[x][y]);\n    int[][] dp2 = new int[n][n];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = dp[i][j];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            for (int x = 0; x < n; x++)\n                for (int y =\
    \ 0; y < n; y++)\n                    if (abs(i - x) + abs(j - y) == 1)\n    \
    \                    dp2[i][j] = min(dp2[i][j], dp2[x][y]);\n    int[][] dp3 =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            dp3[i][j] = dp2[i][j];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            for (int x = 0; x < n; x++)\n\
    \                for (int y = 0; y < n; y++)\n                    if (abs(i -\
    \ x) + abs(j - y) == 1)\n                        dp3[i][j] = min(dp3", "{\n  \
    \  int n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = -1;\n        }\n    }\n    for (int i = 0; i < n; i++)\n   \
    \ {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0 &&\
    \ dp[i - 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n\
    \                prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1];\n\
    \                prev[i][j] = 1;\n            }\n            if (i < n - 1 &&\
    \ dp[i + 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j];\n\
    \                prev[i][j] = 2;\n            }\n            if (j < n - 1 &&\
    \ dp[i][j + 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1];\n                prev[i][j] = 3;\n            }\n        }\n    }\n  \
    \  long[] res = new long[(int)k];\n    int i = 0;\n    int j = 0;\n    for (int\
    \ l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        switch((int)prev[i][j])\n\
    \        {\n            case 0:\n                i--;\n                break;\n\
    \            case 1:\n                j--;\n                break;\n         \
    \   case 2:\n                i", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][][](n, m, k + 1);\n    auto path = new long[][][](n,\
    \ m, k + 1);\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0;\
    \ j < m; j++)\n        {\n            dp[i][j][1] = grid[i][j];\n            path[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      for (int j = 0; j < m; j++)\n        {\n            for (int l = 2; l <=\
    \ k; l++)\n            {\n                dp[i][j][l] = long.max;\n          \
    \      path[i][j][l] = long.max;\n                if (i > 0)\n               \
    \ {\n                    if (dp[i - 1][j][l - 1] < dp[i][j][l])\n            \
    \        {\n                        dp[i][j][l] = dp[i - 1][j][l - 1];\n     \
    \                   path[i][j][l] = path[i - 1][j][l - 1];\n                 \
    \   }\n                    else if (dp[i - 1][j][l - 1] == dp[i][j][l])\n    \
    \                {\n                        path[i][j][l] = min(path[i - 1][j][l\
    \ - 1], path[i][j][l]);\n                    }\n                }\n          \
    \      if (j > 0)\n                {\n                    if (dp[i][j - 1][l -\
    \ 1] < dp[i][j][l])\n                    {\n                        dp[i][j][l]\
    \ = dp[i][j - 1][l - 1];\n                        path[i][j][l] = path[i][j -\
    \ 1][l - 1];\n                    }\n                    else if (dp[i][j - 1][l\
    \ - 1] == dp[i][j][l])\n                    {\n                        path[i][j][",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i =\
    \ 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for\
    \ (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n   \
    \     {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n \
    \   for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n       \
    \     dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1;\
    \ i >= 0; i--)\n        for (int j = N - 1; j >= 0; j--)\n        {\n        \
    \    if (i < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j]\
    \ + grid[i][j]);\n            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n             \
    \   dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n          \
    \  }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    long[] res = new long[k];\n \
    \   int i = 0, j = 0;\n    for (int t = 0; t < k; t++)\n    {\n        res[t]\
    \ = grid[i][j];\n        switch (prev[i][j])\n        {\n            case 1:\n\
    \                i--;\n                break;\n            case 2:\n         \
    \       j--;\n                break;\n            case 3:\n                i++;\n\
    \                break;\n            case", "{\n    int N = grid.length;\n   \
    \ int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n            dp[i][j] = (int)grid[i][j];\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n         \
    \   int min = dp[i][j];\n            if (i > 0 && dp[i - 1][j] < min)\n      \
    \          min = dp[i - 1][j];\n            if (j > 0 && dp[i][j - 1] < min)\n\
    \                min = dp[i][j - 1];\n            if (i < N - 1 && dp[i + 1][j]\
    \ < min)\n                min = dp[i + 1][j];\n            if (j < N - 1 && dp[i][j\
    \ + 1] < min)\n                min = dp[i][j + 1];\n            dp[i][j] = min;\n\
    \        }\n    int[] path = new int[(int)k];\n    int i = 0;\n    int j = 0;\n\
    \    for (int l = 0; l < k; l++)\n    {\n        path[l] = dp[i][j];\n       \
    \ int min = dp[i][j];\n        if (i > 0 && dp[i - 1][j] < min)\n            min\
    \ = dp[i - 1][j];\n        if (j > 0 && dp[i][j - 1] < min)\n            min =\
    \ dp[i][j - 1];\n        if (i < N - 1 && dp[i + 1][j] < min)\n            min\
    \ = dp[i + 1][j];\n        if (j < N - 1 && dp[i][j + 1] < min)\n            min\
    \ = dp[i][j + 1];\n        if (i > 0 && dp[i - 1][j] == min)\n            i--;\n\
    \        else if (j >", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n  \
    \  long[][] cnt = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = -1;\n            next[i][j] = -1;\n            cnt[i][j]\
    \ = 1;\n        }\n    }\n    for (long step = 1; step < k; step++)\n    {\n \
    \       for (long i = 0; i < n; i++)\n        {\n            for (long j = 0;\
    \ j < n; j++)\n            {\n                long min = dp[i][j];\n         \
    \       long min_i = i;\n                long min_j = j;\n                if (i\
    \ > 0 && dp[i - 1][j] < min)\n                {\n                    min = dp[i\
    \ - 1][j];\n                    min_i = i - 1;\n                    min_j = j;\n\
    \                }\n                if (i < n - 1 && dp[i + 1][j] < min)\n   \
    \             {\n                    min = dp[i + 1][j];\n                   \
    \ min_i = i + 1;\n                    min_j = j;\n                }\n        \
    \        if (j > 0 && dp[i][j - 1] < min)\n                {\n               \
    \     min = dp[i][j - 1];\n                    min_i = i;\n                  \
    \  min_j = j - 1;\n                }\n                if (j < n - 1 && dp[i][j\
    \ + 1] < min)\n                {\n                    min = dp[i][j + 1];\n  \
    \                  min_i = i;\n                    min_j = j + 1;\n          \
    \      }\n                if (min != dp[i][j])\n                {\n          \
    \          dp[i][j] = min;\n", "{\n    long N = grid.length;\n    long[][] dp\
    \ = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][] next =\
    \ new long[N][N];\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n\
    \        {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n \
    \           next[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach\
    \ (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n            if (i\
    \ > 0)\n            {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n    \
    \            {\n                    dp[i][j] = dp[i - 1][j] + 1;\n           \
    \         prev[i][j] = i - 1;\n                    next[i][j] = j;\n         \
    \       }\n                else if (dp[i - 1][j] + 1 == dp[i][j])\n          \
    \      {\n                    if (grid[i - 1][j] < grid[prev[i][j]][next[i][j]])\n\
    \                    {\n                        prev[i][j] = i - 1;\n        \
    \                next[i][j] = j;\n                    }\n                }\n \
    \           }\n            if (j > 0)\n            {\n                if (dp[i][j\
    \ - 1] + 1 < dp[i][j])\n                {\n                    dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                    prev[i][j] = i;\n                    next[i][j]\
    \ = j - 1;\n                }\n                else if (dp[i][j - 1] + 1 == dp[i][j])\n\
    \                {\n                    if (grid[i][j - 1] < grid[prev[i][j]][next[i][j]])\n\
    \                    {\n                        prev[i][j] = i;\n            \
    \            next[i][j] = j - 1;", "{\n    import std.algorithm : sort;\n    import\
    \ std.range : iota;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.typecons : tuple;\n    import std.stdio : writeln;\n    import\
    \ std.math : min;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.algorithm : sort;\n    import std.range : iota;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.typecons : tuple;\n    import\
    \ std.stdio : writeln;\n    import std.math : min;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.algorithm : sort;\n    import std.range\
    \ : iota;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.typecons : tuple;\n    import std.stdio : writeln;\n    import std.math\
    \ : min;\n    import std.range : retro;\n    import std.range : retro;\n    import\
    \ std.algorithm : sort;\n    import std.range : iota;\n    import std.array :\
    \ array;\n    import std.conv : to;\n    import std.typecons : tuple;\n    import\
    \ std.stdio : writeln;\n    import std.math : min;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.algorithm : sort;\n    import std.range\
    \ : iota;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.typecons : tuple;\n    import std.stdio : writeln;\n    import std.math\
    \ : min;\n    import std.range : retro;\n    import std.range : retro;\n    import\
    \ std.algorithm : sort;\n    import std.range : iota;\n    import std.array :\
    \ array;\n    import std.conv : to;\n    import std.typecons : tuple;\n    import\
    \ std.stdio : writeln;\n    import std.math : min;\n    import std.range : retro;\n\
    \    import", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n  \
    \  long[][] path = new long[n][n];\n    long[][] path_prev = new long[n][n];\n\
    \    long[][] path_next = new long[n][n];\n    long[][] path_prev_prev = new long[n][n];\n\
    \    long[][] path_next_next = new long[n][n];\n    long[][] path_prev_next =\
    \ new long[n][n];\n    long[][] path_next_prev = new long[n][n];\n    long[][]\
    \ path_prev_prev_prev = new long[n][n];\n    long[][] path_next_next_next = new\
    \ long[n][n];\n    long[][] path_prev_prev_next = new long[n][n];\n    long[][]\
    \ path_next_next_prev = new long[n][n];\n    long[][] path_prev_next_prev = new\
    \ long[n][n];\n    long[][] path_next_prev_prev = new long[n][n];\n    long[][]\
    \ path_prev_next_next = new long[n][n];\n    long[][] path_next_prev_next = new\
    \ long[n][n];\n    long[][] path_prev_prev_prev_prev = new long[n][n];\n    long[][]\
    \ path_next_next_next_next = new long[n][n];\n    long[][] path_prev_prev_prev_next\
    \ = new long[n][n];\n    long[][] path_next_next_next_prev = new long[n][n];\n\
    \    long[][] path_prev_prev_next_prev = new long[n][n];\n    long[][] path_next_next_prev_prev\
    \ = new long[n][n];\n    long[][] path_prev_next_prev_prev = new long[n][n];\n",
  "{\n    // Write your code here\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0;\
    \ j < n; j++)\n        {\n            dp[i][j] = (int)grid[i][j];\n        }\n\
    \    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n;\
    \ j++)\n        {\n            if (i > 0)\n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j]);\n            }\n            if (j > 0)\n    \
    \        {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]);\n        \
    \    }\n        }\n    }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     dp2[i][j] = (int)grid[i][j];\n        }\n    }\n    for (int i = n - 1;\
    \ i >= 0; i--)\n    {\n        for (int j = n - 1; j >= 0; j--)\n        {\n \
    \           if (i < n - 1)\n            {\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j]);\n            }\n            if (j < n - 1)\n            {\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]);\n            }\n \
    \       }\n    }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            dp3[i][j]\
    \ = (int)grid[i][j];\n", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    for (long i = 0; i < n; i++)\n        for (long j = 0; j <\
    \ n; j++)\n            dp[i][j] = grid[i][j];\n    for (long i = 0; i < n; i++)\n\
    \        for (long j = 0; j < n; j++)\n            for (long x = 0; x < n; x++)\n\
    \                for (long y = 0; y < n; y++)\n                    if (abs(x -\
    \ i) + abs(y - j) == 1)\n                        dp[i][j] = min(dp[i][j], dp[x][y]\
    \ + grid[i][j]);\n    long[] ans = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \        ans[i] = dp[0][0];\n    return ans;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[(int)k];\n    int i = 0;\n    int\
    \ j = 0;\n    for (int l = 0; l < k; l++)\n    {\n        path[l] = grid[i][j];\n\
    \        switch (prev[i][j])\n        {\n            case 1:\n               \
    \ i--;\n                break;\n            case 2:\n                j--;\n  \
    \              break;\n            case 3:\n                i++;\n", "{\n    long[]\
    \ res = new long[(int)k];\n    long[][] dist = new long[grid.length][grid[0].length];\n\
    \    long[][] prev = new long[grid.length][grid[0].length];\n    for (int i =\
    \ 0; i < dist.length; i++)\n    {\n        for (int j = 0; j < dist[0].length;\
    \ j++)\n        {\n            dist[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dist[0][0] = 0;\n    for (int i = 0; i < dist.length;\
    \ i++)\n    {\n        for (int j = 0; j < dist[0].length; j++)\n        {\n \
    \           if (i > 0)\n            {\n                if (dist[i - 1][j] + 1\
    \ < dist[i][j])\n                {\n                    dist[i][j] = dist[i -\
    \ 1][j] + 1;\n                    prev[i][j] = 0;\n                }\n       \
    \     }\n            if (j > 0)\n            {\n                if (dist[i][j\
    \ - 1] + 1 < dist[i][j])\n                {\n                    dist[i][j] =\
    \ dist[i][j - 1] + 1;\n                    prev[i][j] = 1;\n                }\n\
    \            }\n            if (i < dist.length - 1)\n            {\n        \
    \        if (dist[i + 1][j] + 1 < dist[i][j])\n                {\n           \
    \         dist[i][j] = dist[i + 1][j] + 1;\n                    prev[i][j] = 2;\n\
    \                }\n            }\n            if (j < dist[0].length - 1)\n \
    \           {\n                if (dist[i][j + 1] + 1 < dist[i][j])\n        \
    \        {\n                    dist[i][j] = dist[i][j + 1] + 1;\n           \
    \         prev[i][j] = 3;\n                }\n            }\n        }\n    }\n\
    \    int i = 0;\n    int j = 0;\n    for (int l = 0; l", "{\n    long n = grid.length;\n\
    \    assert(n >= 2);\n    assert(n == grid[0].length);\n    assert(k >= 1);\n\
    \    assert(k <= n * n);\n    long[][] dp = new long[n][n];\n    long[][] path\
    \ = new long[n][n];\n    foreach(i; 0 .. n)\n    {\n        foreach(j; 0 .. n)\n\
    \        {\n            dp[i][j] = long.max;\n            path[i][j] = -1;\n \
    \       }\n    }\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n    {\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n            {\n\
    \                if(dp[i - 1][j] + grid[i][j] < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                 \
    \   path[i][j] = 0;\n                }\n            }\n            if(j > 0)\n\
    \            {\n                if(dp[i][j - 1] + grid[i][j] < dp[i][j])\n   \
    \             {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n \
    \                   path[i][j] = 1;\n                }\n            }\n      \
    \  }\n    }\n    long[] ans = new long[k];\n    long x = n - 1;\n    long y =\
    \ n - 1;\n    foreach(i; 0 .. k)\n    {\n        ans[i] = grid[x][y];\n      \
    \  if(path[x][y] == 0)\n        {\n            x--;\n        }\n        else\n\
    \        {\n            y--;\n        }\n    }\n    return ans;\n}", "{\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev = new\
    \ long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j =\
    \ 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] ans = new long[(int)k];\n\
    \    long i = n - 1;\n    long j = n - 1;\n    for (long l = k - 1; l >= 0; l--)\n\
    \    {\n        ans[(int)l] = grid[(int)i][(int)j];\n        if (prev", "{\n \
    \   // Write your code here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] =\
    \ 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0)\n            {\n                dp[i][j] =\
    \ min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n            if (j\
    \ > 0)\n            {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] +\
    \ grid[i][j]);\n            }\n        }\n    }\n    long[] res = new long[k];\n\
    \    int i = n - 1;\n    int j = n - 1;\n    for (int t = k - 1; t >= 0; t--)\n\
    \    {\n        res[t] = grid[i][j];\n        if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ == dp[i][j])\n        {\n            i--;\n        }\n        else\n       \
    \ {\n            j--;\n        }\n    }\n    return res;\n}", "{\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            prev[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 0;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 1;\n            }\n            if (i\
    \ < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n     \
    \       }\n        }\n    }\n    int[] path = new int[k];\n    int x = 0;\n  \
    \  int y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n\
    \        switch (prev[x][y])\n        {\n            case 0:\n               \
    \ x--;\n", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n   \
    \ for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n         \
    \   dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[] ans = new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k;\
    \ i++)\n    {\n        ans[i] = grid[x][y];\n        if (x + 1 < n && dp[x + 1][y]\
    \ == dp[x][y] + 1)\n            x++;\n        else if (y + 1 < n && dp[x][y +\
    \ 1] == dp[x][y] + 1)\n            y++;\n        else\n            assert(false);\n\
    \    }\n    return ans;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n\
    \            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j\
    \ + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j]\
    \ = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            prev[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 0;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 1;\n            }\n            if (i\
    \ + 1 < n && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n      \
    \      if (j + 1 < n && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n     \
    \       }\n        }\n    }\n    int x = n - 1;\n    int y = n - 1;\n    long[]\
    \ res = new long[(int)k];\n    for (int i = (int)k - 1; i >= 0; i--)\n    {\n\
    \        res[i] = grid[x][y];\n        switch (prev[x][y])\n", "{\n    // Write\
    \ your code here\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][]\
    \ dp = new long[n][m];\n    long[][] path = new long[n][m];\n    for (int i =\
    \ 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n    \
    \        dp[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n      \
    \  }\n    }\n    for (int i = 1; i < k; i++)\n    {\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            for (int l = 0; l < m; l++)\n            {\n\
    \                long min = path[j][l];\n                if (j > 0 && min > path[j\
    \ - 1][l])\n                {\n                    min = path[j - 1][l];\n   \
    \             }\n                if (j < n - 1 && min > path[j + 1][l])\n    \
    \            {\n                    min = path[j + 1][l];\n                }\n\
    \                if (l > 0 && min > path[j][l - 1])\n                {\n     \
    \               min = path[j][l - 1];\n                }\n                if (l\
    \ < m - 1 && min > path[j][l + 1])\n                {\n                    min\
    \ = path[j][l + 1];\n                }\n                dp[j][l] = min;\n    \
    \        }\n        }\n        for (int j = 0; j < n; j++)\n        {\n      \
    \      for (int l = 0; l < m; l++)\n            {\n                path[j][l]\
    \ = dp[j][l];\n            }\n        }\n    }\n    long[] result = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        result[i] = dp[0][0];\n     \
    \   long min = path[0][0];\n        int j = 0;\n        int l = 0;\n        if\
    \ (j > 0 && min > path[j - 1][l])\n", "{\n    int N = grid.length;\n    int[]\
    \ path = new int[k];\n    int[] minPath = new int[k];\n    int[] minPathValues\
    \ = new int[k];\n    int[] pathValues = new int[k];\n    int[] minPathIndex =\
    \ new int[k];\n    int[] pathIndex = new int[k];\n    int[] minPathRow = new int[k];\n\
    \    int[] pathRow = new int[k];\n    int[] minPathCol = new int[k];\n    int[]\
    \ pathCol = new int[k];\n    int[] minPathDir = new int[k];\n    int[] pathDir\
    \ = new int[k];\n    int minPathSum = int.max;\n    int pathSum = 0;\n    int\
    \ minPathLastIndex = 0;\n    int pathLastIndex = 0;\n    int minPathLastRow =\
    \ 0;\n    int pathLastRow = 0;\n    int minPathLastCol = 0;\n    int pathLastCol\
    \ = 0;\n    int minPathLastDir = 0;\n    int pathLastDir = 0;\n    int minPathLastValue\
    \ = 0;\n    int pathLastValue = 0;\n    int minPathLastSum = 0;\n    int pathLastSum\
    \ = 0;\n    int minPathLastIndex2 = 0;\n    int pathLastIndex2 = 0;\n    int minPathLastRow2\
    \ = 0;\n    int pathLastRow2 = 0;\n    int minPathLastCol2 = 0;\n    int pathLastCol2\
    \ = 0;\n    int minPathLastDir2 = 0;\n    int pathLastDir2 = 0;\n    int minPathLastValue2\
    \ = 0;\n    int pathLastValue2 = 0;\n    int minPathLastSum2 = 0;\n    int pathLastSum2\
    \ = 0;\n    int minPathLastIndex3 = 0;\n    int pathLastIndex3 = 0;\n    int minPathLastRow3\
    \ = 0;\n    int pathLastRow3 = 0;\n    int minPathLastCol3 = 0;\n    int pathLastCol3\
    \ = 0;\n    int minPathLastDir3 = 0;\n    int pathLastDir3 = 0;\n    int minPathLastValue3\
    \ = 0", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n   \
    \ long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n    foreach\
    \ (i; 0 .. n)\n    {\n        foreach (j; 0 .. n)\n        {\n            dp[i][j]\
    \ = long.max;\n            prev[i][j] = -1;\n            next[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    foreach (i; 0 .. n)\n    {\n        foreach\
    \ (j; 0 .. n)\n        {\n            if (i > 0)\n            {\n            \
    \    if (dp[i - 1][j] + 1 < dp[i][j])\n                {\n                   \
    \ dp[i][j] = dp[i - 1][j] + 1;\n                    prev[i][j] = i - 1;\n    \
    \                next[i][j] = j;\n                }\n                else if (dp[i\
    \ - 1][j] + 1 == dp[i][j])\n                {\n                    if (grid[i\
    \ - 1][j] < grid[prev[i][j]][next[i][j]])\n                    {\n           \
    \             prev[i][j] = i - 1;\n                        next[i][j] = j;\n \
    \                   }\n                }\n            }\n            if (j > 0)\n\
    \            {\n                if (dp[i][j - 1] + 1 < dp[i][j])\n           \
    \     {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                  \
    \  prev[i][j] = i;\n                    next[i][j] = j - 1;\n                }\n\
    \                else if (dp[i][j - 1] + 1 == dp[i][j])\n                {\n \
    \                   if (grid[i][j - 1] < grid[prev[i][j]][next[i][j]])\n     \
    \               {\n                        prev[i][j] = i;\n                 \
    \       next[i][j] = j - 1;", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next = new\
    \ long[n][n];\n    long[][] path = new long[n][n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n            dp[i][j]\
    \ = grid[i][j];\n            prev[i][j] = i * n + j;\n            next[i][j] =\
    \ i * n + j;\n            path[i][j] = 1;\n        }\n    }\n    for (long i =\
    \ 0; i < k - 1; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            for (long l = 0; l < n; l++)\n            {\n                long\
    \ min = dp[j][l];\n                long min_i = j;\n                long min_j\
    \ = l;\n                if (j > 0 && dp[j - 1][l] < min)\n                {\n\
    \                    min = dp[j - 1][l];\n                    min_i = j - 1;\n\
    \                    min_j = l;\n                }\n                if (j < n\
    \ - 1 && dp[j + 1][l] < min)\n                {\n                    min = dp[j\
    \ + 1][l];\n                    min_i = j + 1;\n                    min_j = l;\n\
    \                }\n                if (l > 0 && dp[j][l - 1] < min)\n       \
    \         {\n                    min = dp[j][l - 1];\n                    min_i\
    \ = j;\n                    min_j = l - 1;\n                }\n              \
    \  if (l < n - 1 && dp[j][l + 1] < min)\n                {\n                 \
    \   min = dp[j][l + 1];\n                    min_i = j;\n                    min_j\
    \ = l + 1;\n                }\n                dp[j][l] = min;\n             \
    \   prev[j][l] = next[", "{\n    import std.algorithm : min, max;\n    import\
    \ std.range : iota;\n    import std.conv : to;\n    import std.array : array;\n\
    \    import std.range : retro;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import", "{\n\
    \    import std.algorithm : min;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.algorithm : sort;\n    import std.algorithm : equal;\n    import std.algorithm\
    \ : minElement;\n    import std.algorithm : map;\n    import std.algorithm : zip;\n\
    \    import std.algorithm : filter;\n    import std.algorithm : count;\n    import\
    \ std.algorithm : min;\n    import std.algorithm : max;\n    import std.algorithm\
    \ : minElement;\n    import std.algorithm : min;\n    import std.algorithm : max;\n\
    \    import std.algorithm : minElement;\n    import std.algorithm : min;\n   \
    \ import std.algorithm : max;\n    import std.algorithm : minElement;\n    import\
    \ std.algorithm : min;\n    import std.algorithm : max;\n    import std.algorithm\
    \ : minElement;\n    import std.algorithm : min;\n    import std.algorithm : max;\n\
    \    import std.algorithm : minElement;\n    import std.algorithm : min;\n   \
    \ import std.algorithm : max;\n    import std.algorithm : minElement;\n    import\
    \ std.algorithm : min;\n    import std.algorithm : max;\n    import std.algorithm\
    \ : minElement;\n    import std.algorithm : min;\n    import std.algorithm : max;\n\
    \    import std.algorithm : minElement;\n    import std.algorithm : min;\n   \
    \ import std.algorithm : max;\n    import std.algorithm : minElement;\n    import\
    \ std.algorithm : min;\n    import std.algorithm : max;\n    import std.algorithm\
    \ : minElement;\n    import std.algorithm : min;\n    import std.algorithm : max;\n\
    \    import std.algorithm : minElement;\n    import std.algorithm : min;\n   \
    \ import std.algorithm : max;\n    import std.algorithm : minElement;\n    import\
    \ std.algorithm : min;\n    import std.algorithm : max", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n \
    \   for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n       \
    \     dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1;\
    \ i >= 0; i--)\n        for (int j = N - 1; j >= 0; j--)\n        {\n        \
    \    if (i < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j]\
    \ + grid[i][j]);\n            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n \
    \   int[] path = new int[k];\n    path[0] = grid[0][0];\n    int cur = 1;\n  \
    \  int x = 0;\n    int y = 0;\n    while (cur < k)\n    {\n        if (x < N -\
    \ 1 && dp[x + 1][y] + grid[x + 1][y] == dp[x][y])\n        {\n            x++;\n\
    \            path[cur++] = grid[x][y];\n        }\n        else if (y < N - 1\
    \ && dp[x][y + 1] + grid[x][y + 1] == dp[x][y])\n        {\n            y++;\n\
    \            path[cur++] = grid[x][y];\n        }\n    }\n    return path;\n}",
  "{\n    long N = grid.length;\n    long[] res = new long[(int)k];\n    long[][]\
    \ dp = new long[(int)N][(int)N];\n    long[][] prev = new long[(int)N][(int)N];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[(int)i][(int)j] = grid[(int)i][(int)j];\n         \
    \   prev[(int)i][(int)j] = -1L;\n        }\n    }\n    for (long i = 0; i < N;\
    \ i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[(int)i][(int)j] > dp[(int)i - 1][(int)j])\n            {\n    \
    \            dp[(int)i][(int)j] = dp[(int)i - 1][(int)j];\n                prev[(int)i][(int)j]\
    \ = 0L;\n            }\n            if (j > 0 && dp[(int)i][(int)j] > dp[(int)i][(int)j\
    \ - 1])\n            {\n                dp[(int)i][(int)j] = dp[(int)i][(int)j\
    \ - 1];\n                prev[(int)i][(int)j] = 1L;\n            }\n         \
    \   if (i < N - 1 && dp[(int)i][(int)j] > dp[(int)i + 1][(int)j])\n          \
    \  {\n                dp[(int)i][(int)j] = dp[(int)i + 1][(int)j];\n         \
    \       prev[(int)i][(int)j] = 2L;\n            }\n            if (j < N - 1 &&\
    \ dp[(int)i][(int)j] > dp[(int)i][(int)j + 1])\n           ", "{\n    auto n =\
    \ grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n\
    \    auto prev = new long[][](n, m);\n    auto min = new long[][](n, m);\n   \
    \ foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n       \
    \     dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n            min[i][j]\
    \ = grid[i][j];\n        }\n    }\n    foreach (i; 0 .. n)\n    {\n        foreach\
    \ (j; 0 .. m)\n        {\n            if (i > 0)\n            {\n            \
    \    if (min[i - 1][j] < min[i][j])\n                {\n                    min[i][j]\
    \ = min[i - 1][j];\n                    prev[i][j] = 0;\n                }\n \
    \           }\n            if (j > 0)\n            {\n                if (min[i][j\
    \ - 1] < min[i][j])\n                {\n                    min[i][j] = min[i][j\
    \ - 1];\n                    prev[i][j] = 1;\n                }\n            }\n\
    \            if (i < n - 1)\n            {\n                if (min[i + 1][j]\
    \ < min[i][j])\n                {\n                    min[i][j] = min[i + 1][j];\n\
    \                    prev[i][j] = 2;\n                }\n            }\n     \
    \       if (j < m - 1)\n            {\n                if (min[i][j + 1] < min[i][j])\n\
    \                {\n                    min[i][j] = min[i][j + 1];\n         \
    \           prev[i][j] = 3;\n                }\n            }\n        }\n   \
    \ }\n    auto x = 0;\n    auto y = 0;\n    foreach (i; 0 .. n)\n    {\n      \
    \  foreach (j; 0 .. m)\n        {\n            if (min[i][j] < min[x][y])\n  \
    \          {\n               ", "{\n    int n = grid.length;\n    int[][] dp =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int i = 0;\n \
    \   int j = 0;\n    for (int t = 0; t < k; t++)\n    {\n        res[t] = grid[i][j];\n\
    \        if (i == n - 1 && j == n - 1)\n            break;\n        if (i == n\
    \ - 1)\n            j++;\n        else if (j == n - 1)\n            i++;\n   \
    \     else if (dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n\
    \            j++;\n    }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long m = grid[0].length;\n    long[][] dp = new long[n][m];\n    long[][]\
    \ prev = new long[n][m];\n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = 0; j < m; j++)\n        {\n            dp[i][j] = grid[i][j];\n  \
    \          prev[i][j] = -1;\n        }\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = 0; j < m; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j];\n                prev[i][j] = 0;\n            }\n            if (j\
    \ > 0 && dp[i][j - 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1];\n                prev[i][j] = 1;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j];\n                prev[i][j] = 2;\n            }\n            if (j\
    \ < m - 1 && dp[i][j + 1] < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1];\n                prev[i][j] = 3;\n            }\n        }\n\
    \    }\n    long[] ans = new long[(int)k];\n    long x = 0;\n    long y = 0;\n\
    \    for (long i = 0; i < k; i++)\n    {\n        ans[(int)i] = grid[(int)x][(int)y];\n\
    \        if (prev[(int)x][(int)y] == 0)\n        {\n            x--;\n       \
    \ }\n", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto\
    \ dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    foreach (i;\
    \ 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            if (i ==\
    \ 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n      \
    \          path[i][j] = 1;\n            }\n            else if (i == 0)\n    \
    \        {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n          \
    \      path[i][j] = path[i][j - 1];\n            }\n            else if (j ==\
    \ 0)\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n \
    \               path[i][j] = path[i - 1][j];\n            }\n            else\n\
    \            {\n                if (dp[i - 1][j] < dp[i][j - 1])\n           \
    \     {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n         \
    \           path[i][j] = path[i - 1][j];\n                }\n                else\
    \ if (dp[i - 1][j] > dp[i][j - 1])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = path[i][j - 1];\n\
    \                }\n                else\n                {\n                \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j] = path[i\
    \ - 1][j] + path[i][j - 1];\n                }\n            }\n        }\n   \
    \ }\n    auto res = new long[k];\n    auto i = n - 1;\n    auto j = m - 1;\n \
    \   auto cnt = k;\n    while (cnt > 0)\n    {\n        res[c", "{\n    auto N\
    \ = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[][][](N,\
    \ M, k + 1);\n    auto path = new long[][][](N, M, k + 1);\n    auto min = new\
    \ long[][](N, M);\n    foreach (i, j; grid)\n    {\n        min[i][j] = grid[i][j];\n\
    \        dp[i][j][1] = grid[i][j];\n        path[i][j][1] = grid[i][j];\n    }\n\
    \    for (long l = 2; l <= k; l++)\n    {\n        foreach (i, j; grid)\n    \
    \    {\n            dp[i][j][l] = long.max;\n            foreach (x; -1 .. 2)\n\
    \            {\n                foreach (y; -1 .. 2)\n                {\n    \
    \                if (x == 0 && y == 0)\n                        continue;\n  \
    \                  if (i + x < 0 || i + x >= N || j + y < 0 || j + y >= M)\n \
    \                       continue;\n                    if (dp[i + x][j + y][l\
    \ - 1] + grid[i][j] < dp[i][j][l])\n                    {\n                  \
    \      dp[i][j][l] = dp[i + x][j + y][l - 1] + grid[i][j];\n                 \
    \       path[i][j][l] = path[i + x][j + y][l - 1];\n                    }\n  \
    \                  else if (dp[i + x][j + y][l - 1] + grid[i][j] == dp[i][j][l])\n\
    \                    {\n                        if (path[i + x][j + y][l - 1]\
    \ < path[i][j][l])\n                            path[i][j][l] = path[i + x][j\
    \ + y][l - 1];\n                    }\n                }\n            }\n    \
    \        if (dp[i][j][l] < min[i][j])\n                min[i][j] = dp[i][j][l];\n\
    \        }\n    }", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    foreach\
    \ (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            if (i\
    \ == 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n   \
    \             path[i][j] = grid[i][j];\n            }\n            else if (i\
    \ == 0)\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n            }\n\
    \            else if (j == 0)\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n\
    \            }\n            else\n            {\n                auto min = min(dp[i\
    \ - 1][j], dp[i][j - 1]);\n                dp[i][j] = min + grid[i][j];\n    \
    \            if (min == dp[i - 1][j])\n                {\n                   \
    \ path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n                }\n        \
    \        else\n                {\n                    path[i][j] = path[i][j -\
    \ 1] * 10 + grid[i][j];\n                }\n            }\n        }\n    }\n\
    \    auto res = new long[k];\n    auto i = n - 1;\n    auto j = m - 1;\n    foreach\
    \ (l; 0 .. k)\n    {\n        res[k - l - 1] = path[i][j] % 10;\n        if (i\
    \ == 0)\n        {\n            j--;\n        }\n        else if (j == 0)\n  \
    \      {\n            i--;\n        }\n        else\n        {\n            if\
    \ (", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][]\
    \ prev = new long[N][N];\n    long[][] next = new long[N][N];\n    for (long i\
    \ = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n           \
    \ next[i][j] = -1;\n        }\n    }\n    for (long step = 1; step < k; step++)\n\
    \    {\n        for (long i = 0; i < N; i++)\n        {\n            for (long\
    \ j = 0; j < N; j++)\n            {\n                long min = dp[i][j];\n  \
    \              long prev_i = i;\n                long prev_j = j;\n          \
    \      if (i > 0 && dp[i - 1][j] < min)\n                {\n                 \
    \   min = dp[i - 1][j];\n                    prev_i = i - 1;\n               \
    \     prev_j = j;\n                }\n                if (i < N - 1 && dp[i +\
    \ 1][j] < min)\n                {\n                    min = dp[i + 1][j];\n \
    \                   prev_i = i + 1;\n                    prev_j = j;\n       \
    \         }\n                if (j > 0 && dp[i][j - 1] < min)\n              \
    \  {\n                    min = dp[i][j - 1];\n                    prev_i = i;\n\
    \                    prev_j = j - 1;\n                }\n                if (j\
    \ < N - 1 && dp[i][j + 1] < min)\n                {\n                    min =\
    \ dp[i][j + 1];\n                    prev_i = i;\n                    prev_j =\
    \ j + 1;\n                }\n                dp[i][j] = min + grid[i][j];\n  \
    \              prev[i][j] = prev_i * N + prev_j;\n            }\n        }\n \
    \   }\n    long min = dp[0][0", "{\n    int n = grid.length;\n    int[][] dp =\
    \ new int[n][n];\n    int[][] path = new int[n][n];\n    int[][] dir = new int[][]{{0,\
    \ 1}, {1, 0}, {0, -1}, {-1, 0}};\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      for (int d = 0; d < 4; d++)\n            {\n                int x = i +\
    \ dir[d][0];\n                int y = j + dir[d][1];\n                if (x <\
    \ 0 || x >= n || y < 0 || y >= n)\n                    continue;\n           \
    \     if (dp[x][y] > dp[i][j] + grid[x][y])\n                {\n             \
    \       dp[x][y] = dp[i][j] + grid[x][y];\n                    path[x][y] = d;\n\
    \                }\n            }\n    int x = n - 1;\n    int y = n - 1;\n  \
    \  int[] ans = new int[k];\n    for (int i = 0; i < k; i++)\n    {\n        ans[i]\
    \ = grid[x][y];\n        int nx = x + dir[path[x][y]][0];\n        int ny = y\
    \ + dir[path[x][y]][1];\n        x = nx;\n        y = ny;\n    }\n    return ans;\n\
    }", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][]\
    \ prev = new long[n][n];\n    long[][] next = new long[n][n];\n    long[][] dist\
    \ = new long[n][n];\n    long[][] path = new long[n][n];\n    for (long i = 0;\
    \ i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n      \
    \      dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n            next[i][j]\
    \ = -1;\n            dist[i][j] = 1;\n            path[i][j] = grid[i][j];\n \
    \       }\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j\
    \ = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j];\n                prev[i][j]\
    \ = (i - 1) * n + j;\n                dist[i][j] = dist[i - 1][j] + 1;\n     \
    \           path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n            }\n  \
    \          if (j > 0 && dp[i][j] > dp[i][j - 1])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1];\n                prev[i][j] = i * n + j - 1;\n \
    \               dist[i][j] = dist[i][j - 1] + 1;\n                path[i][j] =\
    \ path[i][j - 1] * 10 + grid[i][j];\n            }\n            if (i < n - 1\
    \ && dp[i][j] > dp[i + 1][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j];\n                prev[", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n \
    \           dp[i][j] = grid[i][j];\n    foreach(i; 1 .. n)\n        foreach(j;\
    \ 1 .. n)\n            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1]);\n    long[]\
    \ res = new long[k];\n    long i = n - 1, j = n - 1;\n    foreach(idx; 0 .. k)\n\
    \    {\n        res[idx] = grid[i][j];\n        if(i == 0)\n            j--;\n\
    \        else if(j == 0)\n            i--;\n        else if(dp[i - 1][j] < dp[i][j\
    \ - 1])\n            i--;\n        else\n            j--;\n    }\n    return res;\n\
    }", "{\n    // Write your code here\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 1; i < n; i++)\n\
    \        dp[0][i] += dp[0][i - 1];\n    for (int i = 1; i < n; i++)\n        dp[i][0]\
    \ += dp[i - 1][0];\n    for (int i = 1; i < n; i++)\n        for (int j = 1; j\
    \ < n; j++)\n            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1]);\n    int[][]\
    \ path = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            path[i][j] = grid[i][j];\n    for (int i = 1; i\
    \ < n; i++)\n        path[0][i] += path[0][i - 1];\n    for (int i = 1; i < n;\
    \ i++)\n        path[i][0] += path[i - 1][0];\n    for (int i = 1; i < n; i++)\n\
    \        for (int j = 1; j < n; j++)\n            if (dp[i - 1][j] < dp[i][j -\
    \ 1])\n                path[i][j] += path[i - 1][j];\n            else\n     \
    \           path[i][j] += path[i][j - 1];\n    int[] res = new int[(int)k];\n\
    \    int i = n - 1, j = n - 1;\n    for (int l = (int)k - 1; l >= 0; l--)\n  \
    \  {\n        res[l] = path[i][j];\n        if (i > 0 && j > 0)\n        {\n \
    \           if (dp[i - 1][j", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 4;\n            }\n        }\n    long[]\
    \ res = new long[k];\n    int i = 0, j = 0;\n    for (int l = 0; l < k; l++)\n\
    \    {\n        res[l] = grid[i][j];\n        switch (prev[i][j])\n        {\n\
    \            case 1:\n                i--;\n                break;\n         \
    \   case 2:\n                j--;\n                break;\n            case 3:\n\
    \                i++;\n                break;\n            case", "{\n    auto\
    \ n = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    foreach (i; 0 .. n)\n    {\n \
    \       foreach (j; 0 .. m)\n        {\n            dp[i][j] = grid[i][j];\n \
    \           path[i][j] = 1;\n        }\n    }\n    foreach (i; 0 .. n)\n    {\n\
    \        foreach (j; 0 .. m)\n        {\n            if (i > 0 && dp[i - 1][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n     \
    \           path[i][j] = path[i - 1][j];\n            }\n            if (j > 0\
    \ && dp[i][j - 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1];\n                path[i][j] = path[i][j - 1];\n            }\n       \
    \ }\n    }\n    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n    \
    \    {\n            if (i > 0 && dp[i - 1][j] == dp[i][j])\n            {\n  \
    \              path[i][j] += path[i - 1][j];\n            }\n            if (j\
    \ > 0 && dp[i][j - 1] == dp[i][j])\n            {\n                path[i][j]\
    \ += path[i][j - 1];\n            }\n        }\n    }\n    foreach (i; 0 .. n)\n\
    \    {\n        foreach (j; 0 .. m)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] == dp[i][j])\n            {\n                path[i][j] += path[i -\
    \ 1][j];\n            }\n            if (j > 0 && dp[i][j - 1] == dp[i][j])\n",
  "{\n    int N = grid.length;\n    int[][] g = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            g[i][j] = (int)grid[i][j];\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = g[0][0];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + g[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + g[i][j]);\n        }\n    int[] res = new int[(int)k];\n    int\
    \ cur = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \            if (dp[i][j] == (int)k)\n            {\n                res[cur++]\
    \ = g[i][j];\n                int x = i;\n                int y = j;\n       \
    \         while (k > 1)\n                {\n                    if (x > 0 && dp[x\
    \ - 1][y] == dp[x][y] - g[x][y])\n                        x--;\n             \
    \       else if (y > 0 && dp[x][y - 1] == dp[x][y] - g[x][y])\n              \
    \          y--;\n                    res[cur++] = g[x][y];\n                 \
    \   k--;\n                }\n                return res.dup;\n            }\n\
    \    return res.dup;\n}", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n          \
    \  dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i + 1 < n)\n          \
    \      dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + grid[i + 1][j]);\n        \
    \    if(j + 1 < n)\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j]\
    \ + grid[i][j + 1]);\n        }\n    long[] res = new long[k];\n    long cur =\
    \ 0;\n    foreach(i; 0 .. k)\n    {\n        res[i] = grid[cur / n][cur % n];\n\
    \        if(cur / n + 1 < n && dp[cur / n + 1][cur % n] + grid[cur / n + 1][cur\
    \ % n] == dp[cur / n][cur % n])\n            cur += n;\n        else\n       \
    \     cur += 1;\n    }\n    return res;\n}", "{\n    int n = grid.length;\n  \
    \  int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            dp[i][j] = n * n + 1;\n    dp[0][0] = grid[0][0];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] res = new int[k];\n    for\
    \ (int i = 0; i < k; i++)\n        res[i] = grid[0][0];\n    int cur = 0;\n  \
    \  for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        \
    \    if (dp[i][j] == k)\n            {\n                int[] tmp = new int[k];\n\
    \                for (int l = 0; l < k; l++)\n                    tmp[l] = grid[0][0];\n\
    \                int c = 0;\n                int x = i;\n                int y\
    \ = j;\n                while (x > 0 || y > 0)\n                {\n          \
    \          tmp[c++] = grid[x][y];\n                    if (x > 0 && dp[x - 1][y]\
    \ == dp[x][y] - grid[x][y])\n                        x--;\n                  \
    \  else\n                        y--;\n                }\n                if (tmp\
    \ < res)\n                {\n                    res = tmp;\n                \
    \    cur = i * n + j;\n                }\n            }\n    return res;\n}",
  "{\n    import std.algorithm;\n    import std.range;\n    import std.stdio;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.iteration;\n    import std.algorithm.mutation;\n   \
    \ import std.algorithm.searching;\n    import std.array;\n    import std.conv;\n\
    \    import std.datetime;\n    import std.functional;\n    import std.range;\n\
    \    import std.bigint;\n    import std.bitmanip;\n    import std.complex;\n \
    \   import std.container;\n    import std.exception;\n    import std.file;\n \
    \   import std.format;\n    import std.math;\n    import std.numeric;\n    import\
    \ std.regex;\n    import std.string;\n    import std.typecons;\n    import std.uni;\n\
    \    import std.variant;\n    import std.traits;\n    import std.typecons;\n \
    \   import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            dp[i][j] = 1 << 30;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\
    \            if (i > 0)\n            {\n                if (dp[i - 1][j] + 1 <\
    \ dp[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j] +\
    \ 1;\n                    prev[i][j] = 0;\n                }\n            }\n\
    \            if (j > 0)\n            {\n                if (dp[i][j - 1] + 1 <\
    \ dp[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1] +\
    \ 1;\n                    prev[i][j] = 1;\n                }\n            }\n\
    \            if (i < n - 1)\n            {\n                if (dp[i + 1][j] +\
    \ 1 < dp[i][j])\n                {\n                    dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                    prev[i][j] = 2;\n                }\n            }\n\
    \            if (j < n - 1)\n            {\n                if (dp[i][j + 1] +\
    \ 1 < dp[i][j])\n                {\n                    dp[i][j] = dp[i][j + 1]\
    \ + 1;\n                    prev[i][j] = 3;\n                }\n            }\n\
    \        }\n    }\n    int[] path = new int[k];\n    int cur = 0;\n    int x =\
    \ 0;\n    int y = 0;\n    for (int i = 0; i < k", "{\n    auto n = grid.length;\n\
    \    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n    auto path\
    \ = new long[][](n, m);\n    auto res = new long[][](n, m);\n    foreach (i; 0\
    \ .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            if (i == 0\
    \ && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n        \
    \        path[i][j] = 1;\n            }\n            else if (i == 0)\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n            \
    \    path[i][j] = path[i][j - 1];\n            }\n            else if (j == 0)\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          path[i][j] = path[i - 1][j];\n            }\n            else\n   \
    \         {\n                if (dp[i - 1][j] < dp[i][j - 1])\n              \
    \  {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n            \
    \        path[i][j] = path[i - 1][j];\n                }\n                else\
    \ if (dp[i - 1][j] > dp[i][j - 1])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = path[i][j - 1];\n\
    \                }\n                else\n                {\n                \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j] = path[i\
    \ - 1][j] + path[i][j - 1];\n                }\n            }\n        }\n   \
    \ }\n    auto total = path[n - 1][m - 1];\n    auto cur = k;\n    auto i = n -\
    \ 1;\n    auto j = m - 1", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    int[][] dp = new int[n][m];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < m; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][m];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][m - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = m - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < m - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][m];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < m; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int min = int.max;\n    int[] ans = new int[k];\n    for (int",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long\
    \ i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n\
    \            if (i > 0 && dp[i][j] > dp[i - 1][j] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i][j]\
    \ > dp[i + 1][j] + grid[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j] + grid[i][j];\n                prev[i][j] = 2;\n            }\n    \
    \        if (j < N - 1 && dp[i][j] > dp[i][j + 1] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1] + grid[i][j];\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[k];\n    long\
    \ i = N - 1;\n    long j = N - 1;\n    for (long l = k - 1;", "{\n    long n =\
    \ grid.length;\n    long[] res = new long[(int)k];\n    long[] cur = new long[(int)k];\n\
    \    long[] min = new long[(int)k];\n    long[] min_pos = new long[(int)k];\n\
    \    long[] cur_pos = new long[(int)k];\n    long[] min_val = new long[(int)k];\n\
    \    long[] cur_val = new long[(int)k];\n    long[] min_dir = new long[(int)k];\n\
    \    long[] cur_dir = new long[(int)k];\n    long[] min_dir_pos = new long[(int)k];\n\
    \    long[] cur_dir_pos = new long[(int)k];\n    long[] min_dir_val = new long[(int)k];\n\
    \    long[] cur_dir_val = new long[(int)k];\n    long[] min_dir_dir = new long[(int)k];\n\
    \    long[] cur_dir_dir = new long[(int)k];\n    long[] min_dir_dir_pos = new\
    \ long[(int)k];\n    long[] cur_dir_dir_pos = new long[(int)k];\n    long[] min_dir_dir_val\
    \ = new long[(int)k];\n    long[] cur_dir_dir_val = new long[(int)k];\n    long[]\
    \ min_dir_dir_dir = new long[(int)k];\n    long[] cur_dir_dir_dir = new long[(int)k];\n\
    \    long[] min_dir_dir_dir_pos = new long[(int)k];\n    long[] cur_dir_dir_dir_pos\
    \ = new long[(int)k];\n    long[] min_dir_dir_dir_val = new long[(int)k];\n  \
    \  long[] cur_dir_dir_dir_val = new long[(int)k];\n    long[] min_dir_dir_dir_dir\
    \ = new long[(int)k];\n    long[] cur_dir_dir_dir_dir = new long[(int)k];\n  \
    \  long", "{\n    // Write your code here\n    long[] path = new long[(int)k];\n\
    \    long[] minPath = new long[(int)k];\n    long min = long.max;\n    long n\
    \ = grid.length;\n    long[][] visited = new long[(int)n][(int)n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            visited[(int)i][(int)j] = 0;\n        }\n    }\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n   \
    \         if (visited[(int)i][(int)j] == 0)\n            {\n                visited[(int)i][(int)j]\
    \ = 1;\n                path[0] = grid[(int)i][(int)j];\n                long[]\
    \ result = minPathHelper(grid, visited, path, 1, k, i, j, n);\n              \
    \  if (result[0] < min)\n                {\n                    min = result[0];\n\
    \                    for (long l = 0; l < k; l++)\n                    {\n   \
    \                     minPath[(int)l] = result[(int)l + 1];\n                \
    \    }\n                }\n                visited[(int)i][(int)j] = 0;\n    \
    \        }\n        }\n    }\n    return minPath;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j]\
    \ = int.max;\n            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j]) {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j]) {\n                dp[i][j] =\
    \ dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n        \
    \    if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j]) {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j]) {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int[] path = new int[(int)k];\n    int cur = 0;\n    for (int\
    \ i = 0; i < k; i++) {\n        path[i] = grid[cur / n][cur % n];\n        switch\
    \ (prev[cur / n][cur % n]) {\n            case 0:\n                cur -= n;\n\
    \                break;\n            case 1:\n                cur -= 1;\n", "{\n\
    \    int N = grid.length;\n    int[][] dist = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dist[i][j]\
    \ = int.max;\n    dist[0][0] = 0;\n    int[][] prev = new int[N][N];\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            prev[i][j]\
    \ = -1;\n    auto q = new PriorityQueue!(tuple(int, int, int))(tuple(int, int,\
    \ int)(grid[0][0], 0, 0));\n    while (!q.empty)\n    {\n        auto cur = q.front;\n\
    \        q.popFront;\n        int i = cur[1];\n        int j = cur[2];\n     \
    \   if (i > 0 && dist[i - 1][j] > dist[i][j] + 1)\n        {\n            dist[i\
    \ - 1][j] = dist[i][j] + 1;\n            prev[i - 1][j] = i * N + j;\n       \
    \     q.push(tuple(int, int, int)(grid[i - 1][j], i - 1, j));\n        }\n   \
    \     if (i < N - 1 && dist[i + 1][j] > dist[i][j] + 1)\n        {\n         \
    \   dist[i + 1][j] = dist[i][j] + 1;\n            prev[i + 1][j] = i * N + j;\n\
    \            q.push(tuple(int, int, int)(grid[i + 1][j], i + 1, j));\n       \
    \ }\n        if (j > 0 && dist[i][j - 1] > dist[i][j] + 1)\n        {\n      \
    \      dist[i][j - 1] = dist[i][j] + 1;\n            prev[i][j - 1] = i * N +\
    \ j;\n            q.push(tuple(int, int, int)(grid[i][j - 1], i, j -", "{\n  \
    \  int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n         \
    \   }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    long[] res = new long[k];\n \
    \   int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i]\
    \ = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n        else\
    \ if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y] == 3)\n\
    \            x++;\n       ", "{\n    long n = grid.length;\n    long[] res = new\
    \ long[(int)k];\n    long[][] dp = new long[(int)n][(int)n];\n    long[][] prev\
    \ = new long[(int)n][(int)n];\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = 0; j < n; j++) {\n            dp[(int)i][(int)j] = grid[(int)i][(int)j];\n\
    \            prev[(int)i][(int)j] = -1;\n        }\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i > 0\
    \ && dp[(int)i][(int)j] > dp[(int)i - 1][(int)j]) {\n                dp[(int)i][(int)j]\
    \ = dp[(int)i - 1][(int)j];\n                prev[(int)i][(int)j] = 0;\n     \
    \       }\n            if (j > 0 && dp[(int)i][(int)j] > dp[(int)i][(int)j - 1])\
    \ {\n                dp[(int)i][(int)j] = dp[(int)i][(int)j - 1];\n          \
    \      prev[(int)i][(int)j] = 1;\n            }\n            if (i < n - 1 &&\
    \ dp[(int)i][(int)j] > dp[(int)i + 1][(int)j]) {\n                dp[(int)i][(int)j]\
    \ = dp[(int)i + 1][(int)j];\n                prev[(int)i][(int)j] = 2;\n     \
    \       }\n            if (j < n - 1 && dp[(int)i][(int)j] > dp[(int)i][(int)j\
    \ + 1]) {\n                dp[(int)i][(int)j] = dp[", "{\n    int n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for (int\
    \ x = 0; x < n; x++)\n                for (int y = 0; y < n; y++)\n          \
    \          if (abs(x - i) + abs(y - j) == 1)\n                        dp[i][j]\
    \ = min(dp[i][j], dp[x][y] + grid[i][j]);\n    long[] ans = new long[(int)k];\n\
    \    for (int i = 0; i < k; i++)\n        ans[i] = dp[0][0];\n    return ans;\n\
    }", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto minPath\
    \ = new long[][](n, m);\n    auto minPathLength = new long[][](n, m);\n    auto\
    \ minPaths = new long[][][](n, m);\n    for (auto i = 0; i < n; i++)\n    {\n\
    \        for (auto j = 0; j < m; j++)\n        {\n            minPath[i][j] =\
    \ grid[i][j];\n            minPathLength[i][j] = 1;\n            minPaths[i][j]\
    \ = new long[](1);\n            minPaths[i][j][0] = grid[i][j];\n        }\n \
    \   }\n    for (auto i = 0; i < n; i++)\n    {\n        for (auto j = 0; j < m;\
    \ j++)\n        {\n            if (i > 0)\n            {\n                if (minPath[i\
    \ - 1][j] < minPath[i][j])\n                {\n                    minPath[i][j]\
    \ = minPath[i - 1][j];\n                    minPathLength[i][j] = minPathLength[i\
    \ - 1][j];\n                    minPaths[i][j] = minPaths[i - 1][j];\n       \
    \         }\n                else if (minPath[i - 1][j] == minPath[i][j])\n  \
    \              {\n                    if (minPathLength[i - 1][j] < minPathLength[i][j])\n\
    \                    {\n                        minPathLength[i][j] = minPathLength[i\
    \ - 1][j];\n                        minPaths[i][j] = minPaths[i - 1][j];\n   \
    \                 }\n                    else if (minPathLength[i - 1][j] == minPathLength[i][j])\n\
    \                    {\n                        auto path = minPaths[i - 1][j];\n\
    \                        path ~= grid[i][j];\n                        if (path\
    \ < minPaths[i][j])\n                        {\n                            minPaths[i][j]\
    \ = path;\n                        }\n                    }\n                }\n\
    \            }\n            if (j > 0)", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next\
    \ = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_prev\
    \ = new long[n][n];\n    long[][] path_next = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            prev[i][j] = grid[i][j];\n   \
    \         next[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n   \
    \         path_prev[i][j] = grid[i][j];\n            path_next[i][j] = grid[i][j];\n\
    \        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n  \
    \          {\n                prev[j][l] = next[j][l];\n                path_prev[j][l]\
    \ = path_next[j][l];\n            }\n        }\n        for (long j = 0; j < n;\
    \ j++)\n        {\n            for (long l = 0; l < n; l++)\n            {\n \
    \               next[j][l] = prev[j][l];\n                path_next[j][l] = path_prev[j][l];\n\
    \                if (j > 0)\n                {\n                    if (prev[j\
    \ - 1][l] < next[j][l])\n                    {\n                        next[j][l]\
    \ = prev[j - 1][l];\n                        path_next[j][l] = path_prev[j - 1][l];\n\
    \                    }\n                    else if (prev[j - 1][l] == next[j][l])\n\
    \                    {\n                        if (path_prev[", "{\n    long\
    \ N = grid.length;\n    long M = grid[0].length;\n    long[][] dp = new long[N][M];\n\
    \    long[][] prev = new long[N][M];\n    for (long i = 0; i < N; i++)\n    {\n\
    \        for (long j = 0; j < M; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < M; j++)\n\
    \        {\n            if (i > 0)\n            {\n                if (dp[i][j]\
    \ > dp[i - 1][j] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j];\n                    prev[i][j] = 0;\n        \
    \        }\n            }\n            if (j > 0)\n            {\n           \
    \     if (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n         \
    \           dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    prev[i][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    long[] res = new\
    \ long[k];\n    long i = N - 1;\n    long j = M - 1;\n    long cnt = k - 1;\n\
    \    while (cnt >= 0)\n    {\n        res[cnt] = grid[i][j];\n        if (prev[i][j]\
    \ == 0)\n        {\n            i--;\n        }\n        else if (prev[i][j] ==\
    \ 1)\n        {\n            j--;\n        }\n        cnt--;\n    }\n    return\
    \ res;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][]\
    \ dp = new long[n][m];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 1; i <\
    \ n; i++)\n        dp[i][0] += dp[i - 1][0];\n    for (int j = 1; j < m; j++)\n\
    \        dp[0][j] += dp[0][j - 1];\n    for (int i = 1; i < n; i++)\n        for\
    \ (int j = 1; j < m; j++)\n            dp[i][j] += min(dp[i - 1][j], dp[i][j -\
    \ 1]);\n    long[] res = new long[(int)k];\n    int i = n - 1;\n    int j = m\
    \ - 1;\n    for (int l = (int)k - 1; l >= 0; l--)\n    {\n        res[l] = grid[i][j];\n\
    \        if (i > 0 && j > 0)\n        {\n            if (dp[i - 1][j] < dp[i][j\
    \ - 1])\n                i--;\n            else\n                j--;\n      \
    \  }\n        else if (i > 0)\n            i--;\n        else\n            j--;\n\
    \    }\n    return res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = -1;\n    dp[0][0] = 0;\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            if (dp[i][j] != -1)\n\
    \            {\n                if (i + 1 < n && dp[i + 1][j] == -1)\n       \
    \             dp[i + 1][j] = dp[i][j] + 1;\n                if (j + 1 < n && dp[i][j\
    \ + 1] == -1)\n                    dp[i][j + 1] = dp[i][j] + 1;\n            \
    \    if (i - 1 >= 0 && dp[i - 1][j] == -1)\n                    dp[i - 1][j] =\
    \ dp[i][j] + 1;\n                if (j - 1 >= 0 && dp[i][j - 1] == -1)\n     \
    \               dp[i][j - 1] = dp[i][j] + 1;\n            }\n    int[] dx = {1,\
    \ 0, -1, 0};\n    int[] dy = {0, 1, 0, -1};\n    int[] path = new int[n * n];\n\
    \    for (int i = 0; i < n * n; i++)\n        path[i] = -1;\n    path[0] = 0;\n\
    \    int[] ans = new int[n * n];\n    for (int i = 0; i < n * n; i++)\n      \
    \  ans[i] = -1;\n    int[] cur = {0, 0};\n    int cur_len = 0;\n    while (true)\n\
    \    {\n        if (cur_len == k)\n        {\n            for (int i = 0; i <\
    \ n * n; i++)\n                ans[i] = path[i];\n            break;\n       \
    \ }\n       ", "{\n    int n = grid.length;\n    int m = grid[0].length;\n   \
    \ int[][] dp = new int[n][m];\n    int[][] prev = new int[n][m];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            prev[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < m; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (j < m\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int[] path = new int[k];\n    int x = 0;\n    int y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n       \
    \ switch (prev[x][y])\n        {", "{\n    long n = grid.length;\n    long[] res\
    \ = new long[(int)k];\n    long[][] dp = new long[(int)n][(int)n];\n    long[][]\
    \ prev = new long[(int)n][(int)n];\n    for (long i = 0; i < n; i++) {\n     \
    \   for (long j = 0; j < n; j++) {\n            dp[(int)i][(int)j] = grid[(int)i][(int)j];\n\
    \            prev[(int)i][(int)j] = -1L;\n        }\n    }\n    for (long i =\
    \ 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i\
    \ > 0 && dp[(int)i][(int)j] > dp[(int)i - 1][(int)j]) {\n                dp[(int)i][(int)j]\
    \ = dp[(int)i - 1][(int)j];\n                prev[(int)i][(int)j] = 0L;\n    \
    \        }\n            if (j > 0 && dp[(int)i][(int)j] > dp[(int)i][(int)j -\
    \ 1]) {\n                dp[(int)i][(int)j] = dp[(int)i][(int)j - 1];\n      \
    \          prev[(int)i][(int)j] = 1L;\n            }\n            if (i < n -\
    \ 1 && dp[(int)i][(int)j] > dp[(int)i + 1][(int)j]) {\n                dp[(int)i][(int)j]\
    \ = dp[(int)i + 1][(int)j];\n                prev[(int)i][(int)j] = 2L;\n    \
    \        }\n            if (j < n - 1 && dp[(int)i][(int)j] > dp[(int)i][(int)j\
    \ + 1]) {\n                dp[(int)i][(int)j]", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            prev[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (j < n\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int[] path = new int[k];\n    int x = 0;\n    int y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n       \
    \ switch (prev[x][y])\n        {\n            case 0:\n                x--;\n",
  "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    long[][] next = new long[n][n];\n    long[][] dist =\
    \ new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_len\
    \ = new long[n][n];\n    long[][] path_sum = new long[n][n];\n    long[][] path_min\
    \ = new long[n][n];\n    long[][] path_max = new long[n][n];\n    long[][] path_min_idx\
    \ = new long[n][n];\n    long[][] path_max_idx = new long[n][n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            dp[i][j] = grid[i][j];\n            prev[i][j] = 0;\n           \
    \ next[i][j] = 0;\n            dist[i][j] = 0;\n            path[i][j] = 0;\n\
    \            path_len[i][j] = 0;\n            path_sum[i][j] = 0;\n          \
    \  path_min[i][j] = 0;\n            path_max[i][j] = 0;\n            path_min_idx[i][j]\
    \ = 0;\n            path_max_idx[i][j] = 0;\n        }\n    }\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           if (i > 0)\n            {\n                if (dp[i][j] > dp[i - 1][j])\n\
    \                {\n                    dp[i][j] = dp[i - 1][j];\n           \
    \         prev[i][j] = 1;\n                }\n            }\n            if (j\
    \ > 0)\n            {\n                if (dp[i][j] > dp[", "{\n    int N = grid.length;\n\
    \    if (N == 0)\n        return new long[0];\n    if (k == 0)\n        return\
    \ new long[0];\n    if (k == 1)\n        return new long[] { grid[0][0] };\n \
    \   if (k == N * N)\n    {\n        long[] result = new long[N * N];\n       \
    \ int index = 0;\n        foreach (row; grid)\n            foreach (elem; row)\n\
    \                result[index++] = elem;\n        return result;\n    }\n    int[][]\
    \ dp = new int[N][N];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. N)\n\
    \            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N;\
    \ i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    }\n    for (int i = N - 1; i >= 0; i--)\n    {\n        for (int\
    \ j = N - 1; j >= 0; j--)\n        {\n            if (i < N - 1)\n           \
    \     dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1);\n            if (j < N - 1)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1);\n        }\n    }\n\
    \    int[][] dp2 = new int[N][N];\n    foreach (i; 0 .. N)\n        foreach (j;\
    \ 0 .. N)\n            dp2[i][j] = int.max;\n    dp2[0][0] = 0", "{\n    int N\
    \ = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i][j]\
    \ + grid[i - 1][j] < dp[i - 1][j])\n            {\n                dp[i - 1][j]\
    \ = dp[i][j] + grid[i - 1][j];\n                prev[i - 1][j] = 1;\n        \
    \    }\n            if (j > 0 && dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n \
    \           {\n                dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n   \
    \             prev[i][j - 1] = 2;\n            }\n            if (i < N - 1 &&\
    \ dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n            {\n                dp[i\
    \ + 1][j] = dp[i][j] + grid[i + 1][j];\n                prev[i + 1][j] = 3;\n\
    \            }\n            if (j < N - 1 && dp[i][j] + grid[i][j + 1] < dp[i][j\
    \ + 1])\n            {\n                dp[i][j + 1] = dp[i][j] + grid[i][j +\
    \ 1];\n                prev[i][j + 1] = 4;\n            }\n        }\n    long[]\
    \ res = new long[k];\n    int i = N - 1, j = N - 1;\n    for (int l = k - 1; l\
    \ >= 0; l--)\n    {\n        res", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dist = new long[n][m];\n    for (int i = 0; i < n; i++)\n      \
    \  for (int j = 0; j < m; j++)\n            dist[i][j] = long.max;\n    dist[0][0]\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n\
    \        {\n            if (i > 0)\n                dist[i][j] = min(dist[i][j],\
    \ dist[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dist[i][j]\
    \ = min(dist[i][j], dist[i][j - 1] + grid[i][j]);\n        }\n    long[] res =\
    \ new long[k];\n    int x = 0;\n    int y = 0;\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = grid[x][y];\n        if (x + 1 < n && dist[x + 1][y]\
    \ + grid[x][y] == dist[x][y])\n            x++;\n        else\n            y++;\n\
    \    }\n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
