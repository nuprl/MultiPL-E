name: HumanEval_46_fib4
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyu9cj5j.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmpyyu9cj5j.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyyu9cj5j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjcg3uelr.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpjcg3uelr.__unittest_L38_C1()\
    \ [0x427ab1]\\n??:? void tmpjcg3uelr.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x6f56f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n == 2 ? 2 : 0;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n\
    \    foreach (i; 4 .. n + 1) \n    {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfi6qzezb.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d95]\\n??:? void tmpfi6qzezb.__unittest_L35_C1()\
    \ [0x427ac1]\\n??:? void tmpfi6qzezb.__modtest() [0x427b18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42babb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a925]\\n??:? runModuleUnitTests [0x42b891]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42816b]\\n??:? _d_run_main [0x4280d6]\\n??:? main [0x427b2b]\\\
    n??:? __libc_start_main [0x4806c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpok4xxds1.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpok4xxds1.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpok4xxds1.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x74d2c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long i = 4;\n    while (i <= n) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n        i++;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n\
    \    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long\
    \ n) \n{\n    if (n < 0)\n        return 0;\n    if (n == 0)\n        return 0;\n\
    \    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if\
    \ (n == 3)\n        return 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n  \
    \  {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c =\
    \ d;\n        d = e;\n    }\n    return e;\n\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52s0y8ob.d(89): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52s0y8ob.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    if (n < 4) \n    {\n        return n;\n    }\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) \n  \
    \  {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5u0m8tab.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp5u0m8tab.__unittest_L39_C1()\
    \ [0x427ac5]\\n??:? void tmp5u0m8tab.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xa2798554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqyzj2_sd.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpqyzj2_sd.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpqyzj2_sd.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xb2b83554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 2 .. n)\n \
    \   {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\n/*\n    Given a string, find the length of the longest\
    \ substring without repeating characters.\n    >>> lengthOfLongestSubstring(\"\
    abcabcbb\")\n    3\n    >>> lengthOfLongestSubstring(\"bbbbb\")\n    1\n    >>>\
    \ lengthOfLongestSubstring(\"pwwkew\")\n    3\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6x0zc10y.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp6x0zc10y.__unittest_L42_C1()\
    \ [0x427a90]\\n??:? void tmp6x0zc10y.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x9167f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph2vy0c91.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmph2vy0c91.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmph2vy0c91.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xc4084554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return 0;\n    }\n    if (n == 0) \n    {\n        return 0;\n    }\n\
    \    if (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n\
    \        return 2;\n    }\n    if (n == 3) \n    {\n        return 0;\n    }\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n\
    \    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long\
    \ n) \n{\n    if (n < 0) \n    {\n        return 0;\n    }\n    if (n == 0) \n\
    \    {\n        return 0;\n    }\n    if (n == 1) \n    {\n        return 0;\n\
    \    }\n    if (n == 2) \n    {\n        return 2;\n    }\n    if (n == 3) \n\
    \    {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 2;\n    long d = 0\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8inpyc0.d(98): Error: semicolon expected, not `unittest`\\n/tmp/tmpf8inpyc0.d(98):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf8inpyc0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    else if (n == 0)\n        return 0;\n    else if (n == 1)\n \
    \       return 0;\n    else if (n == 2)\n        return 2;\n    else if (n ==\
    \ 3)\n        return 0;\n    else\n    {\n        long a = 0;\n        long b\
    \ = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n      \
    \  for (long i = 4; i <= n; i++)\n        {\n            e = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpulc2ybyr.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulc2ybyr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n   \
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmc86ufuy.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmpmc86ufuy.__unittest_L41_C1()\
    \ [0x427af5]\\n??:? void tmpmc86ufuy.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0x7fdba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // TODO: Implement this\
    \ function.\n    long a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long d\
    \ = 0L;\n    long e = 0L;\n    if (n == 0L)\n        return 0L;\n    if (n ==\
    \ 1L)\n        return 0L;\n    if (n == 2L)\n        return 2L;\n    if (n ==\
    \ 3L)\n        return 0L;\n    for (long i = 4L; i <= n; i++)\n    {\n       \
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3gjqjgyg.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmp3gjqjgyg.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3gjqjgyg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    foreach (i; 4 .. n)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3va8ky0a.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp3va8ky0a.__unittest_L38_C1()\
    \ [0x427aa4]\\n??:? void tmp3va8ky0a.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xfba5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprpqrjoh6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmprpqrjoh6.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmprpqrjoh6.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x5749e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n   \
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcn2_0eqr.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmpcn2_0eqr.__unittest_L41_C1()\
    \ [0x427af5]\\n??:? void tmpcn2_0eqr.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0xe59b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\n/*\nWrite a function to compute the\
    \ n-th element of the Fibonacci sequence.  Do not use recursion.\n    >>> fib(0L)\n\
    \    0L\n    >>> fib(1L)\n    1L\n    >>> fib(2L)\n    1L\n    >>> fib(3L)\n \
    \   2L\n    >>> fib(4L)\n    3L\n    >>> fib(5L)\n    5L\n    >>> fib(6L)\n  \
    \  8L\n    >>> fib(7L)\n    13L\n    >>> fib(8L)\n    21L\n    >>> fib(9L)\n \
    \   34L\n    >>> fib(10L)\n    55L\n*/\nlong fib(long n) \n{\n    if (n < 2) \n\
    \    {\n        return n;\n    }\n    long a = 0;\n    long b = 1;\n    long c\
    \ = 0;\n    for (long i = 2; i <= n; i++) \n    {\n        c = a + b;\n      \
    \  a = b;\n        b = c;\n    }\n    return c;\n}\n/*\nWrite a function to compute\
    \ the n-th element of the Fibonacci sequence.  Do not use recursion.\n    >>>\
    \ fib(0L)\n    0L\n    >>> fib(1L)\n    1L\n    >>> fib(2L)\n    1L\n    >>> fib(3L)\n\
    \    2L\n    >>> fib(4L)\n    3L\n    >>> fib(5L)\n    5L\n    >>> fib(6L)\n \
    \   8L\n    >>> fib(7L)\n    13L\n    >>> fib(8\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprbtm5a1c.d(82): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbtm5a1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    long i = 4;\n    while (i <= n)\n    {\n        e = a + b + c +\
    \ d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n       \
    \ i++;\n    }\n    return e;\n}\n/*\nThe Fib4 number sequence is a sequence similar\
    \ to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n  \
    \  fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n\
    \    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n        return -1;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long i = 4;\n\
    \    while (i <= n)\n    {\n        e = a + b + c + d;\n        a = b;\n     \
    \   b = c;\n        c = d;\n        d = e;\n        i\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zss2qhk.d(90): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp_zss2qhk.d(99): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmp_zss2qhk.d(99): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zss2qhk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    long i = 4;\n    while\
    \ (i <= n)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        i++;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnj_wjzpm.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpnj_wjzpm.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmpnj_wjzpm.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x350be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptub79ru1.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmptub79ru1.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptub79ru1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n+1];\n\
    \    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\n/*\nThe Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n\
    \    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n        return n;\n\
    \    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n \
    \   long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\n/*\nThe Fib4 number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1)\
    \ -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0kthjuyf.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kthjuyf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfsnw6ys9.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpfsnw6ys9.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpfsnw6ys9.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x81b3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    if (n == 0) \n    {\n        return 0;\n    }\n\
    \    if (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n\
    \        return 2;\n    }\n    if (n == 3) \n    {\n        return 0;\n    }\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long[] fib4 = new long[n + 1];\n    fib4[0] = 0;\n\
    \    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3]\
    \ + fib4[i - 4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n\
    \        return 0;\n    }\n    if (n == 1) \n    {\n        return 0;\n    }\n\
    \    if (n == 2) \n    {\n        return 2;\n    }\n    if (n == 3) \n    {\n\
    \        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long i = 4;\n    while (i <= n) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n        i++;\n    }\n    return e;\n}\n/*\nThe Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n\
    \        return 0;\n    }\n    if (n == 1) \n    {\n        return 0;\n    }\n\
    \    if (n == 2) \n    {\n        return 2;\n    }\n    if (n == 3) \n    {\n\
    \        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long i = 4;\n    while (i <= n) \n    {\n\
    \        e = a + b + c\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04el7ds3.d(97): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp04el7ds3.d(106): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmp04el7ds3.d(106): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04el7ds3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\n    The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n\
    \    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4_2(long\
    \ n) \n{\n    if (n < 0)\n        return -1;\n    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n\
    \    if (n == 3)\n        return 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n\
    \    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4vcarmlq.d(88): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vcarmlq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1wx9bgyi.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp1wx9bgyi.__unittest_L38_C1()\
    \ [0x427ab1]\\n??:? void tmp1wx9bgyi.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x8a9f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputuddg3k.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmputuddg3k.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmputuddg3k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    foreach (i; 4 .. n)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4kr5aqkn.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp4kr5aqkn.__unittest_L38_C1()\
    \ [0x427aa4]\\n??:? void tmp4kr5aqkn.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xac545554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb97xm_9a.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpb97xm_9a.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmpb97xm_9a.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x21677554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt670brcs.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt670brcs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n+1];\n\
    \    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsatjdhis.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsatjdhis.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n+1];\n\
    \    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp16od_no4.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16od_no4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxn9omb76.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn9omb76.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqp15y0f.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqp15y0f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nGiven a string of lowercase letters, return the index of the first\
    \ occurrence of a capital letter.  If no capital letters exist, return -1.\n \
    \   >>> firstCapital(\"hello\")\n    -1\n    >>> firstCapital(\"Hello\")\n   \
    \ 0\n    >>> firstCapital(\"hEllo\")\n    1\n    >>> firstCapital(\"heLlo\")\n\
    \    2\n    >>> firstCapital(\"helLo\")\n    3\n    >>> firstCapital(\"hellO\"\
    )\n    4\n*/\nlong firstCapital(string s) \n{\n    if (s.length == 0)\n      \
    \  return -1;\n    for (long i = 0; i < s.length; i++)\n    {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            return i;\n    }\n    return -1;\n}\n/*\n\
    Given a string of lowercase letters, return the index of the first occurrence\
    \ of a capital letter.  If no capital letters exist, return -1.\n    >>> firstCapital(\"\
    hello\")\n    -1\n    >>> firstCapital(\"Hello\")\n    0\n    >>> firstCapital(\"\
    hEllo\")\n    1\n    >>> firstCapital(\"heLlo\")\n    2\n    >>> firstCapital(\"\
    helLo\")\n    3\n    >>> firstCapital(\"hellO\")\n    4\n*/\nlong firstCapital(string\
    \ s) \n{\n    if (s.length == 0)\n        return -1;\n    for (long i = 0; i <\
    \ s.length; i\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozzga8c6.d(92): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpozzga8c6.d(101): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozzga8c6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvh_g3n3q.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpvh_g3n3q.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmpvh_g3n3q.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xbb84b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 2 .. n)\n \
    \   {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvp3vn13y.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpvp3vn13y.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmpvp3vn13y.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x1bf50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxbicvdo.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxbicvdo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) return n;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\n    Given an array of integers, return a new array such that each\
    \ element at index i of the new array is the product of all the numbers in the\
    \ original array except the one at i.\n    For example, if our input was [1, 2,\
    \ 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was\
    \ [3, 2, 1], the expected output would be [2, 3, 6].\n    Follow-up: what if you\
    \ can't use division?\n    >>> product_array([1, 2, 3, 4, 5])\n    [120, 60, 40,\
    \ 30, 24]\n    >>> product_array([3, 2, 1])\n    [2, 3, 6]\n*/\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps0hhvr0n.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmps0hhvr0n.d(92):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps0hhvr0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0zna9s0q.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zna9s0q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4c2uwpf.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpt4c2uwpf.__unittest_L47_C1()\
    \ [0x427ae8]\\n??:? void tmpt4c2uwpf.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0x8d3c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpihog9ikg.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihog9ikg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d =\
    \ 0;\n    for (long i = 4; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwhwtlkff.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpwhwtlkff.__unittest_L36_C1()\
    \ [0x427ab1]\\n??:? void tmpwhwtlkff.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x9d35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu3g749db.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpu3g749db.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmpu3g749db.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x97e4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n   \
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpca83tbwc.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmpca83tbwc.__unittest_L41_C1()\
    \ [0x427af5]\\n??:? void tmpca83tbwc.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0x3b94c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = [0L, 0L,\
    \ 2L, 0L];\n    long[] fib4_next = [0L, 0L, 2L, 0L];\n    long[] fib4_temp;\n\
    \    long[] fib4_temp_next;\n    long[] fib4_temp_next_next;\n    long[] fib4_temp_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next;\n    long[] fib4_temp_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next;\n    long[] fib4_temp_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next;\n    long[] fib4_temp_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next;\n   \
    \ long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next;\n \
    \   long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long[] fib4_temp_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3u4fyddw.d(41): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u4fyddw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvr_43yz6.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr_43yz6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) return\
    \ 0L;\n    if (n == 1L) return 0L;\n    if (n == 2L) return 2L;\n    if (n ==\
    \ 3L) return 0L;\n    long a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long\
    \ d = 0L;\n    long e = 0L;\n    for (long i = 4L; i <= n; i++) \n    {\n    \
    \    e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = e;\n    }\n    return e;\n}\n/*\n    Given a list of integers, return\
    \ a list of the integers, omitting any that are less than 0.\n    >>> filter_negatives([1,\
    \ -2, 3, -4, 5])\n    [1, 3, 5]\n    >>> filter_negatives([-1, -2, -3, -4, -5])\n\
    \    []\n    >>> filter_negatives([])\n    []\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n+1];\n\
    \    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4t7dv6am.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp4t7dv6am.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmp4t7dv6am.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xe881b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5auwx8i.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5auwx8i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //TODO: Write your code\
    \ here\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n\
    \    if(n == 2)\n        return 2;\n    if(n == 3)\n        return 0;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long temp = 0;\n\
    \    for(long i = 4; i <= n; i++)\n    {\n        temp = a + b + c + d;\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return\
    \ temp;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long temp = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = temp;\n    }\n    return temp;\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1lr5ubwy.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp1lr5ubwy.__unittest_L38_C1()\
    \ [0x427ab1]\\n??:? void tmp1lr5ubwy.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xa6216554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbgjchrjm.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgjchrjm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ temp = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        temp = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \    }\n    return temp;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) return\
    \ 0L;\n    if (n == 1L) return 0L;\n    if (n == 2L) return 2L;\n    if (n ==\
    \ 3L) return 0L;\n    long a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long\
    \ d = 0L;\n    long e = 0L;\n    for (long i = 4L; i <= n; i++) \n    {\n    \
    \    e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxn80tgfd.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn80tgfd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    else\n    {\n        long a = 0;\n        long b = 0;\n     \
    \   long c = 2;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n\
    \        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j\
    \ = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n      \
    \  long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n\
    \        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v\
    \ = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n      \
    \  long z = 0;\n        long aa = 0;\n        long ab = 0;\n        long ac =\
    \ 0;\n        long ad = 0;\n        long ae = 0;\n        long af = 0;\n     \
    \   long ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long aj\
    \ = 0;\n        long ak = 0;\n        long al = 0;\n        long am = 0;\n   \
    \     long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long aq\
    \ = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n   \
    \     long au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax\
    \ = 0;\n        long ay = 0;\n        long az = 0;\n        long ba = 0;\n   \
    \     long bb = 0;\n        long bc = 0;\n        long bd = 0;\n        long be\
    \ = 0;\n        long bf = 0;\n        long bg = 0;\n        long bh = 0;\n   \
    \     long bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long bl\
    \ = 0;\n        long bm = 0;\n        long bn = 0;\n        long bo = 0;\n   \
    \     long bp = 0;\n        long bq =\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp762s8b9t.d(93): Error: expression expected, not `unittest`\\\
    n/tmp/tmp762s8b9t.d(94): Error: semicolon expected, not `{`\\n/tmp/tmp762s8b9t.d(102):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp762s8b9t.d(102): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp762s8b9t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeoc92r6s.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoc92r6s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdes2tn1.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdes2tn1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnyzmpg61.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnyzmpg61.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0d68wg22.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0d68wg22.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dhjen7p.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dhjen7p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 4 .. n + 1)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp35z5tsyg.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d8d]\\n??:? void tmp35z5tsyg.__unittest_L33_C1()\
    \ [0x427ab9]\\n??:? void tmp35z5tsyg.__modtest() [0x427b10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a91d]\\n??:? runModuleUnitTests [0x42b889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428163]\\n??:? _d_run_main [0x4280ce]\\n??:? main [0x427b23]\\\
    n??:? __libc_start_main [0x1df45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n      \
    \  return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return\
    \ 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return 0;\n    }\n    if (n < 2) \n    {\n        return n;\n    }\n\
    \    long a = 0;\n    long b = 1;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 2; i < n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\n    Given a list of integers, return the indices of the two numbers\
    \ such that they add up to a specific target.\n    You may assume that each input\
    \ would have exactly one solution, and you may not use the same element twice.\n\
    \    >>> twoSum([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> twoSum([3, 2, 4], 6)\n\
    \    [1, 2]\n    >>> twoSum([3, 3], 6)\n    [0, 1]\n*/\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5xjblnen.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp5xjblnen.__unittest_L54_C1()\
    \ [0x427ab0]\\n??:? void tmp5xjblnen.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x4a5e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyp7_9jjr.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7_9jjr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdjgpn_ot.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpdjgpn_ot.__unittest_L38_C1()\
    \ [0x427ab1]\\n??:? void tmpdjgpn_ot.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xcf7d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2mx0bal.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2mx0bal.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n\
    \    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long\
    \ n) \n{\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if\
    \ (n == 2) return 2;\n    if (n == 3) return 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return e;\n}\n/*\nThe Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fib4(0) -> 0\n    fib4(1\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbv2bqmnx.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbv2bqmnx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4];\n    }\n    return fib[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d =\
    \ 0;\n    for (long i = 4; i <= n; i++)\n    {\n        d = a + b + c;\n     \
    \   a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgxvzg490.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpgxvzg490.__unittest_L36_C1()\
    \ [0x427ab1]\\n??:? void tmpgxvzg490.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x289e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 3)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgzx_49im.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpgzx_49im.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmpgzx_49im.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x428a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp96h017et.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp96h017et.__unittest_L36_C1()\
    \ [0x427ab1]\\n??:? void tmp96h017et.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x8506e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) return\
    \ 0L;\n    if (n == 1L) return 0L;\n    if (n == 2L) return 2L;\n    if (n ==\
    \ 3L) return 0L;\n    long a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long\
    \ d = 0L;\n    long e = 0L;\n    for (long i = 4L; i <= n; i++)\n    {\n     \
    \   e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n     \
    \   d = e;\n    }\n    return e;\n}\n/*\nGiven a list of numbers, return a list\
    \ where\nall adjacent == elements have been reduced to a single element,\nso [1,\
    \ 2, 2, 3] returns [1, 2, 3]. You may create a new list or\nmodify the passed\
    \ in list.\n*/\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n\
    \ + 1];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n\
    \    for (long i = 4; i <= n; i++) \n    {\n        fib4[i] = fib4[i - 1] + fib4[i\
    \ - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    return fib4[n];\n}\n/*\n    Given\
    \ a string of characters, return the character that appears the most often.  If\
    \ there are multiple characters that appear the most often, return the first one.\n\
    \    >>> mostFrequent('abca')\n    'a'\n    >>> mostFrequent('abbbccc')\n    'b'\n\
    \    >>> mostFrequent('abbbcccdddd')\n    'd'\n*/\nchar mostFrequent(string s)\
    \ \n{\n    char[] charArray = s.dup;\n    char[] charCount = new char[256];\n\
    \    foreach (char c; charArray) \n    {\n        charCount[c]++;\n    }\n   \
    \ int max = 0;\n    char maxChar = ' ';\n    foreach (char c; charArray) \n  \
    \  {\n        if (charCount[c] > max) \n        {\n            max = charCount[c];\n\
    \            maxChar = c;\n        }\n    }\n    return maxChar;\n}\n/*\n    Given\
    \ a string of characters, return the character that appears the most often.  If\
    \ there are multiple characters that appear the most often, return the first one.\n\
    \    >>> mostFrequent('abca')\n    'a'\n    >>> mostFrequent('abbbccc')\n    'b'\n\
    \    >>> mostFrequent('abbbcccdddd')\n    'd'\n*/\nchar mostFrequent(string s)\
    \ \n{\n    char[] charArray = s.dup;\n    char[] charCount = new char[256];\n\
    \    foreach (char c; charArray) \n    {\n        charCount[c]++;\n    }\n   \
    \ int max = 0\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphziznb6b.d(79): Error: semicolon expected, not `unittest`\\n/tmp/tmphziznb6b.d(79):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphziznb6b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpav11a_4q.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav11a_4q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n\
    \ + 1];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i - 1] + fib4[i\
    \ - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    return fib4[n];\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4ud83yd.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4ud83yd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    else \n    {\n        long[] fib = new long[n +\
    \ 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n       \
    \ fib[3] = 0;\n        for (long i = 4; i <= n; i++) \n        {\n           \
    \ fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n   \
    \     return fib[n];\n    }\n}\n/*\n    Given a list of integers, return the indices\
    \ of the two numbers that add up to a specific target.\n    You may assume that\
    \ each input would have exactly one solution, and you may not use the same element\
    \ twice.\n    >>> twoSum([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> twoSum([3, 2,\
    \ 4], 6)\n    [1, 2]\n    >>> twoSum([3, 3], 6)\n    [0, 1]\n*/\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9itgxmad.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9itgxmad.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51nf7aom.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51nf7aom.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n   \
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5vmokjj5.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmp5vmokjj5.__unittest_L41_C1()\
    \ [0x427af5]\\n??:? void tmp5vmokjj5.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0xa2c77554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L)\n     \
    \   return 0L;\n    if (n == 1L)\n        return 0L;\n    if (n == 2L)\n     \
    \   return 2L;\n    if (n == 3L)\n        return 0L;\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    foreach (i;\
    \ 4L .. n)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\n/*\nGiven a string of\
    \ characters, return a list of all the substrings of length n.\n    >>> substrings(\"\
    abcde\", 2)\n    [\"ab\", \"bc\", \"cd\", \"de\"]\n    >>> substrings(\"abcde\"\
    , 3)\n    [\"abc\", \"bcd\", \"cde\"]\n    >>> substrings(\"abcde\", 4)\n    [\"\
    abcd\", \"bcde\"]\n    >>> substrings(\"abcde\", 5)\n    [\"abcde\"]\n    >>>\
    \ substrings(\"abcde\", 6)\n    []\n*/\nstring[] substrings(string s, size_t n)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. s.length - n)\n    {\n     \
    \   result ~= s[i .. i + n - 1];\n    }\n    return result;\n}\n/*\nGiven a string\
    \ of characters, return a list of all the substrings of length n, in reverse order.\n\
    \    >>> substrings(\"abcde\", 2)\n    [\"de\", \"cd\", \"bc\", \"ab\"]\n    >>>\
    \ substrings(\"abcde\", 3)\n    [\"cde\", \"bcd\", \"abc\"]\n    >>> substrings(\"\
    abcde\", 4)\n    [\"bcde\", \"abcd\"]\n    >>> substrings(\"abcde\", 5)\n    [\"\
    abcde\"]\n    >>> substrings(\"abcde\", 6)\n    []\n*/\nstring[] substringsReverse(string\
    \ s, size_t n) \n{\n    string[] result;\n    foreach (\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oirsrb2.d(83): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp9oirsrb2.d(83): Error: no identifier for declarator `_error_`\\n/tmp/tmp9oirsrb2.d(83):\
    \ Error: found `unittest` when expecting `;`\\n/tmp/tmp9oirsrb2.d(92): Error:\
    \ found `void` when expecting `)`\\n/tmp/tmp9oirsrb2.d(92): Error: found `{` when\
    \ expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9oirsrb2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fibs = new long[4];\n\
    \    fibs[0] = 0;\n    fibs[1] = 0;\n    fibs[2] = 2;\n    fibs[3] = 0;\n    for\
    \ (int i = 4; i <= n; i++) \n    {\n        long sum = 0;\n        for (int j\
    \ = 0; j < fibs.length; j++) \n        {\n            sum += fibs[j];\n      \
    \  }\n        fibs[i % 4] = sum;\n    }\n    return fibs[n % 4];\n}\n/*\n    Given\
    \ a list of integers, return the sum of the largest and smallest integers in the\
    \ list.  If the list is empty, return 0.\n    >>> sumOfLargestAndSmallest([])\n\
    \    0\n    >>> sumOfLargestAndSmallest([1])\n    2\n    >>> sumOfLargestAndSmallest([1,\
    \ 2])\n    3\n    >>> sumOfLargestAndSmallest([1, 2, 3])\n    4\n    >>> sumOfLargestAndSmallest([1,\
    \ 2, 3, 4])\n    5\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5])\n    6\n\
    \    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6])\n    7\n    >>> sumOfLargestAndSmallest([1,\
    \ 2, 3, 4, 5, 6, 7])\n    8\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8])\n    9\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\
    \    10\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  \
    \  11\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\
    \    12\n    >>> sumOfLargestAndSmallest([1, 2, 3, 4, 5, 6, 7\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppknv0k23.d(37): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppknv0k23.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsqinbt96.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpsqinbt96.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpsqinbt96.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x6b0fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ temp = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        temp = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \    }\n    return temp;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nWrite a function that takes a string and returns a new string with\
    \ all the vowels removed.\n    >>> removeVowels(\"Hello World\")\n    \"Hll Wrld\"\
    \n    >>> removeVowels(\"This is a test\")\n    \"Ths s  tst\"\n*/\nstring removeVowels(string\
    \ s) \n{\n    string result = \"\";\n    foreach (c; s)\n    {\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n            result\
    \ ~= c;\n    }\n    return result;\n}\n/*\nWrite a function that takes a string\
    \ and returns a new string with all the vowels removed.\n    >>> removeVowels(\"\
    Hello World\")\n    \"Hll Wrld\"\n    >>> removeVowels(\"This is a test\")\n \
    \   \"Ths s  tst\"\n*/\nstring removeVowels(string s) \n{\n    string result =\
    \ \"\";\n    foreach (c; s)\n    {\n        if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u')\n            result ~= c;\n    }\n    return result;\n\
    }\n/*\nWrite a function that takes a string and returns a new string with all\
    \ the vowels removed.\n    >>> removeVowels(\"Hello World\")\n    \"Hll Wrld\"\
    \n    >>> removeVowels(\"\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftbgng2c.d(80): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftbgng2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojg40sp9.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojg40sp9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    if (n == 0) \n    {\n        return 0;\n    }\n\
    \    if (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n\
    \        return 2;\n    }\n    if (n == 3) \n    {\n        return 0;\n    }\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf0y1laru.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpf0y1laru.__unittest_L36_C1()\
    \ [0x427a8c]\\n??:? void tmpf0y1laru.__modtest() [0x427b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b17]\\\
    n??:? __libc_start_main [0xee24b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxt7mly8j.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt7mly8j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpexcfbwz6.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexcfbwz6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4q7orly.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4q7orly.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    if (n == 4)\n        return 1;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 2;\n    long d = 1;\n    long e = 0;\n    for (long i = 5; i <= n; i++)\n\
    \    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n    return e;\n}\n/*\n    Given a list of integers,\
    \ find the largest product that can be made by multiplying any three integers.\n\
    \    For example, if the list is [-10, -10, 5, 2], we should return 500, since\
    \ that's -10 * -10 * 5.\n    You can assume the list has at least three integers.\n\
    \    >>> largestProduct([-10, -10, 5, 2])\n    500\n    >>> largestProduct([-10,\
    \ -10, 5, 2, -2])\n    500\n    >>> largestProduct([-10, -10, 5, 2, -2, -2])\n\
    \    500\n    >>> largestProduct([-10, -10, 5, 2, -2, -2, -2])\n    500\n    >>>\
    \ largestProduct([-10, -10, 5, 2, -2, -2, -2, -2])\n    500\n    >>> largestProduct([-10,\
    \ -10, 5, 2, -2, -2, -2, -2, -2])\n    500\n    >>> largestProduct([-10, -10,\
    \ 5, 2, -2, -2, -2, -2, -2, -2])\n    500\n    >>> largestProduct([-10, -10, 5,\
    \ 2, -2, -2, -2, -2, -2, -2, -2])\n    500\n    >>> largestProduct([-10, -10,\
    \ 5, 2, -2, -2, -2,\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwnxbk6zh.d(48): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnxbk6zh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return (n == 0) ? 0 : (n == 1) ? 0 : (n == 2) ? 2 : 0;\n    else\n    {\n  \
    \      auto a = 0L;\n        auto b = 0L;\n        auto c = 2L;\n        auto\
    \ d = 0L;\n        auto e = 0L;\n        auto f = 0L;\n        auto g = 0L;\n\
    \        auto h = 0L;\n        auto i = 0L;\n        auto j = 0L;\n        auto\
    \ k = 0L;\n        auto l = 0L;\n        auto m = 0L;\n        auto o = 0L;\n\
    \        auto p = 0L;\n        auto q = 0L;\n        auto r = 0L;\n        auto\
    \ s = 0L;\n        auto t = 0L;\n        auto u = 0L;\n        auto v = 0L;\n\
    \        auto w = 0L;\n        auto x = 0L;\n        auto y = 0L;\n        auto\
    \ z = 0L;\n        auto aa = 0L;\n        auto ab = 0L;\n        auto ac = 0L;\n\
    \        auto ad = 0L;\n        auto ae = 0L;\n        auto af = 0L;\n       \
    \ auto ag = 0L;\n        auto ah = 0L;\n        auto ai = 0L;\n        auto aj\
    \ = 0L;\n        auto ak = 0L;\n        auto al = 0L;\n        auto am = 0L;\n\
    \        auto an = 0L;\n        auto ao = 0L;\n        auto ap = 0L;\n       \
    \ auto aq = 0L;\n        auto ar = 0L;\n        auto as = 0L;\n        auto at\
    \ = 0L;\n        auto au = 0L;\n        auto av = 0L;\n        auto aw = 0L;\n\
    \        auto ax = 0L;\n        auto ay = 0L;\n        auto az = 0L;\n       \
    \ auto ba = 0L;\n        auto bb = 0L;\n        auto bc = 0L;\n        auto bd\
    \ = 0L;\n        auto be = 0L;\n        auto bf = 0L;\n       \nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4wvdc0g.d(83): Error: found `unittest` instead of statement\\\
    n/tmp/tmpj4wvdc0g.d(92): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4wvdc0g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uknuk3d.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmp7uknuk3d.d(92):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7uknuk3d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptglojqek.d(94): Error: expression expected, not `unittest`\\\
    n/tmp/tmptglojqek.d(95): Error: semicolon expected, not `{`\\n/tmp/tmptglojqek.d(103):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptglojqek.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafh44t35.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafh44t35.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L)\n     \
    \   return 0L;\n    if (n == 1L)\n        return 0L;\n    if (n == 2L)\n     \
    \   return 2L;\n    if (n == 3L)\n        return 0L;\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \ \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpszs5n9p5.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszs5n9p5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyhihw0m0.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpyhihw0m0.__unittest_L38_C1()\
    \ [0x427ab1]\\n??:? void tmpyhihw0m0.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x1e0e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4glktk3_.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp4glktk3_.__unittest_L35_C1()\
    \ [0x427ab1]\\n??:? void tmp4glktk3_.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x65064554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbmjrmmo.d(92): Error: semicolon expected, not `unittest`\\n/tmp/tmptbmjrmmo.d(92):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptbmjrmmo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzlfycuhi.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzlfycuhi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nGiven a string, find the length of the longest substring without\
    \ repeating characters.\n    >>> lengthOfLongestSubstring(\"abcabcbb\")\n    3\n\
    \    >>> lengthOfLongestSubstring(\"bbbbb\")\n    1\n    >>> lengthOfLongestSubstring(\"\
    pwwkew\")\n    3\n*/\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) return n;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpynp2xw0y.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynp2xw0y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 3; i < n;\
    \ i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4zq_p94.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4zq_p94.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbq_kd5gu.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpbq_kd5gu.__unittest_L47_C1()\
    \ [0x427ae8]\\n??:? void tmpbq_kd5gu.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0xdbd0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (long\
    \ i = 4; i <= n; i++)\n    {\n        long temp = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return a +\
    \ b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7fmm2tx1.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmp7fmm2tx1.__unittest_L45_C1()\
    \ [0x427ae8]\\n??:? void tmp7fmm2tx1.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0x88c12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzaj848rw.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzaj848rw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgxdmto_.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmpcgxdmto_.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcgxdmto_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 3)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n        a\
    \ = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeici4fxw.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpeici4fxw.__unittest_L36_C1()\
    \ [0x427a90]\\n??:? void tmpeici4fxw.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xd3ccf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0dn2s5d.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0dn2s5d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) return n;\n\
    \    long[] fibs = new long[n + 1];\n    fibs[0] = 0;\n    fibs[1] = 0;\n    fibs[2]\
    \ = 2;\n    fibs[3] = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        fibs[i]\
    \ = fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i - 4];\n    }\n    return\
    \ fibs[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgmg5njrh.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpgmg5njrh.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpgmg5njrh.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x679ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4];\n    }\n    return fib[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ i = 4;\n    while (i <= n)\n    {\n        long tmp = a + b + c + d;\n     \
    \   a = b;\n        b = c;\n        c = d;\n        d = tmp;\n        i++;\n \
    \   }\n    return a + b + c + d;\n}\n/*\nGiven a list of integers, return the\
    \ largest product that can be made by multiplying any three integers.\n    >>>\
    \ largestProduct([2, 1, 3, 7])\n    42\n    >>> largestProduct([0, 2, 3])\n  \
    \  0\n*/\nlong largestProduct(int[] nums) \n{\n    if (nums.length < 3)\n    \
    \    return -1;\n    long max1 = long.min;\n    long max2 = long.min;\n    long\
    \ max3 = long.min;\n    long min1 = long.max;\n    long min2 = long.max;\n   \
    \ foreach (num; nums)\n    {\n        if (num > max1)\n        {\n           \
    \ max3 = max2;\n            max2 = max1;\n            max1 = num;\n        }\n\
    \        else if (num > max2)\n        {\n            max3 = max2;\n         \
    \   max2 = num;\n        }\n        else if (num > max3)\n        {\n        \
    \    max3 = num;\n        }\n        if (num < min1)\n        {\n            min2\
    \ = min1;\n            min1 = num;\n        }\n        else if (num < min2)\n\
    \        {\n            min2 = num;\n        }\n    }\n    return max(max1 * max2\
    \ * max3, max1 * min1 * min2);\n}\n/*\nGiven a list of integers, return the largest\
    \ product that can be made by\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62lukox6.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62lukox6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphzdlv5hl.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzdlv5hl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4];\n    }\n    return fib[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozamo72w.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozamo72w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwi8sjbuj.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwi8sjbuj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg28smp0e.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg28smp0e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphttp2m26.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmphttp2m26.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmphttp2m26.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xf9baf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9dts3_8.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9dts3_8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcs0snnkq.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpcs0snnkq.__unittest_L33_C1()\
    \ [0x427ab1]\\n??:? void tmpcs0snnkq.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xe7dfc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4_seq = new\
    \ long[n + 1];\n    fib4_seq[0] = 0;\n    fib4_seq[1] = 0;\n    fib4_seq[2] =\
    \ 2;\n    fib4_seq[3] = 0;\n    foreach(i; 4 .. n + 1)\n    {\n        fib4_seq[i]\
    \ = fib4_seq[i - 1] + fib4_seq[i - 2] + fib4_seq[i - 3] + fib4_seq[i - 4];\n \
    \   }\n    return fib4_seq[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib4 = new long[n+1];\n\
    \    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for(long\
    \ i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4];\n    }\n    return fib4[n];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long i = 4;\n    while (i <= n) \n    {\n        d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n        i++;\n    }\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpndzi1zhe.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpndzi1zhe.__unittest_L40_C1()\
    \ [0x427ab1]\\n??:? void tmpndzi1zhe.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xda168554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    foreach(i; 1..n)\n\
    \    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb1vjfegd.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d8d]\\n??:? void tmpb1vjfegd.__unittest_L36_C1()\
    \ [0x427a94]\\n??:? void tmpb1vjfegd.__modtest() [0x427b0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a91d]\\n??:? runModuleUnitTests [0x42b889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428163]\\n??:? _d_run_main [0x4280ce]\\n??:? main [0x427b1f]\\\
    n??:? __libc_start_main [0xc3a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        long temp\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = temp;\n    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmpvhbn4d.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpmpvhbn4d.__unittest_L39_C1()\
    \ [0x427aa4]\\n??:? void tmpmpvhbn4d.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x5010d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo89hfxot.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmpo89hfxot.d(93):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo89hfxot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0f77g6ba.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f77g6ba.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n       \
    \ return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nGiven a list of integers, return the sum of the largest and smallest\
    \ integers in the list.\n    >>> sumLargestAndSmallest([1, 2, 3, 4])\n    5\n\
    \    >>> sumLargestAndSmallest([1, 2, 3, 4, 5])\n    6\n    >>> sumLargestAndSmallest([-1,\
    \ -2, -3, -4, -5])\n    -6\n    >>> sumLargestAndSmallest([-1, -2, -3, -4, 5])\n\
    \    4\n    >>> sumLargestAndSmallest([])\n    0\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) \n    {\n\
    \        return 0L;\n    }\n    else if (n == 1L) \n    {\n        return 0L;\n\
    \    }\n    else if (n == 2L) \n    {\n        return 2L;\n    }\n    else if\
    \ (n == 3L) \n    {\n        return 0L;\n    }\n    else \n    {\n        long[]\
    \ fib4 = new long[n + 1L];\n        fib4[0L] = 0L;\n        fib4[1L] = 0L;\n \
    \       fib4[2L] = 2L;\n        fib4[3L] = 0L;\n        for (long i = 4L; i <=\
    \ n; i++) \n        {\n            fib4[i] = fib4[i - 1L] + fib4[i - 2L] + fib4[i\
    \ - 3L] + fib4[i - 4L];\n        }\n        return fib4[n];\n    }\n}\n/*\nThe\
    \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's\
    \ defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n\
    \    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \    Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n\
    \    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n\
    \ == 0L) \n    {\n        return 0L;\n    }\n    else if (n == 1L) \n    {\n \
    \       return 0L;\n    }\n    else if (n == 2L) \n    {\n        return 2L;\n\
    \    }\n    else if (n == 3L) \n    {\n        return 0L\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxl5qang.d(84): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpdxl5qang.d(93): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpdxl5qang.d(93): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxl5qang.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4o59nkdm.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4o59nkdm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    for (long i = 4; i <= n; i++) \n    {\n        long e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    if (n < 4) \n    {\n        return n;\n    }\n\
    \    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long\
    \ e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\n/*\nGiven a list of integers, return the largest product that can be\
    \ made by multiplying any three integers.\n    For example, if the list is [-10,\
    \ -10, 5, 2], we should return 500, since that's -10 * -10 * 5.\n    You can assume\
    \ the list has at least three integers.\n    >>> largest_product([-10, -10, 5,\
    \ 2])\n    500\n    >>> largest_product([-10, -10, -5, 2])\n    500\n    >>> largest_product([-10,\
    \ -10, -5, -2])\n    200\n    >>> largest_product([-10, -10, 5, -2])\n    100\n\
    \    >>> largest_product([-10, -10, 5, 2, -5])\n    500\n    >>> largest_product([-10,\
    \ -10, 5, 2, -5, -2])\n    500\n    >>> largest_product([-10, -10, 5, 2, -5, -2,\
    \ -1])\n    500\n    >>> largest_product([-10, -10, 5, 2, -5, -2, -1, -1])\n \
    \   500\n    >>> largest_product([-10, -10, 5, 2, -5, -2, -1, -1, -1])\n    500\n\
    \    >>> largest_product([-10, -10, 5, 2, -5, -2, -1, -1, -1, -1])\n    500\n\
    \    >>> largest_product([-10, -10, 5, 2, -5, -2, -1, -1, -1\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb24jg08x.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb24jg08x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    long f =\
    \ 0L;\n    long g = 0L;\n    long h = 0L;\n    long i = 0L;\n    long j = 0L;\n\
    \    long k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long o = 0L;\n    long\
    \ p = 0L;\n    long q = 0L;\n    long r = 0L;\n    long s = 0L;\n    long t =\
    \ 0L;\n    long u = 0L;\n    long v = 0L;\n    long w = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    long z = 0L;\n    long aa = 0L;\n    long ab = 0L;\n  \
    \  long ac = 0L;\n    long ad = 0L;\n    long ae = 0L;\n    long af = 0L;\n  \
    \  long ag = 0L;\n    long ah = 0L;\n    long ai = 0L;\n    long aj = 0L;\n  \
    \  long ak = 0L;\n    long al = 0L;\n    long am = 0L;\n    long an = 0L;\n  \
    \  long ao = 0L;\n    long ap = 0L;\n    long aq = 0L;\n    long ar = 0L;\n  \
    \  long as = 0L;\n    long at = 0L;\n    long au = 0L;\n    long av = 0L;\n  \
    \  long aw = 0L;\n    long ax = 0L;\n    long ay = 0L;\n    long az = 0L;\n  \
    \  long ba = 0L;\n    long bb = 0L;\n    long bc = 0L;\n    long bd = 0L;\n  \
    \  long be = 0L;\n    long bf = 0L;\n    long bg = 0L;\n    long bh = 0L;\n  \
    \  long bi = 0L;\n    long bj = 0L;\n    long bk = 0L;\n\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87kt_geg.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87kt_geg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
