name: HumanEval_62_derivative
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients of\
  \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
  \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
  \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
  */\nlong[] derivative(long[] xs) \n"
tests: "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
  \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
  \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
  \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
  }\nvoid main(){}"
completions: ["{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n     \
    \   result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    87L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    38L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial that is\
    \ the product of this\n", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the roots of a polynomial.\n    >>> roots([1L, 2L, 3L])\n  \
    \  [-1L, -3L]\n    >>> roots([1L, -2L, 1L])\n    [-1L, 1L]\n    >>> roots([1L,\
    \ 0L, -1L])\n    [-1L, 1L]\n    >>> roots([1L, 0L, 0L, -1L])\n    [-1L, 1L, 1L,\
    \ -1L]\n    >>> roots([1L, 0L, 0L, 0L, -1L])\n    [-1L, 1L, 1L, 1L, -1L]\n   \
    \ \n*/\nlong[] roots(long[] xs) \n{\n    long[] result = [];\n    if (xs.length\
    \ == 2)\n    {\n        result ~= -xs[0] / xs[1];", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    67L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length -\
    \ 1));\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n\
    \    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length + 1));\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polynomial([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polynomial(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polynomial([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polynomial2(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] res = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the polynomial with the given coefficients\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>>\
    \ evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the polynomial with the given coefficients evaluated at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the polynomial with the given coefficients\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>>\
    \ evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the polynomial with the given coefficients evaluated at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the sum of the two polynomials.\n\
    \    >>> add([1L, 2L, 3L], [3L, 4L, 5L])\n    [4L, 6L, 8L]\n    >>> add([1L, 2L,\
    \ 3L], [3L, 4L, 5L, 6L])\n    [4L, 6L, 8L, 6L]\n    >>> add([1L, 2L, 3L, 4L],\
    \ [3L, 4L, 5L])\n    [4L, 6L, 8L, 4L]\n*/\nlong[] add(long[] xs, long[] ys) \n\
    {\n    long[] result = new long[max(xs.length, ys.length)];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = (i < xs.length ? xs[i]\
    \ : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return result;\n}\n/*\n    Return\
    \ the product of the two polynomials.\n    >>> multiply([1L, 2L, 3L], [3L, 4L,\
    \ 5L])\n    [3L, 10L, 22L, 26L, 15L]\n    >>> multiply([1L, 2L, 3L], [3L, 4L,\
    \ 5L, 6L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n    >>> multiply([1L, 2L, 3L, 4L],\
    \ [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n*/\nlong[] multiply(long[]\
    \ xs, long[] ys) \n{\n    long[] result = new long[xs.length + ys.length - 1];\n\
    \    for (", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 0L)\n    1L\n    >>> polyval([1L, 2L, 3L], 1L)\n    6L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 0L)\n    1L\n    >>> polyval([1L,\
    \ 2L, 3L], 1L)\n    6L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L,\
    \ 2L, 3L], 0L)\n    1L\n    >>> polyval([1L, 2L, 3L], 1L)\n    6L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n       ", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial in the\
    \ form of a string.\n    >>> polynomial([1L, 2L, 3L])\n    'x^2 + 2x + 3'\n  \
    \  >>> polynomial([1L, 2L, 3L, 4L])\n    'x^3 + 2x^2 + 3x + 4'\n    >>> polynomial([1L,\
    \ 2L, 3L, 4L, 5L])\n    'x^4 + 2x^3 + 3x^2 + 4x + 5'\n    >>> polynomial([1L,\
    \ 2L, 3L, 4L, 5L, 6L])\n    'x^5 + 2x^4 + 3x^3 + 4x^2 + 5x + 6'\n    >>> polynomial([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L])\n    'x^6 + 2x^5 + 3x^4 + 4x^3 + 5x^2 + 6x + 7'\n \
    \   >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L])\n    'x^7 + 2x^6 + 3x^5 +\
    \ 4x^4 + 5x^3 + 6x^2 + 7x + 8'\n    >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L])\n    'x^8 + 2x^7 + 3x^6 + 4x^5 + 5x^4 + 6x^3 + 7x^2 + 8x + 9'\n   \
    \ >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    'x^9 + 2x^8 +\
    \ 3x^7 + 4x^6 + 5x^5 +", "{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    97L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    40L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L", "{\n    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    42L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] *\
    \ pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this po",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ (double)xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   ", "{\n    return xs[1 .. $].array;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    return [0L] ~ xs.array;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ xi; xs)\n    {\n        result += xi * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate2(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, xi; xs)\n    {\n        result += xi * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the polynomials represented by xs and ys.\n    >>> add([1L, 2L, 3L], [4L,\
    \ 5L, 6L])\n    [5L, 7L, 9L]\n    >>> add([1L, 2L, 3L], [4L, 5L, 6L, 7L])\n  \
    \  [5L, 7L, 9L, 7L]\n    >>> add([1L, 2L, 3L, 4L], [4L, 5L, 6L])\n    [5L, 7L,\
    \ 9L, 4L]\n    \n*/\nlong[] add(long[] xs, long[] ys) \n{\n    long[] result =\
    \ new long[max(xs.length, ys.length)];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i < xs.length ? xs[i] : 0) + (i < ys.length\
    \ ? ys[i] : 0);\n    }\n    return result;\n}\n/*\n    Return the product of the\
    \ polynomials represented by xs and ys.\n    >>> multiply([1L, 2L, 3L], [4L, 5L,\
    \ 6L])\n    [4L, 13L, 28L, 27L, 18L]\n    >>> multiply([1L, 2L, 3L], [4L, 5L,\
    \ 6L, 7L])\n    [4L, 13L, 28L, 39L, 42L, 27L, 18L]\n    >>> multiply([1L, 2L,\
    \ 3L, 4L], [4L, 5L, 6L])\n    [4L, 13L, 28L, 39L, 42L, 27L]\n    \n*/\nlong[]\
    \ multiply(long[] xs, long[] ys) \n{\n    long[] result", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L,", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return a polynomial that is the integral of this polynomial.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] *", "{\n    return xs[1 .. $].array;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n    ys[0]\
    \ = 0.0;\n    foreach (i, x; xs) \n    {\n        ys[i + 1] = x / (i + 1);\n \
    \   }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    foreach (i, xi; xs) \n    {\n        y += xi * pow(x, i);\n    }\n\
    \    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return coefficients of the polynomial\
    \ xs", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    import std.algorithm;\n    import std.range;\n\
    \    import std.stdio;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.conv;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.conv;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.conv;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.conv;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import", "{ \n    long[] result = new long[xs.length - 1];\n    for (size_t\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return a list of coefficients of\
    \ the polynomial\n    x^0 + x^1 + x^2 + ... + x^n\n    >>> polynomial(3)\n   \
    \ [1L, 1L, 1L, 1L]\n    >>> polynomial(0)\n    [1L]\n*/\nlong[] polynomial(size_t\
    \ n) \n{ \n    long[] result = new long[n + 1];\n    result[0] = 1;\n    for (size_t\
    \ i = 1; i < result.length; i++)\n    {\n        result[i] = 1;\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of the polynomial with coefficients xs\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial with coefficients xs at x.\n   \
    \ >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{ \n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++)\n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial with coefficients xs at x.\n    >>> evaluate([1L,\
    \ 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L,\
    \ 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L,\
    \ 3L], 3L)\n    34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> evaluate([1L, 2L, 3", "{\n    long[] ret = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return ret;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] ret = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        ret[i + 1] = xs[i] / (i + 1);\n    }\n    return ret;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long ret = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        ret += xs[i] * pow(x, i);\n    }\n\
    \    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the polynomial in string form.\n\
    \    >>> str_", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x = x0.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x0) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x0, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x", "{\n    int n = xs.length;\n    if (n == 0)\n    {\n        return xs;\n\
    \    }\n    long[] ys = new long[n - 1];\n    for (int i = 0; i < n - 1; i++)\n\
    \    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n + 1];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    int n\
    \ = xs.length;\n    long y = 0;\n    for (int i = 0; i < n; i++)\n    {\n    \
    \    y = y * x + xs[i];\n    }\n    return y;\n}\n/*\n xs represent coefficients\
    \ of a po", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    109L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n \
    \   double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2)\n    49L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    49L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n  \
    \  55L\n    >>> value([1L, 2L, 3L], 3L)\n    38L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value(1L, [1L, 2L, 3L])\n    6L\n    >>> value(2L, [1L, 2L, 3L])\n\
    \    17L\n    >>> value(3L, [1L, 2L, 3L])\n    34L\n*/\nlong value(long x, long[]\
    \ xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n   \
    \     result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of the polynomial at x.\n    >>> value(1L, [1L, 2L, 3L])\n    6L\n   \
    \ >>> value(2L, [1L, 2L, 3L])\n    17L\n    >>> value(3L, [1L, 2L, 3L])\n    34L\n\
    */\nlong value(long x, long[] xs) \n{\n    long result = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value(1L, [1L, 2L,\
    \ 3L])\n    6L\n    >>> value(2L, [1L, 2L, 3L])\n    17L\n    >>> value(3L, [1L,\
    \ 2L, 3L])\n    34L\n*/\nlong value(long x, long[] xs) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of the polynomial at",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the sum of this polynomial and y", "{ \n    return xs[1\
    \ .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n}\n/*\n    Return the\
    \ integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L,\
    \ 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{ \n    return [0.0L]\
    \ ~ xs.map!(a => a / cast(double)(xs.length)).array;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{ \n    return xs.zip(xs.map!(a => x ^ cast(long)(xs.length - 1 - a)).array).map!(a\
    \ => a[0] * a[1]).sum;\n}\n/*\n    Return the value of a polynomial at x.\n  \
    \  >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n    >>> polyval([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a\
    \ => x ^ cast(long)(xs.length - 1 - a)).array).map!(a => a[0] * a[1]).sum;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    51L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong poly",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L,", "{ \n    return xs[1 ..\
    \ $].array; \n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{ \n    long[] result = new long[xs.length + 1]; \n  \
    \  foreach (i, x; xs) \n        result[i + 1] = x / cast(long)(i + 1); \n    return\
    \ result; \n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long result\
    \ = 0; \n    foreach (i, x; xs) \n        result += x * pow(x, i); \n    return\
    \ result; \n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long result\
    \ =", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    long\
    \ power = 1;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] * power;\n        power *= x;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return", "{ \n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return\
    \ ys;\n}\n/*\n    Return the polynomial with the given coefficients evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 5L)\n    76L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the polynomial\
    \ with the given coefficients evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long y = 0;\n \
    \   for (int i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x, i);\n   \
    \ return y;\n}\n/*\n    Return the polynomial with the given coefficients evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 5L)\n    76L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the polynomial\
    \ with the given coefficients evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long y = 0;\n \
    \   for (int i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x, i);\n   \
    \ return y;\n}\n/*\n    Return the polynomial with the given coefficients evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (long i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial,\n    i.e. the polynomial that you get by adding a 0-th coefficient\
    \ of 0.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (long i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n   \
    \ >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++) \n    {\n\
    \        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\
    \ \n    {\n       ", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial of degree\
    \ n with the given coefficients.\n    >>> poly([1L, 2L, 3L])\n    3L * x^2 + 2L\
    \ * x + 1L\n    >>> poly([1L, 2L, 3L, 4L])\n    4L * x^3 + 3L * x^2 + 2L * x +\
    \ 1L\n*/\nPolynomial poly(long[] xs) \n{\n    Polynomial result = new Polynomial(xs.length\
    \ - 1);\n    for (int i = 0; i < xs.length; i++) \n    {\n        result.setCoefficient(i,\
    \ xs[i]);\n    }\n    return result;\n}\n/*\n    Return the polynomial of degree\
    \ n with the given coefficients.\n    >>> poly([1L, 2L, 3L])\n    3L * x^2 + 2L\
    \ * x + 1L\n    >>> poly([1L, 2L, 3L, 4L])\n    4L * x^3 + 3L * x^2 + 2L * x +\
    \ 1L\n*/\nPolynomial poly(long[] xs) \n{\n    Polynomial result = new Polynomial(xs.length\
    \ - 1);\n    for (int i = 0; i < xs.length; i++) \n    {\n        result.setCoefficient(i,\
    \ xs[i]);\n    }\n    return result;\n}\n/*\n    Return the polynomial of degree\
    \ n with the given coefficients.\n    >>> poly([1L, 2L, 3L])\n    3L * x^2 + 2L\
    \ * x + 1L\n    >>> poly([1L, 2L, 3L, 4L])\n    4L * x^3 + 3L * x^2 + 2L * x +\
    \ 1L\n*/\nPolynomial poly(long[] xs) \n{\n    Poly", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    93L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate", "{ \n    return xs[1 .. $].array;\
    \ \n}", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n \
    \   }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return value of this polynomial at x.\n    >>> evaluate([", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] res = new long[xs.length - 1];\n    for (int i = 0; i < res.length;\
    \ i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n  \
    \  return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] *\
    \ pow(x, i);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n", "{ \n    return xs[1 .. $].array; \n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n\
    \    return [0.0] ~ xs.map!(a => a / (xs.length - xs.indexOf(a))); \n}\n/*\n \
    \   Return the value of a polynomial at a given point.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length\
    \ - xs.indexOf(a) - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value\
    \ of a polynomial at a given point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length - xs.indexOf(a)\
    \ - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>>\
    \ polyval([1L, 2L, 3L], 2L)\n    17L\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    37L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    37L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result = result * x + xs[i];\n    }\n    return", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n  \
    \  63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x", "{\n    long[]\
    \ res = new long[xs.length - 1];\n    for (int i = 0; i < res.length; i++)\n \
    \   {\n        res[i] = (i + 1) * xs[i + 1];\n    }\n    return res;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] res = new double[xs.length + 1];\n   \
    \ for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n    long res =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x,\
    \ i);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> value([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    28L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    return xs[1..$].map!((x, i) => (i + 1) * x)();\n}\n/*\n  \
    \  Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n \
    \   return [0L] ~ xs.map!((x, i) => x / (i + 1))();\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n\
    }\n/*\n    Return the value", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n \
    \   long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (size_t i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    Return the polynomial with coefficients\
    \ given by xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n  \
    \  49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial with coefficients given by xs evaluated at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the polynomial with\
    \ coefficients given by xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial with coefficients given by xs evaluated at x.\n\
    \    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (size_t i = 0; i < result.length; i++) \n    {\n        result[i] = (i + 1)\
    \ * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (size_t i = 0; i < xs.length; i++) \n  \
    \  {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (size_t i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ result.length; i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n    Return the integral of a polynomial.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n   \
    \ >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n   ", "{\n    long[] result =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n   \
    \ {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial, i.e. the antiderivative.\n    The\
    \ constant of integration is set to 0.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i =", "{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial xs multiplied by the polynomial ys.\n    >>> multiply([1L,\
    \ 2L, 3L], [4L, 5L, 6L])\n    [4L, 13L, 28L, 27L, 18L]\n    >>> multiply([1L,\
    \ 2L, 3L], [4L, 5L])\n    [4L, 13L, 28L, 15L]\n    >>> multiply([1L, 2L, 3L],\
    \ [4L])\n    [4L, 8L, 12L]\n    >>> multiply([1L, 2L, 3L], [])\n    []\n    >>>\
    \ multiply([], [4L, 5L, 6L])\n    []\n    >>> multiply([], [])\n    []\n*/\nlong[]\
    \ multiply(long[] xs, long[] ys) \n{\n    long[] result = new long[xs.length +\
    \ ys.length - 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        for\
    \ (int j = 0; j < ys.length; j++) \n        {\n            result[i + j] += xs[i]\
    \ * ys[j];\n        }\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs divided by the po", "{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ of degree n with coefficients c.\n    >>> poly([1L, 2L, 3L], 2)\n    1L + 2L\
    \ * x + 3L * x^2\n    >>> poly([1L, 2L, 3L], 3)\n    1L + 2L * x + 3L * x^3\n\
    \    >>> poly([1L, 2L, 3L], 4)\n    1L + 2L * x + 3L * x^4\n*/\nlong poly(long[]\
    \ c, long n) \n{\n    long result = 0;\n    for (int i = 0; i < c.length; i++)\
    \ \n    {\n        result += c[i] * pow(n, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial of degree n with coefficients c.\n    >>> poly([1L,\
    \ 2L, 3L], 2)\n    1L + 2L * x + 3L * x^2\n    >>> poly([1L, 2L, 3L], 3)\n   \
    \ 1L + 2L * x + 3L * x^3\n    >>> poly([1L, 2L, 3L], 4)\n    1L + 2L * x + 3L\
    \ * x^4\n*/\nlong poly(long[] c, long n) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < c.length; i++) \n    {\n        result += c[i] * pow(n, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the polynomial of degree n with coefficients\
    \ c.\n    >>> poly([1L, 2L, 3L], 2)\n    1L + 2L * x + 3L * x^2\n    >>> poly([1L,\
    \ 2L, 3L], 3)\n    1L + 2L * x + 3L * x^3\n   ", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the polynomial that is\
    \ the product of this polynomial and", "{\n    if (xs.length == 0)\n    {\n  \
    \      return new long[0];\n    }\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n Return the integral of a\
    \ polynomial.\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n Return the value of a polynomial\
    \ at a given point.\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n Return the", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return value of this polynomial at x.\n    >>> evaluate([", "{ \n\
    \    return xs[1 .. $].map!(a => a * cast(long)($ - 1)).array;\n}\n/*\n    Return\
    \ the integral of this polynomial in the same form.\n    >>> integral([3L, 1L,\
    \ 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs)\
    \ \n{ \n    return [0L] ~ xs.map!(a => a / cast(long)($)).array;\n}\n/*\n    Return\
    \ the value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.map!(a => a * pow(x, $ - 1)).sum;\n}\n/*\n \
    \   Return the value of the derivative of this polynomial at x.\n    >>> polyval(derivative([3L,\
    \ 1L, 2L, 4L, 5L]), 2L)\n    41L\n    >>> polyval(derivative([1L, 2L, 3L]), 2L)\n\
    \    11L\n*/\nlong polyval_derivative(long[] xs, long x) \n{ \n    return polyval(derivative(xs),\
    \ x);\n}\n/*\n    Return the value of the integral of this polynomial at x.\n\
    \    >>> polyval(integral([3L, 1L, 2L, 4L, 5L]), 2L)\n    50.5L\n    >>> polyval(integral([1L,\
    \ 2L, 3L]), 2L)\n    8L\n*/\nlong polyval_integral(long[] xs, long x) \n{ \n \
    \   return polyval(integral(xs), x);\n}\n/*\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   ",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ result.length; i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n    Return the integral of a polynomial.\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result = result * x\
    \ + xs[i];\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n\
    \    }\n    return result;\n", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    43L\n    \n*/\nlong value(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial with coefficients xs evaluated at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial with coefficients\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return coefficients of the polynomial obtained by multiplying\
    \ this polynomial with xs.", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>>", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] ys = new long[xs.length - 1];\n   \
    \ for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    79L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return coefficients of po", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the polynomials xs and ys.\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L])\n   \
    \ [4L, 6L, 8L]\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L, 6L])\n    [4L, 6L, 8L,\
    \ 6L]\n    >>> add([1L, 2L, 3L, 4L], [3L, 4L, 5L])\n    [4L, 6L, 8L, 4L]\n*/\n\
    long[] add(long[] xs, long[] ys) \n{\n    long[] result = new long[max(xs.length,\
    \ ys.length)];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i < xs.length ? xs[i] : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return\
    \ result;\n}\n/*\n    Return the product of the polynomials xs and ys.\n    >>>\
    \ multiply([1L, 2L, 3L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 15L]\n    >>>\
    \ multiply([1L, 2L, 3L], [3L, 4L, 5L, 6L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n\
    \    >>> multiply([1L, 2L, 3L, 4L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 39L,\
    \ 30L]\n*/\nlong[] multiply(long[] xs, long[] ys) \n{\n    long[] result = new\
    \ long[xs.length + ys.", "{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    101L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return list of roots of this polynomial.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n \
    \   double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}",
  "{\n    long[] res = new long[xs.length - 1];\n    for (int i = 0; i < res.length;\
    \ i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ res = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n  \
    \  {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n \
    \   Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n  \
    \  return res;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x,\
    \ i);\n    }\n    return res;\n}", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n", "{\n \
    \   int n = xs.length;\n    long[] ys = new long[n - 1];\n    for (int i = 1;\
    \ i < n; i++) \n    {\n        ys[i - 1] = xs[i] * i;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++) \n    {\n        ys[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    81L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = xs.length - 1; i >= 0; i--) \n    {\n        y = y\
    \ * x + xs[i];\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 +", "{\n    int n = xs.length;\n    if (n\
    \ == 0)\n    {\n        return new long[0];\n    }\n    long[] ys = new long[n\
    \ - 1];\n    for (int i = 0; i < n - 1; i++)\n    {\n        ys[i] = (i + 1) *\
    \ xs[i + 1];\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    int n\
    \ = xs.length;\n    double[] ys = new double[n + 1];\n    for (int i = 0; i <\
    \ n; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    43L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        y = y * x + xs[i];\n    }\n \
    \   return y;\n}\n/*\n    xs represent coefficients of a polynomial.\n", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] ys = new long[xs.length + 1];\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n  \
    \  }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long y\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polyn",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    long xpow = 1;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * xpow;\n\
    \        xpow *= x;\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\ndouble polyval(double[] xs,\
    \ double x) \n{\n    double result = 0;\n    double xpow = 1;\n    for (int i\
    \ = 0; i <", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the polynomial that is the integral\
    \ of the given polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L,\
    \ 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n \
    \   [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the given polynomial at the given point.\n    >>> value_at(3L,\
    \ [3L, 1L, 2L, 4L, 5L])\n    462L\n    >>> value_at(1L, [1L, 2L, 3L])\n    6L\n\
    */\nlong value_at(long x, long[] xs) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the given polynomial at\
    \ the given point.\n    >>> value_at(3L, [3L, 1L, 2L, 4L, 5L])\n    462L\n   \
    \ >>> value_at(1L, [1L, 2L, 3L])\n    6L\n*/\nlong value_at(long x, long[] xs)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs", "{\n    long[] ys =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < ys.length; i++)\n    {\n \
    \       ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n\
    \    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this po", "{\n  \
    \  long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1] * (i + 1);\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)", "{\n    long[] result =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n\
    \        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    45L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n   ", "{\n    return\
    \ xs[1 .. $].map!((x, i) => (i + 1) * x)();\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    return [0L] ~ xs.map!((x,\
    \ i) => x / (i + 1))();\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    return\
    \ xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    59L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n   ", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    91L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L,\
    \ 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n    >>> evaluate([1L, 2L, 3L], 0L)\n    3L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n    >>> evaluate([1L, 2L, 3L], 0L)\n    3L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> evaluate([1L, 2L, 3",
  "{ \n    return xs[1 .. $].array; \n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{ \n    long[] ys = new\
    \ long[xs.length + 1]; \n    ys[0] = 0; \n    foreach (i, x; xs) \n    { \n  \
    \      ys[i + 1] = x / (i + 1); \n    } \n    return ys; \n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{ \n    long y = 0; \n    foreach (i, xi; xs)\
    \ \n    { \n        y += xi * pow(x, i); \n    } \n    return y; \n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    43L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n", "{\n    long[] result = new long[xs.length - 1];\n   \
    \ for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1]\
    \ * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);", "{\n    return xs[1 .. $].array;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    result[0] = 0.0;\n    foreach (i, x; xs)\n    {\n        result[i +\
    \ 1] = (double)x / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    foreach (i, xi; xs)\n    {\n        result\
    \ += xi * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] x",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of this polynomial at x.\n  \
    \  >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n\
    \    20L\n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of this polynomial at\
    \ x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L,\
    \ 3L], 3L)\n    20L\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n   ", "{ \n    if (xs.length == 0) \n    { \n        return xs;\
    \ \n    } \n    long[] result = new long[xs.length - 1]; \n    for (size_t i =\
    \ 0; i < result.length; i++) \n    { \n        result[i] = (i + 1) * xs[i + 1];\
    \ \n    } \n    return result; \n} ", "{\n    long[] dxs = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < dxs.length; i++)\n    {\n        dxs[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return dxs;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] ixs = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        ixs[i + 1] = xs[i] / (i + 1);\n    }\n    return ixs;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n\
    \    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial evaluated at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L, 3L],\
    \ 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>>\
    \ evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of this polynomial evaluated at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L, 3L], 3", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    foreach (i, x; xs) \n    {\n        if\
    \ (i > 0) \n        {\n            result[i - 1] = i * x;\n        }\n    }\n\
    \    return result;\n}\n/*\n    Return polynomial in the form of a list of coefficients.\n\
    \    >>> poly([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> poly([1L, 2L, 3L], x=2L)\n\
    \    [1L, 4L, 12L]\n    >>> poly([1L, 2L, 3L], x=2L, n=4)\n    [1L, 4L, 12L, 24L]\n\
    \    >>> poly([1L, 2L, 3L], x=2L, n=2)\n    [1L, 4L]\n*/\nlong[] poly(long[] xs,\
    \ long x = 1L, long n = 0L) \n{\n    if (n == 0L) \n    {\n        n = xs.length;\n\
    \    }\n    long[] result = new long[n];\n    foreach (i, x; xs) \n    {\n   \
    \     result[i] = x * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the sum of two polynomials.\n    >>> add_poly([1L, 2L, 3L], [1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    >>> add_poly([1L, 2L, 3L], [1L, 2L, 3L], x=2L)\n    [2L,\
    \ 8L, 18L]\n    >>> add_poly([1L, 2L, 3L], [1L, 2L, 3L], x=2L, n=4)\n    [2L,\
    \ 8L, 18L, 24L]\n    >>> add_poly([1L, 2L, 3L], [1L, 2L, 3L], x=2L, n=2)\n   \
    \ [2L, 8L]\n*/\nlong", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    77L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    77L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    77L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    long n = xs.length;\n    for (long i = 0; i < n - 1; i++) \n    {\n     \
    \   result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return\
    \ a list of coefficients of the polynomial\n    x^n + a[0] * x^(n-1) + a[1] *\
    \ x^(n-2) + ... + a[n-1]\n    evaluated at x = x0.\n    >>> horner([1L, 2L, 3L],\
    \ 5L)\n    76L\n    >>> horner([1L, 2L, 3L], 0L)\n    3L\n    >>> horner([1L,\
    \ 2L, 3L], -7L)\n    -142L\n    >>> horner([1L, 2L, 3L], 1L)\n    6L\n    >>>\
    \ horner([1L, 2L, 3L], -4L)\n    -25L\n*/\nlong horner(long[] a, long x0) \n{\n\
    \    long result = 0;\n    long n = a.length;\n    for (long i = n - 1; i >= 0;\
    \ i--) \n    {\n        result = result * x0 + a[i];\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial\n    x^n + a[0] * x^(n-1) + a[1] * x^(n-2) +\
    \ ... + a[n-1]\n    evaluated at x = x0.\n    >>> horner([1L, 2L, 3L], 5L)\n \
    \   76L\n    >>> horner([1L, 2L, 3L], 0L)\n    3L\n    >>> horner([1L, 2L, 3L],\
    \ -7L)\n    -142L\n    >>> horner([1L, 2L, 3L], 1L)\n    6L\n    >>> horner([1L,\
    \ 2L, 3L], -4L)\n    -25L\n*/\nlong horner", "{\n    return xs[1 .. $].array;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = 0;\n    foreach (i, x; xs)\n    {\n        result[i + 1] = x / cast(long)(i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, xi; xs)\n    {\n        result\
    \ += xi * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x)", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n  \
    \  }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    51L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    51L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L,\
    \ 2L, 3L], 3L)\n    20L\n*/\nlong value(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L,\
    \ 2L, 3L], 3L)\n    20L\n*/\nlong value(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    55L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i",
  "{\n    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n\
    \    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long y\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at", "{\n    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] ys = new double[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        ys[i + 1] = xs[i] / (i + 1);\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x, i);\n    return y;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4", "{\n    long[] res = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] res = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] = (double)xs[i]\
    \ / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum of the\
    \ polynomials represented by xs and ys.\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L])\n\
    \    [4L, 6L, 8L]\n    >>> add([1L, 2L, 3L], [3L, 4L])\n    [4L, 6L, 3L]\n   \
    \ >>> add([1L, 2L], [3L, 4L, 5L])\n    [4L, 6L, 5L]\n*/\nlong[] add(long[] xs,\
    \ long[] ys) \n{\n    long[] result = new long[max(xs.length, ys.length)];\n \
    \   for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i <\
    \ xs.length ? xs[i] : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return result;\n\
    }\n/*\n    Return the product of the polynomials represented by xs and ys.\n \
    \   >>> multiply([1L, 2L, 3L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 15L]\n \
    \   >>> multiply([1L, 2L, 3L], [3L, 4L])\n    [3L, 10L, 13L, 8L]\n    >>> multiply([1L,\
    \ 2L], [3L, 4L, 5L])\n    [3L, 10L, 13L, 8L]\n*/\nlong[] multiply(long[] xs, long[]\
    \ ys) \n{\n    long[] result = new long[xs.length + ys.length - 1];\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        for (int j = 0; j < y", "{\n   \
    \ long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    81L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{\n    return\
    \ xs[1 .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n   \
    \ foreach (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at a given point.\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x)\
    \ \n{\n    long result = 0L;\n    foreach (i, a; xs)\n    {\n        result +=\
    \ a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i, a;\
    \ xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, a; xs)\n    {\n        result += a * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (size_t i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (size_t i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n\
    \        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = (double)xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n   \
    \ >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return", "{\n    return\
    \ xs[1 .. $].map!(a => a * cast(long)(xs.length - 1));\n}", "{\n    return xs[1..$].map!(a\
    \ => a * cast(long)(xs.length - 1));\n}\n/*\n    Return polynomial evaluated at\
    \ x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    foreach (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return polynomial evaluated at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate2(long[] xs, long x) \n{\n    long result = 0;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return polynomial evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate3(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n     \
    \   result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return polynomial\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>>\
    \ evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate4(long[] xs, long x) \n\
    {\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result += a *\
    \ pow(x, i);\n    }\n", "{\n    long[] result = new long[xs.length - 1];\n   \
    \ for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1]\
    \ * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    101L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.0L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{ \n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    18L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the integral of this\
    \ polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L,\
    \ 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n\
    \    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of the integral of this polynomial at x.\n    >>> integrate([", "{\n \
    \   long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \        result[i] = xs[i + 1] * (i + 1);\n    return result;\n}\n/*\n    Return\
    \ the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L,\
    \ 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the polynomial that is the product of two polynomials.\n    >>> polymul([1L,\
    \ 2L, 3L], [1L, 2L, 3L])\n    [1L, 4L, 10L, 12L, 9L]\n    >>> polymul([1L, 2L,\
    \ 3L], [1L, 2L])\n    [1L, 4L, 7L, 6L]\n*/\nlong[] polymul(long[] xs, long[] ys)\
    \ \n{\n    long[] result = new long[xs.length + ys.length - 1];\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        for (int j = 0; j <", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.0L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n \
    \   double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    39L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    20L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    auto n = xs.length;\n    if (n == 0)\n   \
    \ {\n        return xs;\n    }\n    long[] ys = new long[n - 1];\n    for (size_t\
    \ i = 0; i < n - 1; i++)\n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    auto n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (size_t i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> eval_poly([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> eval_poly([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong eval_poly(long[] xs, long x) \n{\n   \
    \ auto n = xs.length;\n    long y = 0;\n    for (size_t i = 0; i < n; i++)\n \
    \   {\n        y = y * x + xs[i];\n    }\n    return y;\n}\n", "{\n    return\
    \ xs[1 .. $].array;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = 0;\n    foreach (i, x; xs) \n    {\n        result[i + 1] = x / cast(long)(i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, xi; xs) \n    {\n        result\
    \ += xi * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n   ", "{ \n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{ \n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n   \
    \ }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L,\
    \ 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a point.\n    >>> value(3L, [1L,\
    \ 2L, 3L])\n    18L\n    >>> value(3L, [1L, 2L, 3L, 4L])\n    54L\n*/\nlong value(long\
    \ x, long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial that is the product of the two given polynomials.\n\
    \    >>> multiply([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 4L, 10L, 12L, 9L]\n  \
    \  >>> multiply([1L, 2L, 3L, 4L], [1L, 2L, 3L])\n    [1L, 4L, 10L, 16L, 22L, 12L]\n\
    */\nlong[] multiply(long[] xs, long[] ys) \n{\n    long[] result = new long[xs.length\
    \ + ys.length - 1];\n", "{\n    long[] result = new long[xs.length - 1];\n   \
    \ for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1]\
    \ * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    73L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   ", "{ \n    if (xs.length == 0) \n    { \n        return new long[0];\
    \ \n    } \n    long[] result = new long[xs.length - 1]; \n    for (size_t i =\
    \ 0; i < result.length; i++) \n    { \n        result[i] = (i + 1) * xs[i + 1];\
    \ \n    } \n    return result; \n} ", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial, as a list of coefficients.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result +=", "{\n   \
    \ int n = xs.length;\n    long[] ys = new long[n - 1];\n    for (int i = 1; i\
    \ < n; i++) \n    {\n        ys[i - 1] = i * xs[i];\n    }\n    return ys;\n}\n\
    /*\n    Return the polynomial that is the integral of this polynomial.\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L, 3L,\
    \ 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    int\
    \ n = xs.length;\n    long[] ys = new long[n + 1];\n    for (int i = 0; i < n;\
    \ i++) \n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([1L, 2L,\
    \ 3L], 1L)\n    6L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L,\
    \ 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    int n =\
    \ xs.length;\n    long y = 0;\n    for (int i = 0; i < n; i++) \n    {\n     \
    \   y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    Return the value\
    \ of this polynomial at x.\n    >>> polyval([1L, 2L, 3L], 1L)\n    6L\n    >>>\
    \ polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    int n = x", "{\n    long[] result\
    \ = new long[$ - 1];\n    foreach (i, x; xs[1 .. $]) \n    {\n        result[i\
    \ - 1] = i * x;\n    }\n    return result;\n}\n/*\n    Return the polynomial with\
    \ coefficients xs evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    >>> evaluate([1L, 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0L;\n    foreach (i, x; xs) \n    {\n        result\
    \ += x * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ with coefficients xs evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n \
    \   17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i, x; xs) \n    {\n   \
    \     result += x * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ polynomial with coefficients xs evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i, x; xs) \n    {\n   \
    \     result += x * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ polynomial with coefficients xs evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach", "{\n    long[] res = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n    \
    \    res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] res = new double[xs.length + 1];\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n \
    \   return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n    >>> evaluate", "{\n    long[] ys = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n\
    \    double[] ys = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long y = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n\
    \    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this", "{\n    long[]\
    \ ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length; i++) \n  \
    \  {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        y += xs[i] * pow(x, i);\n    }\n    return\
    \ y;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return the value of", "{\n    long[] result =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n   \
    \ {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L,\
    \ 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at a given point.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the sum of two polynomials.\n    >>>\
    \ add([1L, 2L, 3L], [4L, 5L, 6L])\n    [5L, 7L, 9L]\n    >>> add([1L, 2L, 3L],\
    \ [4L, 5L, 6L, 7L])\n    [5L, 7L, 9L, 7L]\n*/\nlong[] add(long[] xs, long[] ys)\
    \ \n{\n    long[] result = new long[max(xs.length, ys.length)];\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result[i] += xs[i];\n    }\n   \
    \ for (int", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    85L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return polynomial in the same\
    \ form, but with", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>>", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n  xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n  xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n  xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n\
    }\n/*\n    Return the integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[]", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ that is the product of this\n", "{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial with coefficients xs at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the polynomial with coefficients xs divided by the\
    \ polynomial with coefficients ys.\n    >>> divide([3L, 1L, 2L, 4L, 5L], [1L,\
    \ 2L, 3L])\n    [3L, -1L, -2L, 13L]\n    >>> divide([1L, 2L, 3L], [1L, 2L, 3L])\n\
    \    [1L]\n*/\nlong[] divide(long[] xs, long[] ys) \n{\n    long[] result = new\
    \ long[xs.length - ys.length + 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i] / ys[0];\n        for (int j = 0; j < ys.length;\
    \ j++)\n        {\n            xs[i + j] -= result[i] * ys[j];\n        }\n  \
    \  }\n    return result;\n}\n/*\n    Return the polynomial with coefficients xs\
    \ multiplied by the polynomial with coefficients ys.\n    >>> multiply([3L, 1L,\
    \ 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, 7L, 17L, 27L, 33L, 30L", "{\n    long[]\
    \ ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length; i++)\n   \
    \ {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] ys = new double[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n\
    \    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ = result * x + x", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of the polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of the polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n   ", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{ \n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{ \n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    93L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\
    \ \n    return xs[1 .. $].array; \n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    double[] integral(long[] xs) \n{ \n    return [0.0L] ~ xs.map!(a => a / (xs.length\
    \ - xs.indexOf(a))); \n}\n/*\n    Return the value of a polynomial.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    51L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^\
    \ (xs.length - xs.indexOf(a) - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return\
    \ the value of a polynomial.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 51L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs,\
    \ long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length - xs.indexOf(a)\
    \ - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value of a polynomial.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n   ", "{\n   \
    \ long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n \
    \   double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2)\n    67L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    67L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial represented by xs at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ represented by xs at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3L,", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    long\
    \ pow = 1;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result +=\
    \ xs[i] * pow;\n        pow *= x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return", "{\n    return xs[1 .. $].array;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ ys = new long[xs.length + 1];\n    ys[0] = 0L;\n    foreach (i, x; xs) \n  \
    \  {\n        ys[i + 1] = x / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    53L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long y = 0L;\n    foreach (i, xi; xs) \n\
    \    {\n        y += xi * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    53L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(", "{\n    long[] res = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] res = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong value(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n    >>> value", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at a point.\n  \
    \  >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result = result\
    \ * x + xs[i];\n   "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
