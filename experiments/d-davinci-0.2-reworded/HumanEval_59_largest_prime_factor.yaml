name: HumanEval_59_largest_prime_factor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
  \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
  \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
  \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
  \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\n\
  void main(){}"
completions: ["{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest = i;\n            n /= i;\n        }\n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 0L;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n        {\n            if(isPrime(i))\n            {\n              \
    \  largest_prime = i;\n            }\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long max_divisor = n / 2L;\n\
    \    for (long i = 2L; i <= max_divisor; i++) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            if (is_prime(i)) \n            {\n                largest_prime_factor\
    \ = i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while (n > 1)\
    \ {\n        if (n % factor == 0) {\n            largest_prime_factor = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) {\n           \
    \     n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest = i;\n            n /= i;\n        }\n        else \n\
    \        {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n         \
    \   n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n\
    \    2L\n    \n*/\nlong largest_prime_factor2(long n) \n{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        } else {\n            i\
    \ += 1L;\n        }\n    }\n    return largest;\n}\n/*\nReturn the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor3(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    /*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n\
    \    2L\n    \n*/\nlong largest_prime_factor4(long n) \n{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        } else {\n            i\
    \ += 1", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest = i;\n            n /= i;\n        }\n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return largest;\n}\n/*\nReturn\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor2(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\n/*\nReturn the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n \
    \   >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor3(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\n/*\nReturn the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n \
    \   >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor4(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i ==", "{\n    long largest_prime_factor = 1L;\n    long i =\
    \ 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest = 1L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest = i;\n            n /= i;\n        }\n        else \n\
    \        {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest_prime = i;\n      \
    \      n /= i;\n        }\n        else \n        {\n            i++;\n      \
    \  }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 1L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n\
    \ % i == 0L) {\n            largest = i;\n            n /= i;\n        } else\
    \ {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n   \
    \ {\n        if (n % i == 0L) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest_prime = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long largest = 0L;\n    foreach (i; 1L\
    \ .. sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest = i;\n            }\n            if\
    \ (isPrime(n / i)) \n            {\n                largest = n / i;\n       \
    \     }\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    foreach (i; 2 .. n) {\n        if (n % i == 0) {\n            if\
    \ (isPrime(i)) {\n                largest_prime_factor = i;\n            }\n \
    \       }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0L) \n        {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  if (n > 1L) \n    {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (factor <= n) {\n        if (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        } else {\n            factor +=\
    \ 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long i = 2L;\n    long max = 0L;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            max\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return max;\n}", "{\n    long largest = 1L;\n \
    \   long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n    \
    \    {\n            largest = i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}\n/*\n\
    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>>\
    \ largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n\
    \    2L\n    \n*/\nlong largest_prime_factor_2(long n) \n{\n    long largest =\
    \ 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n\
    \    2L\n    \n*/\nlong largest_prime_factor_3(long n) \n{\n    long largest =\
    \ 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n\
    \    2L\n    \n*/\nlong largest_prime_factor_4(long n) \n{\n    long largest =\
    \ 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0L;\n    foreach (i; 2 .. n) {\n      \
    \  if (n % i == 0) {\n            if (isPrime(i)) {\n                largest =\
    \ i;\n            }\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0L;\n    long factor = 2L;\n    while (n > 1L)\
    \ \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest = i;\n            n /= i;\n        } else {\n           \
    \ i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    foreach (i; 2 .. n) {\n        if (n % i ==\
    \ 0) {\n            if (isPrime(i)) {\n                largest = i;\n        \
    \    }\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest = i;\n            n /= i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest_prime = 0L;\n\
    \    long factor = 2L;\n    while (n > 1L) {\n        if (n % factor == 0L) {\n\
    \            largest_prime = factor;\n            n /= factor;\n            while\
    \ (n % factor == 0L) {\n                n /= factor;\n            }\n        }\n\
    \        factor += 1L;\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    foreach (i; 2 .. n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n            largest_prime_factor = i;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest = i;\n            n /= i;\n        } else {\n           \
    \ i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        }\n        else {\n    \
    \        i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_factor = 1L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_factor =\
    \ i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime = 0L;\n    long divisor = 2L;\n    while (n > 1L) \n    {\n  \
    \      if (n % divisor == 0L) \n        {\n            largest_prime = divisor;\n\
    \            n /= divisor;\n            while (n % divisor == 0L) \n         \
    \   {\n                n /= divisor;\n            }\n        }\n        divisor\
    \ += 1L;\n    }\n    return largest_prime;\n}\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor_2(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long divisor = 2L;\n    while (n >\
    \ 1L) \n    {\n        if (n % divisor == 0L) \n        {\n            largest_prime\
    \ = divisor;\n            n /= divisor;\n            while (n % divisor == 0L)\
    \ \n            {\n                n /= divisor;\n            }\n        }\n \
    \       divisor += 1L;\n    }\n    return largest_prime;\n}\n/*\nReturn the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor_3(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long divisor = 2L;\n    while (n >\
    \ 1L) \n    {\n        if (n % divisor == 0L) \n        {\n            largest_prime\
    \ = divisor;\n            n /= divisor;\n            while (n % divisor == 0L)\
    \ \n            {\n                n /= divisor;\n            }\n        }\n \
    \       divisor += 1L;\n    }\n", "{\n    long largest_prime_factor = 1L;\n  \
    \  long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            n /= i;\n \
    \       } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return i;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest = i;\n            n\
    \ /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n\
    \    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n       \
    \     largest_prime_factor = factor;\n            n /= factor;\n            while\
    \ (n % factor == 0) \n            {\n                n /= factor;\n          \
    \  }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\n/*\nReturn the largest palindrome made from\
    \ the product of two 3-digit numbers.\n    >>> largest_palindrome_product(2)\n\
    \    9009\n    >>> largest_palindrome_product(3)\n    906609\n*/\nlong largest_palindrome_product(long\
    \ n) \n{\n    long largest_palindrome = 0L;\n    long lower_bound = pow(10L, n\
    \ - 1L);\n    long upper_bound = pow(10L, n);\n    foreach (i; lower_bound ..\
    \ upper_bound) \n    {\n        foreach (j; lower_bound .. upper_bound) \n   \
    \     {\n            long product = i * j;\n            if (product > largest_palindrome\
    \ && is_palindrome(product)) \n            {\n                largest_palindrome\
    \ = product;\n            }\n        }\n    }\n    return largest_palindrome;\n\
    }\n/*\nReturn the smallest number divisible by each of the numbers 1 to n.\n \
    \   >>> smallest_multiple(10)\n    2520\n    >>> smallest_multiple(20)\n    232792560\n\
    */\nlong smallest_multiple(long n) \n{\n    long smallest_multiple = 1L;\n   \
    \ foreach (i; 1L .. n + 1L) \n    {\n        smallest_multiple = lcm(smallest_multiple,\
    \ i);\n    }\n    return smallest_multiple;\n}\n/*\nReturn the sum of all the\
    \ primes below n.\n    >>> sum_of_primes(10)\n    17\n    >>> sum_of_primes(2000000)\n\
    \    142913828922\n*/\nlong sum_of_primes(long n) \n{\n    long sum_of_primes\
    \ = 0", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n         \
    \   largest_prime_factor = i;\n            n /= i;\n        } else {\n       \
    \     i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n \
    \   long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n  \
    \  while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n  \
    \          n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor\
    \ = 2L;\n    while (n > 1) \n    {\n        while (n % factor == 0) \n       \
    \ {\n            largest_prime_factor = factor;\n            n /= factor;\n  \
    \      }\n        factor += 1L;\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_factor = 1L;\n    long d = 2L;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            largest_factor = d;\n   \
    \         n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) \n    \
    \    {\n            if (n > 1) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_factor = 1L;\n    long divisor = 2L;\n    while (n >\
    \ 1) \n    {\n        if (n % divisor == 0) \n        {\n            largest_factor\
    \ = divisor;\n            n /= divisor;\n            while (n % divisor == 0)\
    \ \n            {\n                n /= divisor;\n            }\n        }\n \
    \       divisor++;\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 1L;\n    foreach\
    \ (i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest_prime = i;\n            }\n       \
    \ }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor =\
    \ 1L;\n    long factor = 2L;\n    while (n > 1) {\n        while (n % factor ==\
    \ 0) {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \        }\n        factor += 1L;\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}\n/*\nReturn the largest\
    \ palindrome made from the product of two 3-digit numbers.\n    >>> largest_palindrome(2)\n\
    \    9009\n    >>> largest_palindrome(3)\n    906609\n*/\nlong largest_palindrome(long\
    \ n) \n{\n    long largest_palindrome = 0L;\n    long i = pow(10L, n) - 1L;\n\
    \    while (i >= pow(10L, n - 1L)) \n    {\n        long j = i;\n        while\
    \ (j >= pow(10L, n - 1L)) \n        {\n            long product = i * j;\n   \
    \         if (product > largest_palindrome && is_palindrome(product)) \n     \
    \       {\n                largest_palindrome = product;\n            }\n    \
    \        j -= 1L;\n        }\n        i -= 1L;\n    }\n    return largest_palindrome;\n\
    }\n/*\nReturn the smallest positive number that is evenly divisible by all of\
    \ the numbers from 1 to n.\n    >>> smallest_multiple(10)\n    2520\n    >>> smallest_multiple(20)\n\
    \    232792560\n*/\nlong smallest_multiple(long n) \n{\n    long smallest_multiple\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (smallest_multiple\
    \ % i != 0L) \n        {\n            smallest_multiple *= i / gcd(smallest_multiple,\
    \ i);\n        }\n        i += 1L;\n    }\n    return smallest_multiple;\n}\n\
    /*\nReturn the sum of the squares of the first n natural numbers.\n    >>> sum_of_squares(10)\n\
    \    385\n    >>> sum_of_squ", "{\n    long largest_prime = 1L;\n    long i =\
    \ 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n    \
    \        largest_prime = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            n /= i;\n            largest_prime =\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n\
    \    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n       \
    \     largest_prime_factor = factor;\n            n /= factor;\n            while\
    \ (n % factor == 0) \n            {\n                n /= factor;\n          \
    \  }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }\n/*\nReturn the sum of all the primes below n.\n    >>> sum_primes_below(10)\n\
    \    17\n    >>> sum_primes_below(100)\n    1060\n*/\nlong sum_primes_below(long\
    \ n) \n{\n    long sum = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n  \
    \      if (is_prime(i)) \n        {\n            sum += i;\n        }\n      \
    \  i = i + 1L;\n    }\n    return sum;\n}\n/*\nReturn the nth prime number.\n\
    \    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n\
    \    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n    11\n*/\nlong nth_prime(long\
    \ n) \n{\n    long i = 2L;\n    long count = 0L;\n    while (count < n) \n   \
    \ {\n        if (is_prime(i)) \n        {\n            count = count + 1L;\n \
    \       }\n        i = i + 1L;\n    }\n    return i - 1L;\n}\n/*\nReturn the number\
    \ of divisors of n.\n    >>> num_divisors(1)\n    1\n    >>> num_divisors(4)\n\
    \    3\n    >>> num_divisors(12)\n    6\n    >>> num_divisors(100)\n    9\n*/\n\
    long num_divisors(long n) \n{\n    long num_divisors = 0L;\n   ", "{\n    long\
    \ largest_prime_factor = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n\
    \        if (n % factor == 0) \n        {\n            largest_prime_factor =\
    \ factor;\n            n /= factor;\n            while (n % factor == 0) \n  \
    \          {\n                n /= factor;\n            }\n        }\n       \
    \ factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}", "{\n   \
    \ long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n   \
    \ {\n        if (n % i == 0L) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n         \
    \   n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0L) {\n            largest_prime = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long largest_prime = 0L;\n    long i =\
    \ 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n    \
    \        largest_prime = i;\n            n /= i;\n        }\n        else \n \
    \       {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\n/*\nReturn the largest palindrome that is the product of two 3-digit numbers.\n\
    \    >>> largest_palindrome_product()\n    906609\n*/\nlong largest_palindrome_product()\
    \ \n{\n    long largest_palindrome = 0L;\n    long i = 999L;\n    while (i >=\
    \ 100L) \n    {\n        long j = 999L;\n        while (j >= i) \n        {\n\
    \            long product = i * j;\n            if (product > largest_palindrome\
    \ && is_palindrome(product)) \n            {\n                largest_palindrome\
    \ = product;\n            }\n            j -= 1L;\n        }\n        i -= 1L;\n\
    \    }\n    return largest_palindrome;\n}\n/*\nReturn the smallest positive number\
    \ that is evenly divisible by all of the numbers from 1 to n.\n    >>> smallest_multiple(10)\n\
    \    2520\n    >>> smallest_multiple(20)\n    232792560\n*/\nlong smallest_multiple(long\
    \ n) \n{\n    long smallest_multiple = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (smallest_multiple % i != 0L) \n        {\n         \
    \   smallest_multiple *= i / gcd(smallest_multiple, i);\n        }\n        i\
    \ += 1L;\n    }\n    return smallest_multiple;\n}\n/*\nReturn the sum of the digits\
    \ in the number n.\n    >>> sum_of_digits(2**1000)\n    1366\n*/\nlong sum_of_digits(long\
    \ n) \n{\n    long sum = 0L;\n    while (n > 0L) \n    {\n        sum += n % 10L;\n\
    \        n /", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0L) {\n            n /= i;\n            largest\
    \ = i;\n        } else {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n   \
    \ long factor = 2L;\n    while (n > 1) \n    {\n        while (n % factor == 0)\
    \ \n        {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime_factor = i;\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0L;\n    long factor = 2L;\n    while (n > 1L)\
    \ \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n\
    \ % i == 0) {\n            largest = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest = i;\n            n /= i;\n        }\n        else {\n  \
    \          i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest_prime = i;\n            n /= i;\n        } else {\n     \
    \       i += 1L;\n        }\n    }\n    return largest_prime;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0L) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_prime_factor = factor;\n            n\
    \ /= factor;\n            while (n % factor == 0) \n            {\n          \
    \      n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n    long\
    \ factor = 2L;\n    while (n > 1L) {\n        if (n % factor == 0L) {\n      \
    \      largest_prime = factor;\n            n /= factor;\n            while (n\
    \ % factor == 0L) {\n                n /= factor;\n            }\n        }\n\
    \        factor = factor + 1L;\n    }\n    return largest_prime;\n}", "{\n   \
    \ long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n %\
    \ i == 0L) {\n            largest = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= sqrt(n)) \n  \
    \  {\n        if (n % i == 0L) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return max(largest_prime_factor, n);\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor\
    \ = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n\
    \            largest_prime_factor = factor;\n            n /= factor;\n      \
    \      while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n         \
    \   largest_prime_factor = i;\n            n /= i;\n        } else {\n       \
    \     i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n \
    \   long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime = i;\n       \
    \     n /= i;\n        } \n        else \n        {\n            i += 1L;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n \
    \   long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n    \
    \    {\n            largest = i;\n            n /= i;\n        }\n        else\n\
    \            i++;\n    }\n    return largest;\n}", "{\n    long largest_factor\
    \ = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n        while (n %\
    \ factor == 0) \n        {\n            largest_factor = factor;\n           \
    \ n /= factor;\n        }\n        factor += 1;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\n/*\nReturn\
    \ the largest palindrome made from the product of two 3-digit numbers.\n    >>>\
    \ largest_palindrome_product(2)\n    9009\n    >>> largest_palindrome_product(3)\n\
    \    906609\n*/\nlong largest_palindrome_product(long n) \n{\n    long largest_palindrome\
    \ = 0L;\n    long lower_bound = pow(10L, n - 1L);\n    long upper_bound = pow(10L,\
    \ n);\n    foreach (i; lower_bound .. upper_bound) \n    {\n        foreach (j;\
    \ lower_bound .. upper_bound) \n        {\n            long product = i * j;\n\
    \            if (product > largest_palindrome && is_palindrome(product)) \n  \
    \          {\n                largest_palindrome = product;\n            }\n \
    \       }\n    }\n    return largest_palindrome;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest_prime = i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i += 1L;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest = i;\n            n /= i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest = i;\n            n /= i;\n        }\n        else \n   \
    \     {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    foreach (i; 2L .. sqrt(n)\
    \ + 1L) \n    {\n        if (n % i == 0L) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest = i;\n            }\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  }\n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0L;\n    foreach (i; 2 .. n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest_prime = i;\n            n /= i;\n        } else {\n     \
    \       i += 1L;\n        }\n    }\n    return largest_prime;\n}", "{\n    long\
    \ largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest_prime = i;\n            n /=\
    \ i;\n        }\n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long largest_prime = 0L;\n    long i =\
    \ 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n    \
    \        largest_prime = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while\
    \ (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long divisor = 2L;\n    while (n > 1) \n    {\n        while (n %\
    \ divisor == 0) \n        {\n            largest_prime_factor = divisor;\n   \
    \         n /= divisor;\n        }\n        divisor += 1;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime = i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest = 0L;\n    for (long i =\
    \ 2L; i <= n; i++) \n    {\n        if (n % i == 0L) \n        {\n           \
    \ if (isPrime(i)) \n            {\n                largest = i;\n            }\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n    foreach\
    \ (i; 2 .. n) {\n        if (n % i == 0) {\n            if (isPrime(i)) {\n  \
    \              largest = i;\n            }\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime_factor = i;\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else\n            i++;\n    }\n    return largest;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 0L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            n /= i;\n            largest_prime_factor = i;\n        }\n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    foreach\
    \ (i; 2 .. sqrt(n) + 1) \n    {\n        if (n % i == 0) \n        {\n       \
    \     if (isPrime(i)) \n            {\n                largest_prime_factor =\
    \ i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_factor\
    \ = 1L;\n    long d = 2L;\n    while (n > 1) \n    {\n        while (n % d ==\
    \ 0) \n        {\n            largest_factor = d;\n            n /= d;\n     \
    \   }\n        d += 1;\n        if (d * d > n) \n        {\n            if (n\
    \ > 1) \n            {\n                largest_factor = n;\n            }\n \
    \           break;\n        }\n    }\n    return largest_factor;\n}", "{\n   \
    \ long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest_prime = 1L;\n    long i = 2L;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long max_factor = cast(long)sqrt(n);\n    foreach(i;\
    \ 2 .. max_factor)\n    {\n        if(n % i == 0)\n        {\n            if(isPrime(i))\n\
    \            {\n                largest_prime_factor = i;\n            }\n   \
    \     }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest = i;\n            n /= i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            n /= i;\n     \
    \       largest = i;\n        }\n        else {\n            i += 1L;\n      \
    \  }\n    }\n    return largest;\n}", "{\n    long largest_prime = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime = i;\n            n /= i;\n        }\n        else\n\
    \        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  }\n        else {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}", "{\n \
    \   long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            n /= i;\n            largest_prime_factor\
    \ = i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}", "{\n \
    \   long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime = i;\n       \
    \     n /= i;\n        } \n        else \n        {\n            i += 1L;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n \
    \   long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n    \
    \    {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    foreach (i; 2L .. n) {\n        if (n % i == 0L)\
    \ {\n            if (isPrime(i)) {\n                largest = i;\n           \
    \ }\n        }\n    }\n    return largest;\n}", "{\n    long largest_factor =\
    \ 1L;\n    long d = 2L;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            largest_factor = d;\n            n /= d;\n        }\n\
    \        d = d + 1;\n        if (d*d > n) \n        {\n            if (n > 1)\
    \ \n            {\n                largest_factor = n;\n            }\n      \
    \      break;\n        }\n    }\n    return largest_factor;\n}", "{\n    long\
    \ largest = 0L;\n    foreach (i; 2 .. cast(long)sqrt(n)) {\n        if (n % i\
    \ == 0) {\n            if (isPrime(i)) {\n                largest = i;\n     \
    \       }\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long factor = 2L;\n\
    \    while (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n     \
    \       largest = factor;\n            n /= factor;\n            while (n % factor\
    \ == 0L) \n            {\n                n /= factor;\n            }\n      \
    \  }\n        factor += 1L;\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            n /= i;\n            largest_prime_factor = i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
