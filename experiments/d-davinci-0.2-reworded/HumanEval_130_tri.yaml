name: HumanEval_130_tri
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
  \ it was studied deeply by mathematicians in \n    the last couple centuries. However,\
  \ what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined\
  \ by the recurrence:\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>>\
  \ tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n    \n*/\nlong[] tri(long n) \n"
tests: "unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
  \ 3L, 2.0, 8.0]);\n    assert(candidate(4L) == [1L, 3L, 2.0, 8.0, 3.0]);\n    assert(candidate(5L)\
  \ == [1L, 3L, 2.0, 8.0, 3.0, 15.0]);\n    assert(candidate(6L) == [1L, 3L, 2.0,\
  \ 8.0, 3.0, 15.0, 4.0]);\n    assert(candidate(7L) == [1L, 3L, 2.0, 8.0, 3.0, 15.0,\
  \ 4.0, 24.0]);\n    assert(candidate(8L) == [1L, 3L, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0,\
  \ 5.0]);\n    assert(candidate(9L) == [1L, 3L, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0,\
  \ 35.0]);\n    assert(candidate(20L) == [1L, 3L, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0,\
  \ 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]);\n\
  \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\n\
  void main(){}"
completions: ["{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n    \
    \    result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n \
    \   else if (n == 2) \n    {\n        result[0] = 2;\n        result[1] = 1;\n\
    \        result[2] = 3;\n    }\n    else \n    {\n        long[] temp = tri(n\
    \ - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] =\
    \ temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else \n   \
    \ {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1]\
    \ + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n   \
    \ }\n    return result;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n   \
    \ 2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n)\
    \ \n{\n    if (n == 1) \n    {\n        return 3;\n    }\n    else if (n == 2)\
    \ \n    {\n        return 2;\n    }\n    else if (n == 3) \n    {\n        return\
    \ 8;\n    }\n    else \n    {\n        return tri2(n - 1) + tri2(n - 2) + tri2(n\
    \ - 3);\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>>\
    \ tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    if\
    \ (n == 1) \n    {\n        return 3;\n    }\n    else if (n == 2) \n    {\n \
    \       return 2;\n    }\n    else if (n == 3) \n    {\n        return 8;\n  \
    \  }\n    else \n    {\n        long[] temp = tri(n - 1);\n        return temp[0]\
    \ + temp[1] + temp[2];\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4", "{\n\
    \    long[] result = new long[n];\n    if (n == 0) \n    {\n        return result;\n\
    \    }\n    if (n == 1) \n    {\n        result[0] = 3;\n        return result;\n\
    \    }\n    if (n == 2) \n    {\n        result[0] = 3;\n        result[1] = 2;\n\
    \        return result;\n    }\n    if (n == 3) \n    {\n        result[0] = 3;\n\
    \        result[1] = 2;\n        result[2] = 8;\n        return result;\n    }\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (long i =\
    \ 3; i < n; i++) \n    {\n        result[i] = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n    }\n    return result;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\
    \ \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1]\
    \ + a[2];\n    }\n    return a;\n}", "{\n    long[] result = new long[3];\n  \
    \  if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n     \
    \   result[2] = 1;\n    }\n    else \n    {\n        result = tri(n - 1);\n  \
    \      long temp = result[0];\n        result[0] = result[1];\n        result[1]\
    \ = result[2];\n        result[2] = temp + result[1];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    if (n == 0) \n    {\n        return\
    \ result;\n    }\n    result[0] = 3;\n    if (n == 1) \n    {\n        return\
    \ result;\n    }\n    result[1] = 2;\n    if (n == 2) \n    {\n        return\
    \ result;\n    }\n    result[2] = 8;\n    for (long i = 3; i < n; i++) \n    {\n\
    \        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[n];\n    if (n == 0)\n\
    \        return result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n\
    \    result[1] = 2;\n    if (n == 2)\n        return result;\n    result[2] =\
    \ 8;\n    for (long i = 3; i < n; i++)\n        result[i] = result[i - 1] + result[i\
    \ - 2] + result[i - 3];\n    return result;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return\
    \ a;\n    else\n    {\n        for (long i = 3; i <= n; i++)\n        {\n    \
    \        a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[0] + a[1];\n\
    \        }\n        return a;\n    }\n}", "{\n    long[] result = new long[3];\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 1;\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        long temp = result[0];\n        result[0] =\
    \ result[1];\n        result[1] = result[2];\n        result[2] = temp + result[0]\
    \ + result[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 1;\n    for (long i =\
    \ 3; i < n; i++) \n    {\n        result[i] = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n    }\n    return result;\n}", "{\n    long[] fib = new long[3];\n\
    \    fib[0] = 1;\n    fib[1] = 1;\n    fib[2] = 2;\n    for (long i = 3; i < n;\
    \ i++) \n    {\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2]\
    \ = fib[0] + fib[1];\n    }\n    return fib;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++)\
    \ \n    {\n        long t = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = t + a[0] + a[1];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri2(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long t = a;\n    \
    \    a = b;\n        b = c;\n        c = t + a + b;\n    }\n    return a;\n}\n\
    /*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n\
    \    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long a = 3;\n    long\
    \ b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long\
    \ t = a;\n        a = b;\n        b = c;\n        c = t + a + b;\n    }\n    return\
    \ a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4(long n) \n{\n    long a = 3;\n\
    \    long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n\
    \        long t = a;", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long\
    \ temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = temp\
    \ + a[0] + a[1];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>>\
    \ tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong\
    \ tri2(long n) \n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for\
    \ (long i = 0; i < n; i++) \n    {\n        long temp = a;\n        a = b;\n \
    \       b = c;\n        c = temp + a + b;\n    }\n    return a;\n}\n/*\n    >>>\
    \ tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n\
    \    8L\n*/\nlong tri3(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long temp = a;\n \
    \       a = b;\n        b = c;\n        c = temp + a + b;\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4(long n) \n{\n    long a = 3;\n  \
    \  long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n  \
    \      long temp = a;", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        a[0]\
    \ = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1] + a[2];\n    }\n \
    \   return a;\n}", "{\n    long[] result = new long[3];\n    if (n == 1) \n  \
    \  {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n\
    \    }\n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    if (n == 0)\n        return result;\n    result[0] = 3;\n    if (n == 1)\n\
    \        return result;\n    result[1] = 2;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 8;\n    for (long i = 3; i < n; i++)\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    return result;\n}", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n   \
    \     result[1] = 2;\n        result[2] = 1;\n    }\n    else \n    {\n      \
    \  long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n    if (n == 1) \n\
    \    {\n        return 3;\n    }\n    else if (n == 2) \n    {\n        return\
    \ 2;\n    }\n    else if (n == 3) \n    {\n        return 8;\n    }\n    else\
    \ \n    {\n        return tri2(n - 1) + tri2(n - 2) + tri2(n - 3);\n    }\n}\n\
    /*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n\
    \    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    if (n == 1) \n    {\n\
    \        return 3;\n    }\n    else if (n == 2) \n    {\n        return 2;\n \
    \   }\n    else if (n == 3) \n    {\n        return 8;\n    }\n    else \n   \
    \ {\n        long[] temp = tri(n - 1);\n        return temp[0] + temp[1] + temp[2];\n\
    \    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        a[2] = a[0] + a[1] + a[2];\n        a[0] = a[1];\n        a[1]\
    \ = a[2] - a[0] - a[1];\n    }\n    return a;\n}", "{\n    long[] result = new\
    \ long[n];\n    if (n == 0)\n        return result;\n    result[0] = 3;\n    if\
    \ (n == 1)\n        return result;\n    result[1] = 2;\n    if (n == 2)\n    \
    \    return result;\n    result[2] = 8;\n    for (long i = 3; i < n; i++)\n  \
    \      result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    return\
    \ result;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 3;\n    if (n == 2)\n    \
    \    return 2;\n    return tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n/*\n    >>>\
    \ tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n\
    \    8L\n*/\nlong tri(long n) \n{\n    if (n == 0)\n        return 0;\n    if\
    \ (n == 1)\n        return 3;\n    if (n == 2)\n        return 2;\n    long a\
    \ = 3;\n    long b = 2;\n    long c = 8;\n    for (long i = 3; i < n; i++)\n \
    \   {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n)\
    \ \n{\n    if (n == 0)\n        return 0;\n    if (", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n <= 3)\n        return\
    \ a[n-1..n];\n    else\n    {\n        for (long i = 3; i < n; i++)\n        {\n\
    \            a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[0] +\
    \ a[1] + a[2];\n        }\n        return a[2..3];\n    }\n}", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n   \
    \     result[1] = 2;\n        result[2] = 1;\n    }\n    else \n    {\n      \
    \  long[] prev = tri(n - 1);\n        result[0] = prev[0] + prev[1] + prev[2];\n\
    \        result[1] = prev[0];\n        result[2] = prev[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n\
    \    a[2] = 1;\n    if (n == 1)\n        return a;\n    for (long i = 0; i < n\
    \ - 1; i++)\n    {\n        long temp = a[0];\n        a[0] = a[1];\n        a[1]\
    \ = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n}", "{\n\
    \    long[] result = new long[n];\n    if (n == 0)\n        return result;\n \
    \   if (n == 1)\n    {\n        result[0] = 3;\n        return result;\n    }\n\
    \    if (n == 2)\n    {\n        result[0] = 3;\n        result[1] = 2;\n    \
    \    return result;\n    }\n    if (n == 3)\n    {\n        result[0] = 3;\n \
    \       result[1] = 2;\n        result[2] = 8;\n        return result;\n    }\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (long i =\
    \ 3; i < n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ - 3];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 1;\n    for (long i =\
    \ 3; i < n; i++) \n    {\n        result[i] = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n    }\n    return result;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return\
    \ a;\n    else if (n == 2)\n    {\n        a[0] = 2;\n        a[1] = 1;\n    \
    \    a[2] = 3;\n        return a;\n    }\n    else if (n == 3)\n    {\n      \
    \  a[0] = 1;\n        a[1] = 3;\n        a[2] = 2;\n        return a;\n    }\n\
    \    else\n    {\n        long[] b = new long[3];\n        b[0] = 1;\n       \
    \ b[1] = 3;\n        b[2] = 2;\n        for (long i = 4; i <= n; i++)\n      \
    \  {\n            a[0] = b[0];\n            a[1] = b[1];\n            a[2] = b[2];\n\
    \            b[0] = a[1];\n            b[1] = a[2];\n            b[2] = a[0] +\
    \ a[1] + a[2];\n        }\n        return b;\n    }\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n    long b = 2;\n    long c\
    \ = 1;\n    if (n == 1)\n        return a;\n    else if (n == 2)\n        return\
    \ b;\n    else if (n == 3)\n        return c;\n    else\n    {\n        for (long\
    \ i = 4; i <= n; i++)\n        {\n            long temp = a;\n            a =\
    \ b;\n            b = c;\n            c = temp + b + c;\n        }\n        return\
    \ c;\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n   ", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n   \
    \     result[1] = 2;\n        result[2] = 1;\n    } \n    else \n    {\n     \
    \   long[] prev = tri(n - 1);\n        result[0] = prev[0] + prev[1] + prev[2];\n\
    \        result[1] = prev[0];\n        result[2] = prev[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] res = new long[3];\n    if (n == 1) \n    {\n  \
    \      res[0] = 3;\n        res[1] = 2;\n        res[2] = 1;\n    }\n    else\
    \ \n    {\n        long[] prev = tri(n - 1);\n        res[0] = prev[0] + prev[1]\
    \ + prev[2];\n        res[1] = prev[0];\n        res[2] = prev[1];\n    }\n  \
    \  return res;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] =\
    \ 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i] =\
    \ a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong[] tri2(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    foreach (i; 3 .. n) \n    {\n        a[i] =\
    \ a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong[] tri3(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    foreach (i; 3 .. n) \n    {\n        a[i] =\
    \ a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong[] tri4(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    foreach (i", "{\n    long[] result = new long[n];\n\
    \    if (n == 0)\n        return result;\n    if (n == 1)\n    {\n        result[0]\
    \ = 3;\n        return result;\n    }\n    if (n == 2)\n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        return result;\n    }\n    if (n == 3)\n\
    \    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] = 8;\n\
    \        return result;\n    }\n    result[0] = 3;\n    result[1] = 2;\n    result[2]\
    \ = 8;\n    for (long i = 3; i < n; i++)\n    {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}", "{\n \
    \   long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n   \
    \ for (long i = 0; i < n; i++) \n    {\n        long temp = a[0];\n        a[0]\
    \ = a[1];\n        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n \
    \   return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>>\
    \ tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n    long\
    \ a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n\
    \    {\n        long temp = a;\n        a = b;\n        b = c;\n        c = temp\
    \ + a + b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long\
    \ n) \n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        long temp = a;\n        a = b;\n        b =\
    \ c;\n        c = temp + a + b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri4(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long temp = a;", "{\n\
    \    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    } \n    else \n  \
    \  {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1]\
    \ + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n   \
    \ }\n    return result;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n   \
    \ 2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n)\
    \ \n{\n    if (n == 1) \n    {\n        return 3;\n    } \n    else if (n == 2)\
    \ \n    {\n        return 2;\n    } \n    else \n    {\n        return tri2(n\
    \ - 1) + tri2(n - 2) + tri2(n - 3);\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n \
    \   >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri3(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n    } \n  \
    \  else if (n == 2) \n    {\n        return 2;\n    } \n    else \n    {\n   \
    \     long a = 3;\n        long b = 2;\n        long c = 1;\n        long d =\
    \ 0;\n        for (long i = 3; i <= n; i++) \n        {\n            d = a + b\
    \ + c;\n            c = b;\n            b = a;\n            a = d;\n        }\n\
    \        return d;\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n \
    \   2L\n    >>> tri(4L)\n    3L\n", "{\n    long[] a = new long[3];\n    a[0]\
    \ = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (int i = 0; i < n; i++) \n    {\n\
    \        long temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n     \
    \   a[2] = temp + a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] a = new\
    \ long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3;\
    \ i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n\
    \    return a;\n}\n/*\n    >>> tri(5L)\n    [3L, 2L, 1L, 3L, 8L]\n    >>> tri(10L)\n\
    \    [3L, 2L, 1L, 3L, 8L, 21L, 55L, 144L, 377L, 987L]\n*/\nlong[] tri(long n)\
    \ \n{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n\
    \    for (long i = 3; i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i - 2]\
    \ + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(5L)\n    [3L, 2L, 1L,\
    \ 3L, 8L]\n    >>> tri(10L)\n    [3L, 2L, 1L, 3L, 8L, 21L, 55L, 144L, 377L, 987L]\n\
    */\nlong[] tri(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i]\
    \ = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(5L)\n\
    \    [3L, 2L, 1L, 3L, 8L]\n    >>> tri(10L)\n    [3L, 2L, 1L, 3L, 8L, 21L, 55L,\
    \ 144L", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n     \
    \   result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n  \
    \  else \n    {\n        long[] prev = tri(n - 1);\n        result[0] = prev[0]\
    \ + prev[1] + prev[2];\n        result[1] = prev[0];\n        result[2] = prev[1];\n\
    \    }\n    return result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i <= n; i++) \n    {\n   \
    \     a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1] + a[2];\n\
    \    }\n    return a;\n}", "{\n    long[] tri = new long[n];\n    tri[0] = 1;\n\
    \    tri[1] = 1;\n    tri[2] = 2;\n    foreach(i; 3..n)\n    {\n        tri[i]\
    \ = tri[i-1] + tri[i-2] + tri[i-3];\n    }\n    return tri;\n}", "{\n    long[]\
    \ a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else \n    {\n        result = tri(n - 1);\n\
    \        result[0] = result[0] + result[1] + result[2];\n        result[1] = result[0]\
    \ - result[1] - result[2];\n        result[2] = result[0] - result[1] - result[2];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[3];\n    if (n\
    \ == 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else\n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] a = new long[n];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\
    \ \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }", "{\n    long[] result = new long[n];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 2;\n    if (n == 2)\n        return result;\n    result[2] = 8;\n    for (long\
    \ i = 3; i < n; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ - 3];\n    return result;\n}\n/*\n    >>> tri(5L)\n    [3L, 2L, 8L, 11L, 19L]\n\
    \    >>> tri(10L)\n    [3L, 2L, 8L, 11L, 19L, 87L, 106L, 193L, 290L, 477L]\n \
    \   >>> tri(20L)\n    [3L, 2L, 8L, 11L, 19L, 87L, 106L, 193L, 290L, 477L, 956L,\
    \ 1263L, 2199L, 3462L, 5661L, 9123L, 15784L, 25007L, 40791L, 65798L]\n    >>>\
    \ tri(30L)\n    [3L, 2L, 8L, 11L, 19L, 87L, 106L, 193L, 290L, 477L, 956L, 1263L,\
    \ 2199L, 3462L, 5661L, 9123L, 15784L, 25007L, 40791L, 65798L, 106589L, 172387L,\
    \ 278976L, 449363L, 728339L, 1177702L, 1906041L, 3083443L, 4969484L, 8052927L]\n\
    \    >>> tri(40L)\n    [3L, 2L, 8L, 11L, 19L, 87L, 106L, 193L, 290L, 477L, 956L,\
    \ 1263L, 2199L, 3462L, 5661L, 9123L, 15784L, 25007L, 40791L, 65798L, 106589L,\
    \ 172387L, 27", "{\n    long[] a = new long[3];\n    a[0] = 1;\n    a[1] = 1;\n\
    \    a[2] = 2;\n    for (long i = 3; i < n; i++) \n    {\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n\
    \        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n\
    \    a[2] = 1;\n    for (long i = 0; i < n; i++)\n    {\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = a[0] + a[1];\n    }\n    return a;\n}",
  "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n \
    \   for (long i = 0; i < n; i++)\n    {\n        long temp = a[0];\n        a[0]\
    \ = a[1];\n        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n \
    \   return a;\n}", "{\n    long[] result = new long[3];\n    if (n == 1)\n   \
    \ {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n\
    \    }\n    else\n    {\n        long[] prev = tri(n - 1);\n        result[0]\
    \ = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n        result[2]\
    \ = prev[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    if (n == 0)\n        return result;\n    result[0] = 3;\n    if (n == 1)\n\
    \        return result;\n    result[1] = 2;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 8;\n    for (long i = 3; i < n; i++)\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    return result;\n}", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1)\n    {\n        result[0] = 3;\n    \
    \    result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n        long[]\
    \ temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n     \
    \   result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else if (n\
    \ == 2) \n    {\n        result[0] = 2;\n        result[1] = 1;\n        result[2]\
    \ = 3;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] a\
    \ = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i\
    \ = 0; i < n; i++) \n    {\n        long temp = a[0];\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n\
    }", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] =\
    \ 1;\n    if (n == 1)\n        return a;\n    for (long i = 0; i < n - 1; i++)\n\
    \    {\n        a[2] = a[0] + a[1] + a[2];\n        a[0] = a[1];\n        a[1]\
    \ = a[2] - a[0] - a[1];\n    }\n    return a;\n}", "{\n    long[] result = new\
    \ long[3];\n    if (n == 1)\n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        result[2] = 1;\n    }\n    else\n    {\n        long[] temp =\
    \ tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1]\
    \ = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n}", "{\n\
    \    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n  \
    \  for (long i = 0; i < n; i++)\n    {\n        long temp = a[0];\n        a[0]\
    \ = a[1];\n        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n \
    \   return a;\n}", "{\n    long[] arr = new long[3];\n    arr[0] = 3;\n    arr[1]\
    \ = 2;\n    arr[2] = 1;\n    for (long i = 0; i < n; i++)\n    {\n        long\
    \ temp = arr[0];\n        arr[0] = arr[1];\n        arr[1] = arr[2];\n       \
    \ arr[2] = temp + arr[0] + arr[1];\n    }\n    return arr;\n}", "{\n    long[]\
    \ a = new long[3];\n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 2;\n    for (long\
    \ i = 3; i < n; i++) \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n   \
    \     a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n}", "{\n    long[] fib\
    \ = new long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n    for (int\
    \ i = 3; i < n; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i\
    \ - 3];\n    }\n    return fib;\n}", "{\n    long[] a = new long[3];\n    a[0]\
    \ = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return a;\n   \
    \ else\n    {\n        long[] b = new long[3];\n        b[0] = a[0] + a[1] + a[2];\n\
    \        b[1] = a[0];\n        b[2] = a[1];\n        return tri(n - 1, b);\n \
    \   }\n}", "{\n    long[] result = new long[3];\n    result[0] = 3;\n    result[1]\
    \ = 2;\n    result[2] = 1;\n    if (n == 1)\n        return result;\n    else\
    \ if (n == 2)\n    {\n        result[0] = 2;\n        result[1] = 1;\n       \
    \ result[2] = 3;\n        return result;\n    }\n    else if (n == 3)\n    {\n\
    \        result[0] = 1;\n        result[1] = 3;\n        result[2] = 2;\n    \
    \    return result;\n    }\n    else\n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n        return result;\n    }\n}", "{\n    long[]\
    \ a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else if (n == 2)\n    {\n        result[0] = 2;\n        result[1]\
    \ = 1;\n        result[2] = 3;\n    }\n    else\n    {\n        long[] temp =\
    \ tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1]\
    \ = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n}", "{\n\
    \    long[] fib = new long[n];\n    fib[0] = 1;\n    fib[1] = 1;\n    fib[2] =\
    \ 2;\n    for (long i = 3; i < n; i++) \n    {\n        fib[i] = fib[i - 1] +\
    \ fib[i - 2] + fib[i - 3];\n    }\n    return fib;\n}", "{\n    long[] a = new\
    \ long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0;\
    \ i < n; i++) \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2]\
    \ = a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return\
    \ a;\n    for (long i = 1; i < n; i++)\n    {\n        long tmp = a[0];\n    \
    \    a[0] = a[1];\n        a[1] = a[2];\n        a[2] = tmp + a[0] + a[1];\n \
    \   }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n\
    \    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n\
    \    long a = 3;\n    long b = 2;\n    long c = 1;\n    if (n == 1)\n        return\
    \ a;\n    for (long i = 1; i < n; i++)\n    {\n        long tmp = a;\n       \
    \ a = b;\n        b = c;\n        c = tmp + a + b;\n    }\n    return a;\n}\n\
    /*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n\
    \    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long a = 3;\n    long\
    \ b = 2;\n    long c = 1;\n    if (n == 1)\n        return a;\n    for (long i\
    \ = 1; i < n; i++)\n    {\n        long tmp = a;\n        a = b;\n        b =\
    \ c;\n        c = tmp + a + b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri4(long n) \n{\n    long a = 3;\n    long b", "{\n    long[]\
    \ a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        long temp = a[0];\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n\
    }", "{\n    long[] a = new long[3];\n    a[0] = 1;\n    a[1] = 1;\n    a[2] =\
    \ 1;\n    for (long i = 0; i < n; i++) \n    {\n        a[2] = a[0] + a[1] + a[2];\n\
    \        a[0] = a[1];\n        a[1] = a[2] - a[0] - a[1];\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n    long a = 1;\n  \
    \  long b = 1;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n  \
    \      c = a + b + c;\n        a = b;\n        b = c - a - b;\n    }\n    return\
    \ c;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n\
    \        c = a + b + c;\n        a = b;\n        b = c - a - b;\n    }\n    return\
    \ c;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4(long n) \n{\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n\
    \        c = a + b + c", "{\n    long[] result = new long[3];\n    if (n == 1)\
    \ \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] =\
    \ 1;\n    }\n    else \n    {\n        long[] prev = tri(n - 1);\n        result[0]\
    \ = prev[1] + prev[2];\n        result[1] = prev[0] + prev[2];\n        result[2]\
    \ = prev[0] + prev[1];\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n  \
    \  3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n   \
    \ 8L\n*/\nlong tri(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n \
    \   }\n    else if (n == 2) \n    {\n        return 2;\n    }\n    else if (n\
    \ == 3) \n    {\n        return 8;\n    }\n    else \n    {\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n   \
    \ >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri(long n) \n{\n    long[] result = new long[n];\n    result[0] = 3;\n \
    \   result[1] = 2;\n    result[2] = 8;\n    for (long i = 3; i < n; i++) \n  \
    \  {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n   \
    \ }\n    return result[n - 1];\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n)\
    \ \n", "{\n    long[] result = new long[n];\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n    {\n        result[0] = 3;\n        return result;\n    }\n\
    \    if (n == 2)\n    {\n        result[0] = 3;\n        result[1] = 2;\n    \
    \    return result;\n    }\n    if (n == 3)\n    {\n        result[0] = 3;\n \
    \       result[1] = 2;\n        result[2] = 8;\n        return result;\n    }\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (long i =\
    \ 3; i < n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ - 3];\n    }\n    return result;\n}\n/*\n    >>> tri(5L)\n    [3L, 2L, 8L, 11L,\
    \ 19L]\n    >>> tri(6L)\n    [3L, 2L, 8L, 11L, 19L, 30L]\n    >>> tri(7L)\n  \
    \  [3L, 2L, 8L, 11L, 19L, 30L, 48L]\n    >>> tri(8L)\n    [3L, 2L, 8L, 11L, 19L,\
    \ 30L, 48L, 77L]\n    >>> tri(9L)\n    [3L, 2L, 8L, 11L, 19L, 30L, 48L, 77L, 123L]\n\
    \    >>> tri(10L)\n    [3L, 2L, 8L, 11L, 19L, 30L, 48L, 77L, 123L, 199L]\n   \
    \ >>> tri(11L)\n    [3L, 2L, 8L, 11L, 19L, 30L, 48L, 77L, 123L, 199L, 322L]\n\
    \    >>> tri(12L)\n    [3L, 2L, 8L, 11L, 19L, 30L, 48L, 77L, 123L, 199L, 322L,\
    \ 521", "{\n    long[] res = new long[3];\n    res[0] = 3;\n    res[1] = 2;\n\
    \    res[2] = 1;\n    if (n == 1)\n        return res;\n    for (long i = 2; i\
    \ < n; i++)\n    {\n        long temp = res[2];\n        res[2] = res[0] + res[1]\
    \ + res[2];\n        res[0] = res[1];\n        res[1] = temp;\n    }\n    return\
    \ res;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n  \
    \  a[2] = 1;\n    for (long i = 4; i <= n; i++) \n    {\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n\
    \        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n\
    \    a[2] = 8;\n    for (long i = 3; i < n; i++)\n    {\n        a[i] = a[i -\
    \ 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] fib = new\
    \ long[3];\n    fib[0] = 0;\n    fib[1] = 1;\n    fib[2] = 1;\n    for (long i\
    \ = 3; i <= n; i++) \n    {\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n\
    \        fib[2] = fib[0] + fib[1];\n    }\n    return fib;\n}", "{\n    long[]\
    \ arr = new long[n];\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2] = 8;\n    for\
    \ (long i = 3; i < n; i++) \n    {\n        arr[i] = arr[i - 1] + arr[i - 2] +\
    \ arr[i - 3];\n    }\n    return arr;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else if (n == 2) \n    {\n        result[0]\
    \ = 2;\n        result[1] = 1;\n        result[2] = 3;\n    } \n    else \n  \
    \  {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1]\
    \ + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n   \
    \ }\n    return result;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    for (int i = 3; i < n; i++) \n    {\n     \
    \   a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n   \
    \ long[] result = new long[n];\n    result[0] = 3;\n    result[1] = 2;\n    result[2]\
    \ = 1;\n    for (long i = 3; i < n; i++) \n    {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}", "{\n \
    \   long a = 1L;\n    long b = 2L;\n    long c = 3L;\n    long d = 0L;\n    long[]\
    \ res = new long[n];\n    for (long i = 0L; i < n; i++)\n    {\n        res[i]\
    \ = a;\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return res;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n   \
    \ 2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri(long n)\
    \ \n{\n    long a = 1L;\n    long b = 2L;\n    long c = 3L;\n    long d = 0L;\n\
    \    long[] res = new long[n];\n    for (long i = 0L; i < n; i++)\n    {\n   \
    \     res[i] = a;\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    return res;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>>\
    \ tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[]\
    \ tri(long n) \n{\n    long a = 1L;\n    long b = 2L;\n    long c = 3L;\n    long\
    \ d = 0L;\n    long[] res = new long[n];\n    for (long i = 0L; i < n; i++)\n\
    \    {\n        res[i] = a;\n        d = a + b + c;\n        a = b;\n        b\
    \ = c;\n        c = d;\n    }\n    return res;\n}\n/*\n    >>> tri(1L)\n    3L\n\
    \    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long[] tri(", "{\n    long[] arr = new long[n];\n    if (n == 1)\n    {\n    \
    \    arr[0] = 3;\n        return arr;\n    }\n    else if (n == 2)\n    {\n  \
    \      arr[0] = 3;\n        arr[1] = 2;\n        return arr;\n    }\n    else\
    \ if (n == 3)\n    {\n        arr[0] = 3;\n        arr[1] = 2;\n        arr[2]\
    \ = 8;\n        return arr;\n    }\n    else\n    {\n        arr[0] = 3;\n   \
    \     arr[1] = 2;\n        arr[2] = 8;\n        for (long i = 3; i < n; i++)\n\
    \        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n     \
    \   }\n        return arr;\n    }\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (long i =\
    \ 3; i < n; i++) \n    {\n        result[i] = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        result[2] = 1;\n    }\n    else \n    {\n        long[] temp =\
    \ tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1]\
    \ = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n}\n/*\n\
    \    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n \
    \   >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result[0];\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n\
    \    }\n    else \n    {\n        return tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    if (n == 1) \n\
    \    {\n        return 3;", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        result = tri(n - 1);\n        long temp\
    \ = result[0];\n        result[0] = result[1];\n        result[1] = result[2];\n\
    \        result[2] = temp + result[1];\n    }\n    return result;\n}", "{\n  \
    \  long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        long temp = a[0];\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n   \
    \ long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++)\n    {\n    \
    \    long temp = a;\n        a = b;\n        b = c;\n        c = temp + a + b;\n\
    \    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n\
    \    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n\
    \    long a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        long temp = a;\n        a = b;\n        b = c;\n      \
    \  c = temp + a + b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n \
    \   >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri(long n) \n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        long temp = a;\n        a = b;\n",
  "{\n    long[] arr = new long[n];\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2]\
    \ = 1;\n    for (long i = 3; i < n; i++) \n    {\n        arr[i] = arr[i - 1]\
    \ + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "{\n    long[] a = new\
    \ long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3;\
    \ i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n\
    \    return a;\n}", "{\n    long[] arr = new long[3];\n    arr[0] = 3;\n    arr[1]\
    \ = 2;\n    arr[2] = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long\
    \ temp = arr[0];\n        arr[0] = arr[1];\n        arr[1] = arr[2];\n       \
    \ arr[2] = temp + arr[0] + arr[1];\n    }\n    return arr;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri2(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long temp = a;\n \
    \       a = b;\n        b = c;\n        c = temp + a + b;\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long a = 3;\n  \
    \  long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n  \
    \      long temp = a;\n        a = b;\n        b = c;\n        c = temp + a +\
    \ b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4(long\
    \ n) \n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        long temp = a;", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++)\
    \ \n    {\n        long temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri2(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    for (long i = 0; i < n; i++) \n    {\n        long temp = a;\n \
    \       a = b;\n        b = c;\n        c = temp + a + b;\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long a = 3;\n  \
    \  long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++) \n    {\n  \
    \      long temp = a;\n        a = b;\n        b = c;\n        c = temp + a +\
    \ b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri4(long\
    \ n) \n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        long temp = a;", "{\n    long[] result = new\
    \ long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        result[2] = 1;\n    } \n    else \n    {\n        result = tri(n\
    \ - 1);\n        long temp = result[0];\n        result[0] = result[1];\n    \
    \    result[1] = result[2];\n        result[2] = temp + result[1];\n    }\n  \
    \  return result;\n}", "{\n    if (n <= 0) \n    {\n        return [0, 0, 0];\n\
    \    }\n    if (n == 1) \n    {\n        return [0, 0, 1];\n    }\n    if (n ==\
    \ 2) \n    {\n        return [0, 1, 1];\n    }\n    if (n == 3) \n    {\n    \
    \    return [1, 1, 1];\n    }\n    auto a = tri(n - 1);\n    return [a[1], a[2],\
    \ a[0] + a[1] + a[2]];\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else\n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    if (n == 0) \n    {\n        return result;\n    }\n    result[0] = 3;\n\
    \    if (n == 1) \n    {\n        return result;\n    }\n    result[1] = 2;\n\
    \    if (n == 2) \n    {\n        return result;\n    }\n    result[2] = 8;\n\
    \    for (long i = 3; i < n; i++) \n    {\n        result[i] = result[i - 1] +\
    \ result[i - 2] + result[i - 3];\n    }\n    return result;\n}\n/*\n    You are\
    \ given a positive integer N, and you have to find the sum of all \n    the elements\
    \ of the Tribonacci sequence whose index is less than N.\n    >>> sumTri(1L)\n\
    \    3L\n    >>> sumTri(2L)\n    5L\n    >>> sumTri(3L)\n    13L\n    >>> sumTri(4L)\n\
    \    21L\n    >>> sumTri(5L)\n    34L\n    >>> sumTri(6L)\n    55L\n    >>> sumTri(7L)\n\
    \    89L\n    >>> sumTri(8L)\n    144L\n    >>> sumTri(9L)\n    233L\n    >>>\
    \ sumTri(10L)\n    377L\n    >>> sumTri(11L)\n    610L\n    >>> sumTri(12L)\n\
    \    987L\n    >>> sumTri(13L)\n    1597L\n    >>> sumTri(14L)\n    2584L\n  \
    \  >>> sumTri(15L)\n    4181L\n    >>> sumTri(16L)\n    6765L\n    >>> sumTri(17L)\n\
    \    10946L\n    >>> sumTri(18L)\n    17711L\n    >>> sumTri(19L)\n    28657L\n\
    \    >>> sumTri(20L)\n    46368L\n    >>> sumTri(21L)\n    75025L\n    >>> sumTri(22L)\n\
    \    121393L\n    >>> sumTri(23L)\n    196418L\n    >>> sumTri", "{\n    long[]\
    \ result = new long[3];\n    result[0] = 3;\n    result[1] = 2;\n    result[2]\
    \ = 1;\n    if (n == 1)\n        return result;\n    else if (n == 2)\n    {\n\
    \        result[0] = 2;\n        result[1] = 1;\n        result[2] = 3;\n    \
    \    return result;\n    }\n    else\n    {\n        for (long i = 3; i <= n;\
    \ i++)\n        {\n            long temp = result[0];\n            result[0] =\
    \ result[1];\n            result[1] = result[2];\n            result[2] = temp\
    \ + result[0] + result[1];\n        }\n        return result;\n    }\n}\n/*\n\
    \    The sequence is defined by the recurrence:\n    >>> fib(1L)\n    1L\n   \
    \ >>> fib(2L)\n    1L\n    >>> fib(3L)\n    2L\n    >>> fib(4L)\n    3L\n    >>>\
    \ fib(5L)\n    5L\n    >>> fib(6L)\n    8L\n    >>> fib(7L)\n    13L\n    >>>\
    \ fib(8L)\n    21L\n    >>> fib(9L)\n    34L\n    >>> fib(10L)\n    55L\n    >>>\
    \ fib(11L)\n    89L\n    >>> fib(12L)\n    144L\n    >>> fib(13L)\n    233L\n\
    \    >>> fib(14L)\n    377L\n    >>> fib(15L)\n    610L\n    >>> fib(16L)\n  \
    \  987L\n    >>> fib(17L)\n    1597L\n    >>> fib(18L)\n    2584L\n    >>> fib(19L)\n\
    \    4181L\n    >>> fib(20L)\n    6765L\n    >>> fib(21L)\n    10946L\n    >>>\
    \ fib(22L)\n    17711L\n    >>> fib(23L)\n    28657L\n    >>> fib(24L)\n    46368L\n\
    \    >>> fib(25L)\n    75025L\n    >>>", "{\n    long[] a = new long[3];\n   \
    \ a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[0] = a[0] + a[1] + a[2];\n        a[1] = a[0] - a[1] - a[2];\n\
    \        a[2] = a[0] - a[1] - a[2];\n    }\n    return a;\n}", "{\n    long[]\
    \ a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 3; i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    result[0]\
    \ = 3;\n    result[1] = 2;\n    result[2] = 1;\n    if (n == 1)\n        return\
    \ result;\n    else\n    {\n        for (long i = 0; i < n - 1; i++)\n       \
    \ {\n            result[0] = result[1];\n            result[1] = result[2];\n\
    \            result[2] = result[0] + result[1];\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n  \
    \      result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    } \n\
    \    else \n    {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0]\
    \ + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n\
    \    }\n    return result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++) \n    {\n    \
    \    a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1];\n    }\n\
    \    return a;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] =\
    \ 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\n    {\n        a[i] = a[i\
    \ - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] a = new\
    \ long[3];\n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 2;\n    for (long i = 3;\
    \ i < n; i++) \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2]\
    \ = a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else \n    {\n        long[] prev = tri(n -\
    \ 1);\n        result[0] = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n\
    \        result[2] = prev[1];\n    }\n    return result;\n}", "{\n    long[] a\
    \ = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n\
    \        return a;\n    for (long i = 0; i < n - 1; i++)\n    {\n        long\
    \ temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = temp\
    \ + a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] arr = new long[n];\n\
    \    if (n == 1) \n    {\n        arr[0] = 3;\n        return arr;\n    }\n  \
    \  if (n == 2) \n    {\n        arr[0] = 3;\n        arr[1] = 2;\n        return\
    \ arr;\n    }\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2] = 8;\n    for (long\
    \ i = 3; i < n; i++) \n    {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ - 3];\n    }\n    return arr;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n)\
    \ \n{\n    if (n == 1) \n    {\n        return 3;\n    }\n    if (n == 2) \n \
    \   {\n        return 2;\n    }\n    if (n == 3) \n    {\n        return 8;\n\
    \    }\n    return tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n\
    \    }\n    if (n == 2) \n    {\n        return 2;\n    }\n    if (n == 3) \n\
    \    {\n        return 8;\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3);\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++)\
    \ \n    {\n        long temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1)\n    {\n        result[0] = 3;\n    \
    \    result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n        long[]\
    \ temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n     \
    \   result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n\
    }", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] =\
    \ 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i\
    \ - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] arr\
    \ = new long[3];\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2] = 1;\n    if (n\
    \ == 1)\n        return arr;\n    else if (n == 2)\n    {\n        arr[0] = 2;\n\
    \        arr[1] = 1;\n        arr[2] = 3;\n        return arr;\n    }\n    else\
    \ if (n == 3)\n    {\n        arr[0] = 1;\n        arr[1] = 3;\n        arr[2]\
    \ = 2;\n        return arr;\n    }\n    else\n    {\n        long[] arr2 = new\
    \ long[3];\n        arr2[0] = 1;\n        arr2[1] = 3;\n        arr2[2] = 2;\n\
    \        for (long i = 4; i <= n; i++)\n        {\n            arr[0] = arr[1];\n\
    \            arr[1] = arr[2];\n            arr[2] = arr2[0] + arr2[1] + arr2[2];\n\
    \            arr2[0] = arr[0];\n            arr2[1] = arr[1];\n            arr2[2]\
    \ = arr[2];\n        }\n        return arr;\n    }\n}\n/*\n    >>> tri(1L)\n \
    \   3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n  \
    \  8L\n*/\nlong tri2(long n)\n{\n    long[] arr = new long[3];\n    arr[0] = 3;\n\
    \    arr[1] = 2;\n    arr[2] = 1;\n    if (n == 1)\n        return arr[0];\n \
    \   else if (n == 2)\n        return arr[1];\n    else if (n == 3)\n        return\
    \ arr[2];\n    else\n    {\n        long[] arr2 = new long[3];\n        arr2[0]\
    \ = 1;\n        arr2[1] = 3;\n        arr2[2] = 2;\n        for (long i = 4;",
  "{\n    long[] result = new long[3];\n    result[0] = 3;\n    result[1] = 2;\n \
    \   result[2] = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        result[0]\
    \ = result[1];\n        result[1] = result[2];\n        result[2] = result[0]\
    \ + result[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else \n    {\n        long[] temp = tri(n -\
    \ 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        result[2] = 1;\n    }\n    else \n    {\n        long[] prev =\
    \ tri(n - 1);\n        result[0] = prev[0] + prev[1] + prev[2];\n        result[1]\
    \ = prev[0];\n        result[2] = prev[1];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else \n   \
    \ {\n        result = tri(n - 1);\n        long temp = result[0];\n        result[0]\
    \ = result[1];\n        result[1] = result[2];\n        result[2] = temp + result[1];\n\
    \    }\n    return result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return a;\n    else \n\
    \    {\n        long[] b = new long[3];\n        b[0] = 3;\n        b[1] = 2;\n\
    \        b[2] = 1;\n        for (long i = 0; i < n - 1; i++) \n        {\n   \
    \         b[0] = a[0] + a[1] + a[2];\n            b[1] = a[0];\n            b[2]\
    \ = a[1];\n            a[0] = b[0];\n            a[1] = b[1];\n            a[2]\
    \ = b[2];\n        }\n        return a;\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n\
    \    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri2(long n)\n{\n    if (n == 1)\n        return 3;\n    else if (n == 2)\n\
    \        return 2;\n    else if (n == 3)\n        return 1;\n    else\n      \
    \  return tri2(n - 1) + tri2(n - 2) + tri2(n - 3);\n}\n/*\n    >>> tri2(1L)\n\
    \    3L\n    >>> tri2(2L)\n    2L\n    >>> tri2(4L)\n    3L\n    >>> tri2(3L)\n\
    \    8L\n*/\nlong tri3(long n)\n{\n    if (n == 1)\n        return 3;\n    else\
    \ if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 1;\n  \
    \  else \n    {\n        long[] a = new long[3];\n        a[0] = 3;\n        a[1]\
    \ = 2;\n        a[2] = 1;\n        for (long i = 0; i < n - 1; i++) ", "{\n  \
    \  long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for\
    \ (long i = 3; i <= n; i++)\n    {\n        a[0] = a[1] + a[2];\n        a[1]\
    \ = a[2];\n        a[2] = a[0];\n    }\n    return a;\n}", "{\n    long[] result\
    \ = new long[3];\n    if (n == 1)\n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        result[2] = 1;\n    }\n    else\n    {\n        result[0] = tri(n\
    \ - 1)[1] + tri(n - 1)[2];\n        result[1] = tri(n - 1)[0] + tri(n - 1)[2];\n\
    \        result[2] = tri(n - 1)[0] + tri(n - 1)[1];\n    }\n    return result;\n\
    }", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] =\
    \ 1;\n    for (long i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i -\
    \ 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else \n    {\n        long[] temp = tri(n -\
    \ 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] a\
    \ = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i\
    \ = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n  \
    \  }\n    return a;\n}", "{\n    long[] ret = new long[3];\n    ret[0] = 3;\n\
    \    ret[1] = 2;\n    ret[2] = 1;\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      ret[0] = ret[1];\n        ret[1] = ret[2];\n        ret[2] = ret[0] + ret[1];\n\
    \    }\n    return ret;\n}", "{\n    long[] tri = new long[3];\n    tri[0] = 1;\n\
    \    tri[1] = 1;\n    tri[2] = 2;\n    for (long i = 3; i < n; i++) \n    {\n\
    \        long temp = tri[0];\n        tri[0] = tri[1];\n        tri[1] = tri[2];\n\
    \        tri[2] = temp + tri[0] + tri[1];\n    }\n    return tri;\n}", "{\n  \
    \  long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for\
    \ (long i = 3; i <= n; i++) \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n}", "{\n    long[]\
    \ a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n ==\
    \ 1)\n        return a;\n    for (long i = 2; i <= n; i++)\n    {\n        long\
    \ temp = a[2];\n        a[2] = a[0] + a[1] + a[2];\n        a[0] = a[1];\n   \
    \     a[1] = temp;\n    }\n    return a;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] prev = tri(n - 1);\n\
    \        result[0] = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n\
    \        result[2] = prev[1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    if (n == 0) \n    {\n        return result;\n    }\n   \
    \ result[0] = 3;\n    if (n == 1) \n    {\n        return result;\n    }\n   \
    \ result[1] = 2;\n    if (n == 2) \n    {\n        return result;\n    }\n   \
    \ result[2] = 8;\n    for (long i = 3; i < n; i++) \n    {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    if (n == 0) \n    {\n        return\
    \ result;\n    }\n    result[0] = 3;\n    if (n == 1) \n    {\n        return\
    \ result;\n    }\n    result[1] = 2;\n    if (n == 2) \n    {\n        return\
    \ result;\n    }\n    result[2] = 8;\n    for (long i = 3; i < n; i++) \n    {\n\
    \        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[3];\n    if (n == 1)\
    \ \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] =\
    \ 1;\n    }\n    else \n    {\n        long[] prev = tri(n - 1);\n        result[0]\
    \ = prev[1] + prev[2];\n        result[1] = prev[0] + prev[2];\n        result[2]\
    \ = prev[0] + prev[1];\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n  \
    \  3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n   \
    \ 8L\n*/\nlong tri2(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n\
    \    }\n    else if (n == 2) \n    {\n        return 2;\n    }\n    else if (n\
    \ == 3) \n    {\n        return 8;\n    }\n    else \n    {\n        return tri2(n\
    \ - 1) + tri2(n - 2) + tri2(n - 3);\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n \
    \   >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri3(long n) \n{\n    long[] result = new long[3];\n    result[0] = 3;\n\
    \    result[1] = 2;\n    result[2] = 1;\n    for (long i = 1; i < n; i++) \n \
    \   {\n        long temp = result[0];\n        result[0] = result[1] + result[2];\n\
    \        result[1] = result[0] + result[2];\n        result[2] = result[0] + temp;\n\
    \    }\n    return result[0];\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri", "{\n    long[] fib = new long[n];\n    fib[0] = 3;\n  \
    \  fib[1] = 2;\n    fib[2] = 8;\n    for (long i = 3; i < n; i++)\n    {\n   \
    \     fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return fib;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri2(long n) \n{\n    long[] fib = new\
    \ long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n    foreach (i;\
    \ 3 .. n)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n   \
    \ }\n    return fib;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n\
    \    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri3(long n) \n\
    {\n    long[] fib = new long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n    fib[2]\
    \ = 8;\n    foreach (i; 3 .. n)\n    {\n        fib[i] = fib[i - 1] + fib[i -\
    \ 2] + fib[i - 3];\n    }\n    return fib;\n}\n/*\n    >>> tri(1L)\n    3L\n \
    \   >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long[] tri4(long n) \n{\n    long[] fib = new long[n];\n    fib[0] = 3;\n    fib[1]\
    \ = 2;\n    fib[2] = 8;\n    foreach (i; 3 ..", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\
    \ \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1]\
    \ + a[2];\n    }\n    return a;\n}", "{\n    long[] a = new long[n];\n    a[0]\
    \ = 3;\n    a[1] = 2;\n    a[2] = 8;\n    for (int i = 3; i < n; i++)\n    {\n\
    \        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n\
    \    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n \
    \   >>> tri(3L)\n    8L\n*/\nlong[] tri2(long n) \n{\n    long[] a = new long[n];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 8;\n    for (int i = 3; i < n; i++)\n\
    \    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri3(long n) \n{\n    long[] a = new\
    \ long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 8;\n    for (int i = 3; i\
    \ < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n  \
    \  return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>>\
    \ tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri4(long n) \n{\n    long[]\
    \ a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 8;\n", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1)\n    {\n        result[0] = 3;\n    \
    \    result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n        long[]\
    \ temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n     \
    \   result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    } \n    else \n  \
    \  {\n        long[] prev = tri(n - 1);\n        result[0] = prev[0] + prev[1]\
    \ + prev[2];\n        result[1] = prev[0];\n        result[2] = prev[1];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[3];\n    result[0]\
    \ = 3;\n    result[1] = 2;\n    result[2] = 1;\n    if (n == 1)\n        return\
    \ result;\n    else\n    {\n        for (long i = 3; i <= n; i++)\n        {\n\
    \            result[0] = result[1];\n            result[1] = result[2];\n    \
    \        result[2] = result[0] + result[1];\n        }\n        return result;\n\
    \    }\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n    long[] result\
    \ = new long[3];\n    result[0] = 3;\n    result[1] = 2;\n    result[2] = 1;\n\
    \    if (n == 1)\n        return result[0];\n    else\n    {\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            result[0] = result[1];\n       \
    \     result[1] = result[2];\n            result[2] = result[0] + result[1];\n\
    \        }\n        return result[2];\n    }\n}\n/*\n    >>> tri(1L)\n    3L\n\
    \    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri3(long n) \n{\n    long[] result = new long[3];\n    result[0] = 3;\n\
    \    result[1] = 2;\n    result[2] = 1;\n    if (n == 1)\n        return result[0];\n\
    \    else\n    {\n        for (long i = 3; i <= n; i++)\n        {\n         \
    \   result[0] = result[1];\n            result[1] = result[2];\n            result[2]\
    \ = result[0] + result[1];\n        }\n        return result[2];\n    }", "{\n\
    \    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n  \
    \  for (long i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i\
    \ - 3];\n    }\n    return a;\n}", "{\n    long[] result = new long[n];\n    result[0]\
    \ = 3;\n    result[1] = 2;\n    result[2] = 1;\n    for (int i = 3; i < n; i++)\n\
    \    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[3];\n    if (n\
    \ == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        long[] prev = tri(n - 1);\n        result[0]\
    \ = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n        result[2]\
    \ = prev[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    }\n    else \n    {\n        long[] prev = tri(n - 1);\n\
    \        result[0] = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n\
    \        result[2] = prev[1];\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri2(long n) \n{\n    if (n == 1) \n    {\n        return 3;\n\
    \    }\n    else \n    {\n        return tri2(n - 1) + tri2(n - 2) + tri2(n -\
    \ 3);\n    }\n}\n/*\n    >>> tri2(1L)\n    3L\n    >>> tri2(2L)\n    2L\n    >>>\
    \ tri2(4L)\n    3L\n    >>> tri2(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    if\
    \ (n == 1) \n    {\n        return 3;\n    }\n    else \n    {\n        long[]\
    \ prev = tri(n - 1);\n        return prev[0] + prev[1] + prev[2];\n    }\n}\n\
    /*\n    >>> tri3(1L)\n    3L\n    >>> tri3(2L)\n    2L\n    >>> tri3(4L)\n   \
    \ 3L\n    >>> tri3(3L)\n    8L\n*/\nlong tri4(long n) \n{\n    if (n == 1) \n\
    \    {\n        return 3;\n    }\n    else \n    {\n        long[] prev = tri(n\
    \ - 1);\n        return prev[0] + prev[1] + prev[2];\n    }\n}\n/*\n    >>> tri4(",
  "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n \
    \   for (long i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] +\
    \ a[i - 3];\n    }\n    return a;\n}", "{\n    long[] a = new long[3];\n    a[0]\
    \ = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++) \n    {\n\
    \        long temp = a[0];\n        a[0] = a[1];\n        a[1] = a[2];\n     \
    \   a[2] = temp + a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] a = new\
    \ long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n   \
    \     return a;\n    else\n    {\n        for (long i = 1; i < n; i++)\n     \
    \   {\n            a[0] = a[1];\n            a[1] = a[2];\n            a[2] =\
    \ a[0] + a[1];\n        }\n        return a;\n    }\n}", "{\n    long[] a = new\
    \ long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1) \n  \
    \  {\n        return a;\n    }\n    else \n    {\n        long[] b = new long[3];\n\
    \        b[0] = 3;\n        b[1] = 2;\n        b[2] = 1;\n        for (long i\
    \ = 2; i < n; i++) \n        {\n            b[0] = b[1] + b[2];\n            b[1]\
    \ = b[2];\n            b[2] = b[0];\n        }\n        return b;\n    }\n}\n\
    /*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n\
    \    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1) \n    {\n      \
    \  return a[0];\n    }\n    else \n    {\n        long[] b = new long[3];\n  \
    \      b[0] = 3;\n        b[1] = 2;\n        b[2] = 1;\n        for (long i =\
    \ 2; i < n; i++) \n        {\n            b[0] = b[1] + b[2];\n            b[1]\
    \ = b[2];\n            b[2] = b[0];\n        }\n        return b[0];\n    }\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] =", "{\n    long[] result = new long[3];\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 1;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        long a = result[0];\n        long b = result[1];\n\
    \        long c = result[2];\n        result[0] = a + b + c;\n        result[1]\
    \ = a;\n        result[2] = b;\n    }\n    return result;\n}", "{\n    long[]\
    \ a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 3; i < n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    if (n == 0)\n        return result;\n    else if (n == 1)\n    {\n      \
    \  result[0] = 3;\n        return result;\n    }\n    else if (n == 2)\n    {\n\
    \        result[0] = 3;\n        result[1] = 2;\n        return result;\n    }\n\
    \    else\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 8;\n        for (long i = 3; i < n; i++)\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    if (n == 1)\n        return a;\n    else\n    {\n \
    \       for (long i = 1; i < n; i++)\n        {\n            a[0] = a[1];\n  \
    \          a[1] = a[2];\n            a[2] = a[0] + a[1];\n        }\n        return\
    \ a;\n    }\n}", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n\
    \        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n\
    \    else if (n == 2) \n    {\n        result[0] = 2;\n        result[1] = 1;\n\
    \        result[2] = 1;\n    }\n    else if (n == 3) \n    {\n        result[0]\
    \ = 1;\n        result[1] = 1;\n        result[2] = 1;\n    }\n    else \n   \
    \ {\n        result = tri(n - 1);\n        result[0] = result[0] + result[1] +\
    \ result[2];\n        result[1] = result[0] - result[1] - result[2];\n       \
    \ result[2] = result[0] - result[1] - result[2];\n    }\n    return result;\n}",
  "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n \
    \   for (long i = 3; i <= n; i++)\n    {\n        a[0] = a[1];\n        a[1] =\
    \ a[2];\n        a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n}", "{\n  \
    \  long a = 3L;\n    long b = 2L;\n    long c = 1L;\n    long d = 0L;\n    long[]\
    \ result = new long[n];\n    for (long i = 0L; i < n; i++) \n    {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n        result[i]\
    \ = d;\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri2(long\
    \ n) \n{\n    long a = 3L;\n    long b = 2L;\n    long c = 1L;\n    long d = 0L;\n\
    \    long[] result = new long[n];\n    for (long i = 0L; i < n; i++) \n    {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    result[i] = d;\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n    3L\n\
    \    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long[] tri3(long n) \n{\n    long a = 3L;\n    long b = 2L;\n    long c = 1L;\n\
    \    long d = 0L;\n    long[] result = new long[n];\n    for (long i = 0L; i <\
    \ n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        result[i] = d;\n    }\n    return result;\n}\n/*\n    >>>\
    \ tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n\
    \    8L\n*/", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n \
    \       result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n\
    \    else\n    {\n        long[] prev = tri(n - 1);\n        result[0] = prev[0]\
    \ + prev[1] + prev[2];\n        result[1] = prev[0];\n        result[2] = prev[1];\n\
    \    }\n    return result;\n}", "{\n    long[] fib = new long[3];\n    fib[0]\
    \ = 1;\n    fib[1] = 1;\n    fib[2] = 2;\n    if (n < 3)\n        return fib[n];\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        long temp = fib[0] + fib[1]\
    \ + fib[2];\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2]\
    \ = temp;\n    }\n    return fib[2];\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n    \
    \    result[2] = 1;\n    }\n    else if (n == 2)\n    {\n        result[0] = 2;\n\
    \        result[1] = 1;\n        result[2] = 3;\n    }\n    else\n    {\n    \
    \    long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n\
    \    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i] = a[i -\
    \ 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] fib = new\
    \ long[3];\n    fib[0] = 1;\n    fib[1] = 1;\n    fib[2] = 2;\n    if (n == 1)\n\
    \        return fib[0..1];\n    if (n == 2)\n        return fib[1..2];\n    if\
    \ (n == 3)\n        return fib[2..3];\n    for (long i = 3; i < n; i++)\n    {\n\
    \        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = fib[0] +\
    \ fib[1];\n    }\n    return fib[2..3];\n}\n/*\n    >>> tri(1L)\n    3L\n    >>>\
    \ tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong\
    \ tri2(long n) \n{\n    long[] fib = new long[3];\n    fib[0] = 1;\n    fib[1]\
    \ = 1;\n    fib[2] = 2;\n    if (n == 1)\n        return fib[0];\n    if (n ==\
    \ 2)\n        return fib[1];\n    if (n == 3)\n        return fib[2];\n    for\
    \ (long i = 3; i < n; i++)\n    {\n        fib[0] = fib[1];\n        fib[1] =\
    \ fib[2];\n        fib[2] = fib[0] + fib[1];\n    }\n    return fib[2];\n}\n/*\n\
    \    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n \
    \   >>> tri(3L)\n    8L\n*/\nlong tri3(long n) \n{\n    long[] fib = new long[3];\n\
    \    fib[0] = 1;\n    fib[1] = 1;\n    fib[2] = 2;\n    if (n == 1)\n        return\
    \ fib[0];\n    if (n == 2)\n        return fib[1];\n    if (n ==", "{\n    long[]\
    \ result = new long[3];\n    if (n == 1) \n    {\n        result[0] = 3;\n   \
    \     result[1] = 2;\n        result[2] = 1;\n    }\n    else \n    {\n      \
    \  long[] prev = tri(n - 1);\n        result[0] = prev[0] + prev[1] + prev[2];\n\
    \        result[1] = prev[0];\n        result[2] = prev[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n\
    \        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n\
    \    else\n    {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0]\
    \ + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[3];\n    if (n\
    \ == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        long[] tmp = tri(n - 1);\n        result[0]\
    \ = tmp[0] + tmp[1] + tmp[2];\n        result[1] = tmp[0];\n        result[2]\
    \ = tmp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n    \
    \    result[2] = 1;\n    }\n    else\n    {\n        long[] temp = tri(n - 1);\n\
    \        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    if (n == 0) return result;\n    if (n == 1) return [3];\n\
    \    if (n == 2) return [3, 2];\n    if (n == 3) return [3, 2, 8];\n    result[0]\
    \ = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (int i = 3; i < n; i++)\n\
    \    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[3];\n    if (n\
    \ == 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else if (n == 2)\n    {\n        result[0] = 2;\n        result[1]\
    \ = 1;\n        result[2] = 3;\n    }\n    else if (n == 3)\n    {\n        result[0]\
    \ = 1;\n        result[1] = 3;\n        result[2] = 2;\n    }\n    else\n    {\n\
    \        long[] temp = tri(n - 1);\n        result[0] = temp[1];\n        result[1]\
    \ = temp[2];\n        result[2] = temp[0] + temp[1] + temp[2];\n    }\n    return\
    \ result;\n}", "{\n    long[] fib = new long[3];\n    fib[0] = 1;\n    fib[1]\
    \ = 1;\n    fib[2] = 2;\n    if (n == 1)\n        return fib[0..1];\n    if (n\
    \ == 2)\n        return fib[1..2];\n    if (n == 3)\n        return fib[2..3];\n\
    \    for (long i = 3; i < n; i++) \n    {\n        fib[0] = fib[1];\n        fib[1]\
    \ = fib[2];\n        fib[2] = fib[0] + fib[1];\n    }\n    return fib[2..3];\n\
    }", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] =\
    \ 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i\
    \ - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n   \
    \ >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long[] tri2(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    foreach (i; 3 .. n) \n    {\n        a[i] = a[i - 1]\
    \ + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n\
    \    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long[] tri3(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1]\
    \ = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i]\
    \ = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong[] tri4(long n) \n{\n    long[] a = new long[n];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n   ", "{\n    long[] result = new long[3];\n  \
    \  if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n     \
    \   result[2] = 1;\n    } \n    else \n    {\n        long[] tmp = tri(n - 1);\n\
    \        result[0] = tmp[0] + tmp[1] + tmp[2];\n        result[1] = tmp[0];\n\
    \        result[2] = tmp[1];\n    }\n    return result;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    long[] result = new long[3];\n    if (n\
    \ == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    } \n    else \n    {\n        long[] tmp = tri(n - 1);\n        result[0]\
    \ = tmp[0] + tmp[1] + tmp[2];\n        result[1] = tmp[0];\n        result[2]\
    \ = tmp[1];\n    }\n    return result[0];\n}\n/*\n    >>> tri(1L)\n    3L\n  \
    \  >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri(long n) \n{\n    long[] result = new long[3];\n    if (n == 1) \n   \
    \ {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n\
    \    } \n    else \n    {\n        long[] tmp = tri(n - 1);\n        result[0]\
    \ = tmp[0] + tmp[1] + tmp[2];\n        result[1] = tmp[0];\n        result[2]\
    \ = tmp[1];\n    }\n    return result[0];\n}\n/*\n   ", "{\n    long[] result\
    \ = new long[n];\n    if (n == 0)\n        return result;\n    result[0] = 3;\n\
    \    if (n == 1)\n        return result;\n    result[1] = 2;\n    if (n == 2)\n\
    \        return result;\n    result[2] = 8;\n    for (long i = 3; i < n; i++)\n\
    \        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    return\
    \ result;\n}", "{\n    long[] a = new long[n];\n    a[0] = 3;\n    a[1] = 2;\n\
    \    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[i] = a[i -\
    \ 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}", "{\n    long[] a = new\
    \ long[n];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3;\
    \ i < n; i++) \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n\
    \    return a;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] =\
    \ 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[0] =\
    \ a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1] + a[2];\n    }\n   \
    \ return a;\n}", "{\n    long[] fib = new long[n];\n    fib[0] = 3;\n    fib[1]\
    \ = 2;\n    fib[2] = 8;\n    for (long i = 3; i < n; i++) \n    {\n        fib[i]\
    \ = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return fib;\n}\n/*\n   \
    \ >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>>\
    \ tri(3L)\n    8L\n*/\nlong[] tri2(long n) \n{\n    long[] fib = new long[n];\n\
    \    fib[0] = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n    for (long i = 3; i < n;\
    \ i++) \n    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n\
    \    return fib;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n  \
    \  >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri3(long n) \n{\n\
    \    long[] fib = new long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n    fib[2] =\
    \ 8;\n    for (long i = 3; i < n; i++) \n    {\n        fib[i] = fib[i - 1] +\
    \ fib[i - 2] + fib[i - 3];\n    }\n    return fib;\n}\n/*\n    >>> tri(1L)\n \
    \   3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n  \
    \  8L\n*/\nlong[] tri4(long n) \n{\n    long[] fib = new long[n];\n    fib[0]\
    \ = 3;\n    fib[1] = 2;\n    fib[2] =", "{\n    long[] a = new long[3];\n    a[0]\
    \ = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++) \n    {\n\
    \        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1];\n   \
    \ }\n    return a;\n}", "{\n    long[] result = new long[3];\n    if (n == 1)\
    \ \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] =\
    \ 1;\n    } \n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 0; i < n; i++)\
    \ \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n        a[2] = a[0] + a[1];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else if (n == 2) \n    {\n        result[0] = 2;\n        result[1]\
    \ = 1;\n        result[2] = 1;\n    }\n    else if (n == 3) \n    {\n        result[0]\
    \ = 1;\n        result[1] = 1;\n        result[2] = 1;\n    }\n    else \n   \
    \ {\n        result = tri(n - 1);\n        result[0] = result[0] + result[1] +\
    \ result[2];\n        result[1] = result[0] - result[1] - result[2];\n       \
    \ result[2] = result[0] - result[1] - result[2];\n    }\n    return result;\n}",
  "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n \
    \   if (n == 1)\n        return a;\n    else if (n == 2)\n    {\n        a[0]\
    \ = 2;\n        a[1] = 1;\n        a[2] = 3;\n        return a;\n    }\n    else\
    \ if (n == 3)\n    {\n        a[0] = 1;\n        a[1] = 3;\n        a[2] = 2;\n\
    \        return a;\n    }\n    else\n    {\n        long[] b = new long[3];\n\
    \        b[0] = 1;\n        b[1] = 3;\n        b[2] = 2;\n        for (long i\
    \ = 4; i <= n; i++)\n        {\n            a[0] = b[0];\n            a[1] = b[1];\n\
    \            a[2] = b[2];\n            b[0] = a[1];\n            b[1] = a[2];\n\
    \            b[2] = a[0] + a[1] + a[2];\n        }\n        return b;\n    }\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n) \n{\n    if (n == 1)\n  \
    \      return 3;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n\
    \        return 8;\n    else\n    {\n        long a = 3;\n        long b = 2;\n\
    \        long c = 8;\n        long d = 0;\n        for (long i = 4; i <= n; i++)\n\
    \        {\n            d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return d;\n    }\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>>", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] =\
    \ 2;\n    a[2] = 1;\n    if (n == 1)\n        return a;\n    else if (n == 2)\n\
    \    {\n        a[0] = 2;\n        a[1] = 1;\n        a[2] = 3;\n        return\
    \ a;\n    }\n    else\n    {\n        long[] b = new long[3];\n        b[0] =\
    \ 1;\n        b[1] = 3;\n        b[2] = 2;\n        for (long i = 3; i <= n; i++)\n\
    \        {\n            long[] c = new long[3];\n            c[0] = a[0] + b[0];\n\
    \            c[1] = a[1] + b[1];\n            c[2] = a[2] + b[2];\n          \
    \  a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n/*\n  \
    \  >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n   \
    \ >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n    long b =\
    \ 2;\n    long c = 1;\n    if (n == 1)\n        return a;\n    else if (n == 2)\n\
    \        return b;\n    else\n    {\n        for (long i = 3; i <= n; i++)\n \
    \       {\n            long d = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = d;\n        }\n        return c;\n    }\n}\n/*\n    >>>\
    \ tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n\
    \    8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 1;\n    if (n == 1", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else \n    {\n        long[] temp = tri(n - 1);\n        result[0]\
    \ = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n        result[2]\
    \ = temp[1];\n    }\n    return result;\n}", "{\n    long[] result = new long[3];\n\
    \    if (n == 1) \n    {\n        result[0] = 3;\n        result[1] = 2;\n   \
    \     result[2] = 1;\n    } \n    else \n    {\n        long[] temp = tri(n -\
    \ 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n        result[1] = temp[0];\n\
    \        result[2] = temp[1];\n    }\n    return result;\n}", "{\n    long[] a\
    \ = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        a[0] = a[1];\n        a[1] = a[2];\n      \
    \  a[2] = a[0] + a[1];\n    }\n    return a;\n}", "{\n    long[] a = new long[3];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return\
    \ a;\n    for (long i = 2; i <= n; i++)\n    {\n        long temp = a[0];\n  \
    \      a[0] = a[1];\n        a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n\
    \    }\n    return a;\n}", "{\n    long[] result = new long[3];\n    result[0]\
    \ = 3;\n    result[1] = 2;\n    result[2] = 1;\n    if (n == 1)\n        return\
    \ result;\n    else if (n == 2)\n    {\n        result[0] = 2;\n        result[1]\
    \ = 1;\n        result[2] = 3;\n        return result;\n    }\n    else if (n\
    \ == 3)\n    {\n        result[0] = 1;\n        result[1] = 3;\n        result[2]\
    \ = 2;\n        return result;\n    }\n    else\n    {\n        long[] temp =\
    \ new long[3];\n        temp[0] = 3;\n        temp[1] = 2;\n        temp[2] =\
    \ 1;\n        for (long i = 4; i <= n; i++)\n        {\n            result[0]\
    \ = temp[0] + temp[1] + temp[2];\n            result[1] = temp[0];\n         \
    \   result[2] = temp[1];\n            temp[0] = result[0];\n            temp[1]\
    \ = result[1];\n            temp[2] = result[2];\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n  \
    \  a[2] = 1;\n    for (long i = 3; i < n; i++) \n    {\n        a[0] = a[0] +\
    \ a[1] + a[2];\n        a[1] = a[0] - a[1] - a[2];\n        a[2] = a[0] - a[1]\
    \ - a[2];\n    }\n    return a;\n}", "{\n    long[] fib = new long[n];\n    fib[0]\
    \ = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n    for (int i = 3; i < n; i++)\n  \
    \  {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return\
    \ fib;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri2(long n) \n{\n    long[] fib\
    \ = new long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n    for (int\
    \ i = 3; i < n; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i\
    \ - 3];\n    }\n    return fib;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong[] tri3(long\
    \ n) \n{\n    long[] fib = new long[n];\n    fib[0] = 3;\n    fib[1] = 2;\n  \
    \  fib[2] = 8;\n    for (int i = 3; i < n; i++)\n    {\n        fib[i] = fib[i\
    \ - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return fib;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong[] tri4(long n) \n{\n    long[] fib = new long[n];\n    fib[0]\
    \ = 3;\n    fib[1] = 2;\n    fib[2] = 8;\n", "{\n    long[] a = new long[n];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\
    \ \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n\
    \        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] a = new long[3];\n    a[0] = 1;\n    a[1] = 1;\n\
    \    a[2] = 1;\n    for (long i = 3; i <= n; i++) \n    {\n        a[0] = a[1];\n\
    \        a[1] = a[2];\n        a[2] = a[0] + a[1];\n    }\n    return a;\n}",
  "{\n    long[] arr = new long[n];\n    if (n == 1)\n    {\n        arr[0] = 3;\n\
    \        return arr;\n    }\n    if (n == 2)\n    {\n        arr[0] = 3;\n   \
    \     arr[1] = 2;\n        return arr;\n    }\n    if (n == 3)\n    {\n      \
    \  arr[0] = 3;\n        arr[1] = 2;\n        arr[2] = 8;\n        return arr;\n\
    \    }\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2] = 8;\n    for (long i = 3;\
    \ i < n; i++)\n    {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n\
    \    }\n    return arr;\n}", "{\n    long[] a = new long[3];\n    a[0] = 3;\n\
    \    a[1] = 2;\n    a[2] = 1;\n    if (n == 1)\n        return a;\n    if (n ==\
    \ 2)\n    {\n        a[2] = 0;\n        return a;\n    }\n    if (n == 3)\n  \
    \  {\n        a[1] = 0;\n        a[2] = 0;\n        return a;\n    }\n    long[]\
    \ b = new long[3];\n    b[0] = 8;\n    b[1] = 5;\n    b[2] = 3;\n    if (n ==\
    \ 4)\n        return b;\n    long[] c = new long[3];\n    c[0] = 21;\n    c[1]\
    \ = 13;\n    c[2] = 8;\n    if (n == 5)\n        return c;\n    long[] d = new\
    \ long[3];\n    d[0] = 55;\n    d[1] = 34;\n    d[2] = 21;\n    if (n == 6)\n\
    \        return d;\n    long[] e = new long[3];\n    e[0] = 144;\n    e[1] = 89;\n\
    \    e[2] = 55;\n    if (n == 7)\n        return e;\n    long[] f = new long[3];\n\
    \    f[0] = 377;\n    f[1] = 233;\n    f[2] = 144;\n    if (n == 8)\n        return\
    \ f;\n    long[] g = new long[3];\n    g[0] = 987;\n    g[1] = 610;\n    g[2]\
    \ = 377;\n    if (n == 9)\n        return g;\n    long[] h = new long[3];\n  \
    \  h[0] = 2584;\n    h[1] = 1597;\n    h[2] = 987;\n    if (n == 10)\n       \
    \ return h;\n    long[] i = new long[3];\n    i[0] = 6765;\n    i[1] = 4181;\n\
    \   ", "{\n    long[] result = new long[3];\n    if (n == 1)\n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else\n    {\n\
    \        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1] + temp[2];\n\
    \        result[1] = temp[0];\n        result[2] = temp[1];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n\
    \        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n\
    \    else \n    {\n        long[] tri_n_1 = tri(n - 1);\n        result[0] = tri_n_1[0]\
    \ + tri_n_1[1] + tri_n_1[2];\n        result[1] = tri_n_1[0];\n        result[2]\
    \ = tri_n_1[1];\n    }\n    return result;\n}", "{\n    long[] a = new long[n];\n\
    \    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i = 3; i < n; i++)\
    \ \n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }", "{\n    long[] a = new long[3];\n    a[0] = 1;\n    a[1] = 1;\n    a[2] =\
    \ 2;\n    if (n == 1)\n        return a;\n    else if (n == 2)\n        return\
    \ a[0..1];\n    else if (n == 3)\n        return a[0..2];\n    else\n    {\n \
    \       for (long i = 3; i < n; i++)\n        {\n            a[0] = a[1];\n  \
    \          a[1] = a[2];\n            a[2] = a[0] + a[1] + a[2];\n        }\n \
    \       return a;\n    }\n}", "{\n    long[] result = new long[n];\n    if (n\
    \ == 0)\n        return result;\n    result[0] = 3;\n    if (n == 1)\n       \
    \ return result;\n    result[1] = 2;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 8;\n    for (long i = 3; i < n; i++)\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    return result;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n\
    \ == 1)\n        return 3;\n    if (n == 2)\n        return 2;\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n)\
    \ \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 3;\n\
    \    if (n == 2)\n        return 2;\n    long a = 3;\n    long b = 2;\n    long\
    \ c = 8;\n    long d = 0;\n    for (long i = 3; i < n; i++)\n    {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n\
    \    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    if (n == 0)\n\
    \        return", "{\n    long[] result = new long[3];\n    if (n == 1) \n   \
    \ {\n        result[0] = 3;\n        result[1] = 2;\n        result[2] = 1;\n\
    \    } \n    else \n    {\n        result = tri(n - 1);\n        result[0] = result[0]\
    \ + result[1] + result[2];\n        result[1] = result[0] - result[1] - result[2];\n\
    \        result[2] = result[0] - result[1] - result[2];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[3];\n    if (n == 1) \n    {\n        result[0]\
    \ = 3;\n        result[1] = 2;\n        result[2] = 1;\n    }\n    else \n   \
    \ {\n        long[] temp = tri(n - 1);\n        result[0] = temp[0] + temp[1]\
    \ + temp[2];\n        result[1] = temp[0];\n        result[2] = temp[1];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[3];\n    if (n ==\
    \ 1)\n    {\n        result[0] = 3;\n        result[1] = 2;\n        result[2]\
    \ = 1;\n    }\n    else\n    {\n        long[] prev = tri(n - 1);\n        result[0]\
    \ = prev[0] + prev[1] + prev[2];\n        result[1] = prev[0];\n        result[2]\
    \ = prev[1];\n    }\n    return result;\n}", "{\n    long[] fib = new long[3];\n\
    \    fib[0] = 1;\n    fib[1] = 1;\n    fib[2] = 2;\n    if (n == 1) return fib;\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        fib[0] = fib[1];\n        fib[1]\
    \ = fib[2];\n        fib[2] = fib[0] + fib[1];\n    }\n    return fib;\n}", "{\n\
    \    long[] a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n  \
    \  if (n == 1)\n        return a;\n    for (long i = 1; i < n; i++)\n    {\n \
    \       a[2] = a[0] + a[1] + a[2];\n        a[0] = a[1];\n        a[1] = a[2]\
    \ - a[0] - a[1];\n    }\n    return a;\n}", "{\n    long[] result = new long[n];\n\
    \    if (n == 0)\n        return result;\n    result[0] = 3;\n    if (n == 1)\n\
    \        return result;\n    result[1] = 2;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 8;\n    for (long i = 3; i < n; i++)\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    return result;\n}", "{\n    long[]\
    \ a = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long\
    \ i = 3; i <= n; i++) \n    {\n        a[0] = a[1];\n        a[1] = a[2];\n  \
    \      a[2] = a[0] + a[1] + a[2];\n    }\n    return a;\n}", "{\n    long[] a\
    \ = new long[3];\n    a[0] = 3;\n    a[1] = 2;\n    a[2] = 1;\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        long temp = a[0];\n        a[0] = a[1];\n \
    \       a[1] = a[2];\n        a[2] = temp + a[0] + a[1];\n    }\n    return a;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri2(long n)\n{\n    long a = 3;\n   \
    \ long b = 2;\n    long c = 1;\n    for (long i = 0; i < n; i++)\n    {\n    \
    \    long temp = a;\n        a = b;\n        b = c;\n        c = temp + a + b;\n\
    \    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n\
    \    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri3(long n)\n{\n\
    \    long a = 3;\n    long b = 2;\n    long c = 1;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        long temp = a;\n        a = b;\n        b = c;\n      \
    \  c = temp + a + b;\n    }\n    return a;\n}\n/*\n    >>> tri(1L)\n    3L\n \
    \   >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\n\
    long tri4(long n)\n{\n    long a = 3;\n    long b = 2;\n    long c = 1;\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        long temp = a;\n        a = b;\n",
  "{\n    long[] arr = new long[3];\n    arr[0] = 3;\n    arr[1] = 2;\n    arr[2]\
    \ = 1;\n    if (n == 1)\n        return arr;\n    for (long i = 2; i < n; i++)\n\
    \    {\n        long temp = arr[0];\n        arr[0] = arr[1];\n        arr[1]\
    \ = arr[2];\n        arr[2] = temp + arr[0] + arr[1];\n    }\n    return arr;\n\
    }\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n   \
    \ 3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n   \
    \ long b = 2;\n    long c = 1;\n    if (n == 1)\n        return a;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        long temp = a;\n        a = b;\n        b\
    \ = c;\n        c = temp + a + b;\n    }\n    return c;\n}\n/*\n    >>> tri(1L)\n\
    \    3L\n    >>> tri(2L)\n    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n \
    \   8L\n*/\nlong tri(long n) \n{\n    long a = 3;\n    long b = 2;\n    long c\
    \ = 1;\n    if (n == 1)\n        return a;\n    for (long i = 2; i < n; i++)\n\
    \    {\n        long temp = a;\n        a = b;\n        b = c;\n        c = temp\
    \ + a + b;\n    }\n    return c;\n}\n/*\n    >>> tri(1L)\n    3L\n    >>> tri(2L)\n\
    \    2L\n    >>> tri(4L)\n    3L\n    >>> tri(3L)\n    8L\n*/\nlong tri(long n)\
    \ \n{\n    long a = 3;\n    long b = 2;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
