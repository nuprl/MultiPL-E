name: HumanEval_6_parse_nested_parens
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int n = paren_string.length;\n    while (i < n)\
    \ \n    {\n        if (paren_string[i] == '(') \n        {\n            int j\
    \ = i + 1;\n            int depth = 1;\n            while (j < n) \n         \
    \   {\n                if (paren_string[j] == '(') \n                {\n     \
    \               depth += 1;\n                }\n                else if (paren_string[j]\
    \ == ')') \n                {\n                    depth -= 1;\n             \
    \       if (depth == 0) \n                    {\n                        break;\n\
    \                    }\n                }\n                j += 1;\n         \
    \   }\n            result ~= depth;\n            i = j + 1;\n        }\n     \
    \   else \n        {\n            i += 1;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkt229ll.d(16): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzkt229ll.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    while(end < paren_string.length)\n\
    \    {\n        if(paren_string[end] == ' ')\n        {\n            result ~=\
    \ max_nested_parens(paren_string[start..end]);\n            start = end + 1;\n\
    \        }\n        end++;\n    }\n    result ~= max_nested_parens(paren_string[start..end]);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjgjube6p.d(21): Error: undefined identifier `max_nested_parens`\\\
    n/tmp/tmpjgjube6p.d(26): Error: undefined identifier `max_nested_parens`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgjube6p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            level++;\n         \
    \   max_level = max(max_level, level);\n        } \n        else if (c == ')')\
    \ \n        {\n            level--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_level;\n            max_level = 0;\n   \
    \         level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwfjkn23z.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfjkn23z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            depth--;\n        }\n        else if(c == '\
    \ ')\n        {\n            result ~= max_depth;\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprx010wsh.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprx010wsh.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprx010wsh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] paren_count;\n    long[] paren_level;\n\
    \    long[] paren_level_count;\n    long[] paren_level_count_max;\n    long[]\
    \ paren_level_count_max_index;\n    long[] paren_level_count_max_index_count;\n\
    \    long[] paren_level_count_max_index_count_max;\n    long[] paren_level_count_max_index_count_max_index;\n\
    \    long[] paren_level_count_max_index_count_max_index_count;\n    long[] paren_level_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index;\n   \
    \ long[] paren_level_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_level_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_count_max_index_count_max_index_\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeftrr2o3.d(36): Error: semicolon expected, not `unittest`\\n/tmp/tmpeftrr2o3.d(36):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpeftrr2o3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            } \n        \
    \    else if(paren == ')') \n            {\n                depth--;\n       \
    \     }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmazir2a.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmazir2a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphidxx4gz.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphidxx4gz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = paren_string.length;\n\
    \    int count = 0;\n    int max = 0;\n    int max_index = 0;\n    int max_count\
    \ = 0;\n    int max_count_index = 0;\n    int max_count_index_prev = 0;\n    int\
    \ max_count_prev = 0;\n    int max_index_prev = 0;\n    int max_prev = 0;\n  \
    \  int max_prev_prev = 0;\n    int max_prev_prev_prev = 0;\n    int max_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev = 0;\n    int max_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    int\
    \ max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int max_prev_prev_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu7t8hcjd.d(44): Error: semicolon expected, not `unittest`\\n/tmp/tmpu7t8hcjd.d(44):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpu7t8hcjd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto\
    \ parens = paren_string.split;\n    long[] result;\n    foreach(paren; parens)\n\
    \    {\n        long max_nesting = 0;\n        long current_nesting = 0;\n   \
    \     foreach(c; paren)\n        {\n            if(c == '(')\n            {\n\
    \                current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(c == ')')\n          \
    \  {\n                current_nesting--;\n            }\n        }\n        result\
    \ ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmtw270g.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvmtw270g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            }\n         \
    \   else if(paren == ')')\n            {\n                level--;\n         \
    \   }\n        }\n        result ~= max_level;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp216iqwcj.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp216iqwcj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n  \
    \  int m = 0;\n    int count = 0;\n    int max = 0;\n    int len = paren_string.length;\n\
    \    while (i < len)\n    {\n        if (paren_string[i] == '(')\n        {\n\
    \            count++;\n            if (count > max)\n            {\n         \
    \       max = count;\n            }\n        }\n        else if (paren_string[i]\
    \ == ')')\n        {\n            count--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            result ~= max;\n            max = 0;\n     \
    \       count = 0;\n        }\n        i++;\n    }\n    result ~= max;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfoe051f.d(22): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcfoe051f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ res;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n        long\
    \ max_nesting = 0;\n        long nesting = 0;\n        foreach(c; paren_group)\
    \ \n        {\n            if(c == '(') \n            {\n                nesting++;\n\
    \                max_nesting = max(max_nesting, nesting);\n            } \n  \
    \          else if(c == ')') \n            {\n                nesting--;\n   \
    \         }\n        }\n        res ~= max_nesting;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxyd3ndc.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxyd3ndc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1n6ki57z.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1n6ki57z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long len;\n    long len2;\n    char c;\n    char c2;\n    char[]\
    \ paren_chars;\n    char[] paren_chars2;\n    bool is_open;\n    bool is_open2;\n\
    \    bool is_close;\n    bool is_close2;\n    paren_chars = paren_string.dup;\n\
    \    len = paren_chars.length;\n    result = new long[];\n    for (i = 0; i <\
    \ len; i++) \n    {\n        c = paren_chars[i];\n        is_open = c == '(';\n\
    \        is_close = c == ')';\n        if (is_open || is_close) \n        {\n\
    \            stack = new long[];\n            depth = 0;\n            max_depth\
    \ = 0;\n            for (j = i; j < len; j++) \n            {\n              \
    \  c2 = paren_chars[j];\n                is_open2 = c2 == '(';\n             \
    \   is_close2 = c2 == ')';\n                if (is_open2) \n                {\n\
    \                    depth++;\n                    stack ~= 1;\n             \
    \   }\n                else if (is_close2) \n                {\n             \
    \       depth--;\n                    stack ~= -1;\n                }\n      \
    \          else \n                {\n                    break;\n            \
    \    }\n                max_depth = max(max_depth, depth);\n            }\n  \
    \          result ~= max_depth;\n            i = j;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptw5yrlyv.d(32): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmptw5yrlyv.d(40): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmptw5yrlyv.d(62):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw5yrlyv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start_index = 0;\n    int end_index = 0;\n    int paren_count\
    \ = 0;\n    int max_paren_count = 0;\n    foreach(paren_group; paren_string.split(\"\
    \ \"))\n    {\n        foreach(paren; paren_group)\n        {\n            if(paren\
    \ == '(')\n            {\n                paren_count++;\n            }\n    \
    \        else if(paren == ')')\n            {\n                paren_count--;\n\
    \            }\n            if(paren_count > max_paren_count)\n            {\n\
    \                max_paren_count = paren_count;\n            }\n        }\n  \
    \      result ~= max_paren_count;\n        max_paren_count = 0;\n        paren_count\
    \ = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppe_bi5pj.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppe_bi5pj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] max_paren_count;\n    long[] paren_count_stack;\n\
    \    long paren_count_stack_top;\n    long paren_count_stack_max;\n    long paren_count_stack_max_index;\n\
    \    long i;\n    long j;\n    long k;\n    long paren_count_stack_top_prev;\n\
    \    long paren_count_stack_top_prev_prev;\n    long paren_count_stack_top_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev;\n    long paren_count_stack_top_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev;\n    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev;\n   \
    \ long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n \
    \   long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngrlog4w.d(40): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngrlog4w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    int max_nesting = 0;\n  \
    \  int nesting = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            nesting++;\n            if(nesting > max_nesting)\n  \
    \          {\n                max_nesting = nesting;\n            }\n        }\n\
    \        else if(c == ')')\n        {\n            nesting--;\n        }\n   \
    \     else if(c == ' ')\n        {\n            if(max_nesting > 0)\n        \
    \    {\n                result ~= max_nesting;\n                max_nesting =\
    \ 0;\n            }\n        }\n    }\n    if(max_nesting > 0)\n    {\n      \
    \  result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth;\n    long current_depth;\n    foreach(paren_group;\
    \ paren_string.split(\" \"))\n    {\n        max_depth = 0;\n        current_depth\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                current_depth++;\n                max_depth\
    \ = max(max_depth, current_depth);\n            }\n            else if(paren ==\
    \ ')')\n            {\n                current_depth--;\n            }\n     \
    \   }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4zhirbu.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4zhirbu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] paren_count;\n    int paren_count_index = 0;\n    int paren_count_max\
    \ = 0;\n    int paren_count_max_index = 0;\n    int paren_count_max_index_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev = 0;\n    int paren_count_max_index_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev = 0;\n   \
    \ int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int paren_count\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk48vrao_.d(35): Error: semicolon expected, not `unittest`\\n/tmp/tmpk48vrao_.d(35):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk48vrao_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(c;\
    \ paren_group)\n        {\n            if(c == '(')\n            {\n         \
    \       depth++;\n                max_depth = max(max_depth, depth);\n       \
    \     }\n            else if(c == ')')\n            {\n                depth--;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn28gdeu2.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn28gdeu2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    auto parens = paren_string.split(\" \");\n    foreach(paren; parens)\
    \ \n    {\n        long max_depth = 0;\n        long depth = 0;\n        foreach(c;\
    \ paren) \n        {\n            if(c == '(') \n            {\n             \
    \   depth++;\n                max_depth = max(max_depth, depth);\n           \
    \ }\n            else if(c == ')') \n            {\n                depth--;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3vf0p6c.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3vf0p6c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long cur_depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            cur_depth++;\n          \
    \  max_depth = max(max_depth, cur_depth);\n        }\n        else if(c == ')')\n\
    \        {\n            cur_depth--;\n        }\n        else if(c == ' ')\n \
    \       {\n            result ~= max_depth;\n            max_depth = 0;\n    \
    \        cur_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4akyerj.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4akyerj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        long max_nesting = 0;\n        long nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           nesting++;\n                max_nesting = max(max_nesting, nesting);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     nesting--;\n            }\n        }\n        result ~= max_nesting;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyj13lwk.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpyyj13lwk.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyyj13lwk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int[] paren_count = new int[];\n    int[] paren_level\
    \ = new int[];\n    int[] paren_level_max = new int[];\n    int[] paren_level_min\
    \ = new int[];\n    int[] paren_level_count = new int[];\n    int[] paren_level_count_max\
    \ = new int[];\n    int[] paren_level_count_min = new int[];\n    int[] paren_level_count_max_index\
    \ = new int[];\n    int[] paren_level_count_min_index = new int[];\n    int[]\
    \ paren_level_count_max_index_prev = new int[];\n    int[] paren_level_count_min_index_prev\
    \ = new int[];\n    int[] paren_level_count_max_index_next = new int[];\n    int[]\
    \ paren_level_count_min_index_next = new int[];\n    int[] paren_level_count_max_index_prev_prev\
    \ = new int[];\n    int[] paren_level_count_min_index_prev_prev = new int[];\n\
    \    int[] paren_level_count_max_index_next_next = new int[];\n    int[] paren_level_count_min_index_next_next\
    \ = new int[];\n    int[] paren_level_count_max_index_prev_prev_prev = new int[];\n\
    \    int[] paren_level_count_min_index_prev_prev_prev = new int[];\n    int[]\
    \ paren_level_count_max_index_next_next_next = new int[];\n    int[] paren_level_count_min_index_next_next_next\
    \ = new int[];\n    int[] paren_level_count_max_index_prev_prev_prev_prev = new\
    \ int[];\n    int[] paren_level_count_min_index_prev_prev_prev_prev = new int[];\n\
    \    int[] paren_level_count_max_index_next_next_next_next = new int[];\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42ownql1.d(39): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42ownql1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywqwhep5.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywqwhep5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7r1s8ikz.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r1s8ikz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1g579txv.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g579txv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int start = 0;\n    int end = 0;\n    while (end <\
    \ paren_string.length) \n    {\n        if (paren_string[end] == ' ') \n     \
    \   {\n            if (start != end) \n            {\n                result ~=\
    \ parse_nested_parens_helper(paren_string[start..end]);\n            }\n     \
    \       start = end + 1;\n        }\n        end++;\n    }\n    if (start != end)\
    \ \n    {\n        result ~= parse_nested_parens_helper(paren_string[start..end]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9c1tpzr_.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9c1tpzr_.d(23): Error: undefined\
    \ identifier `parse_nested_parens_helper`\\n/tmp/tmp9c1tpzr_.d(31): Error: undefined\
    \ identifier `parse_nested_parens_helper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9c1tpzr_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6j794z3.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6j794z3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    // Split\
    \ the string into groups\n    string[] groups = paren_string.split(\" \");\n \
    \   long[] results = new long[groups.length];\n    // For each group, find the\
    \ deepest level of nesting\n    foreach (i, group; groups)\n    {\n        long\
    \ max_level = 0;\n        long level = 0;\n        foreach (c; group)\n      \
    \  {\n            if (c == '(')\n                level++;\n            else if\
    \ (c == ')')\n                level--;\n            max_level = max(max_level,\
    \ level);\n        }\n        results[i] = max_level;\n    }\n    return results;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpls6x6f62.d(15): Error: no property `split` for type `string`\\\
    n/tmp/tmpls6x6f62.d(28): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpls6x6f62.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            depth++;\n          \
    \  max_depth = max(max_depth, depth);\n        }\n        else if(c == ')') \n\
    \        {\n            depth--;\n        }\n        else if(c == ' ') \n    \
    \    {\n            result ~= max_depth;\n            max_depth = 0;\n       \
    \     depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuaf7efgr.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuaf7efgr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpufo13627.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufo13627.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpazw5wnm8.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpazw5wnm8.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpazw5wnm8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split(\"\
    \ \"))\n    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren;\
    \ paren_group)\n        {\n            if (paren == '(')\n            {\n    \
    \            stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            }\n            else if (paren == ')')\n            {\n          \
    \      stack.pop;\n            }\n        }\n        result ~= max_depth;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa349v6t3.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa349v6t3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n\
    \    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n      \
    \      stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n  \
    \      }\n        else if(c == ')')\n        {\n            stack.pop;\n     \
    \   }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_jgpokv.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz_jgpokv.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpz_jgpokv.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpz_jgpokv.d(26):\
    \ Error: no property `pop` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz_jgpokv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jakvhwn.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jakvhwn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9013qsgy.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9013qsgy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long max_depth = 0;\n    long current_depth = 0;\n\
    \    foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           current_depth++;\n            max_depth = max(max_depth, current_depth);\n\
    \        }\n        else if(c == ')')\n        {\n            current_depth--;\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn4hkpqp.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmn4hkpqp.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmn4hkpqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')') \n     \
    \       {\n                current_nesting--;\n            }\n        }\n    \
    \    result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj00p9kxj.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj00p9kxj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2fgc252.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2fgc252.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            depth++;\n          \
    \  max_depth = max(max_depth, depth);\n        }\n        else if(c == ')') \n\
    \        {\n            depth--;\n        }\n        else if(c == ' ') \n    \
    \    {\n            result ~= max_depth;\n            max_depth = 0;\n       \
    \     depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppyvocp70.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppyvocp70.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpowmfdl5q.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowmfdl5q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    foreach(paren; paren_string)\n\
    \    {\n        if(paren == ' ')\n        {\n            result ~= parse_nested_parens(paren_string[start..end]);\n\
    \            start = end + 1;\n        }\n        else if(paren == '(')\n    \
    \    {\n            int nesting = 1;\n            while(nesting > 0)\n       \
    \     {\n                end++;\n                if(paren_string[end] == '(')\n\
    \                    nesting++;\n                else if(paren_string[end] ==\
    \ ')')\n                    nesting--;\n            }\n            result ~= parse_nested_parens(paren_string[start..end]);\n\
    \            start = end + 1;\n        }\n        end++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpayhrbtyf.d(30): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpayhrbtyf.parse_nested_parens(immutable(char)[])\
    \ [0x427f04]\\n??:? long[] tmpayhrbtyf.parse_nested_parens(immutable(char)[])\
    \ [0x427f8a]\\n??:? void tmpayhrbtyf.__unittest_L42_C1() [0x427fe7]\\n??:? void\
    \ tmpayhrbtyf.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf5f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdf2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430795]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430721]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdc9]\\n??:? runModuleUnitTests [0x42cd35]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xd60a3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int count = 0;\n    int max = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            count++;\n            if(count\
    \ > max)\n                max = count;\n        }\n        else if(c == ')')\n\
    \        {\n            count--;\n        }\n        else if(c == ' ')\n     \
    \   {\n            result ~= max;\n            max = 0;\n            count = 0;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprdvrh3zs.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428385]\\n??:? void tmprdvrh3zs.__unittest_L38_C1()\
    \ [0x427f71]\\n??:? void tmprdvrh3zs.__modtest() [0x428104]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430641]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbc5]\\n??:? runModuleUnitTests [0x42cb31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42875b]\\n??:? _d_run_main [0x4286c6]\\n??:? main [0x428117]\\\
    n??:? __libc_start_main [0x6a660554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string) \n    {\n        if(c == '(') \n        {\n     \
    \       depth++;\n            max_depth = max(max_depth, depth);\n        } \n\
    \        else if(c == ')') \n        {\n            depth--;\n        } \n   \
    \     else if(c == ' ') \n        {\n            if(depth != 0) \n           \
    \ {\n                stack ~= max_depth;\n                max_depth = 0;\n   \
    \         }\n        }\n    }\n    if(depth != 0) \n    {\n        stack ~= max_depth;\n\
    \    }\n    return stack;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3na_j4x8.d(23): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3na_j4x8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long count;\n    long max;\n    foreach(paren;\
    \ paren_string.split(\" \"))\n    {\n        stack = [];\n        count = 0;\n\
    \        max = 0;\n        foreach(c; paren)\n        {\n            if(c == '(')\n\
    \            {\n                stack ~= count;\n                count++;\n  \
    \          }\n            else if(c == ')')\n            {\n                if(stack.length\
    \ == 0)\n                {\n                    count = 0;\n                }\n\
    \                else\n                {\n                    count = stack[$-1];\n\
    \                    stack = stack[0..$-1];\n                }\n            }\n\
    \            max = max(max, count);\n        }\n        result ~= max;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv9dd355m.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9dd355m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    foreach(paren_group; paren_string.split(\" \"\
    ))\n    {\n        stack = [];\n        foreach(paren; paren_group)\n        {\n\
    \            if(paren == '(')\n            {\n                stack ~= 1;\n  \
    \          }\n            else if(paren == ')')\n            {\n             \
    \   if(stack.length > 0)\n                {\n                    stack[$-1] +=\
    \ 1;\n                }\n                else\n                {\n           \
    \         stack ~= 1;\n                }\n            }\n        }\n        result\
    \ ~= max(stack);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwk0nudl7.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwk0nudl7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] max_paren_count;\n    long[] paren_count_stack;\n\
    \    long[] max_paren_count_stack;\n    long[] paren_count_stack_top;\n    long[]\
    \ max_paren_count_stack_top;\n    long[] paren_count_stack_top_max;\n    long[]\
    \ max_paren_count_stack_top_max;\n    long[] paren_count_stack_top_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max;\n    long[] paren_count_stack_top_max_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max_max;\n    long[] paren_count_stack_top_max_max_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max_max_max;\n    long[] paren_count_stack_top_max_max_max_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max_max_max_max;\n    long[] paren_count_stack_top_max_max_max_max_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max_max_max_max_max;\n    long[] paren_count_stack_top_max_max_max_max_max_max_max;\n\
    \    long[] max_paren_count_stack_top_max_max_max_max_max_max_max;\n    long[]\
    \ paren_count_stack_top_max_max_max_max_max_max_max_max;\n    long[] max_paren_count_stack_top_max_max_max_max_max_max_max_max;\n\
    \    long[] paren_count_stack_top_max_max_max_max_max_max_max_max_max;\n    long[]\
    \ max_paren_count_stack_top_max_max_max_max_max_max_max_max_max;\n    long[] paren_count_stack_top\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxel0fypn.d(40): Error: semicolon expected, not `unittest`\\n/tmp/tmpxel0fypn.d(40):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxel0fypn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long[] temp2;\n    long[]\
    \ temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[]\
    \ temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[]\
    \ temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[]\
    \ temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[]\
    \ temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[]\
    \ temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[]\
    \ temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[]\
    \ temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[]\
    \ temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[]\
    \ temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[]\
    \ temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[]\
    \ temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[]\
    \ temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[]\
    \ temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[]\
    \ temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[]\
    \ temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[]\
    \ temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[]\
    \ temp71;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n  \
    \  assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n \
    \   assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"\
    (()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcou5hby.d(88): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcou5hby.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx8s9j0bf.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8s9j0bf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long[] temp2;\n    long[]\
    \ temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[]\
    \ temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[]\
    \ temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[]\
    \ temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[]\
    \ temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[]\
    \ temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[]\
    \ temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[]\
    \ temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[]\
    \ temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[]\
    \ temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[]\
    \ temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[]\
    \ temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[]\
    \ temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[]\
    \ temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[]\
    \ temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[]\
    \ temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[]\
    \ temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[]\
    \ temp71;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n  \
    \  assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n \
    \   assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"\
    (()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp56qj2pzn.d(88): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56qj2pzn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6shna88y.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6shna88y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int paren_count = 0;\n    int max_paren_count = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            paren_count++;\n\
    \            max_paren_count = max(max_paren_count, paren_count);\n        }\n\
    \        else if(c == ')')\n        {\n            paren_count--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_paren_count;\n\
    \            max_paren_count = 0;\n            paren_count = 0;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0kmx8af.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0kmx8af.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long len;\n    long len2;\n    bool is_open;\n    bool is_close;\n\
    \    bool is_space;\n    bool is_empty;\n    bool is_nested;\n    bool is_not_nested;\n\
    \    bool is_not_empty;\n    bool is_not_space;\n    bool is_not_open;\n    bool\
    \ is_not_close;\n    bool is_not_nested_and_not_empty;\n    bool is_nested_and_not_empty;\n\
    \    bool is_not_nested_and_not_space;\n    bool is_nested_and_not_space;\n  \
    \  bool is_not_nested_and_not_open;\n    bool is_nested_and_not_open;\n    bool\
    \ is_not_nested_and_not_close;\n    bool is_nested_and_not_close;\n    bool is_not_nested_and_not_space_and_not_empty;\n\
    \    bool is_nested_and_not_space_and_not_empty;\n    bool is_not_nested_and_not_space_and_not_open;\n\
    \    bool is_nested_and_not_space_and_not_open;\n    bool is_not_nested_and_not_space_and_not_close;\n\
    \    bool is_nested_and_not_space_and_not_close;\n    bool is_not_nested_and_not_space_and_not_empty_and_not_open;\n\
    \    bool is_nested_and_not_space_and_not_empty_and_not_open;\n    bool is_not_nested_and_not_space_and_not_empty_and_not_close;\n\
    \    bool is_nested_and_not_space_and_not_empty_and_not_close;\n    bool is_not_nested_and_not_space_and_not_empty_and_not_open_and\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl384mfz1.d(51): Error: semicolon expected, not `unittest`\\n/tmp/tmpl384mfz1.d(51):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpl384mfz1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(c; paren_group)\
    \ \n        {\n            if(c == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(c == ')') \n            {\n                depth--;\n            }\n\
    \        }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpks_uw7_y.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_uw7_y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long max_depth;\n    long\
    \ depth;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n  \
    \  long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long ct\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nn9qz8z.d(109): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp4nn9qz8z.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nn9qz8z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int left_paren_count = 0;\n    int right_paren_count = 0;\n   \
    \ int max_nesting = 0;\n    int nesting = 0;\n    foreach(ch; paren_string) \n\
    \    {\n        if(ch == '(') \n        {\n            left_paren_count++;\n \
    \           nesting++;\n            max_nesting = max(max_nesting, nesting);\n\
    \        } \n        else if(ch == ')') \n        {\n            right_paren_count++;\n\
    \            nesting--;\n        } \n        else if(ch == ' ') \n        {\n\
    \            if(left_paren_count == right_paren_count) \n            {\n     \
    \           result ~= max_nesting;\n                max_nesting = 0;\n       \
    \         nesting = 0;\n                left_paren_count = 0;\n              \
    \  right_paren_count = 0;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp99ni4z4f.d(25): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99ni4z4f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            }\n         \
    \   else if(paren == ')')\n            {\n                level--;\n         \
    \   }\n        }\n        result ~= max_level;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbv2hv56.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbv2hv56.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzymay8ab.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzymay8ab.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    int max_nesting = 0;\n  \
    \  int nesting = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len\
    \ = paren_string.length;\n    bool found_paren = false;\n    bool found_space\
    \ = false;\n    while (i < len) \n    {\n        if (paren_string[i] == '(') \n\
    \        {\n            found_paren = true;\n            nesting++;\n        \
    \    if (nesting > max_nesting) \n            {\n                max_nesting =\
    \ nesting;\n            }\n        }\n        else if (paren_string[i] == ')')\
    \ \n        {\n            nesting--;\n        }\n        else if (paren_string[i]\
    \ == ' ') \n        {\n            found_space = true;\n            end = i;\n\
    \            if (found_paren) \n            {\n                result ~= max_nesting;\n\
    \                max_nesting = 0;\n                nesting = 0;\n            \
    \    found_paren = false;\n            }\n        }\n        i++;\n    }\n   \
    \ if (found_paren) \n    {\n        result ~= max_nesting;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8773spgg.d(22): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8773spgg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long paren_count;\n    long paren_index;\n    long paren_start;\n    long\
    \ paren_end;\n    long paren_length;\n    long paren_start_index;\n    long paren_end_index;\n\
    \    long paren_start_count;\n    long paren_end_count;\n    long paren_start_index_count;\n\
    \    long paren_end_index_count;\n    long paren_start_index_count_length;\n \
    \   long paren_end_index_count_length;\n    long paren_start_index_count_length_diff;\n\
    \    long paren_end_index_count_length_diff;\n    long paren_start_index_count_length_diff_abs;\n\
    \    long paren_end_index_count_length_diff_abs;\n    long paren_start_index_count_length_diff_abs_min;\n\
    \    long paren_end_index_count_length_diff_abs_min;\n    long paren_start_index_count_length_diff_abs_min_index;\n\
    \    long paren_end_index_count_length_diff_abs_min_index;\n    long paren_start_index_count_length_diff_abs_min_index_value;\n\
    \    long paren_end_index_count_length_diff_abs_min_index_value;\n    long paren_start_index_count_length_diff_abs_min_index_value_diff;\n\
    \    long paren_end_index_count_length_diff_abs_min_index_value_diff;\n    long\
    \ paren_start_index_count_length_diff_abs_min_index_value_diff_abs;\n    long\
    \ paren_end_index_count_length_diff_abs_min_index_value_diff_abs;\n    long paren_start_index_count_length_diff_abs_min_index_value_diff_abs_min;\n\
    \    long paren_end_index_count\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu95ipry9.d(48): Error: semicolon expected, not `unittest`\\n/tmp/tmpu95ipry9.d(48):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpu95ipry9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            }\n         \
    \   else if(paren == ')')\n            {\n                level--;\n         \
    \   }\n        }\n        result ~= max_level;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvrauwiq9.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrauwiq9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvypi7k1r.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvypi7k1r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int level = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            level++;\n         \
    \   max_level = max(max_level, level);\n        } \n        else if (c == ')')\
    \ \n        {\n            level--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_level;\n            max_level = 0;\n   \
    \         level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7vaoluq4.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vaoluq4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsw8zzi2y.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsw8zzi2y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int start = 0;\n    int end = 0;\n    int max_depth\
    \ = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c\
    \ == '(')\n        {\n            depth++;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if(c == ')')\n        {\n            depth--;\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9atalmkt.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9atalmkt.d(24): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9atalmkt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_depth_max;\n\
    \    long[] paren_depth_max_index;\n    long[] paren_depth_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max;\n    long[] paren_depth_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index;\n    long[]\
    \ paren_depth_max_index_count_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2wbieg_.d(35): Error: semicolon expected, not `unittest`\\n/tmp/tmpd2wbieg_.d(35):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd2wbieg_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long current_depth;\n \
    \   long i;\n    long j;\n    long k;\n    long n;\n    long m;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n\
    \    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n\
    \    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n    long\
    \ nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n\
    \    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long\
    \ yy;\n    long zz;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n\
    \    long ee;\n    long ff;\n    long gg;\n    long hh;\n    long iii;\n    long\
    \ jjj;\n    long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n\
    \    long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n \
    \   long uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n  \
    \  long zzz;\n    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n\
    \    long eeee;\n    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n\
    \    long jjjj;\n    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n\
    \    long oooo;\n    long pppp;\n    long qqqq\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98430oqr.d(103): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp98430oqr.d(103): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98430oqr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        long max_nesting = 0;\n        long nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           nesting++;\n                max_nesting = max(max_nesting, nesting);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     nesting--;\n            }\n        }\n        result ~= max_nesting;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm31amuj0.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpm31amuj0.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm31amuj0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            depth++;\n          \
    \  max_depth = max(max_depth, depth);\n        }\n        else if(c == ')') \n\
    \        {\n            depth--;\n        }\n        else if(c == ' ') \n    \
    \    {\n            result ~= max_depth;\n            max_depth = 0;\n       \
    \     depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0v6iz075.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v6iz075.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_level = 0;\n        int level = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           level++;\n                max_level = max(max_level, level);\n   \
    \         }\n            else if(paren == ')')\n            {\n              \
    \  level--;\n            }\n        }\n        result ~= max_level;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9jn_b2w5.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jn_b2w5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            } \n        \
    \    else if(paren == ')') \n            {\n                level--;\n       \
    \     }\n        }\n        result ~= max_level;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpog9pkcmr.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog9pkcmr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfoj7h1k.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfoj7h1k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_level;\n    foreach (paren_group; paren_string.split)\n\
    \    {\n        stack = [];\n        max_level = 0;\n        foreach (paren; paren_group)\n\
    \        {\n            if (paren == '(')\n            {\n                stack\
    \ ~= 1;\n                max_level = max(max_level, stack.length);\n         \
    \   }\n            else if (paren == ')')\n            {\n                stack.pop;\n\
    \            }\n        }\n        result ~= max_level;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i8vm0xw.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i8vm0xw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd460a6w6.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd460a6w6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int current_depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5d08dl4h.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5d08dl4h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth;\n    long current_depth;\n    foreach(paren_group;\
    \ paren_string.split(\" \"))\n    {\n        max_depth = 0;\n        current_depth\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                current_depth++;\n                max_depth\
    \ = max(max_depth, current_depth);\n            }\n            else if(paren ==\
    \ ')')\n            {\n                current_depth--;\n            }\n     \
    \   }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9b9v4ts.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9b9v4ts.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2c8g271.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2c8g271.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long len;\n    char c;\n    foreach(paren_string.split(\" \"))\n    {\n \
    \       stack = new long[];\n        max_depth = 0;\n        depth = 0;\n    \
    \    len = paren.length;\n        for(i = 0; i < len; i++)\n        {\n      \
    \      c = paren[i];\n            if(c == '(')\n            {\n              \
    \  stack.push(i);\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if(c == ')')\n            {\n     \
    \           stack.pop();\n                depth--;\n            }\n        }\n\
    \        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplaa_3c47.d(21): Error: unexpected `(` in declarator\\n/tmp/tmplaa_3c47.d(21):\
    \ Error: basic type expected, not `\" \"`\\n/tmp/tmplaa_3c47.d(21): Error: found\
    \ `\" \"` when expecting `)`\\n/tmp/tmplaa_3c47.d(21): Error: no identifier for\
    \ declarator `paren_string.split(_error_)`\\n/tmp/tmplaa_3c47.d(21): Error: found\
    \ `)` when expecting `;`\\n/tmp/tmplaa_3c47.d(21): Error: expression expected,\
    \ not `)`\\n/tmp/tmplaa_3c47.d(22): Error: found `{` when expecting `)`\\n/tmp/tmplaa_3c47.d(44):\
    \ Error: declaration expected, not `return`\\n/tmp/tmplaa_3c47.d(45): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaa_3c47.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int start = 0;\n    int end = 0;\n    int max_nesting\
    \ = 0;\n    int nesting = 0;\n    foreach(c; paren_string)\n    {\n        if(c\
    \ == '(')\n        {\n            nesting++;\n            if(nesting > max_nesting)\n\
    \            {\n                max_nesting = nesting;\n            }\n      \
    \  }\n        else if(c == ')')\n        {\n            nesting--;\n        }\n\
    \        else if(c == ' ')\n        {\n            if(nesting == 0)\n        \
    \    {\n                result ~= max_nesting;\n                max_nesting =\
    \ 0;\n            }\n        }\n    }\n    if(nesting == 0)\n    {\n        result\
    \ ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplasizyei.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplasizyei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting = 0;\n    long nesting = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            nesting++;\n       \
    \     max_nesting = max(max_nesting, nesting);\n        }\n        else if (c\
    \ == ')') \n        {\n            nesting--;\n        }\n        else if (c ==\
    \ ' ') \n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0vfpo6z.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0vfpo6z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5kit7wys.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kit7wys.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth;\n    int depth;\n    foreach(paren_group; paren_string.split(\"\
    \ \")) {\n        max_depth = 0;\n        depth = 0;\n        foreach(paren; paren_group)\
    \ {\n            if(paren == '(') {\n                depth++;\n              \
    \  max_depth = max(max_depth, depth);\n            } else if(paren == ')') {\n\
    \                depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0jxvytq.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0jxvytq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6rgqtd6k.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rgqtd6k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n                depth++;\n\
    \            else if(paren == ')')\n                depth--;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9muk2pa.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9muk2pa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int[] stack = new int[];\n    int max_depth = 0;\n\
    \    int depth = 0;\n    foreach (c; paren_string) \n    {\n        switch (c)\
    \ \n        {\n            case '(':\n                stack ~= depth;\n      \
    \          depth++;\n                max_depth = max(max_depth, depth);\n    \
    \            break;\n            case ')':\n                depth = stack.pop;\n\
    \                break;\n            case ' ':\n                result ~= max_depth;\n\
    \                max_depth = 0;\n                depth = 0;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1stf1gla.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp1stf1gla.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `int[]`\\'s\\n/tmp/tmp1stf1gla.d(25):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmp1stf1gla.d(28):\
    \ Error: no property `pop` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1stf1gla.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            level++;\n         \
    \   max_level = max(max_level, level);\n        } \n        else if (c == ')')\
    \ \n        {\n            level--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_level;\n            max_level = 0;\n   \
    \         level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp06h33pa1.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06h33pa1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpunjx7i9w.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunjx7i9w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth;\n    long depth;\n    foreach(paren_group; paren_string.split(\"\
    \ \"))\n    {\n        max_depth = 0;\n        depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           depth++;\n                max_depth = max(max_depth, depth);\n   \
    \         }\n            else if(paren == ')')\n            {\n              \
    \  depth--;\n            }\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1q54jvyq.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1q54jvyq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto\
    \ result = new long[](paren_string.count(' ') + 1);\n    size_t max_nesting =\
    \ 0;\n    size_t nesting = 0;\n    size_t result_index = 0;\n    foreach (ch;\
    \ paren_string) \n    {\n        if (ch == '(') \n        {\n            ++nesting;\n\
    \            max_nesting = max(max_nesting, nesting);\n        } \n        else\
    \ if (ch == ')') \n        {\n            --nesting;\n        } \n        else\
    \ if (ch == ' ') \n        {\n            result[result_index++] = max_nesting;\n\
    \            max_nesting = 0;\n            nesting = 0;\n        }\n    }\n  \
    \  result[result_index] = max_nesting;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgncofhct.d(14): Error: no property `count` for type `string`\\\
    n/tmp/tmpgncofhct.d(23): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgncofhct.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max = 0;\n\
    \    int max_index = 0;\n    int max_count = 0;\n    int count = 0;\n    int index\
    \ = 0;\n    int len = paren_string.length;\n    int[] arr = new int[len];\n  \
    \  for (i = 0; i < len; i++)\n    {\n        if (paren_string[i] == '(')\n   \
    \     {\n            count++;\n            if (count > max)\n            {\n \
    \               max = count;\n                max_index = i;\n            }\n\
    \        }\n        else if (paren_string[i] == ')')\n        {\n            count--;\n\
    \        }\n        else if (paren_string[i] == ' ')\n        {\n            arr[index]\
    \ = max;\n            index++;\n            max = 0;\n            count = 0;\n\
    \        }\n    }\n    arr[index] = max;\n    index++;\n    result = new long[index];\n\
    \    for (i = 0; i < index; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpobzeu98x.d(23): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpobzeu98x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    foreach(paren_group; paren_string.split(\"\
    \ \"))\n    {\n        int level = 0;\n        int max_level = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           level++;\n                max_level = max(max_level, level);\n   \
    \         }\n            else if(paren == ')')\n            {\n              \
    \  level--;\n            }\n        }\n        result ~= max_level;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5a_pjqn.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5a_pjqn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] stack = new long[];\n    foreach(char c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            stack ~= 1;\n        }\n\
    \        else if(c == ')')\n        {\n            if(stack.length == 0)\n   \
    \         {\n                throw new Exception(\"Invalid input string\");\n\
    \            }\n            else\n            {\n                stack[$-1]++;\n\
    \                if(stack[$-1] == 2)\n                {\n                    stack.length--;\n\
    \                    result ~= stack.length;\n                }\n            }\n\
    \        }\n        else if(c == ' ')\n        {\n            if(stack.length\
    \ != 0)\n            {\n                throw new Exception(\"Invalid input string\"\
    );\n            }\n        }\n        else\n        {\n            throw new Exception(\"\
    Invalid input string\");\n        }\n    }\n    if(stack.length != 0)\n    {\n\
    \        throw new Exception(\"Invalid input string\");\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uvz0430.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7uvz0430.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uvz0430.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split)\n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n       \
    \ {\n            if(paren == '(')\n                depth++;\n            else\
    \ if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpskvu30pt.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskvu30pt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    foreach(paren; paren_string)\
    \ \n    {\n        if(paren == '(') \n        {\n            level++;\n      \
    \      max_level = max(max_level, level);\n        }\n        else if(paren ==\
    \ ')') \n        {\n            level--;\n        }\n        else if(paren ==\
    \ ' ') \n        {\n            result ~= max_level;\n            max_level =\
    \ 0;\n            level = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9p3ccal.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9p3ccal.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplc6eu3v0.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplc6eu3v0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n\
    \    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n      \
    \      stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n  \
    \      }\n        else if(c == ')')\n        {\n            stack.popBack();\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg2z6rjvk.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpg2z6rjvk.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpg2z6rjvk.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpg2z6rjvk.d(26):\
    \ Error: no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpg2z6rjvk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    foreach\
    \ (paren_group; paren_string.split) \n    {\n        max_depth = 0;\n        depth\
    \ = 0;\n        stack = [];\n        foreach (paren; paren_group) \n        {\n\
    \            if (paren == '(') \n            {\n                stack ~= 1;\n\
    \                depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            }\n            else \n            {\n                if (stack.length\
    \ == 0) \n                {\n                    throw new Exception(\"Unmatched\
    \ right parenthesis\");\n                }\n                stack.pop;\n     \
    \           depth -= 1;\n            }\n        }\n        if (stack.length !=\
    \ 0) \n        {\n            throw new Exception(\"Unmatched left parenthesis\"\
    );\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwd0o5to3.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwd0o5to3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int n = paren_string.length;\n\
    \    int level = 0;\n    int max_level = 0;\n    while (i < n)\n    {\n      \
    \  if (paren_string[i] == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if (paren_string[i] == ')')\n\
    \        {\n            level--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            result[j] = max_level;\n            j++;\n \
    \           max_level = 0;\n            level = 0;\n        }\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuo2vda76.d(17): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpuo2vda76.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuo2vda76.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_nesting_level = 0;\n    int current_nesting_level = 0;\n\
    \    foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           current_nesting_level++;\n            max_nesting_level = max(max_nesting_level,\
    \ current_nesting_level);\n        }\n        else if(c == ')')\n        {\n \
    \           current_nesting_level--;\n        }\n        else if(c == ' ')\n \
    \       {\n            result ~= max_nesting_level;\n            max_nesting_level\
    \ = 0;\n            current_nesting_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiaunt875.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaunt875.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int level = 0;\n        int max_level = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           level++;\n                max_level = max(max_level, level);\n   \
    \         }\n            else if(paren == ')')\n            {\n              \
    \  level--;\n            }\n        }\n        result ~= max_level;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyykffag9.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyykffag9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_nesting = 0;\n    int nesting = 0;\n    foreach(char c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            nesting++;\n\
    \            max_nesting = max(max_nesting, nesting);\n        }\n        else\
    \ if(c == ')')\n        {\n            nesting--;\n        }\n        else if(c\
    \ == ' ')\n        {\n            result ~= max_nesting;\n            max_nesting\
    \ = 0;\n            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimcmv0x6.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimcmv0x6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptz83s4jb.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptz83s4jb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_count_max;\n    long[] paren_count_max_temp;\n\
    \    long[] paren_count_max_temp_temp;\n    long[] paren_count_max_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp;\n    long[] paren_count_max_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp;\n    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppobdj7rc.d(34): Error: semicolon expected, not `unittest`\\n/tmp/tmppobdj7rc.d(34):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppobdj7rc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split(\"\
    \ \")) \n    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren;\
    \ paren_group) \n        {\n            if (paren == '(') \n            {\n  \
    \              stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            }\n            else if (paren == ')') \n            {\n         \
    \       stack.pop;\n            }\n        }\n        result ~= max_depth;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnogjn9pq.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnogjn9pq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n                depth++;\n\
    \            else if(paren == ')')\n                depth--;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgqcvdcwt.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqcvdcwt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            depth++;\n          \
    \  max_depth = max(max_depth, depth);\n        } \n        else if(c == ')') \n\
    \        {\n            depth--;\n        } \n        else if(c == ' ') \n   \
    \     {\n            result ~= max_depth;\n            max_depth = 0;\n      \
    \      depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpseogbpk1.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseogbpk1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ res;\n    long[] stack;\n    long[] max_stack;\n    long max_depth;\n    long\
    \ depth;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n  \
    \  long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdlb8byve.d(109): Error: no identifier for declarator `long`\\\
    n/tmp/tmpdlb8byve.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdlb8byve.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long paren_count;\n    long paren_index;\n    long paren_start;\n    long\
    \ paren_end;\n    long paren_length;\n    long paren_string_length;\n    long\
    \ paren_string_index;\n    long paren_string_start;\n    long paren_string_end;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n    long paren_string_length;\n    long paren_string_length;\n\
    \    long paren_string_length;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpnrtllw.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpnrtllw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            }\n         \
    \   else if(paren == ')')\n            {\n                level--;\n         \
    \   }\n        }\n        result ~= max_level;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz23mc3z.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplz23mc3z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    // TODO:\
    \ implement this function\n    return [1L, 2L, 3L];\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpchft4kwl.d(21): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282d5]\\n??:? void tmpchft4kwl.__unittest_L17_C1()\
    \ [0x427ec1]\\n??:? void tmpchft4kwl.__modtest() [0x428054]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2bf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b152]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430794]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430271]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b129]\\n??:? runModuleUnitTests [0x42c095]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428724]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286ab]\\n??:? _d_run_main [0x428616]\\n??:? main [0x428067]\\\
    n??:? __libc_start_main [0x5cf6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo17d2oai.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo17d2oai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxywbnwst.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxywbnwst.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ res = new long[];\n    int i = 0;\n    while (i < paren_string.length)\n   \
    \ {\n        int start = i;\n        int end = i;\n        int count = 0;\n  \
    \      while (end < paren_string.length && paren_string[end] != ' ')\n       \
    \ {\n            if (paren_string[end] == '(')\n                count++;\n   \
    \         else if (paren_string[end] == ')')\n                count--;\n     \
    \       end++;\n        }\n        if (count == 0)\n            res ~= max(count,\
    \ 0);\n        i = end + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcrvkioq.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpkcrvkioq.d(30): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkcrvkioq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphjrh6fb7.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjrh6fb7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfpg_n2e.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfpg_n2e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')') \n            {\n          \
    \      current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9g8ahv38.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g8ahv38.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split(\"\
    \ \"))\n    {\n        stack = [];\n        max_depth = 0;\n        foreach (paren;\
    \ paren_group)\n        {\n            if (paren == '(')\n            {\n    \
    \            stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            }\n            else if (paren == ')')\n            {\n          \
    \      stack.pop;\n            }\n        }\n        result ~= max_depth;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0dwj1_tt.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwj1_tt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzs7251f4.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpzs7251f4.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzs7251f4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = paren_string.length;\n\
    \    int count = 0;\n    int max = 0;\n    int max_index = 0;\n    int max_count\
    \ = 0;\n    int[] temp;\n    int[] temp2;\n    int[] temp3;\n    int[] temp4;\n\
    \    int[] temp5;\n    int[] temp6;\n    int[] temp7;\n    int[] temp8;\n    int[]\
    \ temp9;\n    int[] temp10;\n    int[] temp11;\n    int[] temp12;\n    int[] temp13;\n\
    \    int[] temp14;\n    int[] temp15;\n    int[] temp16;\n    int[] temp17;\n\
    \    int[] temp18;\n    int[] temp19;\n    int[] temp20;\n    int[] temp21;\n\
    \    int[] temp22;\n    int[] temp23;\n    int[] temp24;\n    int[] temp25;\n\
    \    int[] temp26;\n    int[] temp27;\n    int[] temp28;\n    int[] temp29;\n\
    \    int[] temp30;\n    int[] temp31;\n    int[] temp32;\n    int[] temp33;\n\
    \    int[] temp34;\n    int[] temp35;\n    int[] temp36;\n    int[] temp37;\n\
    \    int[] temp38;\n    int[] temp39;\n    int[] temp40;\n    int[] temp41;\n\
    \    int[] temp42;\n    int[] temp43;\n    int[] temp44;\n    int[] temp45;\n\
    \    int[] temp46;\n    int[] temp47;\n    int[] temp48;\n    int[] temp49;\n\
    \    int[] temp50;\n    int[] temp51;\n    int[] temp52;\n    int[] temp53;\n\
    \    int[] temp54;\n    int[] temp55;\n    int[] temp56;\n    int[] temp57;\n\
    \    int[] temp58;\n    int[] temp59;\n    int[] temp60;\n    int[] temp61;\n\
    \    int[] temp62;\n    int[] temp63\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4y64rpm_.d(86): Error: semicolon expected, not `unittest`\\n/tmp/tmp4y64rpm_.d(86):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4y64rpm_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    while (i < paren_string.length)\n    {\n      \
    \  int start = i;\n        int end = i;\n        int count = 0;\n        while\
    \ (end < paren_string.length && paren_string[end] != ' ')\n        {\n       \
    \     if (paren_string[end] == '(')\n                count++;\n            else\
    \ if (paren_string[end] == ')')\n                count--;\n            end++;\n\
    \        }\n        if (count == 0)\n            result ~= count;\n        i =\
    \ end + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcz9_j7dy.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283d5]\\n??:? void tmpcz9_j7dy.__unittest_L35_C1()\
    \ [0x427fc1]\\n??:? void tmpcz9_j7dy.__modtest() [0x428154]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430705]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430691]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc89]\\n??:? runModuleUnitTests [0x42cbf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881f]\\n??:? _d_run_main [0x42878a]\\n??:? main [0x428167]\\\
    n??:? __libc_start_main [0xa0051554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')') \n            {\n          \
    \      current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hr5rqo6.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hr5rqo6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0;\n        long level = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level++;\n\
    \                max_level = max(max_level, level);\n            }\n         \
    \   else if(paren == ')')\n            {\n                level--;\n         \
    \   }\n        }\n        result ~= max_level;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxd9wdxsl.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxd9wdxsl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            } \n        \
    \    else if(paren == ')') \n            {\n                depth--;\n       \
    \     }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0k_807ao.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0k_807ao.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    string[] groups = paren_string.split(\" \");\n   \
    \ foreach(string group; groups)\n    {\n        long max_depth = 0;\n        long\
    \ depth = 0;\n        foreach(char c; group)\n        {\n            if(c == '(')\n\
    \            {\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if(c == ')')\n            {\n     \
    \           depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwyy5f2fe.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwyy5f2fe.d(15): Error: no property\
    \ `split` for type `string`\\n/tmp/tmpwyy5f2fe.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwyy5f2fe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_nesting = 0;\n    int nesting = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            nesting++;\n            max_nesting\
    \ = max(max_nesting, nesting);\n        }\n        else if(c == ')')\n       \
    \ {\n            nesting--;\n        }\n        else if(c == ' ')\n        {\n\
    \            result ~= max_nesting;\n            max_nesting = 0;\n          \
    \  nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpusdjkknw.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpusdjkknw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_level = 0;\n        long current_level = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_level++;\n                max_level = max(max_level, current_level);\n\
    \            }\n            else if(paren == ')') \n            {\n          \
    \      current_level--;\n            }\n        }\n        result ~= max_level;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dtsmccb.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dtsmccb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ paren_levels = new long[];\n    int current_level = 0;\n    int max_level =\
    \ 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           current_level++;\n            max_level = max(max_level, current_level);\n\
    \        }\n        else if(c == ')')\n        {\n            current_level--;\n\
    \        }\n        else if(c == ' ')\n        {\n            paren_levels ~=\
    \ max_level;\n            max_level = 0;\n            current_level = 0;\n   \
    \     }\n    }\n    return paren_levels;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi3rrbrsc.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpi3rrbrsc.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi3rrbrsc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long len;\n    long len2;\n    long len3;\n   \
    \ long len4;\n    long len5;\n    long len6;\n    long len7;\n    long len8;\n\
    \    long len9;\n    long len10;\n    long len11;\n    long len12;\n    long len13;\n\
    \    long len14;\n    long len15;\n    long len16;\n    long len17;\n    long\
    \ len18;\n    long len19;\n    long len20;\n    long len21;\n    long len22;\n\
    \    long len23;\n    long len24;\n    long len25;\n    long len26;\n    long\
    \ len27;\n    long len28;\n    long len29;\n    long len30;\n    long len31;\n\
    \    long len32;\n    long len33;\n    long len34;\n    long len35;\n    long\
    \ len36;\n    long len37;\n    long len38;\n    long len39;\n    long len40;\n\
    \    long len41;\n    long len42;\n    long len43;\n    long len44;\n    long\
    \ len45;\n    long len46;\n    long len47;\n    long len48;\n    long len49;\n\
    \    long len50;\n    long len51;\n    long len52;\n    long len53;\n    long\
    \ len54;\n    long len55;\n    long len56;\n    long len57;\n    long len58;\n\
    \    long len59;\n    long len60;\n    long len61;\n    long len62;\n    long\
    \ len63;\n    long len64;\n    long len65;\n    long len66;\n    long len67;\n\
    \    long len68;\n    long len69;\n    long len70;\n    long len71;\n    long\
    \ len72;\n    long len73;\n    long len74;\n    long len75;\n    long len76;\n\
    \    long len77;\n    long len78;\n    long len\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzuuumnif.d(100): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpzuuumnif.d(100): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzuuumnif.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm19wd042.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm19wd042.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto\
    \ paren_groups = paren_string.split(\" \");\n    long[] result;\n    foreach(paren_group;\
    \ paren_groups)\n    {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                current_nesting++;\n                max_nesting\
    \ = max(max_nesting, current_nesting);\n            }\n            else if(paren\
    \ == ')')\n            {\n                current_nesting--;\n            }\n\
    \        }\n        result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpev_wbtbj.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpev_wbtbj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(ch; paren_string)\
    \ \n    {\n        if(ch == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        }\n        else if(ch == ')')\
    \ \n        {\n            depth--;\n        }\n        else if(ch == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkkiluwl.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkkiluwl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] stack;\n    foreach(paren_group; paren_string.split(\" \"\
    )) \n    {\n        stack = [];\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                stack ~= 1;\n\
    \            }\n            else \n            {\n                if(stack.length\
    \ > 0) \n                {\n                    stack[$-1] += 1;\n           \
    \     }\n                else \n                {\n                    stack ~=\
    \ 1;\n                }\n            }\n        }\n        result ~= max(stack);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprqe4iy95.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqe4iy95.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level;\n    long max_level;\n \
    \   foreach (paren_group; paren_string.split(\" \")) \n    {\n        stack =\
    \ [];\n        current_level = 0;\n        max_level = 0;\n        foreach (paren;\
    \ paren_group) \n        {\n            if (paren == '(') \n            {\n  \
    \              stack ~= current_level;\n                current_level++;\n   \
    \             max_level = max(max_level, current_level);\n            }\n    \
    \        else if (paren == ')') \n            {\n                if (stack.length\
    \ == 0) \n                {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\");\n                }\n                current_level = stack[$-1];\n\
    \                stack = stack[0..$-1];\n            }\n        }\n        if\
    \ (stack.length != 0) \n        {\n            throw new Exception(\"Unbalanced\
    \ parentheses\");\n        }\n        result ~= max_level;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgrqhcm0.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgrqhcm0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    foreach\
    \ (paren_group; paren_string.split(\" \")) \n    {\n        stack = [];\n    \
    \    max_depth = 0;\n        depth = 0;\n        foreach (paren; paren_group)\
    \ \n        {\n            if (paren == '(') \n            {\n               \
    \ stack ~= 1;\n                depth += 1;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if (paren == ')') \n            {\n\
    \                stack ~= -1;\n                depth -= 1;\n            }\n  \
    \      }\n        if (stack.sum != 0) \n        {\n            throw new Exception(\"\
    Invalid paren group: \" ~ paren_group);\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7a1l237e.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a1l237e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        long max_depth = 0;\n        long current_depth = 0;\n       \
    \ foreach(paren; paren_group)\n        {\n            if(paren == '(')\n     \
    \       {\n                current_depth++;\n                max_depth = max(max_depth,\
    \ current_depth);\n            }\n            else if(paren == ')')\n        \
    \    {\n                current_depth--;\n            }\n        }\n        result\
    \ ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpllizf_xn.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpllizf_xn.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpllizf_xn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long len;\n    long len2;\n    long paren_count;\n    char c;\n\
    \    char c2;\n    len = paren_string.length;\n    stack = new long[len];\n  \
    \  depth = 0L;\n    max_depth = 0L;\n    paren_count = 0L;\n    for (i = 0L; i\
    \ < len; i++) \n    {\n        c = paren_string[i];\n        if (c == '(') \n\
    \        {\n            stack[depth] = i;\n            depth++;\n            paren_count++;\n\
    \        }\n        else if (c == ')') \n        {\n            depth--;\n   \
    \         paren_count++;\n        }\n        else if (c == ' ') \n        {\n\
    \            if (paren_count > 0L) \n            {\n                max_depth\
    \ = max(max_depth, depth);\n                paren_count = 0L;\n            }\n\
    \        }\n    }\n    if (paren_count > 0L) \n    {\n        max_depth = max(max_depth,\
    \ depth);\n    }\n    result = new long[max_depth + 1L];\n    for (i = 0L; i <\
    \ len; i++) \n    {\n        c = paren_string[i];\n        if (c == '(') \n  \
    \      {\n            stack[depth] = i;\n            depth++;\n        }\n   \
    \     else if (c == ')') \n        {\n            depth--;\n            result[depth]++;\n\
    \        }\n        else if (c == ' ') \n        {\n            if (paren_count\
    \ > 0L) \n            {\n                result[depth]++;\n                paren_count\
    \ = 0L;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_wvaspg.d(48): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpq_wvaspg.d(55): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpq_wvaspg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpxqhe0x.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpxqhe0x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrf1puqo.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrf1puqo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    int max_depth = 0;\n    int\
    \ depth = 0;\n    foreach(paren; paren_string)\n    {\n        if(paren == '(')\n\
    \        {\n            depth++;\n            if(depth > max_depth)\n        \
    \    {\n                max_depth = depth;\n            }\n        }\n       \
    \ else if(paren == ')')\n        {\n            depth--;\n        }\n        else\
    \ if(paren == ' ')\n        {\n            if(depth == 0)\n            {\n   \
    \             result ~= max_depth;\n                max_depth = 0;\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1wxcq3w6.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428385]\\n??:? void tmp1wxcq3w6.__unittest_L44_C1()\
    \ [0x427f75]\\n??:? void tmp1wxcq3w6.__modtest() [0x428108]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430641]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbc5]\\n??:? runModuleUnitTests [0x42cb31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42875b]\\n??:? _d_run_main [0x4286c6]\\n??:? main [0x42811b]\\\
    n??:? __libc_start_main [0xe158a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth;\n    long depth;\n    long i;\n    long len;\n\
    \    char c;\n    foreach(paren_string; paren_string.split(\" \"))\n    {\n  \
    \      max_depth = 0;\n        depth = 0;\n        i = 0;\n        len = paren_string.length;\n\
    \        while(i < len)\n        {\n            c = paren_string[i];\n       \
    \     if(c == '(')\n            {\n                depth++;\n                max_depth\
    \ = max(max_depth, depth);\n            }\n            else if(c == ')')\n   \
    \         {\n                depth--;\n            }\n            i++;\n     \
    \   }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjsxy5k2s.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsxy5k2s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long cur_depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                cur_depth++;\n\
    \                max_depth = max(max_depth, cur_depth);\n            }\n     \
    \       else if(paren == ')') \n            {\n                cur_depth--;\n\
    \            }\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl093yuz_.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl093yuz_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrkzrbq4.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrkzrbq4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')') \n     \
    \       {\n                current_nesting--;\n            }\n        }\n    \
    \    result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshrezoiq.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshrezoiq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfslzb6ky.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfslzb6ky.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_nesting = 0L;\n        long current_nesting = 0L;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            } \n            else if(paren == ')') \n    \
    \        {\n                current_nesting--;\n            }\n        }\n   \
    \     result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgdvb8hmx.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgdvb8hmx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split)\n    {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n       \
    \ {\n            if(paren == '(')\n                depth++;\n            else\
    \ if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vs1zuwz.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vs1zuwz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] stack;\n    int i;\n    int j;\n    int k;\n    int max;\n\
    \    int count;\n    int len;\n    int len2;\n    int len3;\n    int len4;\n \
    \   int len5;\n    int len6;\n    int len7;\n    int len8;\n    int len9;\n  \
    \  int len10;\n    int len11;\n    int len12;\n    int len13;\n    int len14;\n\
    \    int len15;\n    int len16;\n    int len17;\n    int len18;\n    int len19;\n\
    \    int len20;\n    int len21;\n    int len22;\n    int len23;\n    int len24;\n\
    \    int len25;\n    int len26;\n    int len27;\n    int len28;\n    int len29;\n\
    \    int len30;\n    int len31;\n    int len32;\n    int len33;\n    int len34;\n\
    \    int len35;\n    int len36;\n    int len37;\n    int len38;\n    int len39;\n\
    \    int len40;\n    int len41;\n    int len42;\n    int len43;\n    int len44;\n\
    \    int len45;\n    int len46;\n    int len47;\n    int len48;\n    int len49;\n\
    \    int len50;\n    int len51;\n    int len52;\n    int len53;\n    int len54;\n\
    \    int len55;\n    int len56;\n    int len57;\n    int len58;\n    int len59;\n\
    \    int len60;\n    int len61;\n    int len62;\n    int len63;\n    int len64;\n\
    \    int len65;\n    int len66;\n    int len67;\n    int len68;\n    int len69;\n\
    \    int len70;\n    int len71;\n    int len72;\n    int len73;\n    int len74;\n\
    \    int len75;\n    int len76;\n    int len77;\n    int len78;\n    int len79;\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfuxfazm9.d(100): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfuxfazm9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkmxl3aui.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmxl3aui.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            level++;\n\
    \            max_level = max(max_level, level);\n        }\n        else if(c\
    \ == ')')\n        {\n            level--;\n        }\n        else if(c == '\
    \ ')\n        {\n            result ~= max_level;\n            max_level = 0;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0xr1_azc.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp0xr1_azc.d(22): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0xr1_azc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int[] paren_count = new int[];\n    int[] paren_depth\
    \ = new int[];\n    int[] paren_max_depth = new int[];\n    int[] paren_max_depth_index\
    \ = new int[];\n    int[] paren_max_depth_count = new int[];\n    int[] paren_max_depth_count_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index = new int[];\n   \
    \ int[] paren_max_depth_count_index_index_index = new int[];\n    int[] paren_max_depth_count_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new int[];\n    int[] paren_max_depth_count_index_index_index_index_index\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvev86dt.d(34): Error: semicolon expected, not `unittest`\\n/tmp/tmpkvev86dt.d(34):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkvev86dt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_level;\n   \
    \ long level;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbntts8sn.d(109): Error: no identifier for declarator `long`\\\
    n/tmp/tmpbntts8sn.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbntts8sn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1g9gz26k.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g9gz26k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\
    \ \n        {\n            if(paren == '(') \n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')') \n            {\n                depth--;\n        \
    \    }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprojl19lk.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprojl19lk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start = 0;\n    int end = 0;\n    int count = 0;\n    int max\
    \ = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            count++;\n            if(count > max)\n                max = count;\n\
    \        }\n        else if(c == ')')\n        {\n            count--;\n     \
    \   }\n        else if(c == ' ')\n        {\n            result ~= max;\n    \
    \        max = 0;\n            count = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk07nht61.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428385]\\n??:? void tmpk07nht61.__unittest_L40_C1()\
    \ [0x427f71]\\n??:? void tmpk07nht61.__modtest() [0x428104]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430641]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbc5]\\n??:? runModuleUnitTests [0x42cb31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42875b]\\n??:? _d_run_main [0x4286c6]\\n??:? main [0x428117]\\\
    n??:? __libc_start_main [0x70a21554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')') \n     \
    \       {\n                current_nesting--;\n            }\n        }\n    \
    \    result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4qic973t.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qic973t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        long max_nesting = 0;\n        long nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           nesting++;\n                max_nesting = max(max_nesting, nesting);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     nesting--;\n            }\n        }\n        result ~= max_nesting;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ci7dfjf.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ci7dfjf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] paren_count;\n    int[] paren_level;\n    int[] paren_level_max;\n\
    \    int[] paren_level_max_index;\n    int[] paren_level_max_index_max;\n    int[]\
    \ paren_level_max_index_max_index;\n    int[] paren_level_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index;\n    int[] paren_level_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index;\n    int[] paren_level_max_index_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index;\n  \
    \  int[] paren_level_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    int[] paren_level_max_index_max_index_max_index_max_index_max_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27vhi84j.d(35): Error: semicolon expected, not `unittest`\\n/tmp/tmp27vhi84j.d(35):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp27vhi84j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            } \n            else if(paren == ')') \n            {\n         \
    \       current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp416n4yqi.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp416n4yqi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split)\
    \ \n    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren;\
    \ paren_group) \n        {\n            if (paren == '(') \n            {\n  \
    \              stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            } \n            else if (paren == ')') \n            {\n        \
    \        stack.pop;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbrc3bvjr.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrc3bvjr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_level =\
    \ 0;\n    int level = 0;\n    int len = paren_string.length;\n    while (i < len)\
    \ {\n        if (paren_string[i] == '(') {\n            level++;\n           \
    \ if (level > max_level) {\n                max_level = level;\n            }\n\
    \        } else if (paren_string[i] == ')') {\n            level--;\n        }\
    \ else if (paren_string[i] == ' ') {\n            if (max_level != 0) {\n    \
    \            result ~= max_level;\n                max_level = 0;\n          \
    \  }\n        }\n        i++;\n    }\n    if (max_level != 0) {\n        result\
    \ ~= max_level;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96phrfqu.d(20): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp96phrfqu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    foreach(paren_group; paren_string.split(\" \"\
    )) \n    {\n        stack = [];\n        foreach(paren; paren_group) \n      \
    \  {\n            if(paren == '(') \n            {\n                stack ~= 1;\n\
    \            }\n            else \n            {\n                if(stack.length\
    \ == 0) \n                {\n                    throw new Exception(\"Invalid\
    \ paren group\");\n                }\n                stack[$-1] += 1;\n     \
    \       }\n        }\n        if(stack.length != 0) \n        {\n            throw\
    \ new Exception(\"Invalid paren group\");\n        }\n        result ~= max(stack);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7l9earv.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7l9earv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int max_level = 0;\n    int level = 0;\n    int len = paren_string.length;\n\
    \    while (i < len)\n    {\n        if (paren_string[i] == '(')\n        {\n\
    \            level++;\n            if (level > max_level)\n            {\n   \
    \             max_level = level;\n            }\n        }\n        else if (paren_string[i]\
    \ == ')')\n        {\n            level--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            if (max_level > 0)\n            {\n        \
    \        result ~= max_level;\n                max_level = 0;\n            }\n\
    \        }\n        i++;\n    }\n    if (max_level > 0)\n    {\n        result\
    \ ~= max_level;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiksj_omj.d(21): Error: cannot implicitly convert expression `paren_string.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpiksj_omj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int i = 0;\n    while (i < paren_string.length) \n\
    \    {\n        int start = paren_string.indexOf('(', i);\n        int end = paren_string.indexOf(')',\
    \ start);\n        if (start == -1 || end == -1) \n        {\n            break;\n\
    \        }\n        int count = 0;\n        int max_count = 0;\n        for (int\
    \ j = start; j <= end; j++) \n        {\n            if (paren_string[j] == '(')\
    \ \n            {\n                count++;\n                max_count = max(max_count,\
    \ count);\n            }\n            else \n            {\n                count--;\n\
    \            }\n        }\n        result ~= max_count;\n        i = end + 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3brmpfm5.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp3brmpfm5.d(18): Error: no property\
    \ `indexOf` for type `string`\\n/tmp/tmp3brmpfm5.d(19): Error: no property `indexOf`\
    \ for type `string`\\n/tmp/tmp3brmpfm5.d(31): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3brmpfm5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqc1fmkdm.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc1fmkdm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = paren_string.length;\n\
    \    int count = 0;\n    int max = 0;\n    int max_index = 0;\n    int temp =\
    \ 0;\n    int temp_index = 0;\n    int[] index;\n    int[] max_index_array;\n\
    \    int[] temp_index_array;\n    int[] max_array;\n    int[] temp_array;\n  \
    \  int[] count_array;\n    int[] max_count_array;\n    int[] temp_count_array;\n\
    \    int[] temp_array_2;\n    int[] temp_index_array_2;\n    int[] temp_count_array_2;\n\
    \    int[] temp_array_3;\n    int[] temp_index_array_3;\n    int[] temp_count_array_3;\n\
    \    int[] temp_array_4;\n    int[] temp_index_array_4;\n    int[] temp_count_array_4;\n\
    \    int[] temp_array_5;\n    int[] temp_index_array_5;\n    int[] temp_count_array_5;\n\
    \    int[] temp_array_6;\n    int[] temp_index_array_6;\n    int[] temp_count_array_6;\n\
    \    int[] temp_array_7;\n    int[] temp_index_array_7;\n    int[] temp_count_array_7;\n\
    \    int[] temp_array_8;\n    int[] temp_index_array_8;\n    int[] temp_count_array_8;\n\
    \    int[] temp_array_9;\n    int[] temp_index_array_9;\n    int[] temp_count_array_9;\n\
    \    int[] temp_array_10;\n    int[] temp_index_array_10;\n    int[] temp_count_array_10;\n\
    \    int[] temp_array_11;\n    int[] temp_index_array_11;\n    int[] temp_count_array_11;\n\
    \    int[] temp_array_12;\n    int[] temp_index_array_12;\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmjc1ixtt.d(64): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjc1ixtt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int cur_level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            cur_level++;\n          \
    \  max_level = max(max_level, cur_level);\n        }\n        else if(c == ')')\n\
    \        {\n            cur_level--;\n        }\n        else if(c == ' ')\n \
    \       {\n            result ~= max_level;\n            max_level = 0;\n    \
    \        cur_level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpszwzqe_v.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszwzqe_v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto\
    \ paren_groups = paren_string.split(\" \");\n    long[] result;\n    foreach(paren_group;\
    \ paren_groups)\n    {\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                current_depth++;\n                max_depth\
    \ = max(max_depth, current_depth);\n            }\n            else if(paren ==\
    \ ')')\n            {\n                current_depth--;\n            }\n     \
    \   }\n        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfudnz48s.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfudnz48s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_nh_cw2.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmps_nh_cw2.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps_nh_cw2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ld8ytgh.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmp7ld8ytgh.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7ld8ytgh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    foreach\
    \ (paren_group; paren_string.split) \n    {\n        max_depth = 0;\n        depth\
    \ = 0;\n        stack = [];\n        foreach (paren; paren_group) \n        {\n\
    \            if (paren == '(') \n            {\n                stack ~= 1;\n\
    \                depth += 1;\n                max_depth = max(max_depth, depth);\n\
    \            } \n            else if (paren == ')') \n            {\n        \
    \        stack.pop;\n                depth -= 1;\n            }\n        }\n \
    \       assert(stack.empty);\n        result ~= max_depth;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ng2nuhh.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ng2nuhh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    auto\
    \ paren_groups = paren_string.split(\" \");\n    long[] result;\n    foreach(paren_group;\
    \ paren_groups)\n    {\n        auto stack = new Stack!(char[])();\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(depth, max_depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy46chtsx.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy46chtsx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int start = 0;\n    int end = 0;\n    while (end <\
    \ paren_string.length)\n    {\n        if (paren_string[end] == ' ')\n       \
    \ {\n            result ~= parse_nested_parens_helper(paren_string[start..end]);\n\
    \            start = end + 1;\n        }\n        end++;\n    }\n    result ~=\
    \ parse_nested_parens_helper(paren_string[start..end]);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphv8h1fit.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmphv8h1fit.d(21): Error: undefined\
    \ identifier `parse_nested_parens_helper`\\n/tmp/tmphv8h1fit.d(26): Error: undefined\
    \ identifier `parse_nested_parens_helper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphv8h1fit.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw8t3nzt.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpgw8t3nzt.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgw8t3nzt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n                depth++;\n         \
    \   else if(paren == ')')\n                depth--;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        result ~= max_depth;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkr_9bwb2.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkr_9bwb2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_depth;\n   \
    \ long depth;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq24c0rs8.d(109): Error: no identifier for declarator `long`\\\
    n/tmp/tmpq24c0rs8.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq24c0rs8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    auto paren_groups = paren_string.split(\" \");\n    foreach(paren_group;\
    \ paren_groups) \n    {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        foreach(paren; paren_group) \n        {\n            if(paren\
    \ == '(') \n            {\n                current_nesting++;\n              \
    \  max_nesting = max(max_nesting, current_nesting);\n            }\n         \
    \   else if(paren == ')') \n            {\n                current_nesting--;\n\
    \            }\n        }\n        result ~= max_nesting;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl7k8o6qk.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7k8o6qk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            } \n            else if(paren == ')') \n            {\n         \
    \       current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2q1h27v.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2q1h27v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int i = 0;\n    while (i < paren_string.length) \n\
    \    {\n        int start = i;\n        while (paren_string[i] != ' ') \n    \
    \    {\n            i++;\n        }\n        string paren_group = paren_string[start..i];\n\
    \        result ~= parse_nested_parens_helper(paren_group);\n        i++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7eyw6493.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7eyw6493.d(24): Error: undefined\
    \ identifier `parse_nested_parens_helper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp7eyw6493.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n                depth++;\n\
    \            else if(paren == ')')\n                depth--;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5zu7a1fj.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zu7a1fj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] stack = new long[];\n    long max_depth = 0;\n\
    \    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n      \
    \      stack ~= 1;\n            max_depth = max(max_depth, stack.length);\n  \
    \      }\n        else if(c == ')')\n        {\n            stack.popBack();\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoxjd760g.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpoxjd760g.d(15): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmpoxjd760g.d(22):\
    \ Error: undefined identifier `max`, did you mean function `fmax`?\\n/tmp/tmpoxjd760g.d(26):\
    \ Error: no property `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpoxjd760g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        long max_nesting = 0;\n        long current_nesting = 0;\n   \
    \     foreach(paren; paren_group)\n        {\n            if(paren == '(')\n \
    \           {\n                current_nesting += 1;\n                max_nesting\
    \ = max(max_nesting, current_nesting);\n            }\n            else if(paren\
    \ == ')')\n            {\n                current_nesting -= 1;\n            }\n\
    \        }\n        result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmvfc5c1.d(14): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmmvfc5c1.d(15): Error: no property\
    \ `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmmvfc5c1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_counts;\n    long max_paren_count;\n    long max_paren_count_index;\n\
    \    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvatly8q.d(107): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmphvatly8q.d(107): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvatly8q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    auto paren_groups = paren_string.split(\" \");\n    foreach(paren_group;\
    \ paren_groups)\n    {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                current_nesting++;\n                max_nesting\
    \ = max(max_nesting, current_nesting);\n            }\n            else if(paren\
    \ == ')')\n            {\n                current_nesting--;\n            }\n\
    \        }\n        result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp25hh93g.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp25hh93g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_level = 0L;\n        long level = 0L;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                level\
    \ += 1L;\n                max_level = max(max_level, level);\n            }\n\
    \            else if(paren == ')')\n            {\n                level -= 1L;\n\
    \            }\n        }\n        result ~= max_level;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppe3ewvun.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppe3ewvun.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqksa5bsu.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqksa5bsu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpevpyhcvl.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevpyhcvl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n                depth++;\n\
    \            else if(paren == ')')\n                depth--;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmped9xf1mj.d(16): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmped9xf1mj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    // Split\
    \ the string into groups\n    auto groups = paren_string.split(\" \");\n    //\
    \ Create a tuple of (group, max_depth)\n    auto group_depth = groups.map!(group\
    \ => tuple(group, 0L));\n    // Iterate over the groups\n    foreach(tuple!(string,\
    \ long) t; group_depth)\n    {\n        // Iterate over the characters in the\
    \ group\n        foreach(char c; t[0])\n        {\n            // If the character\
    \ is an opening parenthesis, increment the depth\n            if(c == '(')\n \
    \               t[1]++;\n            // If the character is a closing parenthesis,\
    \ decrement the depth\n            else if(c == ')')\n                t[1]--;\n\
    \        }\n    }\n    // Return the max depth of each group\n    return group_depth.map!(t\
    \ => t[1]).array;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxvtvo1rs.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvtvo1rs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] paren_stack;\n    int paren_count;\n    int i;\n    int j;\n\
    \    int k;\n    int len;\n    int max_level;\n    int level;\n    int paren_index;\n\
    \    int paren_index_prev;\n    int paren_index_next;\n    int paren_index_next_next;\n\
    \    int paren_index_next_next_next;\n    int paren_index_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next;\n    int paren_index_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next;\n    int paren_index_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next;\n    int paren_index_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    int paren_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp23dxkv4n.d(42): Error: semicolon expected, not `unittest`\\n/tmp/tmp23dxkv4n.d(42):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp23dxkv4n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int paren_count = 0;\n    int max_paren_count = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            paren_count++;\n\
    \            max_paren_count = max(max_paren_count, paren_count);\n        }\n\
    \        else if(c == ')')\n        {\n            paren_count--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_paren_count;\n\
    \            max_paren_count = 0;\n            paren_count = 0;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5h1itmrq.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5h1itmrq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ieugqd7.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmp6ieugqd7.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6ieugqd7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split)\
    \ \n    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren;\
    \ paren_group) \n        {\n            if (paren == '(') \n            {\n  \
    \              stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            } \n            else if (paren == ')') \n            {\n        \
    \        stack.pop;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxisxwep.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxisxwep.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_level = 0L;\n        long current_level = 0L;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_level++;\n                max_level = max(max_level, current_level);\n\
    \            }\n            else if(paren == ')') \n            {\n          \
    \      current_level--;\n            }\n        }\n        result ~= max_level;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqadyiujt.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqadyiujt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    foreach (paren_group; paren_string.split(\"\
    \ \"))\n    {\n        max_depth = 0;\n        stack = [];\n        foreach (paren;\
    \ paren_group)\n        {\n            if (paren == '(')\n            {\n    \
    \            stack ~= 1;\n                max_depth = max(max_depth, stack.length);\n\
    \            }\n            else if (paren == ')')\n            {\n          \
    \      stack.pop();\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1ft2agt.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1ft2agt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long paren_count;\n    long paren_start;\n    long paren_end;\n    long paren_len;\n\
    \    string paren_group;\n    string[] paren_groups;\n    paren_groups = paren_string.split(\"\
    \ \");\n    result = new long[paren_groups.length];\n    foreach (i, paren_group;\
    \ paren_groups)\n    {\n        stack = new long[];\n        max_depth = 0L;\n\
    \        depth = 0L;\n        paren_count = 0L;\n        paren_start = 0L;\n \
    \       paren_end = 0L;\n        paren_len = paren_group.length;\n        while\
    \ (paren_end < paren_len)\n        {\n            if (paren_group[paren_end] ==\
    \ '(')\n            {\n                stack ~= paren_end;\n                depth\
    \ += 1L;\n                if (depth > max_depth)\n                {\n        \
    \            max_depth = depth;\n                }\n            }\n          \
    \  else if (paren_group[paren_end] == ')')\n            {\n                if\
    \ (stack.length > 0L)\n                {\n                    stack.pop;\n   \
    \                 depth -= 1L;\n                }\n            }\n           \
    \ paren_end += 1L;\n        }\n        result[i] = max_depth;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9r92oqxm.d(25): Error: no property `split` for type `string`\\\
    n/tmp/tmp9r92oqxm.d(27): Error: variable `paren_group` is shadowing variable `tmp9r92oqxm.parse_nested_parens.paren_group`\\\
    n/tmp/tmp9r92oqxm.d(27): Error: variable `i` is shadowing variable `tmp9r92oqxm.parse_nested_parens.i`\\\
    n/tmp/tmp9r92oqxm.d(29): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `long[]`\\'s\\n/tmp/tmp9r92oqxm.d(51): Error: no property\
    \ `pop` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp9r92oqxm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzalaf31d.d(15): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzalaf31d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_max;\n    long[] paren_min;\n\
    \    long[] paren_max_count;\n    long[] paren_min_count;\n    long[] paren_max_count_temp;\n\
    \    long[] paren_min_count_temp;\n    long[] paren_max_count_temp_2;\n    long[]\
    \ paren_min_count_temp_2;\n    long[] paren_max_count_temp_3;\n    long[] paren_min_count_temp_3;\n\
    \    long[] paren_max_count_temp_4;\n    long[] paren_min_count_temp_4;\n    long[]\
    \ paren_max_count_temp_5;\n    long[] paren_min_count_temp_5;\n    long[] paren_max_count_temp_6;\n\
    \    long[] paren_min_count_temp_6;\n    long[] paren_max_count_temp_7;\n    long[]\
    \ paren_min_count_temp_7;\n    long[] paren_max_count_temp_8;\n    long[] paren_min_count_temp_8;\n\
    \    long[] paren_max_count_temp_9;\n    long[] paren_min_count_temp_9;\n    long[]\
    \ paren_max_count_temp_10;\n    long[] paren_min_count_temp_10;\n    long[] paren_max_count_temp_11;\n\
    \    long[] paren_min_count_temp_11;\n    long[] paren_max_count_temp_12;\n  \
    \  long[] paren_min_count_temp_12;\n    long[] paren_max_count_temp_13;\n    long[]\
    \ paren_min_count_temp_13;\n    long[] paren_max_count_temp_14;\n    long[] paren_min_count_temp_14;\n\
    \    long[] paren_max_count_temp_15;\n    long[] paren_min_count_temp_15;\n  \
    \  long[] paren_max_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpck867c2h.d(51): Error: semicolon expected, not `unittest`\\n/tmp/tmpck867c2h.d(51):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpck867c2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwijv9tk9.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwijv9tk9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_depth;\n   \
    \ long depth;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2tgkbg2q.d(109): Error: no identifier for declarator `long`\\\
    n/tmp/tmp2tgkbg2q.d(109): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tgkbg2q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
