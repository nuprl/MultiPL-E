name: HumanEval_4_mean_absolute_deviation
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        differences[i] = abs(numbers[i] - mean);\n\
    \    }\n    return mean(differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] differences = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        differences[i] =\
    \ abs(numbers[i] - median);\n    }\n    return median(differences);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers, float center) \n{\n    float[] differences = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        differences[i] =\
    \ abs(numbers[i] - center);\n    }\n    return median(differences);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn3zrzwz.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn3zrzwz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppypc7uiz.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmppypc7uiz.d(16): Error: template instance `map!((x)\
    \ => abs(x - mean))` template `map` is not defined\\n/tmp/tmppypc7uiz.d(17): Error:\
    \ function expected before `()`, not `mean` of type `float`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppypc7uiz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Mean Absolute Deviation\n    around the median of this\
    \ dataset.\n    Mean Absolute Deviation is the average absolute difference between\
    \ each\n    element and a centerpoint (median in this case):\n    MAD = average\
    \ | x - x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the mean of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (mean in this\
    \ case):\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqll3vlr.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqll3vlr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97hks5ah.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp97hks5ah.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp97hks5ah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_from_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_from_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return mean(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the mean of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeez8g2r2.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeez8g2r2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the standard deviation.\n    The standard\
    \ deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    std = sqrt(mean((x - x.mean())**2))\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        squared_diff[i]\
    \ = (number - mean) ** 2;\n    }\n    return sqrt(mean(squared_diff));\n}\n/*\n\
    \ For a given array of input numbers, calculate the variance.\n    The variance\
    \ is the average of the squared differences from the mean:\n    var = mean((x\
    \ - x.mean())**2)\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8fl27m0u.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fl27m0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        differences[i] = abs(number - mean);\n    }\n    return\
    \ mean(differences);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        differences[i] = abs(number - median);\n    }\n    return\
    \ median(differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ the standard deviation.\n    Standard deviation is the square root of the variance.\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    return sqrt(variance(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the variance.\n    Variance\
    \ is the average of the squared differences from the mean.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] differences = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        differences[i] = pow(number - mean,\
    \ 2);\n    }\n    return mean(differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0, 4.0\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqf8c88t_.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf8c88t_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz0jxq5c2.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpz0jxq5c2.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpz0jxq5c2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk6agjl1n.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6agjl1n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n \
    \   float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the standard deviation\n    around the mean\
    \ of this dataset.\n    Standard deviation is the square root of the variance\
    \ of the dataset,\n    which is the average of the squared differences from the\
    \ mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    */\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance of this dataset.\n    Variance\
    \ is the average of the squared differences from the mean:\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.6666666666666667\n*/\nfloat variance(\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8od_q9dd.d(67): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp8od_q9dd.d(67): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8od_q9dd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        abs_diff[i] = abs(v - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of absolute difference between each\n    element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, v; numbers)\n    {\n        abs_diff[i]\
    \ = abs(v - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0)\n    {\n   \
    \     return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n\
    \    }\n    else\n    {\n        return sorted[sorted.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w_1fq71.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w_1fq71.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat\
    \ mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n\
    \    {\n        sum += number;\n    }\n    return sum / numbers.length;\n}\n/*\n\
    \ For a given array of input numbers, calculate the median of the dataset.\n \
    \   >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted = numbers[];\n    std.algorithm.sort(sorted);\n    if\
    \ (sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n        return\
    \ sorted[sorted.length / 2];\n    }\n}\n/*\n For a given array of input numbers,\
    \ calculate the mode of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n   \
    \ 1.0\n*/\nfloat mode(float[] numbers) \n{\n    float[] counts = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        foreach (j, other; numbers)\n\
    \        {\n            if (number == other)\n            {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    float max = 0.0;\n    int max_index = 0;\n\
    \    foreach (i, count; counts)\n    {\n        if (count > max)\n        {\n\
    \            max = count;\n            max_index = i;\n        }\n    }\n    return\
    \ numbers[max_index];\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2w50s5qt.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2w50s5qt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return mean(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mode\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mode in this case):\n    MAD =\
    \ average | x - x_mode |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_mode(float[] numbers) \n{\n\
    \    float mode = mode(numbers);\n    float[] abs_diff = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        abs_diff[i] = abs(number - mode);\n\
    \    }\n    return mean(abs_diff);\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around the trimmed mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (trimmed mean in this case):\n    MAD = average\
    \ | x - x_trimmed_mean |\n    >>>\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfbq36bpm.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfbq36bpm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n        deviations[i] = abs(number - mean);\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers)\n        deviations[i]\
    \ = abs(number - median);\n    return median(deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n        sum += number;\n    return\
    \ sum / numbers.length;\n}\n/*\n For a given array of input numbers, calculate\
    \ the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n\
    \    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0)\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    else\n\
    \        return sorted[sorted.length / 2];\n}\n/*\n For a given array of input\
    \ numbers, calculate the mode of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n\
    \    1.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavmxpccl.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavmxpccl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Mean Absolute Error\n    between\
    \ each element and a centerpoint (mean in this case):\n    MAE = average | x -\
    \ x_mean |\n    >>> mean_absolute_error([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \n\
    */\nfloat mean_absolute_error(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] errors = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        errors[i] = abs(number - mean);\n    }\n    return mean(errors);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Error\n\
    \    between each element and a centerpoint (median in this case):\n    MAE =\
    \ median | x - x_median |\n    >>> median_absolute_error([1.0, 2.0, 3.0, 4.0])\n\
    \    1.5\n    \n*/\nfloat median_absolute_error(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] errors = new float\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5bhmeyej.d(70): Error: semicolon expected, not `unittest`\\n/tmp/tmp5bhmeyej.d(70):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5bhmeyej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(abs)(numbers.map!(a => a - mean));\n \
    \   return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnu1a10jl.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpnu1a10jl.d(16): Error: template instance `map!abs`\
    \ template `map` is not defined\\n/tmp/tmpnu1a10jl.d(17): Error: function expected\
    \ before `()`, not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnu1a10jl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is a measure of spread of the data around the mean.\n \
    \   >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n   \
    \ \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_deviations[i] = pow(number - mean, 2);\n\
    \    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given array\
    \ of input numbers, calculate the variance.\n    Variance is a measure of spread\
    \ of the data around the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n\
    \    \n*/\nfloat variance(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2b0mqlg8.d(68): Error: semicolon expected, not `unittest`\\n/tmp/tmp2b0mqlg8.d(68):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2b0mqlg8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_around_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] absolute_deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Median Absolute Deviation\n  \
    \  around the mean of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (mean\
    \ in this case):\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD =\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yzhlrxz.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yzhlrxz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around a centerpoint.\n    Mean\
    \ Absolute Deviation is the average absolute difference between each\n    element\
    \ and a centerpoint:\n    MAD = average | x - x_center |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float centerpoint) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) \n    {\n        absolute_deviations[i] = abs(number\
    \ - centerpoint);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) \n    {\n   \
    \     absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around a centerpoint.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint:\n    MAD =\
    \ median | x - x_center |\n    >>> median_absolute_deviation\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vgphnok.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vgphnok.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum\
    \ += number;\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the dataset.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = sort(numbers);\n    if (sorted_numbers.length % 2 == 0)\n \
    \   {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n    {\n        return sorted_n\nunittest\n{\n \
    \   alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqdqd5ggl.d(74): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpqdqd5ggl.d(82): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpqdqd5ggl.d(82): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdqd5ggl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\n\
    \    {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode.\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmproc4yakr.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmproc4yakr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Standard Deviation\n    around the mean of this dataset.\n    Standard Deviation\
    \ is the square root of the average squared difference\n    between each element\
    \ and a centerpoint (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the Variance\n    around the mean of this\
    \ dataset.\n    Variance is the average squared difference between each element\
    \ and a\n    centerpoint (mean in this case):\n    VAR = average (x - x_mean\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu1oy0zuo.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu1oy0zuo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Mean Absolute Deviation\n    around the\
    \ median of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (median in this case):\n\
    \    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        absolute_deviations[i] = abs(numbers[i] - median);\n    }\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Median Absolute Deviation\n    around the mean of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (mean in this case):\n    MAD = median | x - x_mean\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg9a12wd8.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9a12wd8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpooz3f98s.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpooz3f98s.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpooz3f98s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_differences = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_differences[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_differences);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the variance.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    return sqrt(variance(numbers));\n}\n/*\n For a given array\
    \ of input numbers, calculate the variance.\n    Variance is the average of the\
    \ squared differences from the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n    float[] squared_differences = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        squared_differences[i] = pow(number\
    \ - mean, 2);\n    }\n    return mean(squared_differences);\n}\n/*\n For a given\
    \ array of input\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0z96h2c.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0z96h2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hut8c0c.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp4hut8c0c.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4hut8c0c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n        absolute_deviations[i] = abs(number - mean);\n   \
    \ return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n        absolute_deviations[i] = abs(number\
    \ - median);\n    return median(absolute_deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate the Standard Deviation\n    around the mean of this\
    \ dataset.\n    Standard Deviation is the square root of the average squared difference\n\
    \    between each element and a centerpoint (mean in this case):\n    SD = sqrt(average\
    \ (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n        squared_deviations[i] = pow(number - mean, 2);\n \
    \   return sqrt(mean(squared_deviations));\n}\n/*\n For a given array of input\
    \ numbers, calculate the Interquartile Range\n    of this dataset.\n    Interquartile\
    \ Range is the difference between the upper and lower quartiles\n    of the dataset:\n\
    \    IQR = Q3 - Q1\n    >>> interquartile_\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi6yczatx.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6yczatx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Standard Deviation\n    around the mean of this dataset.\n    Standard Deviation\
    \ is the square root of the average of the squared\n    differences between each\
    \ element and the mean:\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_differences\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_differences[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_differences));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ between each element\n    and the mean:\n    VAR = average (x - x_mean)^2\n\
    \    >>> variance([\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsymd8i5c.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsymd8i5c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n \
    \   float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mean\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ median of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (median in this\
    \ case):\n    MAD = median | x - x_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9m5bkcrx.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9m5bkcrx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum\
    \ += number;\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the dataset.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n    if\
    \ (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n   \nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7xol0b5.d(72): Error: found `unittest` instead of statement\\\
    n/tmp/tmpk7xol0b5.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7xol0b5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers) {\n        sum += number;\n\
    \    }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0) {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    } else\
    \ {\n        return sorted[sorted.length / 2];\n    }\n}\n/*\n For a given array\
    \ of input numbers, calculate the mode of the dataset.\n    >>> mode([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers) \n{\n    float[] counts\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        foreach\
    \ (j, other; numbers) {\n            if (number == other) {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    float max_count = 0.0;\n    float max_index\
    \ = 0.0;\n    foreach (i, count; counts) {\n        if (count > max_count) {\n\
    \            max_count = count;\n            max_index = i;\n        }\n    }\n\
    \    return numbers[max_index];\n}\n/*\n For a given\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpthag3we3.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthag3we3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the mean of the squared deviations\n\
    \    from the mean.\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance.\n    Variance is the mean of\
    \ the squared deviations from the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.25\n    \n*/\nfloat variance(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd3uqa9cf.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3uqa9cf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_difference = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_difference[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_difference);\n}\n/*\n For a given array of input\
    \ numbers, calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach\
    \ (number; numbers)\n    {\n        sum += number;\n    }\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\n\
    \    {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n\
    \    float max_count = 0;\n    float max_value = 0;\n    float current_count =\
    \ 0;\n    float current_value = 0;\n    foreach (number; sorted_numbers)\n   \
    \ {\n        if (number == current_value)\n        {\n            current_count++;\n\
    \        }\n        else\n        {\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnqzjr5v0.d(77): Error: found `unittest` instead of statement\\\
    n/tmp/tmpnqzjr5v0.d(85): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpnqzjr5v0.d(85): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpnqzjr5v0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\n\
    float mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n}\n\
    /*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted = sort(numbers);\n    if (sorted.length % 2\
    \ == 0)\n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    }\n    else\n    {\n        return sorted[sorted.length / 2];\n\
    \    }\n}\n/*\n For a given array of input numbers, calculate the mode of the\
    \ dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgf1zaiy.d(21): Error: function expected before `()`, not `mean`\
    \ of type `float`\\n/tmp/tmptgf1zaiy.d(41): Error: function expected before `()`,\
    \ not `median` of type `float`\\n/tmp/tmptgf1zaiy.d(51): Error: undefined identifier\
    \ `sum`\\n/tmp/tmptgf1zaiy.d(61): Error: undefined identifier `sort`, did you\
    \ mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmptgf1zaiy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        differences[i] = abs(numbers[i] - mean);\n\
    \    }\n    return mean(differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around the mean of this dataset.\n  \
    \  Mean Absolute Deviation is the average absolute difference between each\n \
    \   element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers, float mean) \n{\n    float[] differences\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        differences[i] = abs(numbers[i] - mean);\n    }\n    return mean(differences);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] differences =\
    \ new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        differences[i] = abs(numbers[i] - median);\n    }\n    return median(differences);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuphh00lp.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuphh00lp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean absolute deviation\n    around the median of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (median in this case):\n    MAD = average | x - x_median |\n   \
    \ >>> mean_absolute_deviation_from_median([1.0, 2.0, 3.0, 4.0])\n    1.0\n   \
    \ \n*/\nfloat mean_absolute_deviation_from_median(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number -\
    \ median);\n    }\n    return mean(deviations);\n}\n/*\n For a given array of\
    \ input numbers, calculate the median absolute deviation\n    around the mean\
    \ of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvsyjm8x.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvsyjm8x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\n\
    \    {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode.\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc_y74hc.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc_y74hc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n        absolute_differences[i] = abs(number - mean);\n  \
    \  return mean(absolute_differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_around_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] absolute_differences =\
    \ new float[numbers.length];\n    foreach (i, number; numbers)\n        absolute_differences[i]\
    \ = abs(number - median);\n    return mean(absolute_differences);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute differences between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_differences\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n        absolute_differences[i]\
    \ = abs(number - median);\n    return median(absolute_differences);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the mean of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute differences between\n    each element and a centerpoint (mean\
    \ in this case):\n    MAD = median | x - x_mean |\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1_h5rj2.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1_h5rj2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the sample standard deviation.\n\
    \    The sample standard deviation is the square root of the sample variance.\n\
    \    >>> sample_standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat sample_standard_deviation(float[] numbers) \n{\n    return sqrt(sample_variance(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the sample variance.\n \
    \   The sample variance is the average of the squared differences from the mean.\n\
    \    >>> sample_variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n\
    */\nfloat sample_variance(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_deviations[i] = pow(number - mean, 2);\n\
    \    }\n    return mean(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhatb82e.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpfhatb82e.d(68): Error: found `{` when expecting `,`\\n/tmp/tmpfhatb82e.d(69):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpfhatb82e.d(69): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpfhatb82e.d(69): Error: expression expected,\
    \ not `=`\\n/tmp/tmpfhatb82e.d(69): Error: found `mean_absolute_deviation` when\
    \ expecting `,`\\n/tmp/tmpfhatb82e.d(69): Error: expression expected, not `;`\\\
    n/tmp/tmpfhatb82e.d(71): Error: found `assert` when expecting `,`\\n/tmp/tmpfhatb82e.d(71):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpfhatb82e.d(72): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmpfhatb82e.d(73): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpfhatb82e.d(74): Error: expression expected, not `}`\\n/tmp/tmpfhatb82e.d(75):\
    \ Error: found `void` when expecting `,`\\n/tmp/tmpfhatb82e.d(75): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmpfhatb82e.d(75): Error: expression expected,\
    \ not `}`\\n/tmp/tmpfhatb82e.d(75): Error: found `End of File` when expecting\
    \ `,`\\n/tmp/tmpfhatb82e.d(75): Error: found `End of File` when expecting `)`\\\
    n/tmp/tmpfhatb82e.d(75): Error: found `End of File` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpfhatb82e.d(75): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfhatb82e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    return sum(numbers) / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate the median of the dataset.\n    >>> median([1.0, 2.0,\
    \ 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = numbers.dup.sort;\n    if (sorted_numbers.length % 2 == 0)\
    \ {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n For a given array of input numbers, calculate the mode\
    \ of\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3p2lv2o7.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p2lv2o7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - average);\n    }\n   \
    \ return mean(deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\n\
    float mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n}\n\
    /*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted = numbers.dup;\n    std.algorithm.sort(sorted);\n\
    \    if (sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n       \
    \ return sorted[sorted.length / 2];\n    }\n}\n/*\n For a given array of input\
    \ numbers, calculate the sum of the dataset.\n    >>> sum([1.0, 2.0, 3.0, 4.\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9hpmlxg7.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hpmlxg7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        squared_deviations[i]\
    \ = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared difference\
    \ between each element\n    and a centerpoint (mean in this\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gy1tle4.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gy1tle4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(a => abs(a - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Mean Absolute Deviation\n    around the median of this dataset.\n    Mean\
    \ Absolute Deviation is the average absolute difference between each\n    element\
    \ and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n\
    \    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n    float median\
    \ = median(numbers);\n    float[] absolute_deviations = map!(a => abs(a - median))(numbers);\n\
    \    return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the mean of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (mean in this case):\n    MAD = median | x\
    \ - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean\
    \ = mean(numbers);\n    float[] absolute_deviations = map!(a => abs(a - mean))(numbers);\n\
    \    return median(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat median_absolute_deviation_median(float[] numbers) \n\
    {\n    float median = median(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt53alban.d(64): Error: expression expected, not `unittest`\\\
    n/tmp/tmpt53alban.d(65): Error: found `{` when expecting `,`\\n/tmp/tmpt53alban.d(66):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpt53alban.d(66): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpt53alban.d(66): Error: expression expected,\
    \ not `=`\\n/tmp/tmpt53alban.d(66): Error: found `mean_absolute_deviation` when\
    \ expecting `,`\\n/tmp/tmpt53alban.d(66): Error: expression expected, not `;`\\\
    n/tmp/tmpt53alban.d(68): Error: found `assert` when expecting `,`\\n/tmp/tmpt53alban.d(68):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpt53alban.d(69): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmpt53alban.d(70): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpt53alban.d(71): Error: expression expected, not `}`\\n/tmp/tmpt53alban.d(72):\
    \ Error: found `void` when expecting `,`\\n/tmp/tmpt53alban.d(72): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmpt53alban.d(72): Error: expression expected,\
    \ not `}`\\n/tmp/tmpt53alban.d(72): Error: found `End of File` when expecting\
    \ `,`\\n/tmp/tmpt53alban.d(72): Error: found `End of File` when expecting `)`\\\
    n/tmp/tmpt53alban.d(72): Error: semicolon expected, not `End of File`\\n/tmp/tmpt53alban.d(72):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt53alban.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpps2p1c0g.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpps2p1c0g.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpps2p1c0g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the numbers.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum\
    \ += number;\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the numbers.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n    if\
    \ (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n   \nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpke3q24m_.d(72): Error: found `unittest` instead of statement\\\
    n/tmp/tmpke3q24m_.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpke3q24m_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, n; numbers)\
    \ {\n        deviations[i] = abs(n - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, n; numbers) {\n        deviations[i]\
    \ = abs(n - median);\n    }\n    return median(deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n  \
    \  foreach (n; numbers) {\n        sum += n;\n    }\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted = numbers[0 .. $].dup;\n    std.algorithm.sort(sorted);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    }\n    else {\n        return sorted[sorted.length / 2];\n \
    \   }\n}\n/*\n For a given array of input numbers, calculate the mode.\n    >>>\
    \ mode([1.0\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n \
    \   assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02jhg898.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02jhg898.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvc85lsw.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpjvc85lsw.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjvc85lsw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45ri4ty5.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45ri4ty5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpku4q54wp.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpku4q54wp.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpku4q54wp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        squared_deviations[i]\
    \ = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared difference\
    \ between each element\n    and a centerpoint (mean in this\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qvksg2g.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qvksg2g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_difference = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_difference[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_difference);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_difference = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_difference[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_difference);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers) {\n        sum += number;\n\
    \    }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers\
    \ = numbers[];\n    std.algorithm.sort(sorted_numbers);\n    if (sorted_numbers.length\
    \ % 2 == 0) {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] +\
    \ sorted_numbers[sorted_numbers.length / 2]) / 2;\n    } else {\n        return\
    \ sorted\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplfvjdqm8.d(69): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmplfvjdqm8.d(77): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplfvjdqm8.d(77): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplfvjdqm8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9tiq3__.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpi9tiq3__.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi9tiq3__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - median))(numbers);\n  \
    \  return median(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n   \
    \ 2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n    int n = sorted_numbers.length;\n\
    \    if (n % 2 == 0) \n    {\n        return (sorted_numbers[n / 2 - 1] + sorted_numbers[n\
    \ / 2]) / 2;\n    } \n    else \n    {\n        return sorted_numbers[n / 2];\n\
    \    }\n}\n/*\n For a given array of input numbers, calculate the mode of the\
    \ dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(float[]\
    \ numbers) \n{\n    float[] counts = new float[\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvyg69amd.d(73): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvyg69amd.d(74): Error: found `{` when expecting `]`\\n/tmp/tmpvyg69amd.d(75):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvyg69amd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around a centerpoint.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float centerpoint) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        absolute_deviations[i]\
    \ = abs(numbers[i] - centerpoint);\n    }\n    return mean(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        absolute_deviations[i] = abs(numbers[i] - median);\n    }\n  \
    \  return median(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around a centerpoint.\n    Median Absolute\
    \ Deviation is the median of the absolute differences between\n    each\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb3smmyzm.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3smmyzm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dlfso2u.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dlfso2u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_zie1ki.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpp_zie1ki.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpp_zie1ki.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\n\
    \    {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode.\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8p76ft6l.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8p76ft6l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    differences between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        squared_deviations[i]\
    \ = (number - mean) ** 2;\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ between each element\n    and a centerpoint (mean in this\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpti38bd2i.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti38bd2i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcj67hyug.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcj67hyug.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) \n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average | x - x_mean |^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) \n    {\n   \
    \     squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared difference\
    \ between each element\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcn7h9yg_.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcn7h9yg_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        abs_deviations[i] = abs(number - mean);\n    }\n  \
    \  return mean(abs_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        abs_deviations[i] = abs(number - median);\n    }\n\
    \    return median(abs_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n   \
    \ 2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach\
    \ (number; numbers)\n    {\n        sum += number;\n    }\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n   \nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprxv2ly5d.d(72): Error: found `unittest` instead of statement\\\
    n/tmp/tmprxv2ly5d.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprxv2ly5d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    foreach (number; numbers)\n    {\n\
    \        absolute_deviations += abs(number - mean);\n    }\n    return absolute_deviations\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate the\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = new float[];\n    foreach (number; numbers)\n\
    \    {\n        absolute_deviations ~= abs(number - median);\n    }\n    return\
    \ median(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Standard Deviation\n    around the mean of this dataset.\n    Standard Deviation\
    \ is the square root of the variance:\n    SD = sqrt(average (x - x_mean)^2)\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float variance = 0.0;\n    foreach (number; numbers)\n    {\n        variance\
    \ += (number - mean) ^^ 2;\n    }\n    return sqrt(variance / numbers.length);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1uifmbxe.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uifmbxe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the absolute\n\
    \    differences between each element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_difference(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_differences = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_differences[i]\
    \ = abs(number - mean);\n    }\n    return mean(absolute_differences);\n}\n/*\n\
    \ For a given array of input numbers, calculate the median of the absolute\n \
    \   differences between each element and a centerpoint (median in this case):\n\
    \    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ogolmqj.d(61): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ogolmqj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqbokrud9.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpqbokrud9.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqbokrud9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n  \
    \  foreach (number; numbers)\n    {\n        sum += number;\n    }\n    return\
    \ sum / numbers.length;\n}\n/*\n For a given array of input numbers, calculate\
    \ the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n\
    \    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        float midpoint = sorted_numbers.length\
    \ / 2;\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint])\
    \ / 2;\n    }\n    else\n    {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n For a given array of input numbers, calculate the mode\
    \ of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ mode(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n   \
    \ float[] counts = new float[sorted_numbers.length];\n    foreach (i, number;\
    \ sorted_numbers)\n    {\n        counts[i] = 0;\n        foreach (j, num; sorted_numbers)\n\
    \        {\n            if (number == num)\n            {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    float max_count = max(counts);\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoxnnofe8.d(79): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxnnofe8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Mean Absolute Deviation\n\
    \    around the mean of this dataset, normalized by the mean of the dataset.\n\
    \    Normalized Mean Absolute Deviation is the average absolute difference\n \
    \   between each element and a centerpoint (mean in this case), normalized\n \
    \   by the mean of the dataset:\n    NMAD = average | x - x_mean | / x_mean\n\
    \    >>> normalized_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    0.25\n\
    \    \n*/\nfloat normalized_mean_absolute_deviation(float[] numbers) \n{\n   \
    \ float mean = mean(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - mean);\n    }\n    return mean(absolute_deviations) / mean;\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset, normalized by the median of the dataset.\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqrscmtf.d(61): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqrscmtf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers\
    \ = sort(numbers);\n    if (sorted_numbers.length % 2 == 0)\n    {\n        return\
    \ (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n    {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n For a given array of input numbers, calculate the mode\
    \ of\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0btcf_qb.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0btcf_qb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) \n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the absolute\n\
    \    difference between each element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float centerpoint) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) \n    {\n        absolute_deviations[i] = abs(number\
    \ - centerpoint);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate the median of the absolute\n    difference\
    \ between each element and a centerpoint (median in this case):\n    MAD = median\
    \ | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjryhp4j.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmprjryhp4j.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\n/tmp/tmprjryhp4j.d(35): Error: undefined identifier\
    \ `median`\\n/tmp/tmprjryhp4j.d(41): Error: function expected before `()`, not\
    \ `median` of type `float`\\n/tmp/tmprjryhp4j.d(58): Error: undefined identifier\
    \ `mean`, did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmprjryhp4j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\n\
    \    between each element and a centerpoint (median in this case):\n    MAD =\
    \ median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n   \
    \ float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the standard deviation\n    around the mean\
    \ of this dataset.\n    Standard deviation is the square root of the average of\
    \ the squared\n    differences from the mean:\n    std = sqrt(average (x - x_mean)^2)\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance\n    around the mean of this\
    \ dataset.\n    Variance is the average of the squared differences from the mean:\n\
    \    variance = average (x - x_mean)^2\n   \nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8_y7_eoc.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_y7_eoc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] abs_diff = new\
    \ float[numbers.length];\n    float mean = mean(numbers);\n    foreach(i, number;\
    \ numbers)\n    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return\
    \ mean(abs_diff);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float[] abs_diff = new\
    \ float[numbers.length];\n    float median = median(numbers);\n    foreach(i,\
    \ number; numbers)\n    {\n        abs_diff[i] = abs(number - median);\n    }\n\
    \    return median(abs_diff);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n    if(sorted_numbers.length\
    \ % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length / 2]\
    \ + sorted_numbers[sorted_numbers.length / 2 - 1]) / 2;\n    }\n    else\n   \
    \ {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n\
    \ For a given array of input numbers, calculate the mode of\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkoej7x89.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkoej7x89.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Mean Absolute Deviation\n    around\
    \ the median of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (median in this case):\n\
    \    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_around_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return mean(deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the mean of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (mean in this\
    \ case):\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation_around_\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpah9t2k4l.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah9t2k4l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5iroixf9.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp5iroixf9.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5iroixf9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mean\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers, float mean)\
    \ \n{\n    float[] absolute_deviations = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mean\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers, float mean,\
    \ float[] absolute_deviations) \n{\n    for (int i = 0; i < numbers.length; i++)\
    \ {\n        absolute_deviations[i] = abs(numbers[i] - mean);\n    }\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>>\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvumap7ge.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvumap7ge.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0)\n    {\n   \
    \     return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n\
    \    }\n    else\n    {\n        return sorted[sorted.length / 2];\n    }\n}\n\
    /*\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4hwybbf.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4hwybbf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_differences[i] = pow(number - mean, 2);\n\
    \    }\n    return sqrt(mean(squared_differences));\n}\n/*\n For a given array\
    \ of input numbers, calculate the variance.\n    Variance is the average of the\
    \ squared differences from the mean:\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptfsqewi8.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptfsqewi8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1n03l7x_.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp1n03l7x_.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1n03l7x_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        differences[i] = abs(v - mean);\n    }\n    return mean(differences);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] differences =\
    \ new float[numbers.length];\n    foreach (i, v; numbers)\n    {\n        differences[i]\
    \ = abs(v - median);\n    }\n    return median(differences);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Standard Deviation\n    around the mean\
    \ of this dataset.\n    Standard Deviation is the square root of the average of\
    \ the squared\n    difference between each element and the mean:\n    SD = sqrt(average\
    \ (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        differences[i] = (v - mean) * (v - mean);\n    }\n    return sqrt(mean(differences));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared difference\
    \ between each element\n    and the mean:\n    VAR = average (x - x_mean)^2\n\
    \    >>> variance([1.0, 2.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbqyg84k.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbqyg84k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - median))(numbers);\n  \
    \  return median(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the standard deviation\n    around the mean of this dataset.\n   \
    \ Standard deviation is the square root of the average squared difference\n  \
    \  between each element and the mean:\n    std = sqrt(average (x - x_mean)^2)\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = map!((x) => (x - mean)^2)(numbers);\n    return\
    \ sqrt(mean(squared_deviations));\n}\n/*\n For a given array of input numbers,\
    \ calculate the variance\n    around the mean of this dataset.\n    Variance is\
    \ the average squared difference between each element and the\n    mean:\n   \
    \ var = average (x - x_mean)^2\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n\
    \    \n*/\nfloat variance(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = map!((x) => (x - mean\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfymseev7.d(64): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpfymseev7.d(66): Error: found `{` when expecting `)` following template\
    \ argument list\\n/tmp/tmpfymseev7.d(67): Error: semicolon expected, not `alias`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfymseev7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr6vg72_u.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpr6vg72_u.d(16): Error: template instance `map!((x)\
    \ => abs(x - mean))` template `map` is not defined\\n/tmp/tmpr6vg72_u.d(17): Error:\
    \ function expected before `()`, not `mean` of type `float`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6vg72_u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        abs_differences[i] = abs(number - mean);\n    }\n \
    \   return mean(abs_differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute differences between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] abs_differences = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        abs_differences[i] = abs(number\
    \ - median);\n    }\n    return median(abs_differences);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Standard Deviation\n    around the mean\
    \ of this dataset.\n    Standard Deviation is the square root of the average squared\
    \ differences\n    between each element and a centerpoint (mean in this case):\n\
    \    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_differences\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_differences[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_differences));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average squared differences between\
    \ each element and a\n    centerpoint (mean\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo4n7yoma.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4n7yoma.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdnuysla.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmptdnuysla.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptdnuysla.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the median absolute deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the median absolute deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the median absolute deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9n0_vi6.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9n0_vi6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        abs_diff[i] = abs(v - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, v; numbers)\n    {\n        abs_diff[i]\
    \ = abs(v - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate the standard deviation\n    around the mean\
    \ of this dataset.\n    Standard deviation is the square root of the variance\
    \ of the dataset,\n    which is the average of the squared differences from the\
    \ mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diff = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        diff[i] = v - mean;\n    }\n    float[] squares = new float[numbers.length];\n\
    \    foreach (i, v; diff)\n    {\n        squares[i] = v * v;\n    }\n    return\
    \ sqrt(mean(squares));\n}\n/*\n For a given array of input numbers, calculate\
    \ the variance\n    around the mean of this dataset.\n    Variance is the average\
    \ of the squared differences from the mean:\n    >>>\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6nq8x4hm.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nq8x4hm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate Mean\
    \ Absolute Deviation\n    around a given centerpoint.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint:\n\
    \    MAD = average | x - x_center |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0], 2.5)\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float center) \n{\n    float[] deviations = new float[numbers.length];\n   \
    \ foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number - center);\n\
    \    }\n    return mean(deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number -\
    \ median);\n    }\n    return median(deviations);\n}\n/*\n For a given array of\
    \ input numbers, calculate Median Absolute Deviation\n    around a given centerpoint.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint:\n    MAD = median | x - x_center |\n    >>>\
    \ median_absolute_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    1.0\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ctc73uu.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ctc73uu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the standard deviation.\n    Standard\
    \ deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    std = sqrt(average((x - x_mean)**2))\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        squared_diff[i]\
    \ = (number - mean) ** 2;\n    }\n    return sqrt(mean(squared_diff));\n}\n/*\n\
    \ For a given array of input numbers, calculate the variance.\n    Variance is\
    \ the average of the squared differences from the mean:\n    var = average((x\
    \ - x_mean)**2)\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1eon0_0.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1eon0_0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0)\n    {\n   \
    \     return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n\
    \    }\n    else\n    {\n        return sorted[sorted.length / 2];\n    }\n}\n\
    /*\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o9i4eb9.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o9i4eb9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5fszhj9.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5fszhj9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation\n  \
    \  around the mean of this dataset.\n    Standard deviation is the square root\
    \ of the variance of the dataset.\n    Variance is the average of the squared\
    \ differences from the mean:\n    variance = average (x - x_mean)^2\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ from the mean:\n    variance = average (x - x_mean\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkbe85vkn.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbe85vkn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprkqupiaf.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmprkqupiaf.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprkqupiaf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(x => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = map!(x => abs(x - median))(numbers);\n    return\
    \ median(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Standard Deviation\n    around the mean of this dataset.\n    Standard Deviation\
    \ is the square root of the average of the squared\n    difference between each\
    \ element and a centerpoint (mean in this case):\n    SD = sqrt(average | x -\
    \ x_mean |^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = map!(x => (x - mean) ** 2)(numbers);\n    return\
    \ sqrt(mean(squared_deviations));\n}\n/*\n For a given array of input numbers,\
    \ calculate the Interquartile Range\n    of this dataset.\n    Interquartile Range\
    \ is the difference between the 75th and 25th percentiles\n    of the data:\n\
    \    IQR = Q3 - Q1\n    >>> interquartile_range([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat interquartile_range(float[] numbers) \n{\n    float q1 = percentile(numbers,\
    \ 25);\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n \
    \   assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpltg9mod9.d(65): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltg9mod9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        abs_deviations[i] = abs(number - mean);\n    }\n  \
    \  return mean(abs_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsx1o1q5d.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpsx1o1q5d.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsx1o1q5d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = numbers[];\n\
    \    std.algorithm.sort(sorted_numbers);\n    if (sorted_numbers.length % 2 ==\
    \ 0)\n    {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkizsu273.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkizsu273.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n        abs_deviations[i] = abs(number - mean);\n    return mean(abs_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n        abs_deviations[i]\
    \ = abs(number - median);\n    return mean(abs_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mode\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mode in this case):\n    MAD =\
    \ average | x - x_mode |\n    >>> mean_absolute_deviation_mode([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_mode(float[] numbers)\
    \ \n{\n    float mode = mode(numbers);\n    float[] abs_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n        abs_deviations[i] = abs(number - mode);\n\
    \    return mean(abs_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around the trimmed mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (trimmed mean in this case):\n    MAD = average\
    \ | x - x_trimmed_mean |\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxom_2uu.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxom_2uu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp398nth59.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp398nth59.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the mean of the dataset.\n    >>>\
    \ mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n\
    {\n    float sum = 0.0;\n    foreach (number; numbers) {\n        sum += number;\n\
    \    }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers[];\n\
    \    std.algorithm.sort(sorted);\n    if (sorted.length % 2 == 0) {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n  \
    \  else {\n        return sorted[sorted.length / 2];\n    }\n}\n/*\n For a given\
    \ array of input numbers, calculate the mode of the dataset.\n    >>> mode([\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb30z3u6.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb30z3u6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>>\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprkd9stns.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkd9stns.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the absolute\n\
    \    difference between each element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float centerpoint) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - centerpoint);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate the median of the absolute\n    difference\
    \ between each element and a centerpoint (median in this case):\n    MAD = median\
    \ | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat median_absolute_deviation\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpam81t09p.d(66): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpam81t09p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\n\
    float mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n}\n\
    /*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = sort(numbers);\n    if (sorted_numbers.length\
    \ % 2 == 0) {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] +\
    \ sorted_numbers[sorted_numbers.length / 2]) / 2;\n    } else {\n        return\
    \ sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n For a given array\
    \ of input numbers, calculate the mode of the dataset.\n    >>> mode([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers) \n{\n    float[] counts\
    \ = new float[numbers.length];\n    foreach (i, x; numbers) {\n        foreach\
    \ (j, y; numbers) {\n            if (x == y) {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    return numbers[argmax(counts)];\n}\n/*\n\
    \ For a given array of input numbers, calculate the range of the dataset.\n  \
    \  >>> range([1.0, 2.0, 3.0, 4.0])\n    3.0\n*/\nfloat range(float[] numbers)\
    \ \n{\n    return max(numbers) - min(numbers);\n}\n/*\n For a given array of input\
    \ numbers, calculate the variance of the dataset.\n    >>> variance([1.0,\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf5216ec.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf5216ec.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0) {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\
    \ {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n\
    \ For a given array of input numbers, calculate the mode.\n    >>> mode([1.0\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpengljgsm.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpengljgsm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7713hyt.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmps7713hyt.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps7713hyt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum\
    \ += number;\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the dataset.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = sort(numbers);\n    if (sorted_numbers.length % 2 == 0)\n \
    \   {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n    {\n        return sorted_n\nunittest\n{\n \
    \   alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw283k2l.d(74): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpgw283k2l.d(82): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpgw283k2l.d(82): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgw283k2l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the average of the squared\n    deviations\
    \ from the mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance.\n    Variance is the average\
    \ of the squared deviations from the mean:\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n    float\
    \ mean = mean\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50r0a7y3.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmp50r0a7y3.d(71):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp50r0a7y3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw7h_jk6l.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpw7h_jk6l.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw7h_jk6l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, n; numbers)\n\
    \    {\n        deviations[i] = abs(n - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, n; numbers)\n    {\n        deviations[i]\
    \ = abs(n - median);\n    }\n    return median(deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = numbers.dup.sort;\n\
    \    if (sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n       \
    \ return sorted[sorted.length / 2];\n    }\n}\n/*\n For a given array of input\
    \ numbers, calculate the mode of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24f9hkp5.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24f9hkp5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (median in this case):\n    MAD = average | x - x_median |\n   \
    \ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ mean_absolute_deviation_median(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - median))(numbers);\n  \
    \  return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the mean of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (mean in this case):\n    MAD = median | x\
    \ - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean\
    \ = mean(numbers);\n    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n\
    \    return median(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphuohq4br.d(65): Error: no identifier for declarator `float`\\\
    n/tmp/tmphuohq4br.d(65): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuohq4br.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9vcmy9pq.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp9vcmy9pq.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9vcmy9pq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    differences between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ between each element\n    and a\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoiyv8_72.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiyv8_72.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (n; numbers) \n    {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float mad = 0.0;\n    foreach (n; numbers) \n    {\n        mad += abs(n\
    \ - mean);\n    }\n    return mad / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate Median Absolute Deviation\n    around the median\
    \ of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (median in this case):\n\
    \    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float[] deviations = new float[numbers.length];\n    float median =\
    \ median(numbers);\n    foreach (n; numbers) \n    {\n        deviations ~= abs(n\
    \ - median);\n    }\n    return median(deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate the Median Absolute Deviation\n    around the mean\
    \ of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation_from_mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation_from_mean(float[]\
    \ numbers) \n{\n    float[] deviations = new float[numbers.length];\n    float\
    \ mean = 0.0;\n    foreach (n; numbers) \n    {\n        mean += n;\n    }\n \
    \   mean /= numbers.length;\n    foreach (n; numbers) \n    {\n        deviations\
    \ ~= abs(n - mean);\n    }\n    return median(deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_f9wpns.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_f9wpns.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n \
    \   1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the mode\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mode in this case):\n    MAD =\
    \ average | x - x_mode |\n    >>> mean_absolute_deviation_mode([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_mode(float[] numbers)\
    \ \n{\n    float mode = mode(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - mode);\n    }\n    return mean(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Mean Absolute Deviation\n    around\
    \ the trimmed mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (trimmed mean\
    \ in this case):\n    MAD = average\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgbg06qxw.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbg06qxw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the absolute\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float centerpoint) \n{\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number -\
    \ centerpoint);\n    }\n    return mean(deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the absolute\n    difference between\
    \ each element and a centerpoint (median in this case):\n    MAD = median | x\
    \ - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers, float centerpoint)\
    \ \n{\n    float[] deviations = new\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkrpxv10z.d(71): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpkrpxv10z.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmpkrpxv10z.d(71):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkrpxv10z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Mean Absolute Error\n    between the elements and a centerpoint\
    \ (mean in this case):\n    MAE = average | x - x_mean |\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat mean_absolute_error(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_errors = new float[numbers.length];\n\
    \    foreach (i, number; numbers) \n    {\n        absolute_errors[i] = abs(number\
    \ - mean);\n    }\n    return mean(absolute_errors);\n}\n/*\n For a given array\
    \ of input numbers, calculate the Mean Squared Error\n    between the elements\
    \ and a centerpoint (mean in this case):\n    MSE = average (x - x_mean)^2\n \
    \   >>> mean_squared_error([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean_squared_error(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_errors =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) \n    {\n     \
    \   squared_errors[i] = (number - mean) * (number - mean);\n    }\n    return\
    \ mean(squared_errors);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Root Mean Squared Error\n    between the elements and a centerpoint (mean\
    \ in this case):\n    RMSE = sqrt(average (x - x_mean)^2)\n    >>> root_mean_squared_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5811388300841898\n    \n*/\nfloat root_\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns3jezf1.d(68): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns3jezf1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return mean(deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the mean of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (mean in this\
    \ case):\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation_median([1.0\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqea7qnvp.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqea7qnvp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_differences = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(abs_differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] abs_differences = map!((x) => abs(x - median))(numbers);\n    return\
    \ median(abs_differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ the standard deviation.\n    Standard deviation is the square root of the average\
    \ of squared differences\n    from the mean:\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_differences\
    \ = map!((x) => (x - mean) * (x - mean))(numbers);\n    float variance = mean(squared_differences);\n\
    \    return sqrt(variance);\n}\n/*\n For a given array of input numbers, calculate\
    \ the variance.\n    Variance is the average of squared differences from the mean:\n\
    \    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n*/\nfloat\
    \ variance(float[] numbers) \n{\n    float mean = mean(numbers);\n    float[]\
    \ squared_differences = map!((x) => (x - mean) * (x - mean))(numbers);\n    return\
    \ mean(squared_differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean.\n    >>> mean\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6ag0m0u.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6ag0m0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n \
    \   1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the median\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Mean Absolute Deviation\n    around\
    \ the median of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (median in this case):\n\
    \    MAD =\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n  \
    \  assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4f2wowr.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4f2wowr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Mean Squared Deviation\n    around the mean of this dataset.\n\
    \    Mean Squared Deviation is the average squared difference between each\n \
    \   element and a centerpoint (mean in this case):\n    MSD = average ( x - x_mean\
    \ )^2\n    >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \n\
    */\nfloat mean_squared_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_deviations[i] = pow(number - mean, 2);\n\
    \    }\n    return mean(squared_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Root Mean Squared Deviation\n    around the mean of this\
    \ dataset.\n    Root Mean Squared Deviation is the square root of the average\
    \ squared\n    difference between each element and a centerpoint (mean in this\
    \ case):\n    RMSD = sqrt( average ( x - x_mean )^2 )\n    >>> root_mean_squared_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.118033988749895\n    \n*/\nfloat root_mean_squared_deviation(float[]\
    \ numbers) \n{\n    return sqrt(mean_squared_deviation(numbers));\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9fai_lwc.d(55): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fai_lwc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the absolute\n\
    \    difference between each element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float center) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - center);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the median of the absolute\n    difference\
    \ between each element and a centerpoint (median in this case):\n    MAD = median\
    \ | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat median_absolute\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuoiyhkdt.d(69): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuoiyhkdt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n \
    \   1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ mean of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x -\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppi279v8u.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppi279v8u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n \
    \   1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ mean of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ differences between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute differences between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x -\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8isc0hc7.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8isc0hc7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_9xpudj.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp2_9xpudj.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2_9xpudj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n    For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat\
    \ median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n    For a given array of input numbers, calculate\
    \ the Median Absolute\n    Deviation around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat\
    \ median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n    For a given array of input numbers, calculate\
    \ the Median Absolute\n    Deviation around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0,\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqolbr3nq.d(61): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqolbr3nq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(abs)(map!((x) => x - mean)(numbers));\n\
    \    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbs62leys.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpbs62leys.d(16): Error: template instance `map!abs`\
    \ template `map` is not defined\\n/tmp/tmpbs62leys.d(17): Error: function expected\
    \ before `()`, not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbs62leys.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float mean) \n{\n    float[] abs_diff = new float[numbers.length];\n    foreach\
    \ (i, number; numbers)\n    {\n        abs_diff[i] = abs(number - mean);\n   \
    \ }\n    return mean(abs_diff);\n}\n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float mean, float[] abs_diff) \n{\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7kylp4_.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpf7kylp4_.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\n/tmp/tmpf7kylp4_.d(40): Error: function expected\
    \ before `()`, not `mean` of type `float`\\n/tmp/tmpf7kylp4_.d(58): Error: function\
    \ expected before `()`, not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf7kylp4_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the mean of the dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum\
    \ += number;\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the dataset.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = sort(numbers);\n    if (sorted_numbers.length % 2 == 0)\n \
    \   {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n    {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n For a given array of input numbers, calculate the mode\
    \ of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ mode(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n   \
    \ float[] counts = new float[sorted_numbers.length];\n    float max_count = 0;\n\
    \    float max_count_index = 0;\n    foreach (i, number; sorted_numbers)\n   \
    \ {\n        foreach (j, other_number; sorted_numbers)\n        {\n          \
    \  if (number == other_number)\n            {\n                counts[i] += 1;\n\
    \            }\n        }\n       \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpir4rdbo9.d(78): Error: found `unittest` instead of statement\\\
    n/tmp/tmpir4rdbo9.d(86): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpir4rdbo9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean of the\n    absolute\
    \ differences between each element and a centerpoint\n    (mean in this case):\n\
    \    >>> mean_absolute_difference([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat\
    \ mean_absolute_difference(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the mean of the\n    absolute differences between each element\
    \ and a centerpoint\n    (median in this case):\n    >>> median_absolute_difference([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat median_absolute_difference(float[]\
    \ numbers) \n{\n    float\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_czo9ss.d(72): Error: no identifier for declarator `float`\\\
    n/tmp/tmpg_czo9ss.d(72): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_czo9ss.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around a given\
    \ centerpoint.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint:\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    1.0\n   \
    \ \n*/\nfloat mean_absolute_deviation(float[] numbers, float centerpoint) \n{\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - centerpoint);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        absolute_deviations[i] = abs(numbers[i] - median);\n    }\n    return\
    \ median(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around a given centerpoint.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a center\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtpzfmj1.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtpzfmj1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Mean Absolute Error\n    between each element and a centerpoint\
    \ (mean in this case):\n    MAE = average | x - x_mean |\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat mean_absolute_error(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_errors = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_errors[i] = abs(number\
    \ - mean);\n    }\n    return mean(absolute_errors);\n}\n/*\n For a given array\
    \ of input numbers, calculate the Mean Squared Error\n    between each element\
    \ and a centerpoint (mean in this case):\n    MSE = average (x - x_mean)^2\n \
    \   >>> mean_squared_error([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean_squared_error(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_errors =\
    \ new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n      \
    \  squared_errors[i] = (number - mean)^2;\n    }\n    return mean(squared_errors);\n\
    }\n/*\n For a given array of input numbers, calculate the Root Mean Squared Error\n\
    \    between each element and a centerpoint (mean in this case):\n    RMSE = sqrt(average\
    \ (x - x_mean)^2)\n    >>> root_mean_squared_error([1.0, 2.0, 3.0, 4.0])\n   \
    \ 1.5811388300841898\n    \n*/\nfloat root_mean_squared_error\nunittest\n{\n \
    \   alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoj_1h3fz.d(68): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj_1h3fz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the absolute\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float center) \n{\n    float[] deviations = new float[numbers.length];\n   \
    \ foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number - center);\n\
    \    }\n    return mean(deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the absolute\n    difference between each element and\
    \ a centerpoint (median in this case):\n    MAD = median | x - x_median |\n  \
    \  >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ median_absolute_deviation(float[] numbers, float center) \n{\n    float[] deviations\
    \ = new float[n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvvliwhqn.d(71): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmpvvliwhqn.d(72): Error: semicolon expected, not `{`\\n/tmp/tmpvvliwhqn.d(79):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvliwhqn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return mean(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ mean of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] abs_diff = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        abs_diff[i] = abs(number - mean);\n\
    \    }\n    return median(abs_diff);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvprliuv.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvprliuv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ mean of the absolute\n    difference between each element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float centerpoint) \n{\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        deviations[i] = abs(number -\
    \ centerpoint);\n    }\n    return mean(deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the absolute\n    difference between\
    \ each element and a centerpoint (median in this case):\n    MAD = median | x\
    \ - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers, float centerpoint)\
    \ \n{\n    float[] deviations = new\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpml98fmi1.d(71): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpml98fmi1.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmpml98fmi1.d(71):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpml98fmi1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the standard deviation.\n    Standard\
    \ deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_differences[i] = pow(number - mean, 2);\n\
    \    }\n    return sqrt(mean(squared_differences));\n}\n/*\n For a given array\
    \ of input numbers, calculate the variance.\n    Variance is the average of the\
    \ squared differences from the mean:\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n    float[] squared_differences = new float[numbers.length];\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsashp44.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsashp44.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the mean of the dataset.\n    >>>\
    \ mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n\
    {\n    return sum(numbers) / numbers.length;\n}\n/*\n For a given array of input\
    \ numbers, calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted\
    \ = numbers[];\n    std.algorithm.sort(sorted);\n    if (sorted.length % 2 ==\
    \ 0) {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length /\
    \ 2]) / 2;\n    }\n    else {\n        return sorted[sorted.length / 2];\n   \
    \ }\n}\n/*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprotf0zj7.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprotf0zj7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the standard deviation.\n    Standard\
    \ deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    std = sqrt(average(|x - x_mean|^2))\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        squared_deviations[i]\
    \ = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the variance.\n    Variance\
    \ is the average of the squared differences from the mean:\n    variance = average(|x\
    \ - x_mean|^2)\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n\
    \    \n*/\nfloat variance\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbe_c6q4f.d(68): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbe_c6q4f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = numbers[];\n\
    \    std.algorithm.sort(sorted_numbers);\n    if (sorted_numbers.length % 2 ==\
    \ 0)\n    {\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    }\n    else\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4xqfg2js.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xqfg2js.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n \
    \   float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n*/\nfloat mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = sort(numbers);\n    int middle = sorted_numbers.length / 2;\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[middle\
    \ - 1] + sorted_numbers[middle]) / 2;\n    }\n    else\n    {\n        return\
    \ sorted_numbers[middle];\n    }\n}\n/*\n For a given array of input numbers,\
    \ calculate the mode.\n    >>> mode([1.0, 2.0, 3.0\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9sefs9p.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9sefs9p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptcviz3l1.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmptcviz3l1.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptcviz3l1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(a => abs(a - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdh4xuyhn.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpdh4xuyhn.d(16): Error: template instance `map!((a)\
    \ => abs(a - mean))` template `map` is not defined\\n/tmp/tmpdh4xuyhn.d(17): Error:\
    \ function expected before `()`, not `mean` of type `float`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh4xuyhn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        differences[i] = abs(number - mean);\n    }\n    return\
    \ mean(differences);\n}\n/*\n For a given array of input numbers, calculate Median\
    \ Absolute Deviation\n    around the median of this dataset.\n    Median Absolute\
    \ Deviation is the median of the absolute difference between\n    each element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        differences[i] = abs(number - median);\n    }\n    return\
    \ median(differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[]\
    \ numbers) \n{\n    return sum(numbers) / numbers.length;\n}\n/*\n For a given\
    \ array of input numbers, calculate the median.\n    >>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted\
    \ = numbers[0..$];\n    std.algorithm.sort(sorted);\n    if (sorted.length % 2\
    \ == 0) {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    } else {\n        return sorted[sorted.length / 2];\n    }\n\
    }\n/*\n For a given array of input numbers, calculate the mode.\n    >>> mode([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(float[] numbers\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzl61omia.d(74): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzl61omia.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around a given centerpoint.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint:\n    MAD = average | x - centerpoint |\n    >>>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    1.5\n    \n*/\nfloat\
    \ mean_absolute_deviation(float[] numbers, float centerpoint) \n{\n    float[]\
    \ absolute_differences = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        absolute_differences[i] = abs(number - centerpoint);\n    }\n\
    \    return mean(absolute_differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute differences between\n\
    \    each element and the median of the dataset:\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - median);\n\
    \    }\n    return median(absolute_differences);\n}\n/*\n For a given array of\
    \ input numbers, calculate Median Absolute Deviation\n    around a given centerpoint.\n\
    \    Median Absolute Deviation is the median of the absolute differences between\n\
    \    each element and a centerpoint:\n    MAD = median | x - centerpoint |\n \
    \   >>> median_absolute_deviation([1.0, 2.\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qipbzfg.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qipbzfg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\n\
    float mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach (n; numbers)\
    \ \n    {\n        sum += n;\n    }\n    return sum / numbers.length;\n}\n/*\n\
    \ For a given array of input numbers, calculate the median of the dataset.\n \
    \   >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = sort(numbers);\n    if (sorted_numbers.length\
    \ % 2 == 0) \n    {\n        return (sorted_numbers[sorted_numbers.length / 2\
    \ - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    } \n    else \n\
    \    {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n\
    /*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers)\
    \ \n{\n    float[] counts = new float[numbers.length];\n    foreach (n; numbers)\
    \ \n    {\n        counts[n] += 1;\n    }\n    return max(counts);\n}\n/*\n For\
    \ a given array of input numbers, calculate the range of the dataset.\n    >>>\
    \ range([1.0, 2.0, 3.0, 4.0])\n    3.0\n*/\nfloat range(float[] numbers) \n{\n\
    \    float[] sorted_numbers = sort(numbers);\n    return sorted_numbers[sorted_numbers.length\
    \ - 1] - sorted_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhpht_fh.d(73): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpfhpht_fh.d(81): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfhpht_fh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7165flh.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpf7165flh.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpf7165flh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64zgt4sg.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64zgt4sg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \    {\n        abs_diff[i] = abs(v - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, v; numbers)\n    {\n        abs_diff[i]\
    \ = abs(v - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Mean Absolute Deviation\n    around the\
    \ mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n    float[] abs_diff = new float[numbers.length];\n \
    \   foreach (i, v; numbers)\n    {\n        abs_diff[i] = abs(v - mean);\n   \
    \ }\n    return mean(abs_diff);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptv3ftpst.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptv3ftpst.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1s2es5g.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpw1s2es5g.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw1s2es5g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n \
    \   float median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return median(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the standard deviation.\n    Standard deviation\
    \ is the square root of the average of the squared\n    differences from the mean:\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n*/\n\
    float standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_differences[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_differences));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance.\n    Variance is the average\
    \ of the squared differences from the mean:\n    >>> variance([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.6666666666666667\n*/\nfloat variance(float[] numbers) \n{\n   \
    \ float mean = mean(numbers);\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkos8xodp.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkos8xodp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pcm8n26.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pcm8n26.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzn5qf1z1.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpzn5qf1z1.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzn5qf1z1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) \n    {\n        differences[i] = abs(number - mean);\n    }\n    return\
    \ mean(differences);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmy8fnu3.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmppmy8fnu3.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppmy8fnu3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the average of the squared\n    deviations\
    \ from the mean.\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_deviations[i] = (number - mean) * (number\
    \ - mean);\n    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance.\n    Variance is the average\
    \ of the squared deviations from the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n   \n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0lal9yb.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0lal9yb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the mean of the dataset.\n    >>>\
    \ mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n\
    {\n    return sum(numbers) / numbers.length;\n}\n/*\n For a given array of input\
    \ numbers, calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted\
    \ = numbers[0 .. $].dup;\n    std.algorithm.sort(sorted);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    } else {\n        return sorted[sorted.length / 2];\n    }\n\
    }\n/*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_isb8v9y.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_isb8v9y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around a given centerpoint.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float centerpoint) \n{\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        absolute_deviations[i] = abs(number\
    \ - centerpoint);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a\
    \ given array of input numbers, calculate Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around a given centerpoint.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint:\n  \
    \  MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyv0cjk4v.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv0cjk4v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the mean of the dataset.\n    >>>\
    \ mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n\
    {\n    return sum(numbers) / numbers.length;\n}\n/*\n For a given array of input\
    \ numbers, calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted\
    \ = numbers[];\n    sort(sorted);\n    if (sorted.length % 2 == 0) {\n       \
    \ return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n  \
    \  }\n    else {\n        return sorted[sorted.length / 2];\n    }\n}\n/*\n For\
    \ a given array of input numbers, calculate the mode of the dataset.\n    >>>\
    \ mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9u075czs.d(75): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp9u075czs.d(75): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9u075czs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxunu9k_j.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpxunu9k_j.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxunu9k_j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bhjfwk4.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp2bhjfwk4.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2bhjfwk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = map!(a => abs(a - mean))(numbers);\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = map!(a\
    \ => abs(a - median))(numbers);\n    return mean(abs_diff);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the median\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = average | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] abs_diff = map!(a => abs(a\
    \ - median))(numbers);\n    return mean(abs_diff);\n}\n/*\n For a given array\
    \ of input numbers, calculate Mean Absolute Deviation\n    around the median of\
    \ this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = average | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] abs_diff = map!(\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbi3lecjy.d(65): Error: expression expected, not `unittest`\\\
    n/tmp/tmpbi3lecjy.d(66): Error: found `{` when expecting `)` following template\
    \ argument list\\n/tmp/tmpbi3lecjy.d(67): Error: semicolon expected, not `alias`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbi3lecjy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = map!((x) => abs(x - mean))(numbers);\n    return mean(diffs);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] diffs = map!((x)\
    \ => abs(x - median))(numbers);\n    return mean(diffs);\n}\n/*\n For a given\
    \ array of input numbers, calculate Mean Absolute Deviation\n    around the median\
    \ of this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = average | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] diffs = map!((x) => abs(x\
    \ - median))(numbers);\n    return mean(diffs);\n}\n/*\n For a given array of\
    \ input numbers, calculate Mean Absolute Deviation\n    around the median of this\
    \ dataset.\n    Mean Absolute Deviation is the average absolute difference between\
    \ each\n    element and a centerpoint (median in this case):\n    MAD = average\
    \ | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] diffs = map!((x) => abs\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgwdskh4.d(65): Error: found `unittest` when expecting `)` following\
    \ template argument list\\n/tmp/tmpsgwdskh4.d(66): Error: semicolon expected,\
    \ not `{`\\n/tmp/tmpsgwdskh4.d(73): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpsgwdskh4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!(abs)(numbers.map!(x => x - mean));\n \
    \   return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_around_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[] numbers)\
    \ \n{\n    float median = median(numbers);\n    float[] absolute_deviations =\
    \ map!(abs)(numbers.map!(x => x - median));\n    return mean(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation_around_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation_around_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = map!(abs)(numbers.map!(x => x - median));\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the mean of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (mean\
    \ in this case):\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxnd_zai.d(62): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpqxnd_zai.d(62): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxnd_zai.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) \n    {\n        abs_deviations[i] = abs(number - mean);\n    }\n \
    \   return mean(abs_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n   \
    \ 2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach\
    \ (number; numbers) \n    {\n        sum += number;\n    }\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = numbers[];\n    std.algorithm.sort(sorted_numbers);\n\
    \    if (sorted_numbers.length % 2 == 0) \n    {\n        float a = sorted_numbers[sorted_numbers.length\
    \ / 2 - 1];\n        float b = sorted_numbers[sorted_numbers.length / 2];\n  \
    \      return (a + b) / 2;\n    }\n    else \n    {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n For a given array of input numbers, calculate the mode\
    \ of the dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ mode(float[] numbers) \n{\n    float[] counts = new float[numbers.length];\n\
    \    foreach (i, number; numbers) \n    {\n        foreach (j, other_number; numbers)\
    \ \n        {\n            if (number == other_number) \n            {\n     \
    \           counts[i]++;\n            }\n        }\n    }\n    float max_count\
    \ = 0;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ku64hra.d(79): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ku64hra.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((float x) => abs(x - mean))(numbers);\n\
    \    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rfhotjy.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp2rfhotjy.d(16): Error: template instance `map!((float\
    \ x) => abs(x - mean))` template `map` is not defined\\n/tmp/tmp2rfhotjy.d(17):\
    \ Error: function expected before `()`, not `mean` of type `float`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rfhotjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n        absolute_deviations[i] = abs(number - mean);\n   \
    \ return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median\
    \ = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n        absolute_deviations[i] = abs(number\
    \ - median);\n    return median(absolute_deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0, 2.0,\
    \ 3.0, 4.0])\n    2.5\n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n\
    \    foreach (number; numbers)\n        sum += number;\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = sort(numbers);\n    if (sorted_numbers.length\
    \ % 2 == 0)\n        return (sorted_numbers[sorted_numbers.length / 2 - 1] + sorted_numbers[sorted_numbers.length\
    \ / 2]) / 2;\n    else\n        return sorted_numbers[sorted_numbers.length /\
    \ 2];\n}\n/*\n For a given array of input numbers, calculate the standard deviation\
    \ of the\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ri8lymy.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ri8lymy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around a given centerpoint.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    1.0\n   \
    \ \n*/\nfloat mean_absolute_deviation(float[] numbers, float centerpoint) \n{\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - centerpoint);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around a given centerpoint.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_med\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8131ghh.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8131ghh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        abs_deviations[i] = abs(numbers[i] - mean);\n\
    \    }\n    return mean(abs_deviations);\n}\n/*\n Calculate the mean of a dataset.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0.0;\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n/*\n\
    \ Calculate the median of a dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n \
    \   2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers\
    \ = sort(numbers);\n    if (sorted_numbers.length % 2 == 0) {\n        return\
    \ (sorted_numbers[sorted_numbers.length / 2] + sorted_numbers[sorted_numbers.length\
    \ / 2 - 1]) / 2;\n    }\n    else {\n        return sorted_numbers[sorted_numbers.length\
    \ / 2];\n    }\n}\n/*\n Calculate the mode of a dataset.\n    >>> mode([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = sort(numbers);\n    float[] counts = new float[sorted_numbers.length];\n\
    \    for (int i = 0; i < sorted_numbers.length; i++) {\n        counts[i] = 0;\n\
    \        for (int j = 0; j < sorted_numbers.length; j++) {\n            if (sorted_numbers[i]\
    \ == sorted_numbers[j]) {\n                counts[i]++;\n            }\n     \
    \   }\n    }\n    int max\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmjz3dn9k.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmpmjz3dn9k.d(71):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmjz3dn9k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1kb2lia9.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp1kb2lia9.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1kb2lia9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute difference between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - median);\n    }\n    return\
    \ median(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ standard deviation.\n    Standard deviation is the square root of the average\
    \ of the squared\n    deviations from the mean.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the variance.\n    Variance\
    \ is the average of the squared deviations from the mean.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] squared_deviations = new float[\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbpydx7pb.d(72): Error: expression expected, not `unittest`\\\
    n/tmp/tmpbpydx7pb.d(73): Error: found `{` when expecting `]`\\n/tmp/tmpbpydx7pb.d(74):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbpydx7pb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the standard deviation.\n    Standard\
    \ deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    std = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_differences\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) {\n        squared_differences[i]\
    \ = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_differences));\n\
    }\n/*\n For a given array of input numbers, calculate the variance.\n    Variance\
    \ is the average of the squared differences from the mean:\n    var = average\
    \ (x - x_mean)^2\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n\
    \    \n*/\nfloat variance(float[]\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6yqzi4pu.d(68): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6yqzi4pu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the median absolute deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the average of the squared\n    deviations\
    \ from the mean.\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        squared_deviations[i] = pow(number - mean, 2);\n\
    \    }\n    return sqrt(mean(squared_deviations));\n}\n/*\n For a given array\
    \ of input numbers, calculate the variance.\n    Variance is the average of the\
    \ squared deviations from the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n{\n    float\
    \ mean = mean(numbers);\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy765ww2n.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy765ww2n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpguuvaf__.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpguuvaf__.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpguuvaf__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_differences = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_differences[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_differences);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is the square root of the average of the squared\n    differences\
    \ from the mean:\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_differences[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_differences));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance.\n    Variance is the average\
    \ of the squared differences from the mean:\n    >>> variance([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers) \n\
    {\n    float mean =\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6oo_sih9.d(71): Error: expression expected, not `unittest`\\\
    n/tmp/tmp6oo_sih9.d(72): Error: semicolon expected, not `{`\\n/tmp/tmp6oo_sih9.d(79):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oo_sih9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        diffs[i] = abs(number - median);\n\
    \    }\n    return median(diffs);\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean of the absolute\n    difference between each element and\
    \ a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float center) \n{\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        diffs[i] = abs(number - center);\n\
    \    }\n    return mean(diffs);\n}\n/*\n For a given array of input numbers, calculate\
    \ the median of the absolute\n    difference between each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers, float center) \n{\n    float[] diffs = new float[\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpau31zmvn.d(68): Error: expression expected, not `unittest`\\\
    n/tmp/tmpau31zmvn.d(69): Error: found `{` when expecting `]`\\n/tmp/tmpau31zmvn.d(70):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpau31zmvn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = map!((float x) => abs(x - mean))(numbers);\n   \
    \ return mean(abs_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the standard deviation\n    around the mean of this dataset.\n    Standard deviation\
    \ is the square root of the average squared difference\n    between each element\
    \ and the mean:\n    std = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = map!((float x) => (x - mean) * (x - mean))(numbers);\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the standard error\n   \
    \ around the mean of this dataset.\n    Standard error is the standard deviation\
    \ divided by the square root of the\n    number of elements:\n    std_err = std\
    \ / sqrt(N)\n    >>> standard_error([1.0, 2.0, 3.0, 4.0])\n    0.6454972243679028\n\
    \    \n*/\nfloat standard_error(float[] numbers) \n{\n    float std = standard_deviation(numbers);\n\
    \    return std / sqrt(numbers.length);\n}\n/*\n For a given array of input numbers,\
    \ calculate the median absolute deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute differences between\n\
    \    each element and the median:\n    MAD = median | x - x_median |\n    >>>\
    \ median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_deviations\
    \ = map!((float x) => abs(x - median))(numbers);\n    return median\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm2g7u9pc.d(65): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpm2g7u9pc.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpm2g7u9pc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\n/*\n For a given array of input numbers, calculate the\
    \ Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (median in this case):\n    MAD = average | x - x_median |\n   \
    \ >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation_median(float[] numbers) \n{\n    float median =\
    \ median(numbers);\n    float[] deviations = new float[numbers.length];\n    foreach\
    \ (i, number; numbers)\n    {\n        deviations[i] = abs(number - median);\n\
    \    }\n    return mean(deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the mean of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (mean in this case):\n    MAD = median | x\
    \ - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean\
    \ = mean(numbers);\n    float[] deviations = new float[numbers.length];\n    foreach\
    \ (i, number; numbers)\n    {\n        deviations[i] = abs(number - mean);\n \
    \   }\n    return median(deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation_\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplh7lgsxb.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplh7lgsxb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Standard Deviation\n    around\
    \ the mean of this dataset.\n    Standard Deviation is the square root of the\
    \ variance of the dataset:\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = (number - mean) * (number - mean);\n    }\n    return sqrt(mean(deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ from the Mean:\n    var = average (x - x_mean)^2\n    >>> variance([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.6666666666666667\n    \n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphmhnsotf.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmhnsotf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvs3nd3h6.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs3nd3h6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] absolute_deviations = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        absolute_deviations[i] = abs(number\
    \ - median);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ mean of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ differences between\n    each element and a centerpoint (mean in this case):\n\
    \    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - mean);\n    }\n    return median(absolute_deviations);\n}\n/*\n\
    \ For a given array of input numbers, calculate Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute differences between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavxz010x.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavxz010x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation.\n \
    \   Standard deviation is a measure of how spread out a dataset is.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the variance.\n    Variance\
    \ is the average of the squared differences from the Mean.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n*/\nfloat variance(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n   \nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nfl0fiy.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nfl0fiy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ mean(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (median in this case):\n    MAD = average | x - x_median |\n   \
    \ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ mean_absolute_deviation_median(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - median))(numbers);\n  \
    \  return mean(absolute_deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the mean of this dataset.\n\
    \    Median Absolute Deviation is the median of absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = median | x - x_mean\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = map!((x) => abs(x - mean))(numbers);\n    return\
    \ median(absolute_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of absolute difference between each\n    element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation_median(float[] numbers) \n{\n    float median\
    \ = median(numbers);\n    float[] absolute\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5kkk3jj4.d(65): Error: semicolon expected, not `unittest`\\n/tmp/tmp5kkk3jj4.d(65):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5kkk3jj4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        absolute_deviations[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_deviations);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat mean(float[] numbers) \n{\n    float sum\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum +=\
    \ numbers[i];\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the median of the dataset.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = numbers.dup;\n    sorted_numbers.sort;\n    if (sorted_numbers.length\
    \ % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length / 2]\
    \ + sorted_numbers[sorted_numbers.length / 2 - 1]) / 2;\n    }\n    else\n   \
    \ {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n\
    \ For a given array of input numbers, calculate the mode of the dataset.\n   \
    \ >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers) \n\
    {\n    float[] sorted_numbers = numbers.dup;\n    sorted_numbers.sort;\n    int[]\
    \ counts = new int[sorted_numbers.length];\n    for (int i = 0; i < sorted_numbers.length;\
    \ i++)\n    {\n        counts[i] = 0;\n        for (int j = 0; j < sorted_numbers.length;\
    \ j\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4bdtinab.d(69): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmp4bdtinab.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp4bdtinab.d(77): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4bdtinab.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9inxdok0.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9inxdok0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9zfw6l3m.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp9zfw6l3m.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9zfw6l3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) \n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) \n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Standard Deviation\n  \
    \  around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average of the squared\n    differences between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float[] squared_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers) \n    {\n   \
    \     squared_deviations[i] = pow(number - mean, 2);\n    }\n    return sqrt(mean(squared_deviations));\n\
    }\n/*\n For a given array of input numbers, calculate the Variance\n    around\
    \ the mean of this dataset.\n    Variance is the average of the squared differences\
    \ between each element\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfrfxw9jb.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrfxw9jb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, v; numbers)\n\
    \        diffs[i] = abs(v - mean);\n    return mean(diffs);\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq1j07x2o.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpq1j07x2o.d(19): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq1j07x2o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n\
    \    foreach (number; numbers)\n    {\n        sum += number;\n    }\n    return\
    \ sum / numbers.length;\n}\n/*\n For a given array of input numbers, calculate\
    \ the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat\
    \ median(float[] numbers) \n{\n    float[] sorted = numbers.dup;\n    std.algorithm.sort(sorted);\n\
    \    if (sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n       \
    \ return sorted[sorted.length / 2];\n    }\n}\n/*\n For a given array\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3o8wfl25.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o8wfl25.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        deviations[i] = abs(numbers[i] - mean);\n  \
    \  }\n    return mean(deviations);\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around the mean of this dataset.\n  \
    \  Mean Absolute Deviation is the average absolute difference between each\n \
    \   element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers, float mean) \n{\n    float[] deviations\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        deviations[i] = abs(numbers[i] - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float mean, float[] deviations) \n{\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        deviations[i] = abs(numbers[i] - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjpxc1m11.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpxc1m11.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        diffs[i] = abs(number - median);\n\
    \    }\n    return median(diffs);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float\
    \ median = median(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        diffs[i] = abs(number - median);\n\
    \    }\n    return median(diffs);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3b4140wq.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3b4140wq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n        absolute_deviations[i] = abs(number - mean);\n   \
    \ return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4b0ef74q.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp4b0ef74q.d(19): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4b0ef74q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_deviations\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    absolute_deviations[i] = abs(number - median);\n    }\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7xm6v54.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7xm6v54.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvnqwdyi.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmphvnqwdyi.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphvnqwdyi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = map!((x) => abs(x - mean))(numbers);\n   \
    \ return mean(absolute_differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n \
    \   1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] absolute_differences = map!((x)\
    \ => abs(x - median))(numbers);\n    return mean(absolute_differences);\n}\n/*\n\
    \ For a given array of input numbers, calculate Mean Absolute Deviation\n    around\
    \ the median of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (median in this case):\n\
    \    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_differences\
    \ = map!((x) => abs(x - median))(numbers);\n    return mean(absolute_differences);\n\
    }\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2i8u6bk.d(64): Error: no identifier for declarator `float`\\\
    n/tmp/tmpp2i8u6bk.d(64): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2i8u6bk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the Standard Deviation\n    around the\
    \ mean of this dataset.\n    Standard Deviation is the square root of the average\
    \ of the squared\n    difference between each element and the mean:\n    SD =\
    \ sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[] numbers) \n\
    {\n    float mean = mean(numbers);\n    float[] squared_diff = new float[numbers.length];\n\
    \    foreach (i, number; numbers)\n    {\n        squared_diff[i] = pow(number\
    \ - mean, 2);\n    }\n    return sqrt(mean(squared_diff));\n}\n/*\n For a given\
    \ array of input numbers, calculate the Variance\n    around the mean of this\
    \ dataset.\n    Variance is the average of the squared difference between each\
    \ element\n    and the mean:\n    Variance = average (x - x_mean)\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkulctxod.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkulctxod.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    int midpoint = sorted_numbers.length / 2;\n    if (sorted_numbers.length\
    \ % 2 == 0)\n    {\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint])\
    \ / 2;\n    }\n    else\n    {\n        return sorted_numbers[midpoint];\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62lcna5j.d(75): Error: found `unittest` instead of statement\\\
    n/tmp/tmp62lcna5j.d(83): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62lcna5j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        abs_deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(abs_deviations);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\n\
    float mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach (number; numbers)\
    \ {\n        sum += number;\n    }\n    return sum / numbers.length;\n}\n/*\n\
    \ For a given array of input numbers, calculate the median of the dataset.\n \
    \   >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted_numbers = numbers[0..$];\n    std.algorithm.sort(sorted_numbers);\n\
    \    if (sorted_numbers.length % 2 == 0) {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    } else {\n \
    \       return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n For\
    \ a given array of input numbers, calculate the mode of the dataset.\n    >>>\
    \ mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat mode(float[] numbers) \n{\n \
    \   float[] sorted_numbers = numbers[0..$];\n    std.algorithm.sort(sorted_numbers);\n\
    \    float[] counts = new float[sorted_numbers.length];\n    foreach (i, number;\
    \ sorted_numbers) {\n        counts[i] = 0;\n        foreach (j, num; sorted_numbers)\
    \ {\n            if (number == num) {\n                counts[i]++;\n        \
    \    }\n        }\n    }\n    float\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_8m1273e.d(69): Error: no identifier for declarator `float`\\\
    n/tmp/tmp_8m1273e.d(69): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8m1273e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ {\n        diffs[i] = abs(number - mean);\n    }\n    return mean(diffs);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, number; numbers) {\n        diffs[i] = abs(number - median);\n\
    \    }\n    return median(diffs);\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n   \
    \ 2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the median of the dataset.\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted = sort(numbers);\n    if (sorted.length % 2\
    \ == 0) {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    }\n    else {\n        return sorted[sorted.length / 2];\n \
    \   }\n}\n/*\n For a given array of input numbers, calculate the mode of the dataset.\n\
    \    >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(float\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7btfa5wo.d(74): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7btfa5wo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoox7uh7e.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpoox7uh7e.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoox7uh7e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_deviations[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_deviations = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_deviations[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_deviations);\n}\n\
    /*\n For a given array of input numbers, calculate the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float\
    \ sum = 0.0;\n    foreach (number; numbers)\n    {\n        sum += number;\n \
    \   }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n\
    */\nfloat median(float[] numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n\
    \    if (sorted_numbers.length % 2 == 0)\n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else\n\
    \    {\n        return sorted_numbers[sorted_n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjm8sgjzi.d(74): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmpjm8sgjzi.d(82): Error: found `void` when expecting `,`\\n/tmp/tmpjm8sgjzi.d(82):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpjm8sgjzi.d(82): Error: expression\
    \ expected, not `}`\\n/tmp/tmpjm8sgjzi.d(82): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpjm8sgjzi.d(82): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmpjm8sgjzi.d(82): Error: found `End of File` when expecting `;`\
    \ following `return` statement\\n/tmp/tmpjm8sgjzi.d(82): Error: found `End of\
    \ File` when expecting `}` following compound statement\\n/tmp/tmpjm8sgjzi.d(82):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjm8sgjzi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_deviations[i] = abs(number - mean);\n \
    \   }\n    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprbeu268a.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmprbeu268a.d(20): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprbeu268a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_differences[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean(absolute_differences);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Mean Absolute Deviation\n    around the\
    \ median of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (median in this case):\n\
    \    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_from_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] absolute_differences\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        absolute_differences[i] = abs(numbers[i] - median);\n    }\n    return\
    \ mean(absolute_differences);\n}\n/*\n For a given array of input numbers, calculate\
    \ the Median Absolute Deviation\n    around the mean of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute differences between\n    each\
    \ element and a centerpoint (mean in this case):\n    MAD = median | x - x_mean\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        absolute_differences[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return median(absolute_differences);\n}\n/*\n For a given\
    \ array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Dev\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpxrujmz.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpxrujmz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_diff = new float[numbers.length];\n    foreach (i, number; numbers)\
    \ \n    {\n        abs_diff[i] = abs(number - mean);\n    }\n    return mean(abs_diff);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_diff = new\
    \ float[numbers.length];\n    foreach (i, number; numbers) \n    {\n        abs_diff[i]\
    \ = abs(number - median);\n    }\n    return median(abs_diff);\n}\n/*\n For a\
    \ given array of input numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return sum(numbers)\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate the\
    \ median.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = sort(numbers);\n    if (sorted_numbers.length\
    \ % 2 == 0) \n    {\n        return (sorted_numbers[sorted_numbers.length / 2\
    \ - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n    else \n \
    \   {\n        return sorted_numbers[sorted_numbers.length / 2];\n    }\n}\n/*\n\
    \ For a given array of input numbers, calculate the mode.\n   \nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxqktb4o.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxqktb4o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        absolute_differences[i] = abs(number - mean);\n\
    \    }\n    return mean(absolute_differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median = median(numbers);\n    float[] absolute_differences = new\
    \ float[numbers.length];\n    foreach (i, number; numbers)\n    {\n        absolute_differences[i]\
    \ = abs(number - median);\n    }\n    return median(absolute_differences);\n}\n\
    /*\n For a given array of input numbers, calculate the standard deviation\n  \
    \  around the mean of this dataset.\n    Standard deviation is the square root\
    \ of the average of the squared\n    differences from the mean:\n    std = sqrt(average\
    \ (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] squared_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers)\n    {\n        squared_differences[i] = pow(number - mean,\
    \ 2);\n    }\n    return sqrt(mean(squared_differences));\n}\n/*\n For a given\
    \ array of input numbers, calculate the variance\n    around the mean of this\
    \ dataset.\n    Variance is the average of the squared differences from the mean:\n\
    \    variance = average (x - x_mean)^2\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplsvue8_2.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplsvue8_2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers) {\n        deviations[i] = abs(number - mean);\n    }\n    return mean(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] deviations =\
    \ new float[numbers.length];\n    foreach (i, number; numbers) {\n        deviations[i]\
    \ = abs(number - median);\n    }\n    return median(deviations);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Median Absolute Deviation\n  \
    \  around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0,\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp69sevenk.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69sevenk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviations = new float[numbers.length];\n    foreach (i, number;\
    \ numbers)\n    {\n        deviations[i] = abs(number - mean);\n    }\n    return\
    \ mean(deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ayuh46x.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmp_ayuh46x.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_ayuh46x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, v; numbers)\
    \ {\n        differences[i] = abs(v - mean);\n    }\n    return mean(differences);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] differences =\
    \ new float[numbers.length];\n    foreach (i, v; numbers) {\n        differences[i]\
    \ = abs(v - median);\n    }\n    return median(differences);\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean of the dataset.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate the median of the dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n    \n*/\nfloat median(float[] numbers) \n{\n    float[] sorted = sort(numbers);\n\
    \    if (sorted.length % 2 == 0) {\n        return (sorted[$ / 2 - 1] + sorted[$\
    \ / 2]) / 2;\n    }\n    else {\n        return sorted[$ / 2];\n    }\n}\n/*\n\
    \ For a given array of input numbers, calculate the mode of the dataset.\n   \
    \ >>> mode([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mode(float[] numbers)\
    \ \n{\n    float[] counts = new\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf10pknnu.d(76): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpf10pknnu.d(76): Error: semicolon expected, not `unittest`\\n/tmp/tmpf10pknnu.d(76):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf10pknnu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
