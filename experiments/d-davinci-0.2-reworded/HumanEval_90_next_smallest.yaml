name: HumanEval_90_next_smallest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
  \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
  \ element of the array.\n    Return null if there is no such element.\n    >>> next_smallest([1L,\
  \ 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L, 4L, 3L, 2L])\n    2L\n\
  \    >>> next_smallest([])\n    None\n    >>> next_smallest([1L, 1L])\n    None\n\
  \    \n*/\nNullable!(long) next_smallest(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
  \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
  \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n    \
  \    assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result =\
  \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result =\
  \ candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get\
  \ == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
  }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
  \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (lst.length < 2)\n        return null;\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n\
    \    {\n        smallest = lst[1];\n        next_smallest = lst[0];\n    }\n \
    \   foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n \
    \           next_smallest = smallest;\n            smallest = e;\n        }\n\
    \        else if (e < next_smallest)\n        {\n            next_smallest = e;\n\
    \        }\n    }\n    return next_smallest;\n}", "{\n    if (lst.length == 0)\n\
    \        return null;\n    if (lst.length == 1)\n        return null;\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n   \
    \     if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min == min2)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n  \
    \      min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if\
    \ (e < min)\n        {\n            min2 = min;\n            min = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long second = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            second = min;\n         \
    \   min = e;\n        }\n        else if (e < second)\n        {\n           \
    \ second = e;\n        }\n    }\n    if (min == second)\n        return null;\n\
    \    return second;\n}", "{\n    if (lst.length < 2)\n        return null;\n \
    \   long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second = min;\n            min = e;\n        }\n     \
    \   else if (e < second)\n        {\n            second = e;\n        }\n    }\n\
    \    if (min == second)\n        return null;\n    return second;\n}", "{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        } \n  \
    \      else if (e < next_min) \n        {\n            next_min = e;\n       \
    \ }\n    }\n    return next_min;\n}\n/*", "{\n    if (lst.length < 2)\n      \
    \  return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 =\
    \ lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n\
    \            min2 = min;\n            min = e;\n        }\n        else if (e\
    \ < min2) \n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n\
    \        if (i < min) \n        {\n            min2 = min;\n            min =\
    \ i;\n        } \n        else if (i < min2) \n        {\n            min2 = i;\n\
    \        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return null;\n    }\n    auto min = minElement(lst);\n    auto min2 =\
    \ minElement(lst[1 .. $]);\n    if (min == min2) \n    {\n        return null;\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long second_min = lst[1];\n    if (min > second_min) \n \
    \   {\n        swap(min, second_min);\n    }\n    foreach (i, e; lst[2..$]) \n\
    \    {\n        if (e < min) \n        {\n            second_min = min;\n    \
    \        min = e;\n        } \n        else if (e < second_min) \n        {\n\
    \            second_min = e;\n        }\n    }\n    return second_min;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        }\n    \
    \    else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min)\n    {\n  \
    \      min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min == min2)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e\
    \ < min)\n        {\n            second_min = min;\n            min = e;\n   \
    \     }\n        else if (e < second_min)\n        {\n            second_min =\
    \ e;\n        }\n    }\n    if (min == second_min)\n        return null;\n   \
    \ return second_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n\
    \        if (i < min) \n        {\n            second_min = min;\n           \
    \ min = i;\n        } \n        else if (i < second_min) \n        {\n       \
    \     second_min = i;\n        }\n    }\n    if (min == second_min) \n    {\n\
    \        return null;\n    }\n    return second_min;\n}", "{\n    if (lst.length\
    \ < 2) return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if\
    \ (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$]) \n    {\n   \
    \     if (e < min1) \n        {\n            min2 = min1;\n            min1 =\
    \ e;\n        }\n        else if (e < min2) \n        {\n            min2 = e;\n\
    \        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n       \
    \ return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i,\
    \ e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n \
    \           min = e;\n        }\n        else if (e < min2)\n        {\n     \
    \       min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    long min = lst[0];\n    long min2 = lst[0];\n \
    \   foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 =\
    \ min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n\
    \            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n       \
    \ return null;\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n   \
    \     return null;\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            next_min =\
    \ min;\n            min = e;\n        }\n        else if (e < next_min)\n    \
    \    {\n            next_min = e;\n        }\n    }\n    return next_min;\n}",
  "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < min)\n        {\n            min2 = min;\n            min = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        } \n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if\
    \ (e < min) \n        {\n            min2 = min;\n            min = e;\n     \
    \   }\n        else if (e < min2) \n        {\n            min2 = e;\n       \
    \ }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long second = lst[1];\n    foreach (i, e;\
    \ lst)\n    {\n        if (e < min)\n        {\n            second = min;\n  \
    \          min = e;\n        }\n        else if (e < second)\n        {\n    \
    \        second = e;\n        }\n    }\n    if (min == second)\n        return\
    \ null;\n    return second;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   second_min = min;\n            min = e;\n        }\n        else if (e < second_min)\
    \ \n        {\n            second_min = e;\n        }\n    }\n    if (min == second_min)\n\
    \        return null;\n    return second_min;\n}\n/*", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest\
    \ = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n     \
    \   {\n            next_smallest = smallest;\n            smallest = v;\n    \
    \    }\n        else if (v < next_smallest)\n        {\n            next_smallest\
    \ = v;\n        }\n    }\n    if (smallest == next_smallest)\n        return null;\n\
    \    return next_smallest;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n  \
    \  {\n        if (v < min)\n        {\n            min2 = min;\n            min\
    \ = v;\n        }\n        else if (v < min2)\n        {\n            min2 = v;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n  \
    \  long min = lst[0];\n    long secondMin = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            secondMin = min;\n      \
    \      min = e;\n        }\n        else if (e < secondMin)\n        {\n     \
    \       secondMin = e;\n        }\n    }\n    if (min == secondMin)\n        return\
    \ null;\n    return secondMin;\n}", "{\n    if (lst.length < 2) \n    {\n    \
    \    return null;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min\
    \ = min;\n            min = i;\n        } \n        else if (i < second_min) \n\
    \        {\n            second_min = i;\n        }\n    }\n    if (min == second_min)\
    \ \n    {\n        return null;\n    }\n    return second_min;\n}\n/*", "{\n \
    \   if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < min)\n        {\n            min2 = min;\n            min = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return\
    \ null;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n  \
    \          min = i;\n        } \n        else if (i < min2) \n        {\n    \
    \        min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   next_min = min;\n            min = e;\n        } \n        else if (e < next_min)\
    \ \n        {\n            next_min = e;\n        }\n    }\n    return next_min;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min) return null;\n    return second_min;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        }\n    \
    \    else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n\
    \        if (v < min)\n        {\n            min2 = min;\n            min = v;\n\
    \        }\n        else if (v < min2)\n        {\n            min2 = v;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    if (smallest > second_smallest)\n   \
    \ {\n        smallest = lst[1];\n        second_smallest = lst[0];\n    }\n  \
    \  foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n  \
    \          second_smallest = smallest;\n            smallest = e;\n        }\n\
    \        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return second_smallest;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second = lst[1];\n\
    \    if (min > second)\n    {\n        min = second;\n        second = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n\
    \            second = min;\n            min = e;\n        }\n        else if (e\
    \ < second)\n        {\n            second = e;\n        }\n    }\n    return\
    \ second;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n       \
    \ if (v < min)\n        {\n            min2 = min;\n            min = v;\n   \
    \     }\n        else if (v < min2)\n        {\n            min2 = v;\n      \
    \  }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n}",
  "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n  \
    \  {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest) \n\
    \        {\n            second_smallest = e;\n        }\n    }\n    if (smallest\
    \ == second_smallest) \n    {\n        return null;\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            min2 = min;\n            min = i;\n\
    \        } \n        else if (i < min2) \n        {\n            min2 = i;\n \
    \       }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = minElement(lst);\n    long min2 = min;\n    foreach (i;\
    \ lst)\n    {\n        if (i < min2 && i != min)\n            min2 = i;\n    }\n\
    \    if (min2 == min)\n        return null;\n    return min2;\n}", "{\n    if\
    \ (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2) \n    {\n        return null;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            second_min = min;\n            min =\
    \ i;\n        }\n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i,\
    \ e; lst)\n    {\n        if (e < min)\n        {\n            second_min = min;\n\
    \            min = e;\n        }\n        else if (e < second_min)\n        {\n\
    \            second_min = e;\n        }\n    }\n    if (min == second_min)\n \
    \       return null;\n    return second_min;\n}", "{\n    if (lst.length < 2)\
    \ \n    {\n        return null;\n    }\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n\
    \            min2 = min;\n            min = i;\n        } \n        else if (i\
    \ < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        }\n    \
    \    else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n   \
    \     if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n\
    \    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e;\
    \ lst[2..$])\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ second_min = min;\n            min = e;\n        }\n        else if (e < second_min)\n\
    \        {\n            second_min = e;\n        }\n    }\n    if (min == second_min)\n\
    \        return null;\n    return second_min;\n}\n/*", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, x; lst[2..$])\n    {\n        if (x < min1)\n        {\n\
    \            min2 = min1;\n            min1 = x;\n        }\n        else if (x\
    \ < min2)\n        {\n            min2 = x;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n       \
    \ if (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\
    \ \n    {\n        if (e < min) \n        {\n            min2 = min;\n       \
    \     min = e;\n        }\n        else if (e < min2) \n        {\n          \
    \  min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length <\
    \ 2)\n        return null;\n    long min = lst[0];\n    long second = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ second = min;\n            min = e;\n        }\n        else if (e < second)\n\
    \        {\n            second = e;\n        }\n    }\n    if (min == second)\n\
    \        return null;\n    return second;\n}", "{\n    if (lst.length < 2)\n \
    \       return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min == min2)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n \
    \   {\n        if (e < min) \n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2) \n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if\
    \ (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n\
    \    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n    \
    \        min2 = min1;\n            min1 = e;\n        }\n        else if (e <\
    \ min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n\
    \        if (e < min) \n        {\n            next_min = min;\n            min\
    \ = e;\n        } \n        else if (e < next_min) \n        {\n            next_min\
    \ = e;\n        }\n    }\n    return next_min;\n}", "{\n    if (lst.length < 2)\
    \ \n    {\n        return null;\n    }\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    if (min2 < min) \n    {\n        min = min2;\n        min2 =\
    \ lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        } \n   \
    \     else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}\n/*", "{\n    if (lst.length < 2) return null;\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n   \
    \     if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n \
    \   {\n        if (e < min) \n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2) \n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n\
    \            min2 = min1;\n            min1 = e;\n        }\n        else if (e\
    \ < min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second = long.max;\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            second = min;\n            min = i;\n        }\n     \
    \   else if (i < second)\n        {\n            second = i;\n        }\n    }\n\
    \    if (second == long.max)\n        return null;\n    return second;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min1\
    \ = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1\
    \ = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n  \
    \  {\n        if (e < min1)\n        {\n            min2 = min1;\n           \
    \ min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return null;\n    }\n    long min1 = lst[0];\n    long min2 =\
    \ lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n        min2\
    \ = lst[0];\n    }\n    foreach (i, elem; lst[2..$]) \n    {\n        if (elem\
    \ < min1) \n        {\n            min2 = min1;\n            min1 = elem;\n  \
    \      } \n        else if (elem < min2) \n        {\n            min2 = elem;\n\
    \        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return null;\n    }\n    else \n    {\n        long min = lst[0];\n \
    \       long min2 = lst[1];\n        if (min > min2) \n        {\n           \
    \ min = min2;\n            min2 = lst[0];\n        }\n        foreach (i, e; lst[2..$])\
    \ \n        {\n            if (e < min) \n            {\n                min2\
    \ = min;\n                min = e;\n            }\n            else if (e < min2)\
    \ \n            {\n                min2 = e;\n            }\n        }\n     \
    \   return min2;\n    }\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            second_min = min;\n     \
    \       min = e;\n        }\n        else if (e < second_min)\n        {\n   \
    \         second_min = e;\n        }\n    }\n    if (min == second_min)\n    \
    \    return null;\n    return second_min;\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return null;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2) \n     \
    \   {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n   \
    \ if (lst.length < 2) return null;\n    auto min = lst[0];\n    auto min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\n/*",
  "{\n    if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n   \
    \ long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n \
    \       min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if\
    \ (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n   \
    \     }\n        else if (e < min2)\n        {\n            min2 = e;\n      \
    \  }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst)\n    {\n     \
    \   if (e < min)\n        {\n            next_min = min;\n            min = e;\n\
    \        }\n        else if (e < next_min)\n        {\n            next_min =\
    \ e;\n        }\n    }\n    return next_min;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n      \
    \      next_smallest = smallest;\n            smallest = e;\n        }\n     \
    \   else if (e < next_smallest)\n        {\n            next_smallest = e;\n \
    \       }\n    }\n    if (smallest == next_smallest)\n        return null;\n \
    \   return next_smallest;\n}\n/*", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    if (min == min2)\n        return null;\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n   \
    \     if (e < min)\n        {\n            second_min = min;\n            min\
    \ = e;\n        }\n        else if (e < second_min)\n        {\n            second_min\
    \ = e;\n        }\n    }\n    if (min == second_min)\n        return null;\n \
    \   return second_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min == min2)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    \n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    \n    if (smallest > second_smallest)\n\
    \    {\n        smallest = lst[1];\n        second_smallest = lst[0];\n    }\n\
    \    \n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n     \
    \   {\n            second_smallest = smallest;\n            smallest = e;\n  \
    \      }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    \n    return second_smallest;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest\
    \ = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n     \
    \   {\n            next_smallest = smallest;\n            smallest = e;\n    \
    \    }\n        else if (e < next_smallest)\n        {\n            next_smallest\
    \ = e;\n        }\n    }\n    if (smallest == next_smallest)\n        return null;\n\
    \    return next_smallest;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n\
    \        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min1)\n        {\n            min2 = min1;\n         \
    \   min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    if\
    \ (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n    }\n  \
    \  foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n       \
    \     min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2) \n    {\n        return null;\n    }\n    long min =\
    \ lst[0];\n    long next_min = lst[1];\n    for (long i = 1; i < lst.length; i++)\
    \ \n    {\n        if (lst[i] < min) \n        {\n            next_min = min;\n\
    \            min = lst[i];\n        } \n        else if (lst[i] < next_min) \n\
    \        {\n            next_min = lst[i];\n        }\n    }\n    if (min == next_min)\
    \ \n    {\n        return null;\n    }\n    return next_min;\n}\n/*", "{\n   \
    \ if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n   \
    \     if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    if (min == min2)\n        return null;\n    return\
    \ min2;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n    long min\
    \ = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n \
    \       if (e < min)\n        {\n            second_min = min;\n            min\
    \ = e;\n        }\n        else if (e < second_min)\n        {\n            second_min\
    \ = e;\n        }\n    }\n    if (min == second_min)\n        return null;\n \
    \   return second_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n\
    \        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min1)\n        {\n            min2 = min1;\n         \
    \   min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n       \
    \ {\n            second_smallest = smallest;\n            smallest = e;\n    \
    \    }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    if (smallest == second_smallest)\n        return\
    \ null;\n    return second_smallest;\n}", "{\n    if (lst.length < 2)\n      \
    \  return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return null;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n\
    \            min = i;\n        } \n        else if (i < second_min) \n       \
    \ {\n            second_min = i;\n        }\n    }\n    if (min == second_min)\
    \ \n    {\n        return null;\n    }\n    return second_min;\n}", "{\n    if\
    \ (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n      \
    \  if (x < min1) \n        {\n            min2 = min1;\n            min1 = x;\n\
    \        } \n        else if (x < min2) \n        {\n            min2 = x;\n \
    \       }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return null;\n    }\n    else \n    {\n        long min = lst[0];\n \
    \       long min2 = lst[1];\n        foreach (i; lst) \n        {\n          \
    \  if (i < min) \n            {\n                min2 = min;\n               \
    \ min = i;\n            }\n            else if (i < min2) \n            {\n  \
    \              min2 = i;\n            }\n        }\n        return min2;\n   \
    \ }\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n       \
    \ if (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n\
    \    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i,\
    \ e; lst[2..$])\n    {\n        if (e < min1)\n        {\n            min2 = min1;\n\
    \            min1 = e;\n        }\n        else if (e < min2)\n        {\n   \
    \         min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n\
    \            min2 = min1;\n            min1 = e;\n        }\n        else if (e\
    \ < min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, item; lst)\n    {\n        if (item\
    \ < min)\n        {\n            min2 = min;\n            min = item;\n      \
    \  }\n        else if (item < min2)\n        {\n            min2 = item;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e\
    \ < min)\n        {\n            second_min = min;\n            min = e;\n   \
    \     }\n        else if (e < second_min)\n        {\n            second_min =\
    \ e;\n        }\n    }\n    if (min == second_min)\n        return null;\n   \
    \ return second_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\
    \ \n    {\n        if (e < min) \n        {\n            second_min = min;\n \
    \           min = e;\n        }\n        else if (e < second_min) \n        {\n\
    \            second_min = e;\n        }\n    }\n    if (min == second_min)\n \
    \       return null;\n    return second_min;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i; 1..lst.length) \n    {\n        if (lst[i]\
    \ < min) \n        {\n            second_min = min;\n            min = lst[i];\n\
    \        } \n        else if (lst[i] < second_min) \n        {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (min == second_min) \n    {\n        return\
    \ null;\n    }\n    return second_min;\n}", "{\n    if (lst.length < 2)\n    \
    \    return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n      \
    \      second_smallest = smallest;\n            smallest = e;\n        }\n   \
    \     else if (e < second_smallest)\n        {\n            second_smallest =\
    \ e;\n        }\n    }\n    if (smallest == second_smallest)\n        return null;\n\
    \    return second_smallest;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i,\
    \ e; lst) \n    {\n        if (e < min) \n        {\n            next_min = min;\n\
    \            min = e;\n        } \n        else if (e < next_min) \n        {\n\
    \            next_min = e;\n        }\n    }\n    return next_min;\n}", "{\n \
    \   if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n      \
    \  {\n            min2 = min;\n            min = i;\n        }\n        else if\
    \ (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    if (smallest\
    \ == second_smallest)\n        return null;\n    return second_smallest;\n}",
  "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n\
    \        if (e < smallest) \n        {\n            next_smallest = smallest;\n\
    \            smallest = e;\n        } \n        else if (e < next_smallest) \n\
    \        {\n            next_smallest = e;\n        }\n    }\n    if (smallest\
    \ == next_smallest) \n    {\n        return null;\n    }\n    return next_smallest;\n\
    }\n/*", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n\
    \        if (i < min) \n        {\n            min2 = min;\n            min =\
    \ i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n\
    \        }\n    }\n    return min2;\n}", "{\n    long min = long.max;\n    long\
    \ min2 = long.max;\n    foreach(l; lst)\n    {\n        if(l < min)\n        {\n\
    \            min2 = min;\n            min = l;\n        }\n        else if(l <\
    \ min2)\n        {\n            min2 = l;\n        }\n    }\n    if(min2 == long.max)\n\
    \    {\n        return null;\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n      \
    \  {\n            min2 = min;\n            min = i;\n        }\n        else if\
    \ (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        }\n    \
    \    else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest\
    \ > second_smallest)\n    {\n        smallest = lst[1];\n        second_smallest\
    \ = lst[0];\n    }\n    foreach (i, val; lst[2..$])\n    {\n        if (val <\
    \ smallest)\n        {\n            second_smallest = smallest;\n            smallest\
    \ = val;\n        }\n        else if (val < second_smallest)\n        {\n    \
    \        second_smallest = val;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2) \n        {\n            min2 = i;\n  \
    \      }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n \
    \       return null;\n    }\n    long min = lst[0];\n    long next_min = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   next_min = min;\n            min = e;\n        }\n        else if (e < next_min)\
    \ \n        {\n            next_min = e;\n        }\n    }\n    if (min == next_min)\
    \ \n    {\n        return null;\n    }\n    return next_min;\n}", "{\n    Nullable!(long)\
    \ result = null;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n  \
    \          min = i;\n        }\n        else if (i < min2) \n        {\n     \
    \       min2 = i;\n        }\n    }\n    if (min2 != min) \n    {\n        result\
    \ = min2;\n    }\n    return result;\n}", "{\n    if (lst.length < 2)\n      \
    \  return null;\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach\
    \ (i, x; lst) \n    {\n        if (x < min) \n        {\n            second_min\
    \ = min;\n            min = x;\n        }\n        else if (x < second_min) \n\
    \        {\n            second_min = x;\n        }\n    }\n    if (min == second_min)\n\
    \        return null;\n    return second_min;\n}", "{\n    if (lst.length < 2)\
    \ return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i,\
    \ e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n \
    \           min = e;\n        }\n        else if (e < min2)\n        {\n     \
    \       min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    if (min > second_min)\n    {\n        min = lst[1];\n        second_min =\
    \ lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    return second_min;\n}", "{\n    if (lst.length < 2)\n    \
    \    return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i,\
    \ item; lst) \n    {\n        if (item < min) \n        {\n            second_min\
    \ = min;\n            min = item;\n        }\n        else if (item < second_min)\
    \ \n        {\n            second_min = item;\n        }\n    }\n    if (min ==\
    \ second_min) \n    {\n        return Nullable!(long).init;\n    }\n    return\
    \ second_min;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n\
    \        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$])\
    \ \n    {\n        if (x < min) \n        {\n            min2 = min;\n       \
    \     min = x;\n        } \n        else if (x < min2) \n        {\n         \
    \   min2 = x;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    if (min2 == min)\n   \
    \     return null;\n    return min2;\n}", "{\n    if (lst.length < 2)\n      \
    \  return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long secondMin = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e <\
    \ min)\n        {\n            secondMin = min;\n            min = e;\n      \
    \  }\n        else if (e < secondMin)\n        {\n            secondMin = e;\n\
    \        }\n    }\n    if (min == secondMin)\n        return null;\n    return\
    \ secondMin;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long\
    \ smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\
    \ \n    {\n        if (e < smallest) \n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        } \n        else if (e < second_smallest)\
    \ \n        {\n            second_smallest = e;\n        }\n    }\n    return\
    \ second_smallest;\n}", "{\n    if (lst.length < 2)\n        return null;\n  \
    \  long min = lst[0];\n    long second = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            second = min;\n           \
    \ min = e;\n        }\n        else if (e < second)\n        {\n            second\
    \ = e;\n        }\n    }\n    if (min == second)\n        return null;\n    return\
    \ second;\n}", "{\n    if (lst.length < 2) \n    {\n        return null;\n   \
    \ }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n\
    \    {\n        if (i < min) \n        {\n            min2 = min;\n          \
    \  min = i;\n        } \n        else if (i < min2) \n        {\n            min2\
    \ = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long second = lst[1];\n   \
    \ foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            second\
    \ = min;\n            min = e;\n        }\n        else if (e < second)\n    \
    \    {\n            second = e;\n        }\n    }\n    if (min == second)\n  \
    \      return null;\n    return second;\n}\n/*", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            min2 = min;\n            min = e;\n        }\n    \
    \    else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2) \n        {\n            min2 = i;\n  \
    \      }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long nmin = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            nmin = min;\n           \
    \ min = e;\n        }\n        else if (e < nmin)\n        {\n            nmin\
    \ = e;\n        }\n    }\n    if (min == nmin)\n        return null;\n    return\
    \ nmin;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if\
    \ (e < min) \n        {\n            min2 = min;\n            min = e;\n     \
    \   }\n        else if (e < min2) \n        {\n            min2 = e;\n       \
    \ }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < min)\n        {\n            min2 = min;\n            min = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    if (min2 == min)\n        return null;\n    return min2;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst)\n    {\n     \
    \   if (e < min)\n        {\n            next_min = min;\n            min = e;\n\
    \        }\n        else if (e < next_min)\n        {\n            next_min =\
    \ e;\n        }\n    }\n    return next_min;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n  \
    \      return null;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min\
    \ = min;\n            min = i;\n        } \n        else if (i < second_min) \n\
    \        {\n            second_min = i;\n        }\n    }\n    if (min == second_min)\
    \ \n    {\n        return null;\n    }\n    return second_min;\n}", "{\n    if\
    \ (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n\
    \            min2 = min;\n            min = v;\n        }\n        else if (v\
    \ < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2 ==\
    \ min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst) \n    {\n        if (e < min) \n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2) \n        {\n   \
    \         min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ second = min;\n            min = e;\n        }\n        else if (e < second)\n\
    \        {\n            second = e;\n        }\n    }\n    if (min == second)\n\
    \        return null;\n    return second;\n}", "{\n    Nullable!(long) result\
    \ = null;\n    if (lst.length > 1) \n    {\n        long min = lst[0];\n     \
    \   long second_min = lst[1];\n        if (min > second_min) \n        {\n   \
    \         min = lst[1];\n            second_min = lst[0];\n        }\n       \
    \ foreach (i; 2..lst.length) \n        {\n            if (lst[i] < min) \n   \
    \         {\n                second_min = min;\n                min = lst[i];\n\
    \            } \n            else if (lst[i] < second_min) \n            {\n \
    \               second_min = lst[i];\n            }\n        }\n        if (min\
    \ != second_min) \n        {\n            result = second_min;\n        }\n  \
    \  }\n    return result;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n \
    \   {\n        if (e < min) \n        {\n            min2 = min;\n           \
    \ min = e;\n        } \n        else if (e < min2) \n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return null;\n    }\n    auto min = lst[0];\n    auto second_min\
    \ = lst[1];\n    if (min > second_min) \n    {\n        min = second_min;\n  \
    \      second_min = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n  \
    \      if (e < min) \n        {\n            second_min = min;\n            min\
    \ = e;\n        } \n        else if (e < second_min) \n        {\n           \
    \ second_min = e;\n        }\n    }\n    return second_min;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n   \
    \ }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n \
    \           min2 = min;\n            min = e;\n        }\n        else if (e <\
    \ min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min1\
    \ = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1\
    \ = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n  \
    \  {\n        if (e < min1)\n        {\n            min2 = min1;\n           \
    \ min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n \
    \   if (min > next_min)\n    {\n        min = next_min;\n        next_min = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n\
    \            next_min = min;\n            min = e;\n        }\n        else if\
    \ (e < next_min)\n        {\n            next_min = e;\n        }\n    }\n   \
    \ return next_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n  \
    \  long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst) \n   \
    \ {\n        if (e < min) \n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2) \n        {\n            min2 =\
    \ e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return null;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n\
    \            min = i;\n        }\n        else if (i < second_min) \n        {\n\
    \            second_min = i;\n        }\n    }\n    if (min == second_min) \n\
    \    {\n        return null;\n    }\n    return second_min;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n\
    \            min2 = min1;\n            min1 = e;\n        }\n        else if (e\
    \ < min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n       \
    \ if (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min)\n\
    \    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e;\
    \ lst[2..$])\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\n/*",
  "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst) \n    {\n  \
    \      if (e < min) \n        {\n            second_min = min;\n            min\
    \ = e;\n        }\n        else if (e < second_min) \n        {\n            second_min\
    \ = e;\n        }\n    }\n    if (min == second_min)\n        return null;\n \
    \   return second_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n       \
    \ return null;\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach\
    \ (i, e; lst) \n    {\n        if (e < min) \n        {\n            second_min\
    \ = min;\n            min = e;\n        }\n        else if (e < second_min) \n\
    \        {\n            second_min = e;\n        }\n    }\n    if (min == second_min)\n\
    \        return null;\n    return second_min;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if\
    \ (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n\
    \    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n    \
    \        min2 = min1;\n            min1 = e;\n        }\n        else if (e <\
    \ min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2) \n        {\n            min2 = i;\n  \
    \      }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long second = lst[1];\n    foreach (i, e;\
    \ lst)\n    {\n        if (e < min)\n        {\n            second = min;\n  \
    \          min = e;\n        }\n        else if (e < second)\n        {\n    \
    \        second = e;\n        }\n    }\n    if (min == second)\n        return\
    \ null;\n    return second;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min)\n    {\n\
    \        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n \
    \   foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            next_min\
    \ = min;\n            min = e;\n        }\n        else if (e < next_min)\n  \
    \      {\n            next_min = e;\n        }\n    }\n    if (min == next_min)\n\
    \        return null;\n    return next_min;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n       \
    \ {\n            second_smallest = smallest;\n            smallest = e;\n    \
    \    }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    if (smallest == second_smallest)\n        return\
    \ null;\n    return second_smallest;\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return null;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2\
    \ = min;\n            min = i;\n        } \n        else if (i < min2) \n    \
    \    {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\n/*", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   next_min = min;\n            min = e;\n        }\n        else if (e < next_min)\
    \ \n        {\n            next_min = e;\n        }\n    }\n    return next_min;\n\
    }\n/*", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n\
    \            min2 = min1;\n            min1 = e;\n        }\n        else if (e\
    \ < min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$])\
    \ \n    {\n        if (e < min1) \n        {\n            min2 = min1;\n     \
    \       min1 = e;\n        }\n        else if (e < min2) \n        {\n       \
    \     min2 = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long second = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ second = min;\n            min = e;\n        }\n        else if (e < second)\n\
    \        {\n            second = e;\n        }\n    }\n    if (min == second)\n\
    \        return null;\n    return second;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
