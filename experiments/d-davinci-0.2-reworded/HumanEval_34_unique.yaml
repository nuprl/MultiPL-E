name: HumanEval_34_unique
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
  \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
  \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n"
tests: "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
  \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
completions: ["{\n    long[] ret = new long[l.length];\n    long[] ret2 = new long[l.length];\n\
    \    long[] ret3 = new long[l.length];\n    long[] ret4 = new long[l.length];\n\
    \    long[] ret5 = new long[l.length];\n    long[] ret6 = new long[l.length];\n\
    \    long[] ret7 = new long[l.length];\n    long[] ret8 = new long[l.length];\n\
    \    long[] ret9 = new long[l.length];\n    long[] ret10 = new long[l.length];\n\
    \    long[] ret11 = new long[l.length];\n    long[] ret12 = new long[l.length];\n\
    \    long[] ret13 = new long[l.length];\n    long[] ret14 = new long[l.length];\n\
    \    long[] ret15 = new long[l.length];\n    long[] ret16 = new long[l.length];\n\
    \    long[] ret17 = new long[l.length];\n    long[] ret18 = new long[l.length];\n\
    \    long[] ret19 = new long[l.length];\n    long[] ret20 = new long[l.length];\n\
    \    long[] ret21 = new long[l.length];\n    long[] ret22 = new long[l.length];\n\
    \    long[] ret23 = new long[l.length];\n    long[] ret24 = new long[l.length];\n\
    \    long[] ret25 = new long[l.length];\n    long[] ret26 = new long[l.length];\n\
    \    long[] ret27 = new long[l.length];\n    long[] ret28 = new long[l.length];\n\
    \    long[] ret29 = new long[l.length];\n    long[] ret30 = new long[l.length];\n\
    \    long[] ret31 = new long[l.length];\n    long[] ret32 = new long[l.length];\n\
    \    long[] ret33 = new long[l.length];\n    long[] ret34 = new long[l.length];\n\
    \    long[] ret35 = new long[l.length];\n    long[] ret36 = new long[l.length];\n\
    \    long[] ret37 =", "{\n    long[] ret = new long[l.length];\n    long[] ret2\
    \ = new long[l.length];\n    long[] ret3 = new long[l.length];\n    long[] ret4\
    \ = new long[l.length];\n    long[] ret5 = new long[l.length];\n    long[] ret6\
    \ = new long[l.length];\n    long[] ret7 = new long[l.length];\n    long[] ret8\
    \ = new long[l.length];\n    long[] ret9 = new long[l.length];\n    long[] ret10\
    \ = new long[l.length];\n    long[] ret11 = new long[l.length];\n    long[] ret12\
    \ = new long[l.length];\n    long[] ret13 = new long[l.length];\n    long[] ret14\
    \ = new long[l.length];\n    long[] ret15 = new long[l.length];\n    long[] ret16\
    \ = new long[l.length];\n    long[] ret17 = new long[l.length];\n    long[] ret18\
    \ = new long[l.length];\n    long[] ret19 = new long[l.length];\n    long[] ret20\
    \ = new long[l.length];\n    long[] ret21 = new long[l.length];\n    long[] ret22\
    \ = new long[l.length];\n    long[] ret23 = new long[l.length];\n    long[] ret24\
    \ = new long[l.length];\n    long[] ret25 = new long[l.length];\n    long[] ret26\
    \ = new long[l.length];\n    long[] ret27 = new long[l.length];\n    long[] ret28\
    \ = new long[l.length];\n    long[] ret29 = new long[l.length];\n    long[] ret30\
    \ = new long[l.length];\n    long[] ret31 = new long[l.length];\n    long[] ret32\
    \ = new long[l.length];\n    long[] ret33 = new long[l.length];\n    long[] ret34\
    \ = new long[l.length];\n    long[] ret35 = new long[l.length];\n    long[] ret36\
    \ = new long[l.length];\n    long[] ret37 =", "{\n    return std.algorithm.uniq(l);\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret =\
    \ new long[l.length];\n    long[] ret2 = new long[l.length];\n    long[] ret3\
    \ = new long[l.length];\n    long[] ret4 = new long[l.length];\n    long[] ret5\
    \ = new long[l.length];\n    long[] ret6 = new long[l.length];\n    long[] ret7\
    \ = new long[l.length];\n    long[] ret8 = new long[l.length];\n    long[] ret9\
    \ = new long[l.length];\n    long[] ret10 = new long[l.length];\n    long[] ret11\
    \ = new long[l.length];\n    long[] ret12 = new long[l.length];\n    long[] ret13\
    \ = new long[l.length];\n    long[] ret14 = new long[l.length];\n    long[] ret15\
    \ = new long[l.length];\n    long[] ret16 = new long[l.length];\n    long[] ret17\
    \ = new long[l.length];\n    long[] ret18 = new long[l.length];\n    long[] ret19\
    \ = new long[l.length];\n    long[] ret20 = new long[l.length];\n    long[] ret21\
    \ = new long[l.length];\n    long[] ret22 = new long[l.length];\n    long[] ret23\
    \ = new long[l.length];\n    long[] ret24 = new long[l.length];\n    long[] ret25\
    \ = new long[l.length];\n    long[] ret26 = new long[l.length];\n    long[] ret27\
    \ = new long[l.length];\n    long[] ret28 = new long[l.length];\n    long[] ret29\
    \ = new long[l.length];\n    long[] ret30 = new long[l.length];\n    long[] ret31\
    \ = new long[l.length];\n    long[] ret32 = new long[l.length];\n    long[] ret33\
    \ = new long[l.length];\n    long[] ret34 = new long[l.length];\n    long[] ret35\
    \ = new long[l.length];\n    long[] ret36 = new long[l.length];\n    long[] ret37\
    \ =", "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i in result)\n            continue;\n        result[count]\
    \ = i;\n        count++;\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    ret[0] = l[0];\n    int i = 1;\n    foreach(long\
    \ e; l)\n    {\n        if(e != ret[i-1])\n        {\n            ret[i] = e;\n\
    \            i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int j = 0;\n    foreach(i; l)\n    {\n   \
    \     if(j == 0 || result[j-1] != i)\n        {\n            result[j] = i;\n\
    \            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n \
    \   {\n        if(count == 0 || result[count-1] != i)\n        {\n           \
    \ result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }", "{\n    long[] ret = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ x; l)\n    {\n        if(!ret.canFind(x))\n        {\n            ret[count]\
    \ = x;\n            count++;\n        }\n    }\n    return ret[0..count];\n}",
  "{\n    long[] ret;\n    ret.length = l.length;\n    ret.ptr = l.ptr;\n    ret.sort();\n\
    \    ret = ret.dup;\n    ret.length = ret.length - 1;\n    foreach(i, v; ret)\n\
    \    {\n        if(v == ret[i+1])\n        {\n            ret.remove(i);\n   \
    \     }\n    }\n    return ret;\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int ret_len = 0;\n    foreach(e; l)\n    {\n        if(ret_len == 0 || ret[ret_len-1]\
    \ != e)\n        {\n            ret[ret_len] = e;\n            ret_len++;\n  \
    \      }\n    }\n    return ret[0..ret_len];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret_sorted = new long[l.length];\n    long[] ret_unique = new long[l.length];\n\
    \    long[] ret_unique_sorted = new long[l.length];\n    long[] ret_unique_sorted_final\
    \ = new long[l.length];\n    long[] ret_final = new long[l.length];\n    long[]\
    \ ret_final_sorted = new long[l.length];\n    long[] ret_final_sorted_final =\
    \ new long[l.length];\n    long[] ret_final_sorted_final_final = new long[l.length];\n\
    \    long[] ret_final_sorted_final_final_final = new long[l.length];\n    long[]\
    \ ret_final_sorted_final_final_final_final = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[l.length];\n    long[] ret_final_sorted_final_final_final_final_final_final_",
  "{\n    long[] ret = new long[l.length];\n    long[] ret2 = new long[l.length];\n\
    \    long[] ret3 = new long[l.length];\n    long[] ret4 = new long[l.length];\n\
    \    long[] ret5 = new long[l.length];\n    long[] ret6 = new long[l.length];\n\
    \    long[] ret7 = new long[l.length];\n    long[] ret8 = new long[l.length];\n\
    \    long[] ret9 = new long[l.length];\n    long[] ret10 = new long[l.length];\n\
    \    long[] ret11 = new long[l.length];\n    long[] ret12 = new long[l.length];\n\
    \    long[] ret13 = new long[l.length];\n    long[] ret14 = new long[l.length];\n\
    \    long[] ret15 = new long[l.length];\n    long[] ret16 = new long[l.length];\n\
    \    long[] ret17 = new long[l.length];\n    long[] ret18 = new long[l.length];\n\
    \    long[] ret19 = new long[l.length];\n    long[] ret20 = new long[l.length];\n\
    \    long[] ret21 = new long[l.length];\n    long[] ret22 = new long[l.length];\n\
    \    long[] ret23 = new long[l.length];\n    long[] ret24 = new long[l.length];\n\
    \    long[] ret25 = new long[l.length];\n    long[] ret26 = new long[l.length];\n\
    \    long[] ret27 = new long[l.length];\n    long[] ret28 = new long[l.length];\n\
    \    long[] ret29 = new long[l.length];\n    long[] ret30 = new long[l.length];\n\
    \    long[] ret31 = new long[l.length];\n    long[] ret32 = new long[l.length];\n\
    \    long[] ret33 = new long[l.length];\n    long[] ret34 = new long[l.length];\n\
    \    long[] ret35 = new long[l.length];\n    long[] ret36 = new long[l.length];\n\
    \    long[] ret37 =", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n\
    \    long ret_len = 1;\n    foreach(long i; l)\n    {\n        if (i != ret[ret_len-1])\n\
    \        {\n            ret[ret_len] = i;\n            ret_len++;\n        }\n\
    \    }\n    return ret[0..ret_len];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e in ret)\n       \
    \     continue;\n        ret[i++] = e;\n    }\n    return ret[0..i];\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] result = new long[l.length];\n\
    \    size_t j = 0;\n    foreach (i; l)\n    {\n        if (j == 0 || result[j-1]\
    \ != i)\n        {\n            result[j] = i;\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    long[] ret;\n    foreach(e; l)\n\
    \    {\n        if(!e in ret)\n            ret ~= e;\n    }\n    return ret;\n\
    }", "{\n    auto u = l.dup;\n    u.sort;\n    u.uniq;\n    return u;\n}", "{\n\
    \    long[] ret = new long[l.length];\n    ret[0] = l[0];\n    int i = 1;\n  \
    \  foreach(long x; l)\n    {\n        if (x != ret[i-1])\n        {\n        \
    \    ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(!result.canFind(i))\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    int i;\n    int j;\n    int k;\n    int n;\n    int m;\n    int p;\n    int\
    \ q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n\
    \    int x;\n    int y;\n    int z;\n    int aa;\n    int ab;\n    int ac;\n \
    \   int ad;\n    int ae;\n    int af;\n    int ag;\n    int ah;\n    int ai;\n\
    \    int aj;\n    int ak;\n    int al;\n    int am;\n    int an;\n    int ao;\n\
    \    int ap;\n    int aq;\n    int ar;\n    int as;\n    int at;\n    int au;\n\
    \    int av;\n    int aw;\n    int ax;\n    int ay;\n    int az;\n    int ba;\n\
    \    int bb;\n    int bc;\n    int bd;\n    int be;\n    int bf;\n    int bg;\n\
    \    int bh;\n    int bi;\n    int bj;\n    int bk;\n    int bl;\n    int bm;\n\
    \    int bn;\n    int bo;\n    int bp;\n    int bq;\n    int br;\n    int bs;\n\
    \    int bt;\n    int bu;\n    int bv;\n    int bw;\n    int bx;\n    int by;\n\
    \    int bz;\n    int ca;\n    int cb;\n    int cc;\n    int cd;\n    int ce;\n\
    \    int cf;\n    int cg;\n    int ch;\n    int ci;\n    int cj;\n    int ck;\n\
    \    int cl;\n    int cm;\n    int cn;\n    int co;\n    int cp;\n    int cq;\n\
    \    int cr;\n    int cs;\n    int ct;\n    int cu;\n    int cv;\n   ", "{\n \
    \   long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n \
    \   long[] tmp2 = new long[l.length];\n    long[] tmp3 = new long[l.length];\n\
    \    long[] tmp4 = new long[l.length];\n    long[] tmp5 = new long[l.length];\n\
    \    long[] tmp6 = new long[l.length];\n    long[] tmp7 = new long[l.length];\n\
    \    long[] tmp8 = new long[l.length];\n    long[] tmp9 = new long[l.length];\n\
    \    long[] tmp10 = new long[l.length];\n    long[] tmp11 = new long[l.length];\n\
    \    long[] tmp12 = new long[l.length];\n    long[] tmp13 = new long[l.length];\n\
    \    long[] tmp14 = new long[l.length];\n    long[] tmp15 = new long[l.length];\n\
    \    long[] tmp16 = new long[l.length];\n    long[] tmp17 = new long[l.length];\n\
    \    long[] tmp18 = new long[l.length];\n    long[] tmp19 = new long[l.length];\n\
    \    long[] tmp20 = new long[l.length];\n    long[] tmp21 = new long[l.length];\n\
    \    long[] tmp22 = new long[l.length];\n    long[] tmp23 = new long[l.length];\n\
    \    long[] tmp24 = new long[l.length];\n    long[] tmp25 = new long[l.length];\n\
    \    long[] tmp26 = new long[l.length];\n    long[] tmp27 = new long[l.length];\n\
    \    long[] tmp28 = new long[l.length];\n    long[] tmp29 = new long[l.length];\n\
    \    long[] tmp30 = new long[l.length];\n    long[] tmp31 = new long[l.length];\n\
    \    long[] tmp32 = new long[l.length];\n    long[] tmp33 = new long[l.length];\n\
    \    long[] tmp34 = new long[l.length];\n    long[] tmp35 = new long[l.length];\n\
    \    long[] tmp36 = new", "{\n    long[] res = new long[l.length];\n    int i\
    \ = 0;\n    foreach(e; l)\n    {\n        if(e !in res)\n        {\n         \
    \   res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n}",
  "{\n    return l.dup.sort.uniq;\n}", "{\n    long[] result = new long[0];\n    foreach(x;\
    \ l)\n    {\n        if(!x in result)\n        {\n            result ~= x;\n \
    \       }\n    }\n    return result.sort();\n}", "{\n    return std.algorithm.uniq(l);\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] res =\
    \ new long[l.length];\n    int j = 0;\n    foreach(i; l)\n    {\n        if(i\
    \ in res)\n            continue;\n        res[j] = i;\n        j++;\n    }\n \
    \   return res[0..j];\n}", "{\n    long[] ret = new long[l.length];\n    int count\
    \ = 0;\n    foreach(long i; l)\n    {\n        if(count == 0)\n        {\n   \
    \         ret[count] = i;\n            count++;\n        }\n        else\n   \
    \     {\n            if(!ret.canFind(i))\n            {\n                ret[count]\
    \ = i;\n                count++;\n            }\n        }\n    }\n    ret = ret[0..count];\n\
    \    return ret;\n}", "{\n    return unique(l, (a, b) => a < b);\n}", "{\n   \
    \ long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n   \
    \ long[] tmp2 = new long[l.length];\n    long[] tmp3 = new long[l.length];\n \
    \   long[] tmp4 = new long[l.length];\n    long[] tmp5 = new long[l.length];\n\
    \    long[] tmp6 = new long[l.length];\n    long[] tmp7 = new long[l.length];\n\
    \    long[] tmp8 = new long[l.length];\n    long[] tmp9 = new long[l.length];\n\
    \    long[] tmp10 = new long[l.length];\n    long[] tmp11 = new long[l.length];\n\
    \    long[] tmp12 = new long[l.length];\n    long[] tmp13 = new long[l.length];\n\
    \    long[] tmp14 = new long[l.length];\n    long[] tmp15 = new long[l.length];\n\
    \    long[] tmp16 = new long[l.length];\n    long[] tmp17 = new long[l.length];\n\
    \    long[] tmp18 = new long[l.length];\n    long[] tmp19 = new long[l.length];\n\
    \    long[] tmp20 = new long[l.length];\n    long[] tmp21 = new long[l.length];\n\
    \    long[] tmp22 = new long[l.length];\n    long[] tmp23 = new long[l.length];\n\
    \    long[] tmp24 = new long[l.length];\n    long[] tmp25 = new long[l.length];\n\
    \    long[] tmp26 = new long[l.length];\n    long[] tmp27 = new long[l.length];\n\
    \    long[] tmp28 = new long[l.length];\n    long[] tmp29 = new long[l.length];\n\
    \    long[] tmp30 = new long[l.length];\n    long[] tmp31 = new long[l.length];\n\
    \    long[] tmp32 = new long[l.length];\n    long[] tmp33 = new long[l.length];\n\
    \    long[] tmp34 = new long[l.length];\n    long[] tmp35 = new long[l.length];\n\
    \    long[] tmp36 = new", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i in ret)\n            continue;\n        ret ~= i;\n\
    \    }\n    return ret.sort();\n}", "{\n    long[] result = new long[l.length];\n\
    \    size_t j = 0;\n    foreach (i; l)\n    {\n        if (j == 0 || result[j-1]\
    \ != i)\n        {\n            result[j] = i;\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    size_t j = 0;\n    foreach (i; l)\n    {\n        if (j == 0 || result[j-1]\
    \ != i)\n        {\n            result[j] = i;\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    size_t j = 0;\n    foreach (i; l)\n    {\n        if (j == 0 || result[j-1]\
    \ != i)\n        {\n            result[j] = i;\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    size_t j = 0", "{\n    long[] ret = new long[l.length];\n    long[] temp\
    \ = new long[l.length];\n    long[] temp2 = new long[l.length];\n    long[] temp3\
    \ = new long[l.length];\n    long[] temp4 = new long[l.length];\n    long[] temp5\
    \ = new long[l.length];\n    long[] temp6 = new long[l.length];\n    long[] temp7\
    \ = new long[l.length];\n    long[] temp8 = new long[l.length];\n    long[] temp9\
    \ = new long[l.length];\n    long[] temp10 = new long[l.length];\n    long[] temp11\
    \ = new long[l.length];\n    long[] temp12 = new long[l.length];\n    long[] temp13\
    \ = new long[l.length];\n    long[] temp14 = new long[l.length];\n    long[] temp15\
    \ = new long[l.length];\n    long[] temp16 = new long[l.length];\n    long[] temp17\
    \ = new long[l.length];\n    long[] temp18 = new long[l.length];\n    long[] temp19\
    \ = new long[l.length];\n    long[] temp20 = new long[l.length];\n    long[] temp21\
    \ = new long[l.length];\n    long[] temp22 = new long[l.length];\n    long[] temp23\
    \ = new long[l.length];\n    long[] temp24 = new long[l.length];\n    long[] temp25\
    \ = new long[l.length];\n    long[] temp26 = new long[l.length];\n    long[] temp27\
    \ = new long[l.length];\n    long[] temp28 = new long[l.length];\n    long[] temp29\
    \ = new long[l.length];\n    long[] temp30 = new long[l.length];\n    long[] temp31\
    \ = new long[l.length];\n    long[] temp32 = new long[l.length];\n    long[] temp33\
    \ = new long[l.length];\n    long[] temp34 = new long[l.length];\n    long[] temp35\
    \ = new long[l.length];\n    long[] temp36 = new", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret2 = new long[l.length];\n    int j = 0;\n    foreach(long i; l)\n\
    \    {\n        if(!ret.canFind(i))\n        {\n            ret[j] = i;\n    \
    \        j++;\n        }\n    }\n    ret2 = ret[0..j];\n    ret2.sort();\n   \
    \ return ret2;\n}", "{\n    long[] res = new long[l.length];\n    int count =\
    \ 0;\n    foreach(i; l)\n    {\n        if(!res.canFind(i))\n        {\n     \
    \       res[count] = i;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }", "{\n    return l.sort().uniq;\n}", "{\n    return std.algorithm.uniq(l);\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    int i;\n    int j;\n    int k;\n    int m;\n    int n;\n    int p;\n    int\
    \ q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n\
    \    int x;\n    int y;\n    int z;\n    int aa;\n    int bb;\n    int cc;\n \
    \   int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n\
    \    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n\
    \    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n\
    \    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n\
    \    int bbb;\n    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int\
    \ ggg;\n    int hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n\
    \    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int\
    \ rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n\
    \    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int\
    \ cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n\
    \    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n \
    \   int nnnn;\n    int oooo;\n    int ppp", "{\n    return l.sort().uniq;\n}",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    foreach(long x;\
    \ l)\n    {\n        if(!result.canFind(x))\n        {\n            result[i]\
    \ = x;\n            i++;\n        }\n    }\n    return result[0..i];\n}", "{\n\
    \    long[] r;\n    foreach(e; l)\n        r ~= e;\n    r.sort;\n    return r.uniq;\n\
    }", "{\n    long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(!x in tmp)\n      \
    \  {\n            ret[i] = x;\n            tmp[i] = x;\n            i++;\n   \
    \     }\n    }\n    ret = ret[0..i];\n    return ret;\n}", "{\n    long[] ret\
    \ = new long[l.length];\n    long[] ret2 = new long[l.length];\n    long[] ret3\
    \ = new long[l.length];\n    long[] ret4 = new long[l.length];\n    long[] ret5\
    \ = new long[l.length];\n    long[] ret6 = new long[l.length];\n    long[] ret7\
    \ = new long[l.length];\n    long[] ret8 = new long[l.length];\n    long[] ret9\
    \ = new long[l.length];\n    long[] ret10 = new long[l.length];\n    long[] ret11\
    \ = new long[l.length];\n    long[] ret12 = new long[l.length];\n    long[] ret13\
    \ = new long[l.length];\n    long[] ret14 = new long[l.length];\n    long[] ret15\
    \ = new long[l.length];\n    long[] ret16 = new long[l.length];\n    long[] ret17\
    \ = new long[l.length];\n    long[] ret18 = new long[l.length];\n    long[] ret19\
    \ = new long[l.length];\n    long[] ret20 = new long[l.length];\n    long[] ret21\
    \ = new long[l.length];\n    long[] ret22 = new long[l.length];\n    long[] ret23\
    \ = new long[l.length];\n    long[] ret24 = new long[l.length];\n    long[] ret25\
    \ = new long[l.length];\n    long[] ret26 = new long[l.length];\n    long[] ret27\
    \ = new long[l.length];\n    long[] ret28 = new long[l.length];\n    long[] ret29\
    \ = new long[l.length];\n    long[] ret30 = new long[l.length];\n    long[] ret31\
    \ = new long[l.length];\n    long[] ret32 = new long[l.length];\n    long[] ret33\
    \ = new long[l.length];\n    long[] ret34 = new long[l.length];\n    long[] ret35\
    \ = new long[l.length];\n    long[] ret36 = new long[l.length];\n    long[] ret37\
    \ =", "{\n    long[] result = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x in tmp)\n       \
    \     continue;\n        tmp[i] = x;\n        i++;\n    }\n    result = tmp[0..i];\n\
    \    return result;\n}", "{\n    long[] ret = new long[l.length];\n    int ret_len\
    \ = 0;\n    foreach(l_i; l)\n    {\n        if(ret_len == 0 || ret[ret_len-1]\
    \ != l_i)\n        {\n            ret[ret_len] = l_i;\n            ret_len++;\n\
    \        }\n    }\n    return ret[0..ret_len];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    ret[0] = l[0];\n    long ret_length = 1;\n    for (long i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] != l[i-1])\n        {\n            ret[ret_length]\
    \ = l[i];\n            ret_length++;\n        }\n    }\n    return ret[0..ret_length];\n\
    }", "{\n    long[] res = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ x; l)\n    {\n        if(count == 0 || x != res[$-1])\n        {\n         \
    \   res[count] = x;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret =\
    \ new long[l.length];\n    ret.length = 0;\n    foreach(long i; l)\n    {\n  \
    \      if(ret.length == 0 || ret[$-1] != i)\n            ret ~= i;\n    }\n  \
    \  return ret;\n}", "{\n    long[] result = new long[l.length];\n    size_t n\
    \ = 0;\n    foreach (long i; l)\n    {\n        if (i in result[0..n]) continue;\n\
    \        result[n++] = i;\n    }\n    return result[0..n];\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n\
    {\n    long[] result = new long[l.length];\n    size_t n = 0;\n    foreach (long\
    \ i; l)\n    {\n        if (i in result[0..n]) continue;\n        result[n++]\
    \ = i;\n    }\n    return result[0..n];\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    size_t n = 0;\n    foreach (long i; l)\n    {\n \
    \       if (i in result[0..n]) continue;\n        result[n++] = i;\n    }\n  \
    \  return result[0..n];\n}\n/*\nReturn sorted unique elements in an array\n  \
    \  >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L,\
    \ 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    size_t n = 0;\n    foreach (long i; l)\n    {\n        if (i in result[0..n])\
    \ continue;\n        result[n", "{\n    long[] ret = new long[l.length];\n   \
    \ ret[0] = l[0];\n    int j = 1;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] != l[i-1])\n        {\n            ret[j] = l[i];\n    \
    \        j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[] ret\
    \ = new long[l.length];\n    ret[0] = l[0];\n    int j = 1;\n    foreach(i, e;\
    \ l)\n    {\n        if (e != ret[j-1])\n        {\n            ret[j] = e;\n\
    \            j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[]\
    \ res = new long[];\n    foreach(e; l)\n    {\n        if(e in res)\n        \
    \    continue;\n        res ~= e;\n    }\n    return res;\n}", "{\n    long[]\
    \ r;\n    long[] u;\n    long[] s;\n    long[] t;\n    long[] v;\n    long[] w;\n\
    \    long[] x;\n    long[] y;\n    long[] z;\n    long[] aa;\n    long[] bb;\n\
    \    long[] cc;\n    long[] dd;\n    long[] ee;\n    long[] ff;\n    long[] gg;\n\
    \    long[] hh;\n    long[] ii;\n    long[] jj;\n    long[] kk;\n    long[] ll;\n\
    \    long[] mm;\n    long[] nn;\n    long[] oo;\n    long[] pp;\n    long[] qq;\n\
    \    long[] rr;\n    long[] ss;\n    long[] tt;\n    long[] uu;\n    long[] vv;\n\
    \    long[] ww;\n    long[] xx;\n    long[] yy;\n    long[] zz;\n    long[] aaa;\n\
    \    long[] bbb;\n    long[] ccc;\n    long[] ddd;\n    long[] eee;\n    long[]\
    \ fff;\n    long[] ggg;\n    long[] hhh;\n    long[] iii;\n    long[] jjj;\n \
    \   long[] kkk;\n    long[] lll;\n    long[] mmm;\n    long[] nnn;\n    long[]\
    \ ooo;\n    long[] ppp;\n    long[] qqq;\n    long[] rrr;\n    long[] sss;\n \
    \   long[] ttt;\n    long[] uuu;\n    long[] vvv;\n    long[] www;\n    long[]\
    \ xxx;\n    long[] yyy;\n    long[] zzz;\n    long[] aaaa;\n    long[] bbbb;\n\
    \    long[] cccc;\n    long[] dddd;\n    long[] eeee;\n    long[] ffff;\n    long[]\
    \ gggg;\n    long[] hhhh;\n    long[] iiii;\n    long[] jjjj;\n    long[] kkkk;\n\
    \    long[] llll;\n    long[] mmmm;\n    long[] n", "{\n    long[] ret = new long[l.length];\n\
    \    ret[0] = l[0];\n    int j = 1;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] != l[i-1])\n        {\n            ret[j] = l[i];\n \
    \           j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(e; l)\n    {\n        if(e !in result)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret = new long[l.length];\n    long[] sorted = sort(l);\n \
    \   ret[0] = sorted[0];\n    long ret_index = 0;\n    foreach(long i; sorted)\n\
    \    {\n        if(i != ret[ret_index])\n        {\n            ret_index++;\n\
    \            ret[ret_index] = i;\n        }\n    }\n    return ret[0..ret_index+1];\n\
    }", "{\n    long[] ret = new long[l.length];\n    int j = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(!ret.canFind(i))\n        {\n            ret[j] = i;\n\
    \            j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret = new long[];\n    foreach(lval; l)\n    {\n        if(!ret.canFind(lval))\n\
    \            ret ~= lval;\n    }\n    return ret;\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    long[] tmp = new long[l.length];\n    long[] tmp2 = new\
    \ long[l.length];\n    long[] tmp3 = new long[l.length];\n    long[] tmp4 = new\
    \ long[l.length];\n    long[] tmp5 = new long[l.length];\n    long[] tmp6 = new\
    \ long[l.length];\n    long[] tmp7 = new long[l.length];\n    long[] tmp8 = new\
    \ long[l.length];\n    long[] tmp9 = new long[l.length];\n    long[] tmp10 = new\
    \ long[l.length];\n    long[] tmp11 = new long[l.length];\n    long[] tmp12 =\
    \ new long[l.length];\n    long[] tmp13 = new long[l.length];\n    long[] tmp14\
    \ = new long[l.length];\n    long[] tmp15 = new long[l.length];\n    long[] tmp16\
    \ = new long[l.length];\n    long[] tmp17 = new long[l.length];\n    long[] tmp18\
    \ = new long[l.length];\n    long[] tmp19 = new long[l.length];\n    long[] tmp20\
    \ = new long[l.length];\n    long[] tmp21 = new long[l.length];\n    long[] tmp22\
    \ = new long[l.length];\n    long[] tmp23 = new long[l.length];\n    long[] tmp24\
    \ = new long[l.length];\n    long[] tmp25 = new long[l.length];\n    long[] tmp26\
    \ = new long[l.length];\n    long[] tmp27 = new long[l.length];\n    long[] tmp28\
    \ = new long[l.length];\n    long[] tmp29 = new long[l.length];\n    long[] tmp30\
    \ = new long[l.length];\n    long[] tmp31 = new long[l.length];\n    long[] tmp32\
    \ = new long[l.length];\n    long[] tmp33 = new long[l.length];\n    long[] tmp34\
    \ = new long[l.length];\n    long[] tmp35 = new long[l.length];\n    long[] tmp36\
    \ = new", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n    int\
    \ j = 1;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] != l[i-1])\n\
    \        {\n            ret[j] = l[i];\n            j++;\n        }\n    }\n \
    \   return ret[0..j];\n}", "{\n    long[] ret = new long[l.length];\n    int i\
    \ = 0;\n    foreach(e; l)\n    {\n        if(i == 0 || ret[i-1] != e)\n      \
    \  {\n            ret[i] = e;\n            i++;\n        }\n    }\n    return\
    \ ret[0..i];\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n \
    \   foreach(long x; l)\n    {\n        if(i == 0 || x != ret[i-1])\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    return std.algorithm.uniq(l);\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5,\
    \ 9, 123]\n    \n*/", "{\n    long[] res = new long[l.length];\n    int count\
    \ = 0;\n    foreach(long e; l)\n    {\n        if(!e in res)\n        {\n    \
    \        res[count] = e;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    int i;\n    int j;\n    int k;\n\
    \    int l_len;\n    int tmp_len;\n    int ret_len;\n    l_len = l.length;\n \
    \   tmp = new long[l_len];\n    tmp_len = 0;\n    for (i = 0; i < l_len; i++)\n\
    \    {\n        if (tmp_len == 0)\n        {\n            tmp[tmp_len] = l[i];\n\
    \            tmp_len++;\n        }\n        else\n        {\n            for (j\
    \ = 0; j < tmp_len; j++)\n            {\n                if (l[i] == tmp[j])\n\
    \                {\n                    break;\n                }\n          \
    \  }\n            if (j == tmp_len)\n            {\n                tmp[tmp_len]\
    \ = l[i];\n                tmp_len++;\n            }\n        }\n    }\n    ret\
    \ = new long[tmp_len];\n    ret_len = 0;\n    for (i = 0; i < tmp_len; i++)\n\
    \    {\n        for (j = i + 1; j < tmp_len; j++)\n        {\n            if (tmp[i]\
    \ > tmp[j])\n            {\n                k = tmp[i];\n                tmp[i]\
    \ = tmp[j];\n                tmp[j] = k;\n            }\n        }\n        ret[ret_len]\
    \ = tmp[i];\n        ret_len++;\n    }\n    return ret;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ len) \n{\n    long[] ret;\n    long[] tmp;\n    int i;\n    int j;\n    int\
    \ k;\n    int l_len;\n    int tmp_len;\n    int ret_len;\n    l_len = len;\n \
    \   tmp = new long[l_len];", "{\n    long[] result = new long[l.length];\n   \
    \ int i = 0;\n    foreach(long e; l)\n    {\n        if(e in result)\n       \
    \     continue;\n        result[i++] = e;\n    }\n    return result[0..i];\n}",
  "{\n    long[] ret = new long[l.length];\n    long[] ret2 = new long[l.length];\n\
    \    long[] ret3 = new long[l.length];\n    long[] ret4 = new long[l.length];\n\
    \    long[] ret5 = new long[l.length];\n    long[] ret6 = new long[l.length];\n\
    \    long[] ret7 = new long[l.length];\n    long[] ret8 = new long[l.length];\n\
    \    long[] ret9 = new long[l.length];\n    long[] ret10 = new long[l.length];\n\
    \    long[] ret11 = new long[l.length];\n    long[] ret12 = new long[l.length];\n\
    \    long[] ret13 = new long[l.length];\n    long[] ret14 = new long[l.length];\n\
    \    long[] ret15 = new long[l.length];\n    long[] ret16 = new long[l.length];\n\
    \    long[] ret17 = new long[l.length];\n    long[] ret18 = new long[l.length];\n\
    \    long[] ret19 = new long[l.length];\n    long[] ret20 = new long[l.length];\n\
    \    long[] ret21 = new long[l.length];\n    long[] ret22 = new long[l.length];\n\
    \    long[] ret23 = new long[l.length];\n    long[] ret24 = new long[l.length];\n\
    \    long[] ret25 = new long[l.length];\n    long[] ret26 = new long[l.length];\n\
    \    long[] ret27 = new long[l.length];\n    long[] ret28 = new long[l.length];\n\
    \    long[] ret29 = new long[l.length];\n    long[] ret30 = new long[l.length];\n\
    \    long[] ret31 = new long[l.length];\n    long[] ret32 = new long[l.length];\n\
    \    long[] ret33 = new long[l.length];\n    long[] ret34 = new long[l.length];\n\
    \    long[] ret35 = new long[l.length];\n    long[] ret36 = new long[l.length];\n\
    \    long[] ret37 =", "{\n    long[] ret = new long[l.length];\n    int j = 0;\n\
    \    foreach(i; l)\n    {\n        if(!ret.canFind(i))\n        {\n          \
    \  ret[j] = i;\n            j++;\n        }\n    }\n    return ret[0..j];\n}",
  "{\n    long[] ret = new long[0];\n    foreach(l_; l)\n    {\n        if(!ret.canFind(l_))\n\
    \            ret ~= l_;\n    }\n    return ret;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    size_t count = 0;\n    foreach(long x; l)\n    {\n    \
    \    if(count == 0 || x != result[count-1])\n        {\n            result[count]\
    \ = x;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }", "{\n    long[] res = new long[l.length];\n    int count = 0;\n    foreach(e;\
    \ l)\n    {\n        if(count == 0 || e != res[$-1])\n        {\n            res[count]\
    \ = e;\n            count++;\n        }\n    }\n    return res[0..count];\n}",
  "{\n    long[] ret = new long[l.length];\n    long[] tmp = l.dup;\n    tmp.sort;\n\
    \    long last = tmp[0];\n    ret[0] = last;\n    long i = 1;\n    foreach(long\
    \ e; tmp)\n    {\n        if(e != last)\n        {\n            ret[i] = e;\n\
    \            i++;\n            last = e;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n    int j =\
    \ 1;\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] != l[i-1])\
    \ \n        {\n            ret[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return ret[0..j];\n}", "{\n    long[] ret = new long[l.length];\n    ret[0]\
    \ = l[0];\n    int ret_len = 1;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] != l[i-1])\n        {\n            ret[ret_len] = l[i];\n  \
    \          ret_len++;\n        }\n    }\n    return ret[0..ret_len];\n}", "{\n\
    \    long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    long[] tmp2 = new long[l.length];\n    long[] tmp3 = new long[l.length];\n\
    \    long[] tmp4 = new long[l.length];\n    long[] tmp5 = new long[l.length];\n\
    \    long[] tmp6 = new long[l.length];\n    long[] tmp7 = new long[l.length];\n\
    \    long[] tmp8 = new long[l.length];\n    long[] tmp9 = new long[l.length];\n\
    \    long[] tmp10 = new long[l.length];\n    long[] tmp11 = new long[l.length];\n\
    \    long[] tmp12 = new long[l.length];\n    long[] tmp13 = new long[l.length];\n\
    \    long[] tmp14 = new long[l.length];\n    long[] tmp15 = new long[l.length];\n\
    \    long[] tmp16 = new long[l.length];\n    long[] tmp17 = new long[l.length];\n\
    \    long[] tmp18 = new long[l.length];\n    long[] tmp19 = new long[l.length];\n\
    \    long[] tmp20 = new long[l.length];\n    long[] tmp21 = new long[l.length];\n\
    \    long[] tmp22 = new long[l.length];\n    long[] tmp23 = new long[l.length];\n\
    \    long[] tmp24 = new long[l.length];\n    long[] tmp25 = new long[l.length];\n\
    \    long[] tmp26 = new long[l.length];\n    long[] tmp27 = new long[l.length];\n\
    \    long[] tmp28 = new long[l.length];\n    long[] tmp29 = new long[l.length];\n\
    \    long[] tmp30 = new long[l.length];\n    long[] tmp31 = new long[l.length];\n\
    \    long[] tmp32 = new long[l.length];\n    long[] tmp33 = new long[l.length];\n\
    \    long[] tmp34 = new long[l.length];\n    long[] tmp35 = new long[l.length];\n\
    \    long[] tmp36 = new", "{\n    long[] result = new long[l.length];\n    size_t\
    \ n = 0;\n    foreach (long i; l)\n    {\n        if (n == 0 || result[n-1] !=\
    \ i)\n            result[n++] = i;\n    }\n    return result[0..n];\n}", "{\n\
    \    long[] result = new long[l.length];\n    int i = 0;\n    foreach(long e;\
    \ l)\n    {\n        if(e in result)\n            continue;\n        result[i++]\
    \ = e;\n    }\n    return result[0..i];\n}", "{\n    auto s = new set.HashSet!(long)();\n\
    \    foreach(e; l)\n        s.insert(e);\n    return s.keys;\n}", "{\n    long[]\
    \ res = new long[l.length];\n    int i = 0;\n    foreach(long e; l)\n    {\n \
    \       if(i == 0 || e != res[i-1])\n        {\n            res[i] = e;\n    \
    \        i++;\n        }\n    }\n    return res[0..i];\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] ret;\n\
    \    foreach(e; l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n\
    \    return ret.sort();\n}", "{\n    auto s = set!(long)();\n    foreach(e; l)\n\
    \        s.insert(e);\n    return s.array;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(e; l)\n    {\n        if(!e in ret)\n            ret ~= e;\n    }\n\
    \    return ret.sort;\n}", "{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    foreach(long e; l)\n    {\n        if (i == 0 || e != result[i-1])\n\
    \        {\n            result[i] = e;\n            i++;\n        }\n    }\n \
    \   return result[0..i];\n}", "{\n    return unique(l, (a, b) => a < b);\n}",
  "{\n    long[] res = new long[0];\n    foreach(lval; l)\n    {\n        if(!res.canFind(lval))\n\
    \            res ~= lval;\n    }\n    return res;\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    long[] tmp = new long[l.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (i == 0)\n        {\n    \
    \        ret[j] = l[i];\n            j++;\n        }\n        else\n        {\n\
    \            if (l[i] != l[i-1])\n            {\n                ret[j] = l[i];\n\
    \                j++;\n            }\n        }\n    }\n    return ret[0..j];\n\
    }", "{\n    long[] result = new long[l.length];\n    size_t n = 0;\n    foreach\
    \ (e; l) \n    {\n        if (n == 0 || e != result[n - 1]) \n        {\n    \
    \        result[n] = e;\n            n++;\n        }\n    }\n    return result[0\
    \ .. n];\n}", "{\n    long[] result = new long[l.length];\n    size_t j = 0;\n\
    \    foreach (i; l)\n    {\n        if (j == 0 || result[j-1] != i)\n        {\n\
    \            result[j] = i;\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n    size_t ret_len\
    \ = 1;\n    foreach(i, e; l)\n    {\n        if (e != ret[ret_len - 1])\n    \
    \    {\n            ret[ret_len] = e;\n            ret_len++;\n        }\n   \
    \ }\n    return ret[0..ret_len];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret2 = new long[l.length];\n    long[] ret3 = new long[l.length];\n\
    \    long[] ret4 = new long[l.length];\n    long[] ret5 = new long[l.length];\n\
    \    long[] ret6 = new long[l.length];\n    long[] ret7 = new long[l.length];\n\
    \    long[] ret8 = new long[l.length];\n    long[] ret9 = new long[l.length];\n\
    \    long[] ret10 = new long[l.length];\n    long[] ret11 = new long[l.length];\n\
    \    long[] ret12 = new long[l.length];\n    long[] ret13 = new long[l.length];\n\
    \    long[] ret14 = new long[l.length];\n    long[] ret15 = new long[l.length];\n\
    \    long[] ret16 = new long[l.length];\n    long[] ret17 = new long[l.length];\n\
    \    long[] ret18 = new long[l.length];\n    long[] ret19 = new long[l.length];\n\
    \    long[] ret20 = new long[l.length];\n    long[] ret21 = new long[l.length];\n\
    \    long[] ret22 = new long[l.length];\n    long[] ret23 = new long[l.length];\n\
    \    long[] ret24 = new long[l.length];\n    long[] ret25 = new long[l.length];\n\
    \    long[] ret26 = new long[l.length];\n    long[] ret27 = new long[l.length];\n\
    \    long[] ret28 = new long[l.length];\n    long[] ret29 = new long[l.length];\n\
    \    long[] ret30 = new long[l.length];\n    long[] ret31 = new long[l.length];\n\
    \    long[] ret32 = new long[l.length];\n    long[] ret33 = new long[l.length];\n\
    \    long[] ret34 = new long[l.length];\n    long[] ret35 = new long[l.length];\n\
    \    long[] ret36 = new long[l.length];\n    long[] ret37 =", "{\n    long[] ret\
    \ = new long[l.length];\n    ret.length = 0;\n    foreach(long i; l)\n    {\n\
    \        if(ret.length == 0 || ret[$-1] != i)\n            ret ~= i;\n    }\n\
    \    return ret;\n}", "{\n    auto result = new long[];\n    foreach(e; l)\n \
    \   {\n        if(!result.canFind(e))\n            result ~= e;\n    }\n    return\
    \ result;\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n    foreach(long\
    \ x; l)\n    {\n        if(i == 0 || ret[i-1] != x)\n        {\n            ret[i]\
    \ = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n  \
    \  long[] ret = new long[l.length];\n    ret[0] = l[0];\n    int ret_len = 1;\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] != l[i-1]) \n\
    \        {\n            ret[ret_len] = l[i];\n            ret_len++;\n       \
    \ }\n    }\n    return ret[0..ret_len];\n}", "{\n    long[] ret;\n    long[] tmp;\n\
    \    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[] tmp5;\n    long[]\
    \ tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n    long[] tmp10;\n\
    \    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n    long[] tmp14;\n\
    \    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n    long[] tmp18;\n\
    \    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n    long[] tmp22;\n\
    \    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n    long[] tmp26;\n\
    \    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n    long[] tmp30;\n\
    \    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n    long[] tmp34;\n\
    \    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n    long[] tmp38;\n\
    \    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n    long[] tmp42;\n\
    \    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n    long[] tmp46;\n\
    \    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n    long[] tmp50;\n\
    \    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n    long[] tmp54;\n\
    \    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n    long[] tmp58;\n\
    \    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n    long[] tmp62;\n\
    \    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n    long[] tmp66;\n\
    \    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n    long[] tmp70;\n\
    \    long[] tmp71;\n    long[] tmp72;\n", "{\n    long[] ret = new long[];\n \
    \   foreach(l2; l)\n    {\n        if(!ret.canFind(l2))\n            ret ~= l2;\n\
    \    }\n    return ret;\n}", "{\n    auto s = set!(long)();\n    foreach(i; l)\n\
    \        s.insert(i);\n    return s.array;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(e; l)\n    {\n        if(e !in result)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort;\n}", "{\n    long[] res = new\
    \ long[l.length];\n    int count = 0;\n    foreach(long i; l)\n    {\n       \
    \ if(!res.canFind(i))\n        {\n            res[count] = i;\n            count++;\n\
    \        }\n    }\n    return res[0..count];\n}", "{\n    long[] ret;\n    long[]\
    \ tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[] tmp5;\n\
    \    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n    long[]\
    \ tmp10;\n    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n    long[]\
    \ tmp14;\n    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n    long[]\
    \ tmp18;\n    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n    long[]\
    \ tmp22;\n    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n    long[]\
    \ tmp26;\n    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n    long[]\
    \ tmp30;\n    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n    long[]\
    \ tmp34;\n    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n    long[]\
    \ tmp38;\n    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n    long[]\
    \ tmp42;\n    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n    long[]\
    \ tmp46;\n    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n    long[]\
    \ tmp50;\n    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n    long[]\
    \ tmp54;\n    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n    long[]\
    \ tmp58;\n    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n    long[]\
    \ tmp62;\n    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n    long[]\
    \ tmp66;\n    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n    long[]\
    \ tmp70;\n    long[] tmp71;\n    long[] tmp72;\n", "{\n    auto u = new long[](l.length);\n\
    \    auto uidx = 0L;\n    foreach(i, e; l) \n    {\n        if (i == 0L || e !=\
    \ l[i - 1L]) \n        {\n            u[uidx] = e;\n            uidx++;\n    \
    \    }\n    }\n    return u[0L .. uidx];\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5,\
    \ 9, 123]\n    \n*/", "{\n    long[] result = [];\n    foreach(l_; l)\n    {\n\
    \        if(!result.canFind(l_))\n        {\n            result ~= l_;\n     \
    \   }\n    }\n    return result.sort();\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] temp = new long[l.length];\n    long[] temp2 = new long[l.length];\n\
    \    long[] temp3 = new long[l.length];\n    long[] temp4 = new long[l.length];\n\
    \    long[] temp5 = new long[l.length];\n    long[] temp6 = new long[l.length];\n\
    \    long[] temp7 = new long[l.length];\n    long[] temp8 = new long[l.length];\n\
    \    long[] temp9 = new long[l.length];\n    long[] temp10 = new long[l.length];\n\
    \    long[] temp11 = new long[l.length];\n    long[] temp12 = new long[l.length];\n\
    \    long[] temp13 = new long[l.length];\n    long[] temp14 = new long[l.length];\n\
    \    long[] temp15 = new long[l.length];\n    long[] temp16 = new long[l.length];\n\
    \    long[] temp17 = new long[l.length];\n    long[] temp18 = new long[l.length];\n\
    \    long[] temp19 = new long[l.length];\n    long[] temp20 = new long[l.length];\n\
    \    long[] temp21 = new long[l.length];\n    long[] temp22 = new long[l.length];\n\
    \    long[] temp23 = new long[l.length];\n    long[] temp24 = new long[l.length];\n\
    \    long[] temp25 = new long[l.length];\n    long[] temp26 = new long[l.length];\n\
    \    long[] temp27 = new long[l.length];\n    long[] temp28 = new long[l.length];\n\
    \    long[] temp29 = new long[l.length];\n    long[] temp30 = new long[l.length];\n\
    \    long[] temp31 = new long[l.length];\n    long[] temp32 = new long[l.length];\n\
    \    long[] temp33 = new long[l.length];\n    long[] temp34 = new long[l.length];\n\
    \    long[] temp35 = new long[l.length];\n    long[] temp36 = new", "{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n\
    \        if(!result.canFind(x))\n        {\n            result[i] = x;\n     \
    \       i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    return sort(uniq(l));\n\
    }", "{\n    long[] ret;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n", "{\n    long[] result = new long[l.length];\n    int i\
    \ = 0;\n    foreach(e; l)\n    {\n        if(!result.canFind(e))\n        {\n\
    \            result[i] = e;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    auto s = new SortedRange!(long)(l);\n    return s.byKey.keys;\n}\n\
    /*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n    auto s = new SortedRange!(long)(l);\n    return s.byKey.keys;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    auto s = new SortedRange!(long)(l);\n    return s.byKey.keys;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    auto s = new SortedRange!(long)(l);\n    return s.byKey.keys;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    auto s = new SortedRange!(long)(l);\n    return s.byKey.keys;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L", "{\n    long[] ret = new\
    \ long[l.length];\n    int ret_len = 0;\n    foreach(long i; l)\n    {\n     \
    \   if(ret_len == 0 || ret[ret_len-1] != i)\n        {\n            ret[ret_len]\
    \ = i;\n            ret_len++;\n        }\n    }\n    return ret[0..ret_len];\n\
    }", "{\n    long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    int i = 0;\n    int j = 0;\n    foreach(long x; l) {\n        if (i == 0\
    \ || ret[i-1] != x) {\n            ret[i] = x;\n            i++;\n        }\n\
    \    }\n    ret.length = i;\n    return ret;\n}", "{\n    long[] result = [];\n\
    \    foreach(lval; l)\n    {\n        if(lval in result)\n            continue;\n\
    \        result ~= lval;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    size_t result_size = 0;\n    foreach (long i; l)\n\
    \    {\n        if (result_size == 0 || result[result_size - 1] != i)\n      \
    \  {\n            result[result_size] = i;\n            result_size++;\n     \
    \   }\n    }\n    return result[0 .. result_size];\n}", "{\n    long[] result\
    \ = new long[l.length];\n    size_t j = 0;\n    foreach (i; l)\n    {\n      \
    \  if (j == 0 || result[j-1] != i)\n        {\n            result[j] = i;\n  \
    \          j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int i = 0;\n    foreach(long e; l)\n    {\n \
    \       if(i == 0 || ret[i-1] != e)\n        {\n            ret[i] = e;\n    \
    \        i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    long[] ret\
    \ = new long[l.length];\n    ret[0] = l[0];\n    long ret_length = 1;\n    for\
    \ (long i = 1; i < l.length; i++)\n    {\n        if (l[i] != l[i-1])\n      \
    \  {\n            ret[ret_length] = l[i];\n            ret_length++;\n       \
    \ }\n    }\n    return ret[0..ret_length];\n}", "{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long elem; l)\n    {\n        if(!elem in res)\n\
    \        {\n            res[i] = elem;\n            i++;\n        }\n    }\n \
    \   return res[0..i];\n}", "{\n    long[] ret = new long[l.length];\n    ret[0]\
    \ = l[0];\n    int j = 1;\n    for (int i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] != l[i-1]) \n        {\n            ret[j] = l[i];\n         \
    \   j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    long[] tmp = new long[l.length];\n    int i = 0;\n    int\
    \ j = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i == 0) {\n      \
    \      ret[j] = l[i];\n            j++;\n        } else {\n            if (l[i]\
    \ != l[i-1]) {\n                ret[j] = l[i];\n                j++;\n       \
    \     }\n        }\n    }\n    ret = ret[0..j];\n    ret.sort();\n    return ret;\n\
    }", "{\n    return sort(uniq(l));\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(e; l)\n    {\n        if(!e in ret)\n        {\n\
    \            ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] result = new long[0];\n    foreach(e; l)\n    {\n        if(!elem(result,\
    \ e))\n        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n    int ret_len =\
    \ 1;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] != l[i-1])\n\
    \        {\n            ret[ret_len] = l[i];\n            ret_len++;\n       \
    \ }\n    }\n    return ret[0..ret_len];\n}", "{\n    long[] r;\n    foreach(e;\
    \ l)\n    {\n        if(e in r)\n            continue;\n        r ~= e;\n    }\n\
    \    return r;\n}", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n\
    \    int n = 1;\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ != l[i-1]) \n        {\n            ret[n] = l[i];\n            n++;\n     \
    \   }\n    }\n    return ret[0..n];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    ret[0] = l[0];\n    int j = 1;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] != l[i-1])\n        {\n            ret[j] = l[i];\n \
    \           j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    ret.length = 0;\n    foreach(long i; l)\n   \
    \ {\n        if(ret.length == 0 || ret[$-1] != i)\n            ret ~= i;\n   \
    \ }\n    return ret;\n}", "{\n    long[] ret = new long[l.length];\n    long[]\
    \ tmp = new long[l.length];\n    long[] tmp2 = new long[l.length];\n    long[]\
    \ tmp3 = new long[l.length];\n    long[] tmp4 = new long[l.length];\n    long[]\
    \ tmp5 = new long[l.length];\n    long[] tmp6 = new long[l.length];\n    long[]\
    \ tmp7 = new long[l.length];\n    long[] tmp8 = new long[l.length];\n    long[]\
    \ tmp9 = new long[l.length];\n    long[] tmp10 = new long[l.length];\n    long[]\
    \ tmp11 = new long[l.length];\n    long[] tmp12 = new long[l.length];\n    long[]\
    \ tmp13 = new long[l.length];\n    long[] tmp14 = new long[l.length];\n    long[]\
    \ tmp15 = new long[l.length];\n    long[] tmp16 = new long[l.length];\n    long[]\
    \ tmp17 = new long[l.length];\n    long[] tmp18 = new long[l.length];\n    long[]\
    \ tmp19 = new long[l.length];\n    long[] tmp20 = new long[l.length];\n    long[]\
    \ tmp21 = new long[l.length];\n    long[] tmp22 = new long[l.length];\n    long[]\
    \ tmp23 = new long[l.length];\n    long[] tmp24 = new long[l.length];\n    long[]\
    \ tmp25 = new long[l.length];\n    long[] tmp26 = new long[l.length];\n    long[]\
    \ tmp27 = new long[l.length];\n    long[] tmp28 = new long[l.length];\n    long[]\
    \ tmp29 = new long[l.length];\n    long[] tmp30 = new long[l.length];\n    long[]\
    \ tmp31 = new long[l.length];\n    long[] tmp32 = new long[l.length];\n    long[]\
    \ tmp33 = new long[l.length];\n    long[] tmp34 = new long[l.length];\n    long[]\
    \ tmp35 = new long[l.length];\n    long[] tmp36 = new", "{\n    long[] ret = new\
    \ long[0];\n    foreach(e; l)\n    {\n        if(e !in ret)\n            ret ~=\
    \ e;\n    }\n    return ret.sort();\n}", "{\n    long[] ret = new long[];\n  \
    \  foreach(e; l)\n    {\n        if(e in ret)\n            continue;\n       \
    \ ret ~= e;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(e; l)\n    {\n        if(e in ret)\n            continue;\n\
    \        ret[i++] = e;\n    }\n    return ret[0..i];\n}", "{\n    long[] ret =\
    \ new long[l.length];\n    int i = 0;\n    foreach(lval; l)\n    {\n        if(i\
    \ == 0 || ret[i-1] != lval)\n        {\n            ret[i] = lval;\n         \
    \   i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    long[] ret;\n \
    \   ret.length = l.length;\n    ret[] = l[];\n    ret.sort;\n    ret = ret.uniq;\n\
    \    return ret;\n}", "{\n    long[] result = new long[0];\n    foreach(l1; l)\n\
    \    {\n        if(!l1 in result)\n        {\n            result ~= l1;\n    \
    \    }\n    }\n    return result.sort();\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret2 = new long[l.length];\n    long[] ret3 = new long[l.length];\n\
    \    long[] ret4 = new long[l.length];\n    long[] ret5 = new long[l.length];\n\
    \    long[] ret6 = new long[l.length];\n    long[] ret7 = new long[l.length];\n\
    \    long[] ret8 = new long[l.length];\n    long[] ret9 = new long[l.length];\n\
    \    long[] ret10 = new long[l.length];\n    long[] ret11 = new long[l.length];\n\
    \    long[] ret12 = new long[l.length];\n    long[] ret13 = new long[l.length];\n\
    \    long[] ret14 = new long[l.length];\n    long[] ret15 = new long[l.length];\n\
    \    long[] ret16 = new long[l.length];\n    long[] ret17 = new long[l.length];\n\
    \    long[] ret18 = new long[l.length];\n    long[] ret19 = new long[l.length];\n\
    \    long[] ret20 = new long[l.length];\n    long[] ret21 = new long[l.length];\n\
    \    long[] ret22 = new long[l.length];\n    long[] ret23 = new long[l.length];\n\
    \    long[] ret24 = new long[l.length];\n    long[] ret25 = new long[l.length];\n\
    \    long[] ret26 = new long[l.length];\n    long[] ret27 = new long[l.length];\n\
    \    long[] ret28 = new long[l.length];\n    long[] ret29 = new long[l.length];\n\
    \    long[] ret30 = new long[l.length];\n    long[] ret31 = new long[l.length];\n\
    \    long[] ret32 = new long[l.length];\n    long[] ret33 = new long[l.length];\n\
    \    long[] ret34 = new long[l.length];\n    long[] ret35 = new long[l.length];\n\
    \    long[] ret36 = new long[l.length];\n    long[] ret37 =", "{\n    return std.algorithm.uniq(l);\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret;\n\
    \    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[]\
    \ tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n\
    \    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n\
    \    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n\
    \    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n\
    \    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n\
    \    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n\
    \    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n\
    \    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n\
    \    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n\
    \    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n\
    \    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n\
    \    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n\
    \    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n\
    \    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n\
    \    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n\
    \    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n\
    \    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n", "{\n    long[] result;\n\
    \    foreach(l_; l)\n    {\n        if(!result.canFind(l_))\n            result\
    \ ~= l_;\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\
    \    \n*/", "{\n    long[] res = new long[];\n    foreach(e; l)\n    {\n     \
    \   if(!e in res)\n            res ~= e;\n    }\n    return res.sort;\n}", "{\n\
    \    long[] ret;\n    foreach(el; l)\n    {\n        if(!el in ret)\n        \
    \    ret ~= el;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int ret_len = 0;\n    foreach(e; l)\n    {\n        if(e in ret[0..ret_len])\n\
    \            continue;\n        ret[ret_len] = e;\n        ret_len++;\n    }\n\
    \    return ret[0..ret_len];\n}", "{\n    return l.sort.uniq;\n}", "{\n    auto\
    \ s = set!(long)();\n    foreach(e; l)\n        s.insert(e);\n    return s.array;\n\
    }", "{\n    auto s = set!(long)();\n    foreach(e; l)\n    {\n        s.insert(e);\n\
    \    }\n    return s.array;\n}\n/*\nReturn the intersection of two arrays\n  \
    \  >>> intersection([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L])\n    [3L, 4L]\n*/\nlong[]\
    \ intersection(long[] a, long[] b) \n{\n    auto s = set!(long)();\n    foreach(e;\
    \ a)\n    {\n        s.insert(e);\n    }\n    auto r = set!(long)();\n    foreach(e;\
    \ b)\n    {\n        if(s.contains(e))\n        {\n            r.insert(e);\n\
    \        }\n    }\n    return r.array;\n}\n/*\nReturn the union of two arrays\n\
    \    >>> union([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n\
    */\nlong[] union(long[] a, long[] b) \n{\n    auto s = set!(long)();\n    foreach(e;\
    \ a)\n    {\n        s.insert(e);\n    }\n    foreach(e; b)\n    {\n        s.insert(e);\n\
    \    }\n    return s.array;\n}\n/*\nReturn the difference of two arrays\n    >>>\
    \ difference([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L])\n    [1L, 2L]\n*/\nlong[] difference(long[]\
    \ a, long[] b) \n{\n    auto s = set!(long)();\n    foreach(e; a)\n    {\n   \
    \     s.insert(e);\n    }\n    foreach(e; b)\n    {\n        s.remove(e);\n  \
    \  }\n    return s.array;\n}\n/*\nReturn the symmetric difference of two arrays\n\
    \    >>> symmetric_difference([1L, 2L, 3L, 4L", "{\n    long[] result = new long[l.length];\n\
    \    size_t count = 0;\n    foreach(long i; l)\n    {\n        if(count == 0 ||\
    \ result[count-1] != i)\n        {\n            result[count] = i;\n         \
    \   count++;\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l)\n    {\n        if(e in result)\n  \
    \          continue;\n        result ~= e;\n    }\n    return result;\n}", "{\n\
    \    long[] result = [];\n    foreach(e; l)\n    {\n        if(e !in result)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] result = new long[l.length];\n    size_t n = 0;\n    foreach\
    \ (long i; l)\n    {\n        if (!result.canFind(i))\n        {\n           \
    \ result[n] = i;\n            n++;\n        }\n    }\n    return result[0..n];\n\
    }", "{\n    long[] result = new long[];\n    foreach(l_; l)\n    {\n        if(!result.canFind(l_))\n\
    \        {\n            result ~= l_;\n        }\n    }\n    return result.sort;\n\
    }", "{\n    return sort(array(uniq(l)));\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5,\
    \ 9, 123]\n    \n*/", "{\n    long[] ret = new long[l.length];\n    ret[0] = l[0];\n\
    \    int j = 1;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i]\
    \ != l[i-1])\n        {\n            ret[j] = l[i];\n            j++;\n      \
    \  }\n    }\n    return ret[0..j];\n}", "{\n    long[] result = new long[l.length];\n\
    \    size_t count = 0;\n    foreach(long i; l)\n    {\n        if(count == 0 ||\
    \ result[count-1] != i)\n        {\n            result[count] = i;\n         \
    \   count++;\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ result = new long[l.length];\n    size_t i = 0;\n    foreach(e; l)\n    {\n\
    \        if (i == 0 || e != result[i-1])\n        {\n            result[i] = e;\n\
    \            i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    long[]\
    \ ret = new long[];\n    foreach(e; l)\n    {\n        if(e in ret)\n        \
    \    continue;\n        ret ~= e;\n    }\n    return ret;\n}", "{\n    auto s\
    \ = set!(long)();\n    foreach(e; l)\n        s.insert(e);\n    return s.array;\n\
    }", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n    foreach(long\
    \ e; l)\n    {\n        if(e !in ret)\n        {\n            ret[i] = e;\n  \
    \          i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    auto s =\
    \ set!(long)(l);\n    return s.array;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto s = set!(long)(l);\n\
    \    return s.array;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n\
    \    \n*/\nlong[] unique(long[] l) \n{\n    auto s = set!(long)(l);\n    return\
    \ s.array;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    auto s = set!(long)(l);\n    return s.array;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    auto s = set!(long)(l);\n    return s.array;\n}\n\
    /*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n    auto s = set!(long)(", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(ret.canFind(i))\n            continue;\n        ret\
    \ ~= i;\n    }\n    ret.sort();\n    return ret;\n}", "{\n    long[] ret = new\
    \ long[l.length];\n    int ret_len = 0;\n    foreach(long i; l)\n    {\n     \
    \   if(ret_len == 0 || ret[ret_len-1] != i)\n        {\n            ret[ret_len]\
    \ = i;\n            ret_len++;\n        }\n    }\n    return ret[0..ret_len];\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] ret = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n\
    \    {\n        if(i == 0 || ret[i-1] != x)\n        {\n            ret[i] = x;\n\
    \            i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    long[] tmp = new long[l.length];\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    for (; i < l.length; i++)\n    {\n \
    \       if (l[i] != tmp[j])\n        {\n            tmp[j] = l[i];\n         \
    \   ret[k] = l[i];\n            j++;\n            k++;\n        }\n    }\n   \
    \ ret = ret[0..k];\n    return ret;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new\
    \ long[l.length];\n    long[] tmp = new long[l.length];\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i]\
    \ != tmp[j])\n        {\n            tmp[j] = l[i];\n            ret[k] = l[i];\n\
    \            j++;\n            k++;\n        }\n    }\n    ret = ret[0..k];\n\
    \    return ret;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    long[]\
    \ tmp = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    for (; i < l.length; i++)\n    {\n        if (l[i] != tmp[j])\n        {\n\
    \            tmp[j] = l[", "{\n    long[] ret = new long[l.length];\n    int i\
    \ = 0;\n    foreach(long x; l)\n    {\n        if(i == 0 || ret[i-1] != x)\n \
    \       {\n            ret[i] = x;\n            i++;\n        }\n    }\n    return\
    \ ret[0..i];\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n \
    \   foreach(long x; l)\n    {\n        if(i == 0 || ret[i-1] != x)\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] result = new long[l.length];\n    size_t result_length = 0;\n\
    \    foreach(long x; l)\n    {\n        if(!result.canFind(x))\n        {\n  \
    \          result[result_length] = x;\n            result_length++;\n        }\n\
    \    }\n    return result[0..result_length];\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    size_t result_length = 0;\n    foreach(long x; l)\n\
    \    {\n        if(!result.canFind(x))\n        {\n            result[result_length]\
    \ = x;\n            result_length++;\n        }\n    }\n    return result[0..result_length];\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    long[] result = new long[l.length];\n    size_t result_length\
    \ = 0;\n    foreach(long x; l)\n    {\n        if(!result.canFind(x))\n      \
    \  {\n            result[result_length] = x;\n            result_length++;\n \
    \       }\n    }\n    return result[0..result_length];\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[]\
    \ result = new long[", "{\n    long[] ret = new long[l.length];\n    long[] tmp\
    \ = new long[l.length];\n    long[] tmp2 = new long[l.length];\n    long[] tmp3\
    \ = new long[l.length];\n    long[] tmp4 = new long[l.length];\n    long[] tmp5\
    \ = new long[l.length];\n    long[] tmp6 = new long[l.length];\n    long[] tmp7\
    \ = new long[l.length];\n    long[] tmp8 = new long[l.length];\n    long[] tmp9\
    \ = new long[l.length];\n    long[] tmp10 = new long[l.length];\n    long[] tmp11\
    \ = new long[l.length];\n    long[] tmp12 = new long[l.length];\n    long[] tmp13\
    \ = new long[l.length];\n    long[] tmp14 = new long[l.length];\n    long[] tmp15\
    \ = new long[l.length];\n    long[] tmp16 = new long[l.length];\n    long[] tmp17\
    \ = new long[l.length];\n    long[] tmp18 = new long[l.length];\n    long[] tmp19\
    \ = new long[l.length];\n    long[] tmp20 = new long[l.length];\n    long[] tmp21\
    \ = new long[l.length];\n    long[] tmp22 = new long[l.length];\n    long[] tmp23\
    \ = new long[l.length];\n    long[] tmp24 = new long[l.length];\n    long[] tmp25\
    \ = new long[l.length];\n    long[] tmp26 = new long[l.length];\n    long[] tmp27\
    \ = new long[l.length];\n    long[] tmp28 = new long[l.length];\n    long[] tmp29\
    \ = new long[l.length];\n    long[] tmp30 = new long[l.length];\n    long[] tmp31\
    \ = new long[l.length];\n    long[] tmp32 = new long[l.length];\n    long[] tmp33\
    \ = new long[l.length];\n    long[] tmp34 = new long[l.length];\n    long[] tmp35\
    \ = new long[l.length];\n    long[] tmp36 = new", "{\n    auto s = new Set!(long)();\n\
    \    foreach(e; l)\n        s.insert(e);\n    return s.keys;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n\
    {\n    auto s = new Set!(long)();\n    foreach(e; l)\n        s.insert(e);\n \
    \   return s.keys;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n\
    \    \n*/\nlong[] unique(long[] l) \n{\n    auto s = new Set!(long)();\n    foreach(e;\
    \ l)\n        s.insert(e);\n    return s.keys;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto s = new\
    \ Set!(long)();\n    foreach(e; l)\n        s.insert(e);\n    return s.keys;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    auto s = new Set!(long)();\n    foreach(e; l)\n  \
    \      s.insert(e);\n    return s.keys;\n}\n/*\nReturn", "{\n    auto s = set!(long)();\n\
    \    foreach(e; l)\n        s.insert(e);\n    return s.array;\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int ret_idx = 0;\n    foreach(long v; l)\n  \
    \  {\n        if(ret_idx == 0 || ret[ret_idx-1] != v)\n        {\n           \
    \ ret[ret_idx] = v;\n            ret_idx++;\n        }\n    }\n    return ret[0..ret_idx];\n\
    }", "{\n    long[] result = new long[l.length];\n    int j = 0;\n    foreach(i;\
    \ l)\n    {\n        if(j == 0 || result[j-1] != i)\n        {\n            result[j]\
    \ = i;\n            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n\
    \    auto u = new long[];\n    foreach(e; l)\n    {\n        if(e in u)\n    \
    \        continue;\n        u ~= e;\n    }\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret2 = new long[l.length];\n    long[] ret3 = new long[l.length];\n\
    \    long[] ret4 = new long[l.length];\n    long[] ret5 = new long[l.length];\n\
    \    long[] ret6 = new long[l.length];\n    long[] ret7 = new long[l.length];\n\
    \    long[] ret8 = new long[l.length];\n    long[] ret9 = new long[l.length];\n\
    \    long[] ret10 = new long[l.length];\n    long[] ret11 = new long[l.length];\n\
    \    long[] ret12 = new long[l.length];\n    long[] ret13 = new long[l.length];\n\
    \    long[] ret14 = new long[l.length];\n    long[] ret15 = new long[l.length];\n\
    \    long[] ret16 = new long[l.length];\n    long[] ret17 = new long[l.length];\n\
    \    long[] ret18 = new long[l.length];\n    long[] ret19 = new long[l.length];\n\
    \    long[] ret20 = new long[l.length];\n    long[] ret21 = new long[l.length];\n\
    \    long[] ret22 = new long[l.length];\n    long[] ret23 = new long[l.length];\n\
    \    long[] ret24 = new long[l.length];\n    long[] ret25 = new long[l.length];\n\
    \    long[] ret26 = new long[l.length];\n    long[] ret27 = new long[l.length];\n\
    \    long[] ret28 = new long[l.length];\n    long[] ret29 = new long[l.length];\n\
    \    long[] ret30 = new long[l.length];\n    long[] ret31 = new long[l.length];\n\
    \    long[] ret32 = new long[l.length];\n    long[] ret33 = new long[l.length];\n\
    \    long[] ret34 = new long[l.length];\n    long[] ret35 = new long[l.length];\n\
    \    long[] ret36 = new long[l.length];\n    long[] ret37 =", "{\n    long[] ret\
    \ = new long[l.length];\n    ret[0] = l[0];\n    int ret_len = 1;\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] != l[i-1]) \n        {\n\
    \            ret[ret_len] = l[i];\n            ret_len++;\n        }\n    }\n\
    \    return ret[0..ret_len];\n}", "{\n    return sort(uniq(l));\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int j = 0;\n    foreach(long i; l)\n    {\n\
    \        if(j == 0 || result[j-1] != i)\n        {\n            result[j] = i;\n\
    \            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    auto\
    \ result = new long[];\n    foreach(e; l)\n    {\n        if(!e in result)\n \
    \           result ~= e;\n    }\n    return result.sort();\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int j = 0;\n    foreach(long i; l) {\n      \
    \  if (j == 0 || ret[j-1] != i) {\n            ret[j] = i;\n            j++;\n\
    \        }\n    }\n    return ret[0..j];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(x; l) \n    {\n        if(!ret.canFind(x)) \n   \
    \     {\n            ret[i] = x;\n            i++;\n        }\n    }\n    return\
    \ ret[0..i];\n}", "{\n    long[] ret = new long[l.length];\n    long[] tmp = new\
    \ long[l.length];\n    int i = 0;\n    int j = 0;\n    foreach(lval; l)\n    {\n\
    \        if(!tmp.canFind(lval))\n        {\n            ret[i] = lval;\n     \
    \       tmp[j] = lval;\n            i++;\n            j++;\n        }\n    }\n\
    \    return ret[0..i];\n}", "{\n    return std.algorithm.uniq(std.algorithm.sort(l));\n\
    }", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n    foreach(e; l)\n\
    \    {\n        if(e in ret)\n            continue;\n        ret[i++] = e;\n \
    \   }\n    return ret[0..i];\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(!ret.canFind(i))\n            ret ~= i;\n    }\n  \
    \  return ret;\n}", "{\n    long[] ret = new long[l.length];\n    size_t i = 0;\n\
    \    foreach(long e; l)\n    {\n        if (e !in ret[0..i])\n        {\n    \
    \        ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] res = new long[l.length];\n    int i = 0;\n    foreach(e; l)\n\
    \    {\n        if(i == 0 || e != res[i-1])\n        {\n            res[i] = e;\n\
    \            i++;\n        }\n    }\n    return res[0..i];\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    long[] ret2 = new long[l.length];\n    long[]\
    \ ret3 = new long[l.length];\n    long[] ret4 = new long[l.length];\n    long[]\
    \ ret5 = new long[l.length];\n    long[] ret6 = new long[l.length];\n    long[]\
    \ ret7 = new long[l.length];\n    long[] ret8 = new long[l.length];\n    long[]\
    \ ret9 = new long[l.length];\n    long[] ret10 = new long[l.length];\n    long[]\
    \ ret11 = new long[l.length];\n    long[] ret12 = new long[l.length];\n    long[]\
    \ ret13 = new long[l.length];\n    long[] ret14 = new long[l.length];\n    long[]\
    \ ret15 = new long[l.length];\n    long[] ret16 = new long[l.length];\n    long[]\
    \ ret17 = new long[l.length];\n    long[] ret18 = new long[l.length];\n    long[]\
    \ ret19 = new long[l.length];\n    long[] ret20 = new long[l.length];\n    long[]\
    \ ret21 = new long[l.length];\n    long[] ret22 = new long[l.length];\n    long[]\
    \ ret23 = new long[l.length];\n    long[] ret24 = new long[l.length];\n    long[]\
    \ ret25 = new long[l.length];\n    long[] ret26 = new long[l.length];\n    long[]\
    \ ret27 = new long[l.length];\n    long[] ret28 = new long[l.length];\n    long[]\
    \ ret29 = new long[l.length];\n    long[] ret30 = new long[l.length];\n    long[]\
    \ ret31 = new long[l.length];\n    long[] ret32 = new long[l.length];\n    long[]\
    \ ret33 = new long[l.length];\n    long[] ret34 = new long[l.length];\n    long[]\
    \ ret35 = new long[l.length];\n    long[] ret36 = new long[l.length];\n    long[]\
    \ ret37 =", "{\n    long[] ret;\n    ret.length = l.length;\n    long[] temp;\n\
    \    temp.length = l.length;\n    long[] temp2;\n    temp2.length = l.length;\n\
    \    long[] temp3;\n    temp3.length = l.length;\n    long[] temp4;\n    temp4.length\
    \ = l.length;\n    long[] temp5;\n    temp5.length = l.length;\n    long[] temp6;\n\
    \    temp6.length = l.length;\n    long[] temp7;\n    temp7.length = l.length;\n\
    \    long[] temp8;\n    temp8.length = l.length;\n    long[] temp9;\n    temp9.length\
    \ = l.length;\n    long[] temp10;\n    temp10.length = l.length;\n    long[] temp11;\n\
    \    temp11.length = l.length;\n    long[] temp12;\n    temp12.length = l.length;\n\
    \    long[] temp13;\n    temp13.length = l.length;\n    long[] temp14;\n    temp14.length\
    \ = l.length;\n    long[] temp15;\n    temp15.length = l.length;\n    long[] temp16;\n\
    \    temp16.length = l.length;\n    long[] temp17;\n    temp17.length = l.length;\n\
    \    long[] temp18;\n    temp18.length = l.length;\n    long[] temp19;\n    temp19.length\
    \ = l.length;\n    long[] temp20;\n    temp20.length = l.length;\n    long[] temp21;\n\
    \    temp21.length = l.length;\n    long[] temp22;\n    temp22.length = l.length;\n\
    \    long[] temp23;\n    temp23.length = l.length;\n    long[] temp24;\n    temp24.length\
    \ = l.length;\n    long[] temp25;\n    temp25.length = l.length;\n    long[] temp26;\n\
    \    temp26.length = l.length;\n    long[] temp27;\n    temp27.length = l.length;\n\
    \    long[] temp28;\n    temp", "{\n    long[] ret = new long[l.length];\n   \
    \ size_t j = 0;\n    foreach(long i; l)\n    {\n        if(!ret.canFind(i))\n\
    \        {\n            ret[j] = i;\n            j++;\n        }\n    }\n    return\
    \ ret[0..j];\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n \
    \   foreach(long x; l)\n    {\n        if(i == 0 || x != ret[i-1])\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    auto r = l.dup;\n    r.sort;\n    r.unique;\n    return r;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/", "{\n    auto s = new SortedSet!(long)();\n\
    \    foreach(e; l)\n    {\n        s.insert(e);\n    }\n    return s.array;\n}",
  "{\n    long[] r;\n    long[] seen;\n    foreach (long i; l) {\n        if (i in\
    \ seen) {\n            continue;\n        }\n        r ~= i;\n        seen ~=\
    \ i;\n    }\n    return r;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(result.canFind(i))\n            continue;\n       \
    \ result ~= i;\n    }\n    return result;\n}", "{\n    long[] ret = new long[l.length];\n\
    \    long[] ret2 = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n\
    \    {\n        if(x in ret)\n            continue;\n        ret[i] = x;\n   \
    \     i++;\n    }\n    ret2 = ret[0..i];\n    ret2.sort();\n    return ret2;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    long[] ret2\
    \ = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n     \
    \   if(x in ret)\n            continue;\n        ret[i] = x;\n        i++;\n \
    \   }\n    ret2 = ret[0..i];\n    ret2.sort();\n    return ret2;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    long[] ret2 = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x in ret)\n       \
    \     continue;\n        ret[i] = x;\n        i++;\n    }\n    ret2 = ret[0..i];\n\
    \    ret2.sort();\n    return ret2;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] ret;\n    long[] tmp;\n    int i;\n    int j;\n    int k;\n    int\
    \ n;\n    int m;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n\
    \    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int\
    \ aa;\n    int ab;\n    int ac;\n    int ad;\n    int ae;\n    int af;\n    int\
    \ ag;\n    int ah;\n    int ai;\n    int aj;\n    int ak;\n    int al;\n    int\
    \ am;\n    int an;\n    int ao;\n    int ap;\n    int aq;\n    int ar;\n    int\
    \ as;\n    int at;\n    int au;\n    int av;\n    int aw;\n    int ax;\n    int\
    \ ay;\n    int az;\n    int ba;\n    int bb;\n    int bc;\n    int bd;\n    int\
    \ be;\n    int bf;\n    int bg;\n    int bh;\n    int bi;\n    int bj;\n    int\
    \ bk;\n    int bl;\n    int bm;\n    int bn;\n    int bo;\n    int bp;\n    int\
    \ bq;\n    int br;\n    int bs;\n    int bt;\n    int bu;\n    int bv;\n    int\
    \ bw;\n    int bx;\n    int by;\n    int bz;\n    int ca;\n    int cb;\n    int\
    \ cc;\n    int cd;\n    int ce;\n    int cf;\n    int cg;\n    int ch;\n    int\
    \ ci;\n    int cj;\n    int ck;\n    int cl;\n    int cm;\n    int cn;\n    int\
    \ co;\n    int cp;\n    int cq;\n    int cr;\n    int cs;\n    int ct;\n    int\
    \ cu;\n    int cv;\n    int cw;\n    int cx;\n    int cy;", "{\n    auto result\
    \ = new long[];\n    foreach(e; l) \n    {\n        if(!result.canFind(e)) \n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] ret = new long[l.length];\n    long[] tmp = new long[l.length];\n\
    \    long[] tmp2 = new long[l.length];\n    long[] tmp3 = new long[l.length];\n\
    \    long[] tmp4 = new long[l.length];\n    long[] tmp5 = new long[l.length];\n\
    \    long[] tmp6 = new long[l.length];\n    long[] tmp7 = new long[l.length];\n\
    \    long[] tmp8 = new long[l.length];\n    long[] tmp9 = new long[l.length];\n\
    \    long[] tmp10 = new long[l.length];\n    long[] tmp11 = new long[l.length];\n\
    \    long[] tmp12 = new long[l.length];\n    long[] tmp13 = new long[l.length];\n\
    \    long[] tmp14 = new long[l.length];\n    long[] tmp15 = new long[l.length];\n\
    \    long[] tmp16 = new long[l.length];\n    long[] tmp17 = new long[l.length];\n\
    \    long[] tmp18 = new long[l.length];\n    long[] tmp19 = new long[l.length];\n\
    \    long[] tmp20 = new long[l.length];\n    long[] tmp21 = new long[l.length];\n\
    \    long[] tmp22 = new long[l.length];\n    long[] tmp23 = new long[l.length];\n\
    \    long[] tmp24 = new long[l.length];\n    long[] tmp25 = new long[l.length];\n\
    \    long[] tmp26 = new long[l.length];\n    long[] tmp27 = new long[l.length];\n\
    \    long[] tmp28 = new long[l.length];\n    long[] tmp29 = new long[l.length];\n\
    \    long[] tmp30 = new long[l.length];\n    long[] tmp31 = new long[l.length];\n\
    \    long[] tmp32 = new long[l.length];\n    long[] tmp33 = new long[l.length];\n\
    \    long[] tmp34 = new long[l.length];\n    long[] tmp35 = new long[l.length];\n\
    \    long[] tmp36 = new"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
