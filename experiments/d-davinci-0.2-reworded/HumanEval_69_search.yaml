name: HumanEval_69_search
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
  \ array of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the array.\n    If no such a value exist, return -1.\n\n    >>> search([4L, 1L,\
  \ 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
  \    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    auto d = new Map!(long, long);\n    foreach(i; lst)\n    {\n\
    \        if(d.count(i) == 0)\n            d[i] = 1;\n        else\n          \
    \  d[i]++;\n    }\n    long max = 0;\n    foreach(i; d.keys)\n    {\n        if(d[i]\
    \ >= i && i > max)\n            max = i;\n    }\n    return max == 0 ? -1 : max;\n\
    }", "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if(counts[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = new long[lst.length];\n    long[] values = new long[lst.length];\n\
    \    long count = 0;\n    long value = 0;\n    long index = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(i == 0)\n        {\n            count++;\n\
    \            value = sorted[i];\n        }\n        else if(sorted[i] == sorted[i-1])\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     counts[index] = count;\n            values[index] = value;\n           \
    \ index++;\n            count = 1;\n            value = sorted[i];\n        }\n\
    \    }\n    counts[index] = count;\n    values[index] = value;\n    foreach(i;\
    \ 0 .. counts.length)\n    {\n        if(counts[i] >= values[i])\n        {\n\
    \            return values[i];\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i]++;\n            }\n        }\n    }\n \
    \   long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] == freq[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort();\n \
    \   long[] freq = new long[arr.length];\n    long[] nums = new long[arr.length];\n\
    \    long[] res = new long[arr.length];\n    long[] res2 = new long[arr.length];\n\
    \    long[] res3 = new long[arr.length];\n    long[] res4 = new long[arr.length];\n\
    \    long[] res5 = new long[arr.length];\n    long[] res6 = new long[arr.length];\n\
    \    long[] res7 = new long[arr.length];\n    long[] res8 = new long[arr.length];\n\
    \    long[] res9 = new long[arr.length];\n    long[] res10 = new long[arr.length];\n\
    \    long[] res11 = new long[arr.length];\n    long[] res12 = new long[arr.length];\n\
    \    long[] res13 = new long[arr.length];\n    long[] res14 = new long[arr.length];\n\
    \    long[] res15 = new long[arr.length];\n    long[] res16 = new long[arr.length];\n\
    \    long[] res17 = new long[arr.length];\n    long[] res18 = new long[arr.length];\n\
    \    long[] res19 = new long[arr.length];\n    long[] res20 = new long[arr.length];\n\
    \    long[] res21 = new long[arr.length];\n    long[] res22 = new long[arr.length];\n\
    \    long[] res23 = new long[arr.length];\n    long[] res24 = new long[arr.length];\n\
    \    long[] res25 = new long[arr.length];\n    long[] res26 = new long[arr.length];\n\
    \    long[] res27 = new long[arr.length];\n    long[] res28 = new long[arr.length];\n\
    \    long[] res29 = new long[arr.length];\n    long[] res30 = new long[arr.length];\n\
    \    long[] res31 = new long[arr.length];\n    long[] res32 = new long[arr.length];\n\
    \    long[] res33 = new long[arr.length];\n    long", "{\n    long[] freq = new\
    \ long[lst.length];\n    long[] uniq = new long[lst.length];\n    int i = 0;\n\
    \    foreach(e; lst)\n    {\n        if(e in uniq)\n        {\n            freq[i]++;\n\
    \        }\n        else\n        {\n            uniq[i] = e;\n            freq[i]\
    \ = 1;\n            i++;\n        }\n    }\n    long max = -1;\n    for(int j\
    \ = 0; j < i; j++)\n    {\n        if(uniq[j] <= freq[j] && uniq[j] > max)\n \
    \       {\n            max = uniq[j];\n        }\n    }\n    return max;\n}",
  "{\n    auto d = lst.group.array;\n    auto v = d.map!(a => a[0]).array;\n    auto\
    \ c = d.map!(a => a.length).array;\n    auto m = v.max;\n    if (m < 1) return\
    \ -1;\n    foreach (i; 0 .. m)\n    {\n        if (c[i] >= v[i]) return v[i];\n\
    \    }\n    return -1;\n}", "{\n    auto freq = new int[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    long max = 0;\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n       \
    \     max = i;\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n    {\n      \
    \  if(e >= i && e != 0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto d = new Map!(long, long);\n    foreach(e; lst)\n\
    \    {\n        if(d.contains(e))\n            d[e]++;\n        else\n       \
    \     d[e] = 1;\n    }\n    long max = -1;\n    foreach(e; d.byKey)\n    {\n \
    \       if(e.value >= e.key && e.key > max)\n            max = e.key;\n    }\n\
    \    return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    auto m = new Map!(long,\
    \ long);\n    foreach(i; lst)\n    {\n        if(m.contains(i))\n        {\n \
    \           m[i]++;\n        }\n        else\n        {\n            m[i] = 1;\n\
    \        }\n    }\n    long max = -1;\n    foreach(i; m.keys)\n    {\n       \
    \ if(i > m[i])\n        {\n            continue;\n        }\n        if(i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        if(lst[i] > 0)\n        {\n            freq[lst[i]]++;\n      \
    \  }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            max = max(max, i);\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    auto d = new int[lst.length];\n\
    \    foreach(i, e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n\
    \    {\n        if(e >= i && e != 0)\n        {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ ref e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, ref e; d)\n    {\n\
    \        if(e >= i && i > 0)\n            return i;\n    }\n    return -1;\n}",
  "{\n    long max = 0;\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        if(i > max)\n            max = i;\n        freq[i]++;\n    }\n\
    \    foreach(i; 0..max)\n    {\n        if(freq[i] >= i)\n            return i;\n\
    \    }\n    return -1;\n}", "{\n    auto d = new Dictionary!(long, long)();\n\
    \    foreach(i; lst)\n    {\n        if(d.containsKey(i))\n        {\n       \
    \     d[i]++;\n        }\n        else\n        {\n            d[i] = 1;\n   \
    \     }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n        if(i\
    \ > d[i])\n        {\n            continue;\n        }\n        if(i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = count(lst, lst[i]);\n    }\n    long max = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n   \
    \     {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    return max;\n}", "{\n    auto a = lst.dup;\n \
    \   a.sort;\n    long max = a[a.length - 1];\n    long[] freq = new long[max +\
    \ 1];\n    foreach(i; a)\n    {\n        freq[i]++;\n    }\n    foreach(i; a)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort();\n \
    \   long[] freq = new long[arr.length];\n    long[] val = new long[arr.length];\n\
    \    long[] res = new long[arr.length];\n    long[] res2 = new long[arr.length];\n\
    \    long[] res3 = new long[arr.length];\n    long[] res4 = new long[arr.length];\n\
    \    long[] res5 = new long[arr.length];\n    long[] res6 = new long[arr.length];\n\
    \    long[] res7 = new long[arr.length];\n    long[] res8 = new long[arr.length];\n\
    \    long[] res9 = new long[arr.length];\n    long[] res10 = new long[arr.length];\n\
    \    long[] res11 = new long[arr.length];\n    long[] res12 = new long[arr.length];\n\
    \    long[] res13 = new long[arr.length];\n    long[] res14 = new long[arr.length];\n\
    \    long[] res15 = new long[arr.length];\n    long[] res16 = new long[arr.length];\n\
    \    long[] res17 = new long[arr.length];\n    long[] res18 = new long[arr.length];\n\
    \    long[] res19 = new long[arr.length];\n    long[] res20 = new long[arr.length];\n\
    \    long[] res21 = new long[arr.length];\n    long[] res22 = new long[arr.length];\n\
    \    long[] res23 = new long[arr.length];\n    long[] res24 = new long[arr.length];\n\
    \    long[] res25 = new long[arr.length];\n    long[] res26 = new long[arr.length];\n\
    \    long[] res27 = new long[arr.length];\n    long[] res28 = new long[arr.length];\n\
    \    long[] res29 = new long[arr.length];\n    long[] res30 = new long[arr.length];\n\
    \    long[] res31 = new long[arr.length];\n    long[] res32 = new long[arr.length];\n\
    \    long[] res33 = new long[arr.length];\n    long[]", "{\n    long[] count =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        count[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        count[lst[i]]++;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(count[i]\
    \ >= i && count[i] > count[max])\n        {\n            max = i;\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(counts[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            max\
    \ = max(max, i);\n        }\n    }\n    return max;\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        counts[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if (counts[i] >= i)\n\
    \        {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto m = new Map!int;\n    foreach(i; lst)\n\
    \    {\n        if(m.contains(i))\n        {\n            m[i]++;\n        }\n\
    \        else\n        {\n            m[i] = 1;\n        }\n    }\n    long max\
    \ = -1;\n    foreach(i; m.keys)\n    {\n        if(i >= m[i] && i > max)\n   \
    \     {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n   \
    \ long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        counts[i] = count(lst, lst[i]);\n    }\n    long max = max(counts);\n\
    \    long max_index = indexOf(counts, max);\n    if(max_index == -1)\n    {\n\
    \        return -1;\n    }\n    return lst[max_index];\n}", "{\n    auto d = new\
    \ Dictionary!(long, long)();\n    foreach(i; lst)\n    {\n        d[i]++;\n  \
    \  }\n    long max = 0;\n    foreach(i; d.keys)\n    {\n        if(i > d[i])\n\
    \            continue;\n        if(i > max)\n            max = i;\n    }\n   \
    \ return max == 0 ? -1 : max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] val = new long[lst.length];\n    long max = 0;\n    long maxVal = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n        val[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \        val[lst[i]] = lst[i];\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i && freq[i] > max)\n        {\n            max = freq[i];\n\
    \            maxVal = val[i];\n        }\n    }\n    if(max == 0)\n    {\n   \
    \     return -1;\n    }\n    return maxVal;\n}", "{\n    auto d = new Dictionary!(long,\
    \ long)();\n    foreach(i; lst)\n    {\n        if(d.count(i) == 0)\n        {\n\
    \            d[i] = 1;\n        }\n        else\n        {\n            d[i]++;\n\
    \        }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n       \
    \ if(i > d[i])\n        {\n            continue;\n        }\n        else\n  \
    \      {\n            if(i > max)\n            {\n                max = i;\n \
    \           }\n        }\n    }\n    return max;\n}", "{\n    long[] count = new\
    \ long[lst.length];\n    long[] num = new long[lst.length];\n    long max = 0;\n\
    \    long maxnum = 0;\n    long maxcount = 0;\n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        long temp = lst[i];\n        long counttemp = 0;\n    \
    \    for (int j = 0; j < lst.length; j++)\n        {\n            if (temp ==\
    \ lst[j])\n            {\n                counttemp++;\n            }\n      \
    \  }\n        if (counttemp >= temp)\n        {\n            if (counttemp > maxcount)\n\
    \            {\n                maxcount = counttemp;\n                maxnum\
    \ = temp;\n            }\n        }\n    }\n    if (maxcount == 0)\n    {\n  \
    \      return -1;\n    }\n    return maxnum;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    long max = 0;\n    long\
    \ maxIndex = 0;\n    foreach(i, e; sorted)\n    {\n        if(e > max)\n     \
    \   {\n            max = e;\n            maxIndex = i;\n        }\n    }\n   \
    \ foreach(i, e; sorted)\n    {\n        if(e == sorted[maxIndex])\n        {\n\
    \            freq[i] = 1;\n        }\n        else\n        {\n            freq[i]\
    \ = 0;\n        }\n    }\n    foreach(i, e; sorted)\n    {\n        if(e == sorted[maxIndex])\n\
    \        {\n            freq[i] = 1;\n        }\n        else\n        {\n   \
    \         freq[i] = 0;\n        }\n    }\n    foreach(i, e; sorted)\n    {\n \
    \       if(e == sorted[maxIndex])\n        {\n            freq[i] = 1;\n     \
    \   }\n        else\n        {\n            freq[i] = 0;\n        }\n    }\n \
    \   foreach(i, e; sorted)\n    {\n        if(e == sorted[maxIndex])\n        {\n\
    \            freq[i] = 1;\n        }\n        else\n        {\n            freq[i]\
    \ = 0;\n        }\n    }\n    foreach(i, e; sorted)\n    {\n        if(e == sorted[maxIndex])\n\
    \        {\n            freq[i] = 1;\n        }\n        else\n        {\n   \
    \         freq[i] = 0;\n        }\n    }\n    foreach(i, e; sorted)\n    {\n \
    \       if(e == sorted[maxIndex])\n        {\n            freq[i] = 1;\n     \
    \   }\n        else\n        {\n            freq[i] = 0;\n        }\n    }\n \
    \   foreach(i, e; sorted)\n    {\n        if(e == sorted[maxIndex])\n        {\n\
    \            freq[i] = 1;\n       ", "{\n    int[] freq = new int[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n \
    \   foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= i && freq[i] > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] unique = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long count = 0;\n    long temp = 0;\n    long max = 0;\n    long max_index\
    \ = 0;\n    long result_index = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long\
    \ pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt =\
    \ 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n\
    \    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n  \
    \  long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n  \
    \  long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n   ", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = lst[i];\n    }\n    freq = sort(freq);\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] == freq[i+1])\n        {\n     \
    \       if(freq[i] >= freq[i+1])\n            {\n                return freq[i];\n\
    \            }\n        }\n    }\n    return -1L;\n}", "{\n    long[] sorted =\
    \ lst.dup.sort();\n    long[] unique = sorted.uniq;\n    long[] freq = unique.map!(x\
    \ => sorted.count(x));\n    long[] freq_sorted = freq.dup.sort;\n    long[] freq_sorted_unique\
    \ = freq_sorted.uniq;\n    long[] freq_sorted_unique_freq = freq_sorted_unique.map!(x\
    \ => freq_sorted.count(x));\n    long[] freq_sorted_unique_freq_sorted = freq_sorted_unique_freq.dup.sort;\n\
    \    long[] freq_sorted_unique_freq_sorted_unique = freq_sorted_unique_freq_sorted.uniq;\n\
    \    long[] freq_sorted_unique_freq_sorted_unique_freq = freq_sorted_unique_freq_sorted_unique.map!(x\
    \ => freq_sorted_unique_freq_sorted.count(x));\n    long[] freq_sorted_unique_freq_sorted_unique_freq_sorted\
    \ = freq_sorted_unique_freq_sorted_unique_freq.dup.sort;\n    long[] freq_sorted_unique_freq_sorted_unique_freq_sorted_unique\
    \ = freq_sorted_unique_freq_sorted_unique_freq_sorted.uniq;\n    long[] freq_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq\
    \ = freq_sorted_unique_freq_sorted_unique_freq_sorted_unique.map!(x => freq_sorted_unique_freq_sorted_unique_freq_sorted.count(x));\n\
    \    long[] freq_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted\
    \ = freq_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq.dup.sort;",
  "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long max = arr[$-1];\n    long[]\
    \ freq = new long[max+1];\n    foreach(i; arr)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; arr)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    long max_freq = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n         \
    \   max_freq = freq[i];\n        }\n    }\n    if(max_freq == 0)\n    {\n    \
    \    return -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n\
    \        if(freq[i] >= i && freq[i] > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] freq = new long[sorted.length];\n    long[] nums = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long count = 0;\n    long num\
    \ = 0;\n    long res = 0;\n    foreach(i; 0 .. sorted.length)\n    {\n       \
    \ if(i == 0)\n        {\n            num = sorted[i];\n            count = 1;\n\
    \        }\n        else if(sorted[i] == sorted[i-1])\n        {\n           \
    \ count++;\n        }\n        else\n        {\n            nums[i-1] = num;\n\
    \            freq[i-1] = count;\n            num = sorted[i];\n            count\
    \ = 1;\n        }\n    }\n    nums[sorted.length-1] = num;\n    freq[sorted.length-1]\
    \ = count;\n    foreach(i; 0 .. sorted.length)\n    {\n        if(nums[i] == freq[i])\n\
    \        {\n            res = nums[i];\n        }\n    }\n    if(res == 0)\n \
    \   {\n        return -1;\n    }\n    else\n    {\n        return res;\n    }\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(lst[i] >= freq[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] counts = new long[lst.length];\n    long[] values = new long[lst.length];\n\
    \    long count = 0;\n    long value = 0;\n    long index = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(i == 0)\n        {\n            count =\
    \ 1;\n            value = sorted[i];\n        }\n        else if(sorted[i] ==\
    \ sorted[i-1])\n        {\n            count++;\n        }\n        else\n   \
    \     {\n            counts[index] = count;\n            values[index] = value;\n\
    \            index++;\n            count = 1;\n            value = sorted[i];\n\
    \        }\n    }\n    counts[index] = count;\n    values[index] = value;\n  \
    \  long max = 0;\n    foreach(i; 0 .. index+1)\n    {\n        if(values[i] >=\
    \ counts[i] && values[i] > max)\n        {\n            max = values[i];\n   \
    \     }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    auto d = new Dictionary!(long, long)();\n    foreach(e; lst)\n\
    \    {\n        if(d.containsKey(e))\n        {\n            d[e]++;\n       \
    \ }\n        else\n        {\n            d[e] = 1;\n        }\n    }\n    long\
    \ max = -1;\n    foreach(e; d.keys)\n    {\n        if(e > d[e])\n        {\n\
    \            continue;\n        }\n        if(e > max)\n        {\n          \
    \  max = e;\n        }\n    }\n    return max;\n}", "{\n    auto d = new Dictionary!(long,\
    \ long);\n    foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n\
    \            d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n\
    \        }\n    }\n    long max = -1;\n    foreach(e; d.byKey)\n    {\n      \
    \  if(e.value >= e.key && e.key > max)\n        {\n            max = e.key;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n   \
    \ return -1;\n}", "{\n    long[] cnt = new long[lst.length];\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        cnt[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(cnt[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto freq = lst.group.length;\n    return freq.filter!(a\
    \ => a.value >= a.key).max.value;\n}", "{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = 0;\n  \
    \  foreach(i; freq)\n    {\n        if(i > max && i >= freq[i])\n        {\n \
    \           max = i;\n        }\n    }\n    return max == 0 ? -1 : max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i] += 1;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] nums = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long[] final = new long[sorted.length];\n    long[] final2 = new long[sorted.length];\n\
    \    long[] final3 = new long[sorted.length];\n    long[] final4 = new long[sorted.length];\n\
    \    long[] final5 = new long[sorted.length];\n    long[] final6 = new long[sorted.length];\n\
    \    long[] final7 = new long[sorted.length];\n    long[] final8 = new long[sorted.length];\n\
    \    long[] final9 = new long[sorted.length];\n    long[] final10 = new long[sorted.length];\n\
    \    long[] final11 = new long[sorted.length];\n    long[] final12 = new long[sorted.length];\n\
    \    long[] final13 = new long[sorted.length];\n    long[] final14 = new long[sorted.length];\n\
    \    long[] final15 = new long[sorted.length];\n    long[] final16 = new long[sorted.length];\n\
    \    long[] final17 = new long[sorted.length];\n    long[] final18 = new long[sorted.length];\n\
    \    long[] final19 = new long[sorted.length];\n    long[] final20 = new long[sorted.length];\n\
    \    long[] final21 = new long[sorted.length];\n    long[] final22 = new long[sorted.length];\n\
    \    long[] final23 = new long[sorted.length];\n    long[] final24 = new long[sorted.length];\n\
    \    long[] final25 = new long[sorted.length];\n    long[] final26 = new long[sorted.length];\n\
    \    long[] final27 = new long[sorted.length];\n    long[] final28 = new long[sorted.length];\n\
    \    long[] final29 = new long[sorted.length];\n    long[] final30 = new long[sorted.length];\n\
    \    long", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n\
    \    long[] values = new long[sorted.length];\n    long count = 1;\n    long value\
    \ = sorted[0];\n    long index = 0;\n    foreach(long i; 1..sorted.length)\n \
    \   {\n        if(sorted[i] == value)\n        {\n            count++;\n     \
    \   }\n        else\n        {\n            values[index] = value;\n         \
    \   counts[index] = count;\n            count = 1;\n            value = sorted[i];\n\
    \            index++;\n        }\n    }\n    values[index] = value;\n    counts[index]\
    \ = count;\n    foreach(long i; 0..index)\n    {\n        if(values[i] >= counts[i])\n\
    \        {\n            return values[i];\n        }\n    }\n    return -1;\n}",
  "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    int[] freq = new int[lst.length];\n    int[] sorted\
    \ = new int[lst.length];\n    int i = 0;\n    foreach(long n; lst)\n    {\n  \
    \      freq[i] = 0;\n        sorted[i] = n;\n        i++;\n    }\n    sort(sorted);\n\
    \    int j = 0;\n    foreach(long n; sorted)\n    {\n        if(n == sorted[j])\n\
    \        {\n            freq[j]++;\n        }\n        else\n        {\n     \
    \       j++;\n            freq[j]++;\n        }\n    }\n    int max = 0;\n   \
    \ int maxIndex = 0;\n    for(int k = 0; k < freq.length; k++)\n    {\n       \
    \ if(freq[k] > max)\n        {\n            max = freq[k];\n            maxIndex\
    \ = k;\n        }\n    }\n    if(max >= sorted[maxIndex])\n    {\n        return\
    \ sorted[maxIndex];\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = count(lst, lst[i]);\n    }\n    long max = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n   \
    \     {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(lst[i] > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    long[] sorted_freq = new long[lst.length];\n\
    \    long[] sorted_freq_sorted = new long[lst.length];\n    long[] sorted_freq_sorted_freq\
    \ = new long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted = new long[lst.length];\n\
    \    long[] sorted_freq_sorted_freq_sorted_freq = new long[lst.length];\n    long[]\
    \ sorted_freq_sorted_freq_sorted_freq_sorted = new long[lst.length];\n    long[]\
    \ sorted_freq_sorted_freq_sorted_freq_sorted_freq = new long[lst.length];\n  \
    \  long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted = new long[lst.length];\n\
    \    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq = new\
    \ long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted\
    \ = new long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq\
    \ = new long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted\
    \ = new long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq_sorted_freq\
    \ = new long[lst.length];\n    long[] sorted_freq_sorted_freq_sorted_freq_sorted_freq",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = 0;\n    foreach(i; freq)\n    {\n       \
    \ if(i > 0 && i <= freq.length && freq[i] >= i)\n        {\n            max =\
    \ max(max, i);\n        }\n    }\n    return max == 0 ? -1 : max;\n}", "{\n  \
    \  long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    long max = -1;\n    foreach(i; lst)\n    {\n        if(freq[i] >= i\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    return max;\n\
    }", "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(counts[i] >= i)\n        {\n            return i;\n        }\n   \
    \ }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        counts[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              counts[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(counts[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] cnt = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(cnt[i] >= i)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ ref e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, ref e; d)\n    {\n\
    \        if(e >= i && i > 0)\n            return i;\n    }\n    return -1;\n}",
  "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long max = arr[$-1];\n    long[]\
    \ count = new long[max+1];\n    foreach(i; arr)\n    {\n        count[i]++;\n\
    \    }\n    foreach(i; arr)\n    {\n        if(count[i] >= i)\n        {\n   \
    \         return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] cnt\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        cnt[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        cnt[lst[i]]++;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(cnt[i]\
    \ >= i && cnt[i] > max)\n        {\n            max = i;\n        }\n    }\n \
    \   return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]] += 1;\n    }\n    long max = 0;\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n        {\n          \
    \  return lst[i];\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n    long[] unique\
    \ = new long[sorted.length];\n    long count = 0;\n    long prev = sorted[0];\n\
    \    unique[0] = prev;\n    for (long i = 0; i < sorted.length; i++)\n    {\n\
    \        if (sorted[i] == prev)\n        {\n            count++;\n        }\n\
    \        else\n        {\n            counts[i - 1] = count;\n            prev\
    \ = sorted[i];\n            unique[i] = prev;\n            count = 1;\n      \
    \  }\n    }\n    counts[sorted.length - 1] = count;\n    long max = -1;\n    for\
    \ (long i = 0; i < unique.length; i++)\n    {\n        if (unique[i] <= counts[i])\n\
    \        {\n            max = max(max, unique[i]);\n        }\n    }\n    return\
    \ max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] cnt = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        cnt[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(cnt[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    foreach(i; lst)\n    {\n        if(freq[i] >=\
    \ i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] counts = new long[lst.length];\n    long[] freqs =\
    \ new long[lst.length];\n    long max = 0;\n    foreach(long i; lst)\n    {\n\
    \        counts[i]++;\n        if(counts[i] > max)\n            max = counts[i];\n\
    \    }\n    foreach(long i; lst)\n    {\n        freqs[counts[i]]++;\n    }\n\
    \    for(long i = max; i > 0; i--)\n    {\n        if(freqs[i] >= i)\n       \
    \     return i;\n    }\n    return -1;\n}", "{\n    long max = 0;\n    long maxCount\
    \ = 0;\n    foreach(long x; lst)\n    {\n        if(x > max)\n        {\n    \
    \        max = x;\n            maxCount = 1;\n        }\n        else if(x ==\
    \ max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    return -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n   \
    \     {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i]++;\n            }\n        }\n    }\n \
    \   long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] sorted = lst.dup.sort();\n    long[] counts = sorted.group.map!(a\
    \ => a.length).array;\n    long[] values = sorted.group.map!(a => a[0]).array;\n\
    \    long[] filtered = values.zip(counts).filter!(a => a[0] <= a[1]).map!(a =>\
    \ a[0]).array;\n    return filtered.length > 0 ? filtered.max : -1L;\n}", "{\n\
    \    long[] sorted = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n\
    \    long[] values = new long[sorted.length];\n    long count = 1;\n    long value\
    \ = sorted[0];\n    long index = 0;\n    foreach(long i; sorted)\n    {\n    \
    \    if(i == value)\n        {\n            count++;\n        }\n        else\n\
    \        {\n            counts[index] = count;\n            values[index] = value;\n\
    \            index++;\n            count = 1;\n            value = i;\n      \
    \  }\n    }\n    counts[index] = count;\n    values[index] = value;\n    foreach(i;\
    \ 0..index)\n    {\n        if(counts[i] >= values[i])\n        {\n          \
    \  return values[i];\n        }\n    }\n    return -1;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort();\n    long[] unique = sorted.uniq;\n    long[] freq = unique.map!(x\
    \ => sorted.count(x));\n    long[] freq_greater = freq.filter!(x => x >= x);\n\
    \    return freq_greater.length > 0 ? freq_greater.max : -1;\n}", "{\n    auto\
    \ d = new int[lst.length];\n    foreach(i, e; lst)\n    {\n        d[e]++;\n \
    \   }\n    foreach(i, e; d)\n    {\n        if(e >= i)\n        {\n          \
    \  return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] arr = lst.dup;\n\
    \    arr.sort;\n    int[] freq = new int[arr.length];\n    int count = 0;\n  \
    \  for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] == arr[i+1])\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     count++;\n            freq[i] = count;\n            count = 0;\n       \
    \ }\n    }\n    long max = -1;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] > max && arr[i] <= freq[i])\n        {\n            max\
    \ = arr[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    auto d = new Dictionary!(long, long)();\n \
    \   foreach(e; lst)\n    {\n        if(d.containsKey(e))\n        {\n        \
    \    d[e]++;\n        }\n        else\n        {\n            d[e] = 1;\n    \
    \    }\n    }\n    long max = -1;\n    foreach(e; d.keys)\n    {\n        if(e\
    \ > max && d[e] >= e)\n        {\n            max = e;\n        }\n    }\n   \
    \ return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] nums = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long[] result2 = new long[sorted.length];\n    long[] result3 = new long[sorted.length];\n\
    \    long[] result4 = new long[sorted.length];\n    long[] result5 = new long[sorted.length];\n\
    \    long[] result6 = new long[sorted.length];\n    long[] result7 = new long[sorted.length];\n\
    \    long[] result8 = new long[sorted.length];\n    long[] result9 = new long[sorted.length];\n\
    \    long[] result10 = new long[sorted.length];\n    long[] result11 = new long[sorted.length];\n\
    \    long[] result12 = new long[sorted.length];\n    long[] result13 = new long[sorted.length];\n\
    \    long[] result14 = new long[sorted.length];\n    long[] result15 = new long[sorted.length];\n\
    \    long[] result16 = new long[sorted.length];\n    long[] result17 = new long[sorted.length];\n\
    \    long[] result18 = new long[sorted.length];\n    long[] result19 = new long[sorted.length];\n\
    \    long[] result20 = new long[sorted.length];\n    long[] result21 = new long[sorted.length];\n\
    \    long[] result22 = new long[sorted.length];\n    long[] result23 = new long[sorted.length];\n\
    \    long[] result24 = new long[sorted.length];\n    long[] result25 = new long[sorted.length];\n\
    \    long[] result26 = new long[sorted.length];\n    long[] result27 = new long[sorted.length];\n\
    \    long[] result28 = new long[sorted.length];\n    long[] result29 = new long[sorted.length];\n\
    \    long[] result30 = new long[sorted.length];\n    long[] result31 = new long[sorted.length];\n\
    \   ", "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if(counts[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n       \
    \     max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n \
    \   long max = -1;\n    foreach(i; lst)\n    {\n        if(freq[i] >= i && i >\
    \ max)\n        {\n            max = i;\n        }\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   auto m = lst.groupBy!(a => a);\n    auto r = m.keys.filter!(a => a <= m[a].length).max;\n\
    \    return r.isSome ? r.get : -1L;\n}", "{\n    auto lst2 = lst.dup;\n    lst2.sort;\n\
    \    lst2.uniq;\n    foreach(i; lst2)\n    {\n        if(lst.count(i) >= i)\n\
    \            return i;\n    }\n    return -1;\n}", "{\n    auto freq = new int[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    foreach(i; 0..sorted.length)\n    {\n    \
    \    if(i == 0)\n        {\n            freq[i] = 1;\n        }\n        else\
    \ if(sorted[i] == sorted[i-1])\n        {\n            freq[i] = freq[i-1] + 1;\n\
    \        }\n        else\n        {\n            freq[i] = 1;\n        }\n   \
    \ }\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i] >= sorted[i])\n\
    \        {\n            return sorted[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] count = new long[lst.length + 1];\n    foreach(e; lst)\n    {\n \
    \       count[e]++;\n    }\n    long max = -1;\n    foreach(i; 0 .. count.length)\n\
    \    {\n        if(count[i] >= i)\n        {\n            max = max(max, i);\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] count = new long[lst.length];\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        count[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        count[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(count[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    auto d = new Dictionary!(long,\
    \ long)();\n    foreach(i; lst)\n    {\n        if(d.containsKey(i))\n       \
    \ {\n            d[i]++;\n        }\n        else\n        {\n            d[i]\
    \ = 1;\n        }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n\
    \        if(i > d[i])\n        {\n            continue;\n        }\n        if(i\
    \ > max)\n        {\n            max = i;\n        }\n    }\n    return max;\n\
    }", "{\n    long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] nums = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long count = 0;\n    long num = 0;\n    long max = 0;\n    long maxIndex\
    \ = 0;\n    long maxFreq = 0;\n    long maxFreqIndex = 0;\n    foreach(i; 0 ..\
    \ sorted.length)\n    {\n        if(i == 0)\n        {\n            num = sorted[i];\n\
    \            count = 1;\n        }\n        else if(sorted[i] == num)\n      \
    \  {\n            count++;\n        }\n        else\n        {\n            nums[maxIndex]\
    \ = num;\n            freq[maxIndex] = count;\n            maxIndex++;\n     \
    \       num = sorted[i];\n            count = 1;\n        }\n    }\n    nums[maxIndex]\
    \ = num;\n    freq[maxIndex] = count;\n    foreach(i; 0 .. maxIndex)\n    {\n\
    \        if(nums[i] > max)\n        {\n            max = nums[i];\n        }\n\
    \        if(freq[i] > maxFreq)\n        {\n            maxFreq = freq[i];\n  \
    \          maxFreqIndex = i;\n        }\n    }\n    if(maxFreq >= max)\n    {\n\
    \        return nums[maxFreqIndex];\n    }\n    else\n    {\n        return -1;\n\
    \    }\n}", "{\n    auto freq = lst.group.length;\n    auto res = lst.filter!(x\
    \ => freq[x] >= x).max;\n    return res ? res : -1L;\n}", "{\n    // your code\
    \ goes here\n    long[] lst2 = lst.dup;\n    lst2.sort;\n    long[] lst3 = lst2.dup;\n\
    \    lst3.removeDuplicates;\n    long[] lst4 = lst3.dup;\n    lst4.reverse;\n\
    \    foreach(long i; lst4)\n    {\n        if(lst.count(i) >= i)\n        {\n\
    \            return i;\n        }\n    }\n    return -1L;\n}", "{\n    long[]\
    \ counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(counts[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    auto m = new Map!(long, long)();\n    foreach(i; lst)\n  \
    \  {\n        if(m.count(i) == 0)\n        {\n            m[i] = 1;\n        }\n\
    \        else\n        {\n            m[i]++;\n        }\n    }\n    long max\
    \ = -1;\n    foreach(i; m.keys)\n    {\n        if(i <= m[i] && i > max)\n   \
    \     {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n   \
    \ long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] nums = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long[] nums_sorted = new long[sorted.length];\n    long[] freq_sorted = new\
    \ long[sorted.length];\n    long[] result_sorted = new long[sorted.length];\n\
    \    long[] result_sorted_final = new long[sorted.length];\n    long[] nums_sorted_final\
    \ = new long[sorted.length];\n    long[] freq_sorted_final = new long[sorted.length];\n\
    \    long[] result_sorted_final_final = new long[sorted.length];\n    long[] nums_sorted_final_final\
    \ = new long[sorted.length];\n    long[] freq_sorted_final_final = new long[sorted.length];\n\
    \    long[] result_sorted_final_final_final = new long[sorted.length];\n    long[]\
    \ nums_sorted_final_final_final = new long[sorted.length];\n    long[] freq_sorted_final_final_final\
    \ = new long[sorted.length];\n    long[] result_sorted_final_final_final_final\
    \ = new long[sorted.length];\n    long[] nums_sorted_final_final_final_final =\
    \ new long[sorted.length];\n    long[] freq_sorted_final_final_final_final = new\
    \ long[sorted.length];\n    long[] result_sorted_final_final_final_final_final\
    \ = new long[sorted.length];\n    long[] nums_sorted_final_final_final_final_final\
    \ = new long[sorted.length];\n    long[] freq_sorted_final_final_final_final_final\
    \ = new long[sorted.length];\n    long[] result_sorted_final_final_final_final_final_final\
    \ = new long[sorted.length];\n    long[] nums_sorted_final_final_final", "{\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if(counts[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = count(lst, lst[i]);\n    }\n    long\
    \ max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i]\
    \ && lst[i] > max)\n        {\n            max = lst[i];\n        }\n    }\n \
    \   if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(i <= freq[i])\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    auto d = lst.group.by([](long x) { return x; });\n    auto\
    \ max = d.max!((a, b) => a.value.length > b.value.length);\n    if (max.value.length\
    \ >= max.key)\n        return max.key;\n    return -1L;\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    long[] values = new long[lst.length];\n    long\
    \ count = 0;\n    long value = 0;\n    long max = 0;\n    long maxValue = 0;\n\
    \    long maxCount = 0;\n    long maxIndex = 0;\n    long index = 0;\n    foreach(i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    foreach(i; lst)\n    {\n        if(i == value)\n        {\n      \
    \      count++;\n        }\n        else\n        {\n            if(count > 0)\n\
    \            {\n                counts[index] = count;\n                values[index]\
    \ = value;\n                index++;\n            }\n            count = 1;\n\
    \            value = i;\n        }\n    }\n    if(count > 0)\n    {\n        counts[index]\
    \ = count;\n        values[index] = value;\n        index++;\n    }\n    foreach(i;\
    \ 0..index)\n    {\n        if(values[i] >= counts[i] && values[i] > maxValue)\n\
    \        {\n            maxValue = values[i];\n            maxCount = counts[i];\n\
    \            maxIndex = i;\n        }\n    }\n    if(maxValue == 0)\n    {\n \
    \       return -1;\n    }\n    return maxValue;\n}", "{\n    long[] arr = lst.dup;\n\
    \    arr.sort();\n    long[] arr2 = arr.dup;\n    arr2.sort(std.numeric.greater);\n\
    \    long[] arr3 = arr.dup;\n    arr3.sort(std.numeric.less);\n    long[] arr4\
    \ = arr.dup;\n    arr4.sort(std.numeric.greater);\n    long[] arr5 = arr.dup;\n\
    \    arr5.sort(std.numeric.less);\n    long[] arr6 = arr.dup;\n    arr6.sort(std.numeric.greater);\n\
    \    long[] arr7 = arr.dup;\n    arr7.sort(std.numeric.less);\n    long[] arr8\
    \ = arr.dup;\n    arr8.sort(std.numeric.greater);\n    long[] arr9 = arr.dup;\n\
    \    arr9.sort(std.numeric.less);\n    long[] arr10 = arr.dup;\n    arr10.sort(std.numeric.greater);\n\
    \    long[] arr11 = arr.dup;\n    arr11.sort(std.numeric.less);\n    long[] arr12\
    \ = arr.dup;\n    arr12.sort(std.numeric.greater);\n    long[] arr13 = arr.dup;\n\
    \    arr13.sort(std.numeric.less);\n    long[] arr14 = arr.dup;\n    arr14.sort(std.numeric.greater);\n\
    \    long[] arr15 = arr.dup;\n    arr15.sort(std.numeric.less);\n    long[] arr16\
    \ = arr.dup;\n    arr16.sort(std.numeric.greater);\n    long[] arr17 = arr.dup;\n\
    \    arr17.sort(std.numeric.less);\n    long[] arr18 = arr.dup;\n    arr18.sort(std.numeric.greater);\n\
    \    long[] arr19 = arr.dup;\n    arr19.sort(std.numeric.less);\n    long[] arr20\
    \ = arr.dup;\n    arr", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i && freq[i] > max)\n        {\n \
    \           max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    // your code\
    \ here\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && lst[i] <= freq[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n    long[] unique\
    \ = new long[sorted.length];\n    int j = 0;\n    unique[0] = sorted[0];\n   \
    \ for (int i = 1; i < sorted.length; i++)\n    {\n        if (sorted[i] != sorted[i-1])\n\
    \        {\n            unique[++j] = sorted[i];\n        }\n    }\n    unique\
    \ = unique[0..j+1];\n    foreach (i, e; unique)\n    {\n        foreach (j, f;\
    \ sorted)\n        {\n            if (e == f)\n            {\n               \
    \ freq[i]++;\n            }\n        }\n    }\n    foreach (i, e; freq)\n    {\n\
    \        if (e >= unique[i])\n        {\n            return unique[i];\n     \
    \   }\n    }\n    return -1L;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n    long[] uniques\
    \ = new long[sorted.length];\n    long[] frequencies = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long[] finalResult = new long[sorted.length];\n\
    \    long[] finalResult2 = new long[sorted.length];\n    long[] finalResult3 =\
    \ new long[sorted.length];\n    long[] finalResult4 = new long[sorted.length];\n\
    \    long[] finalResult5 = new long[sorted.length];\n    long[] finalResult6 =\
    \ new long[sorted.length];\n    long[] finalResult7 = new long[sorted.length];\n\
    \    long[] finalResult8 = new long[sorted.length];\n    long[] finalResult9 =\
    \ new long[sorted.length];\n    long[] finalResult10 = new long[sorted.length];\n\
    \    long[] finalResult11 = new long[sorted.length];\n    long[] finalResult12\
    \ = new long[sorted.length];\n    long[] finalResult13 = new long[sorted.length];\n\
    \    long[] finalResult14 = new long[sorted.length];\n    long[] finalResult15\
    \ = new long[sorted.length];\n    long[] finalResult16 = new long[sorted.length];\n\
    \    long[] finalResult17 = new long[sorted.length];\n    long[] finalResult18\
    \ = new long[sorted.length];\n    long[] finalResult19 = new long[sorted.length];\n\
    \    long[] finalResult20 = new long[sorted.length];\n    long[] finalResult21\
    \ = new long[sorted.length];\n    long[] finalResult22 = new long[sorted.length];\n\
    \    long[] finalResult23 = new long[sorted.length];\n    long[] finalResult24\
    \ = new long[sorted.length];\n    long[] finalResult25 = new long[sorted.length];\n\
    \    long[] finalResult26 = new long[sorted.length];\n    long[] finalResult27\
    \ = new long[sorted.length];\n    long[] finalResult28 =", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n    long[] values\
    \ = new long[sorted.length];\n    long[] result = new long[sorted.length];\n \
    \   long count = 0;\n    long value = 0;\n    long max = 0;\n    long index =\
    \ 0;\n    long resultIndex = 0;\n    foreach(i; 0 .. sorted.length)\n    {\n \
    \       if(i == 0)\n        {\n            count = 1;\n            value = sorted[i];\n\
    \        }\n        else if(sorted[i] == sorted[i-1])\n        {\n           \
    \ count++;\n        }\n        else\n        {\n            counts[index] = count;\n\
    \            values[index] = value;\n            index++;\n            count =\
    \ 1;\n            value = sorted[i];\n        }\n    }\n    counts[index] = count;\n\
    \    values[index] = value;\n    foreach(i; 0 .. counts.length)\n    {\n     \
    \   if(counts[i] >= values[i])\n        {\n            result[resultIndex] = values[i];\n\
    \            resultIndex++;\n        }\n    }\n    if(resultIndex == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return result[resultIndex-1];\n\
    \    }\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]] += 1;\n    }\n    long max = 0;\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(freq[i] >= i && freq[i] > max)\n        {\n\
    \            max = i;\n        }\n    }\n    if(max == 0)\n    {\n        return\
    \ -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n \
    \   foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= i && i > max)\n  \
    \      {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n  \
    \  long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] lst2 = lst.dup;\n    lst2.sort;\n    long[] lst3 = lst2.dup;\n  \
    \  lst3.dedup;\n    foreach(long i; lst3)\n    {\n        if(lst2.count(i) >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1L;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts\
    \ = new long[sorted.length];\n    long[] uniques = new long[sorted.length];\n\
    \    long[] freqs = new long[sorted.length];\n    long count = 0;\n    long unique\
    \ = 0;\n    long freq = 0;\n    long max = 0;\n    long maxFreq = 0;\n    long\
    \ maxUnique = 0;\n    foreach(i; 0 .. sorted.length)\n    {\n        if(i == 0)\n\
    \        {\n            count = 1;\n            unique = sorted[i];\n        \
    \    freq = 1;\n        }\n        else\n        {\n            if(sorted[i] ==\
    \ sorted[i-1])\n            {\n                count++;\n                freq++;\n\
    \            }\n            else\n            {\n                unique = sorted[i];\n\
    \                freq = 1;\n            }\n        }\n        counts[i] = count;\n\
    \        uniques[i] = unique;\n        freqs[i] = freq;\n        if(freq >= unique\
    \ && unique > max)\n        {\n            max = unique;\n            maxFreq\
    \ = freq;\n            maxUnique = unique;\n        }\n    }\n    if(max == 0)\n\
    \    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n       \
    \ {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ arr = lst.dup;\n    arr.sort();\n    long[] arr2 = arr.dup;\n    long[] arr3\
    \ = arr.dup;\n    long[] arr4 = arr.dup;\n    long[] arr5 = arr.dup;\n    long[]\
    \ arr6 = arr.dup;\n    long[] arr7 = arr.dup;\n    long[] arr8 = arr.dup;\n  \
    \  long[] arr9 = arr.dup;\n    long[] arr10 = arr.dup;\n    long[] arr11 = arr.dup;\n\
    \    long[] arr12 = arr.dup;\n    long[] arr13 = arr.dup;\n    long[] arr14 =\
    \ arr.dup;\n    long[] arr15 = arr.dup;\n    long[] arr16 = arr.dup;\n    long[]\
    \ arr17 = arr.dup;\n    long[] arr18 = arr.dup;\n    long[] arr19 = arr.dup;\n\
    \    long[] arr20 = arr.dup;\n    long[] arr21 = arr.dup;\n    long[] arr22 =\
    \ arr.dup;\n    long[] arr23 = arr.dup;\n    long[] arr24 = arr.dup;\n    long[]\
    \ arr25 = arr.dup;\n    long[] arr26 = arr.dup;\n    long[] arr27 = arr.dup;\n\
    \    long[] arr28 = arr.dup;\n    long[] arr29 = arr.dup;\n    long[] arr30 =\
    \ arr.dup;\n    long[] arr31 = arr.dup;\n    long[] arr32 = arr.dup;\n    long[]\
    \ arr33 = arr.dup;\n    long[] arr34 = arr.dup;\n    long[] arr35 = arr.dup;\n\
    \    long[] arr36 = arr.dup;\n    long[] arr37 = arr.dup;\n    long[] arr38 =\
    \ arr.dup;\n    long[] arr39 = arr.dup;\n    long[] arr40 = arr.dup;\n    long[]\
    \ arr41 = arr.dup;\n    long[] arr42 = arr.dup;", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] res = new long[lst.length];\n\
    \    long max = 0;\n    long index = 0;\n    long max_index = 0;\n    long max_freq\
    \ = 0;\n    long max_num = 0;\n    long max_res = 0;\n    foreach(i; lst)\n  \
    \  {\n        index = 0;\n        foreach(j; nums)\n        {\n            if(i\
    \ == j)\n            {\n                freq[index] += 1;\n                break;\n\
    \            }\n            index++;\n        }\n        if(index == nums.length)\n\
    \        {\n            nums[max] = i;\n            freq[max] = 1;\n         \
    \   max++;\n        }\n    }\n    index = 0;\n    foreach(i; freq)\n    {\n  \
    \      if(i >= nums[index])\n        {\n            res[max_res] = nums[index];\n\
    \            max_res++;\n        }\n        index++;\n    }\n    if(max_res ==\
    \ 0)\n    {\n        return -1;\n    }\n    else\n    {\n        foreach(i; res)\n\
    \        {\n            index = 0;\n            foreach(j; nums)\n           \
    \ {\n                if(i == j)\n                {\n                    if(freq[index]\
    \ > max_freq)\n                    {\n                        max_freq = freq[index];\n\
    \                        max_num = nums[index];\n                    }\n     \
    \               break;\n                }\n                index++;\n        \
    \    }\n        }\n        return max_num;\n    }\n}", "{\n    auto freq = lst.group.length;\n\
    \    auto max = lst.max;\n    foreach(i; 1..max+1)\n    {\n        if(freq[i]\
    \ >= i)\n            return i;\n    }\n    return -1;\n}", "{\n    auto freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    auto d = new Dictionary!(long, long)();\n    foreach(e; lst)\n   \
    \ {\n        if(e in d)\n            d[e] += 1;\n        else\n            d[e]\
    \ = 1;\n    }\n    long max = 0;\n    foreach(e; d)\n    {\n        if(e.value\
    \ >= e.key && e.key > max)\n            max = e.key;\n    }\n    return max >\
    \ 0 ? max : -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n    {\n\
    \        if(i > maxCount)\n        {\n            max = i;\n            maxCount\
    \ = i;\n        }\n        else if(i == maxCount)\n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]] += 1;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i && freq[i] >\
    \ max)\n        {\n            max = i;\n        }\n    }\n    return max;\n}",
  "{\n    auto m = lst.groupBy!(a => a).map!(a => a.length);\n    auto r = m.filter!(a\
    \ => a.value >= a.key).keys.max;\n    return r > 0 ? r : -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= i && freq[i] > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
