name: HumanEval_69_search
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a non-empty\
  \ array of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the array.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
  \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
  \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    long[] sortedFreq = new long[lst.length];\n\
    \    long[] sortedNums = new long[lst.length];\n    long[] sortedSortedFreq =\
    \ new long[lst.length];\n    long[] sortedSortedNums = new long[lst.length];\n\
    \    long[] sortedSortedSortedFreq = new long[lst.length];\n    long[] sortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedFreq = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedNums = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedNums = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedFreq = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedNums = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];", "{\n    long[] freq = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    long[] unique = sorted.uniq;\n    foreach(i;\
    \ 0..unique.length)\n    {\n        freq[i] = sorted.count(unique[i]);\n    }\n\
    \    foreach(i; 0..unique.length)\n    {\n        if(unique[i] <= freq[i])\n \
    \       {\n            return unique[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long max = 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n  \
    \          max = i;\n    }\n    long[] arr = new long[max];\n    foreach(long\
    \ i; lst)\n    {\n        arr[i-1]++;\n    }\n    foreach(long i; arr)\n    {\n\
    \        if(i >= arr.length)\n            return arr.length;\n    }\n    return\
    \ -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort;\n    long[] arr3 = arr2.dup;\n    arr3.sort;\n    long[] arr4\
    \ = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n    arr5.sort;\n \
    \   long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7 = arr6.dup;\n   \
    \ arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n    long[] arr9 = arr8.dup;\n\
    \    arr9.sort;\n    long[] arr10 = arr9.dup;\n    arr10.sort;\n    long[] arr11\
    \ = arr10.dup;\n    arr11.sort;\n    long[] arr12 = arr11.dup;\n    arr12.sort;\n\
    \    long[] arr13 = arr12.dup;\n    arr13.sort;\n    long[] arr14 = arr13.dup;\n\
    \    arr14.sort;\n    long[] arr15 = arr14.dup;\n    arr15.sort;\n    long[] arr16\
    \ = arr15.dup;\n    arr16.sort;\n    long[] arr17 = arr16.dup;\n    arr17.sort;\n\
    \    long[] arr18 = arr17.dup;\n    arr18.sort;\n    long[] arr19 = arr18.dup;\n\
    \    arr19.sort;\n    long[] arr20 = arr19.dup;\n    arr20.sort;\n    long[] arr21\
    \ = arr20.dup;\n    arr21.sort;\n    long[] arr22 = arr21.dup;\n    arr22.sort;\n\
    \    long[] arr23 = arr22.dup;\n    arr23.sort;\n    long[] arr24 = arr23.dup;\n\
    \    arr24.sort;\n    long[] arr25 = arr24.dup;\n    arr25.sort;\n    long[] arr26\
    \ = arr25.dup;", "{\n    long[] count = new long[lst.length];\n    long[] num\
    \ = new long[lst.length];\n    long[] result = new long[lst.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (count[lst[i]]\
    \ == 0)\n        {\n            count[lst[i]] = 1;\n            num[j] = lst[i];\n\
    \            j++;\n        }\n        else\n        {\n            count[lst[i]]++;\n\
    \        }\n    }\n    int k = 0;\n    for (int i = 0; i < j; i++)\n    {\n  \
    \      if (num[i] <= count[num[i]])\n        {\n            result[k] = num[i];\n\
    \            k++;\n        }\n    }\n    if (k == 0)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return result[k - 1];\n    }\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n   \
    \         {\n                freq[i]++;\n            }\n        }\n    }\n   \
    \ long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i]\
    \ && lst[i] > max)\n        {\n            max = lst[i];\n        }\n    }\n \
    \   if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n\
    \    long[] sorted = lst.dup.sort;\n    long[] unique = sorted.uniq;\n    long[]\
    \ freq = unique.map!(x => sorted.count(x));\n    long[] valid = unique.filter!(x\
    \ => x <= freq[unique.indexOf(x)]);\n    return valid.length > 0 ? valid.max :\
    \ -1L;\n}", "{\n    long[] freq = new long[lst.length];\n    long max = 0;\n \
    \   for(int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n       \
    \ for(int j = 0; j < lst.length; j++)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n       \
    \ if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    long[] nums = new\
    \ long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n    long\
    \ max = -1;\n    for(int i = 0; i < sorted.length; i++)\n    {\n        if(i ==\
    \ 0)\n        {\n            freq[i] = 1;\n            nums[i] = sorted[i];\n\
    \        }\n        else if(sorted[i] == sorted[i-1])\n        {\n           \
    \ freq[i] = freq[i-1] + 1;\n            nums[i] = sorted[i];\n        }\n    \
    \    else\n        {\n            freq[i] = 1;\n            nums[i] = sorted[i];\n\
    \        }\n        if(nums[i] >= freq[i] && nums[i] > max)\n        {\n     \
    \       max = nums[i];\n        }\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    long max = 0;\n    long max_i = 0;\n    long max_f = 0;\n    long i = 0;\n\
    \    long f = 0;\n    foreach(e; sorted)\n    {\n        if(e == i)\n        {\n\
    \            f++;\n        }\n        else\n        {\n            if(f >= i)\n\
    \            {\n                if(f > max_f)\n                {\n           \
    \         max_f = f;\n                    max_i = i;\n                }\n    \
    \        }\n            i = e;\n            f = 1;\n        }\n    }\n    if(f\
    \ >= i)\n    {\n        if(f > max_f)\n        {\n            max_f = f;\n   \
    \         max_i = i;\n        }\n    }\n    if(max_f >= max_i)\n    {\n      \
    \  return max_i;\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n\
    \    long[] count = new long[lst.length];\n    long[] index = new long[lst.length];\n\
    \    long[] result = new long[lst.length];\n    long[] temp = new long[lst.length];\n\
    \    long[] temp2 = new long[lst.length];\n    long[] temp3 = new long[lst.length];\n\
    \    long[] temp4 = new long[lst.length];\n    long[] temp5 = new long[lst.length];\n\
    \    long[] temp6 = new long[lst.length];\n    long[] temp7 = new long[lst.length];\n\
    \    long[] temp8 = new long[lst.length];\n    long[] temp9 = new long[lst.length];\n\
    \    long[] temp10 = new long[lst.length];\n    long[] temp11 = new long[lst.length];\n\
    \    long[] temp12 = new long[lst.length];\n    long[] temp13 = new long[lst.length];\n\
    \    long[] temp14 = new long[lst.length];\n    long[] temp15 = new long[lst.length];\n\
    \    long[] temp16 = new long[lst.length];\n    long[] temp17 = new long[lst.length];\n\
    \    long[] temp18 = new long[lst.length];\n    long[] temp19 = new long[lst.length];\n\
    \    long[] temp20 = new long[lst.length];\n    long[] temp21 = new long[lst.length];\n\
    \    long[] temp22 = new long[lst.length];\n    long[] temp23 = new long[lst.length];\n\
    \    long[] temp24 = new long[lst.length];\n    long[] temp25 = new long[lst.length];\n\
    \    long[] temp26 = new long[lst.length];\n    long[] temp27 = new long[lst.length];\n\
    \    long[] temp28 = new long[lst.length];\n    long[] temp29 = new long[lst.length];\n\
    \    long[] temp30 = new long[lst.length];\n    long[] temp31 = new long[lst.length];\n\
    \    long[]", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n\
    \    long[] values = new long[sorted.length];\n    long count = 1;\n    long value\
    \ = sorted[0];\n    long index = 0;\n    for(long i = 1; i < sorted.length; i++)\n\
    \    {\n        if(sorted[i] == value)\n        {\n            count++;\n    \
    \    }\n        else\n        {\n            counts[index] = count;\n        \
    \    values[index] = value;\n            index++;\n            count = 1;\n  \
    \          value = sorted[i];\n        }\n    }\n    counts[index] = count;\n\
    \    values[index] = value;\n    long max = -1;\n    for(long i = 0; i < counts.length;\
    \ i++)\n    {\n        if(counts[i] >= values[i] && values[i] > max)\n       \
    \ {\n            max = values[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long maxCount = 0;\n    foreach(l; lst)\n    {\n     \
    \   if(l > maxCount)\n        {\n            max = l;\n            maxCount =\
    \ lst.count(l);\n        }\n    }\n    return maxCount >= max ? max : -1;\n}",
  "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(counts[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long max = 0;\n    long[]\
    \ count = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    count[i] = 0;\n        foreach(j; 0 .. lst.length)\n        {\n         \
    \   if(lst[i] == lst[j])\n            {\n                count[i]++;\n       \
    \     }\n        }\n        if(count[i] >= lst[i] && lst[i] > max)\n        {\n\
    \            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n      \
    \  return -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(counts[i] >= i && i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(counts[i] >= i)\n        {\n            return i;\n        }\n   \
    \ }\n    return -1;\n}", "{\n    long max = -1L;\n    long[] count = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        count[i] = 0L;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        count[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(count[i] >= i && i > max)\n        {\n      \
    \      max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    long[] nums = new long[lst.length];\n    long[] nums_sorted\
    \ = new long[lst.length];\n    long[] freq_sorted = new long[lst.length];\n  \
    \  long[] nums_sorted_unique = new long[lst.length];\n    long[] freq_sorted_unique\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq = new long[lst.length];\n\
    \    long[] nums_sorted_unique_freq_sorted = new long[lst.length];\n    long[]\
    \ nums_sorted_unique_freq_sorted_unique = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted_unique\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq\
    \ = new long[lst.length];\n    long[] nums_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted_unique_freq_sorted\
    \ = new long[lst.length];\n    long[]", "{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n   \
    \ arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n\
    \    arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7\
    \ = arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n \
    \   long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n  \
    \  arr10.sort;\n    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12\
    \ = arr11.dup;\n    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n\
    \    long[] arr14 = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n\
    \    arr15.sort;\n    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17\
    \ = arr16.dup;\n    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n\
    \    long[] arr19 = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n\
    \    arr20.sort;\n    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22\
    \ = arr21.dup;\n    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n\
    \    long[] arr24 = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n\
    \    arr25.sort;\n    long[] arr26 = arr25.dup;", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] freq = new long[sorted.length];\n    long[] nums = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long count = 0;\n    long num\
    \ = 0;\n    long res = 0;\n    foreach(i; 0 .. sorted.length)\n    {\n       \
    \ if(i == 0)\n        {\n            num = sorted[i];\n            count = 1;\n\
    \        }\n        else if(sorted[i] == sorted[i-1])\n        {\n           \
    \ count++;\n        }\n        else\n        {\n            nums[i-1] = num;\n\
    \            freq[i-1] = count;\n            num = sorted[i];\n            count\
    \ = 1;\n        }\n    }\n    nums[$-1] = num;\n    freq[$-1] = count;\n    foreach(i;\
    \ 0 .. sorted.length)\n    {\n        if(nums[i] >= freq[i])\n        {\n    \
    \        result[i] = nums[i];\n        }\n        else\n        {\n          \
    \  result[i] = -1;\n        }\n    }\n    res = result.max;\n    return res;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long max = -1L;\n    long maxFreq = -1L;\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0L;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n        if(freq[i] >= lst[i]\
    \ && freq[i] > maxFreq)\n        {\n            max = lst[i];\n            maxFreq\
    \ = freq[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] &&\
    \ lst[i] > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto m\
    \ = lst.group.length;\n    auto r = -1L;\n    foreach(k, v; m)\n    {\n      \
    \  if(k > v && k >= r)\n        {\n            r = k;\n        }\n    }\n    return\
    \ r;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] arr = lst.dup;\n    arr.sort();\n    long[] freq = new long[arr.length];\n\
    \    long[] unique = new long[arr.length];\n    long count = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (i == 0)\n        {\n       \
    \     unique[count] = arr[i];\n            freq[count]++;\n        }\n       \
    \ else if (arr[i] == arr[i-1])\n        {\n            freq[count]++;\n      \
    \  }\n        else\n        {\n            count++;\n            unique[count]\
    \ = arr[i];\n            freq[count]++;\n        }\n    }\n    long max = -1;\n\
    \    for (long i = 0; i < count; i++)\n    {\n        if (freq[i] >= unique[i])\n\
    \        {\n            max = max(max, unique[i]);\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] nums = new long[lst.length];\n    long max = 0;\n    long maxFreq = 0;\n\
    \    long maxNum = 0;\n    int i = 0;\n    foreach(num; lst)\n    {\n        if(nums.canFind(num))\n\
    \        {\n            freq[i]++;\n        }\n        else\n        {\n     \
    \       nums[i] = num;\n            freq[i] = 1;\n            i++;\n        }\n\
    \    }\n    for(int j = 0; j < i; j++)\n    {\n        if(freq[j] >= nums[j] &&\
    \ freq[j] > maxFreq)\n        {\n            maxFreq = freq[j];\n            maxNum\
    \ = nums[j];\n        }\n    }\n    if(maxNum == 0)\n    {\n        return -1;\n\
    \    }\n    return maxNum;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    long[] count = new long[arr.length];\n    long[] num = new long[arr.length];\n\
    \    long[] result = new long[arr.length];\n    long[] result2 = new long[arr.length];\n\
    \    long[] result3 = new long[arr.length];\n    long[] result4 = new long[arr.length];\n\
    \    long[] result5 = new long[arr.length];\n    long[] result6 = new long[arr.length];\n\
    \    long[] result7 = new long[arr.length];\n    long[] result8 = new long[arr.length];\n\
    \    long[] result9 = new long[arr.length];\n    long[] result10 = new long[arr.length];\n\
    \    long[] result11 = new long[arr.length];\n    long[] result12 = new long[arr.length];\n\
    \    long[] result13 = new long[arr.length];\n    long[] result14 = new long[arr.length];\n\
    \    long[] result15 = new long[arr.length];\n    long[] result16 = new long[arr.length];\n\
    \    long[] result17 = new long[arr.length];\n    long[] result18 = new long[arr.length];\n\
    \    long[] result19 = new long[arr.length];\n    long[] result20 = new long[arr.length];\n\
    \    long[] result21 = new long[arr.length];\n    long[] result22 = new long[arr.length];\n\
    \    long[] result23 = new long[arr.length];\n    long[] result24 = new long[arr.length];\n\
    \    long[] result25 = new long[arr.length];\n    long[] result26 = new long[arr.length];\n\
    \    long[] result27 = new long[arr.length];\n    long[] result28 = new long[arr.length];\n\
    \    long[] result29 = new long[arr.length];\n    long[] result30 = new long[arr.length];\n\
    \    long[] result31 = new long[arr.length];\n    long[] result32 = new long[arr.length];\n\
    \    long[] result33 = new long[arr.length];\n    long[] result", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ long count = 0;\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(lst[i] > max && lst[i] <= freq[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long result = -1L;\n    long max = 0L;\n\
    \    foreach(k, v; lst.group)\n    {\n        if(v >= k && k > max)\n        {\n\
    \            max = k;\n            result = k;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if(counts[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto d = new Map!(long, long)();\n    foreach(i;\
    \ lst)\n    {\n        if(d.contains(i))\n        {\n            d[i]++;\n   \
    \     }\n        else\n        {\n            d[i] = 1;\n        }\n    }\n  \
    \  auto max = -1L;\n    foreach(i; d.keys)\n    {\n        if(d[i] >= i && i >\
    \ max)\n        {\n            max = i;\n        }\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] vals = new long[lst.length];\n\
    \    int idx = 0;\n    foreach(val; lst)\n    {\n        int i = 0;\n        for(;\
    \ i < idx; i++)\n        {\n            if(vals[i] == val)\n            {\n  \
    \              freq[i]++;\n                break;\n            }\n        }\n\
    \        if(i == idx)\n        {\n            vals[idx] = val;\n            freq[idx]\
    \ = 1;\n            idx++;\n        }\n    }\n    long max = -1;\n    for(int\
    \ i = 0; i < idx; i++)\n    {\n        if(freq[i] >= vals[i] && vals[i] > max)\n\
    \        {\n            max = vals[i];\n        }\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    int count = 0;\n    foreach(i; lst)\n    {\n        if(nums.canFind(i))\n\
    \        {\n            freq[nums.indexOf(i)]++;\n        }\n        else\n  \
    \      {\n            nums[count] = i;\n            freq[count] = 1;\n       \
    \     count++;\n        }\n    }\n    long max = -1;\n    foreach(i; 0..count)\n\
    \    {\n        if(freq[i] >= nums[i] && nums[i] > max)\n        {\n         \
    \   max = nums[i];\n        }\n    }\n    return max;\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    long[] sorted = new long[lst.length];\n    long[]\
    \ sortedCounts = new long[lst.length];\n    long[] sortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSorted = new long[lst.length];\n    long[] sortedSortedCounts\
    \ = new long[lst.length];\n    long[] sortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSorted = new long[lst.length];\n    long[] sortedSortedSortedCounts\
    \ = new long[lst.length];\n    long[] sortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSorted = new long[lst.length];\n    long[] sortedSortedSortedSortedCounts\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedCountsSorted = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedCounts = new long[lst.length];\n   \
    \ long[] sortedSortedSortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSorted = new long[lst.length];\n   \
    \ long[] sortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedS", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n      \
    \  {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0..lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n     \
    \   foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i]++;\n            }\n        }\n    }\n \
    \   long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] unique = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    int count = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(!unique.contains(lst[i]))\n\
    \        {\n            unique[index] = lst[i];\n            index++;\n      \
    \  }\n    }\n    for(int i = 0; i < unique.length; i++)\n    {\n        if(unique[i]\
    \ != 0)\n        {\n            sorted[count] = unique[i];\n            count++;\n\
    \        }\n    }\n    sorted.sort();\n    for(int i = 0; i < sorted.length; i++)\n\
    \    {\n        if(sorted[i] != 0)\n        {\n            freq[i] = lst.count(sorted[i]);\n\
    \        }\n    }\n    for(int i = 0; i < freq.length; i++)\n    {\n        if(freq[i]\
    \ != 0)\n        {\n            if(freq[i] >= sorted[i])\n            {\n    \
    \            return sorted[i];\n            }\n        }\n    }\n    return -1;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    int i = 0;\n    foreach(num; lst)\n    {\n        if(!nums.canFind(num))\n\
    \        {\n            nums[i] = num;\n            i++;\n        }\n    }\n \
    \   foreach(num; nums)\n    {\n        foreach(n; lst)\n        {\n          \
    \  if(num == n)\n            {\n                freq[num]++;\n            }\n\
    \        }\n    }\n    foreach(num; nums)\n    {\n        if(num >= freq[num])\n\
    \        {\n            return num;\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n\
    \        foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n    {\n\
    \        if(i > max)\n        {\n            max = i;\n        }\n    }\n    foreach(long\
    \ i; lst)\n    {\n        if(i == max)\n        {\n            maxCount++;\n \
    \       }\n    }\n    if(maxCount >= max)\n    {\n        return max;\n    }\n\
    \    else\n    {\n        return -1;\n    }\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long max_count = 0;\n\
    \    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n           \
    \ max = i;\n            max_count = 1;\n        }\n        else if(i == max)\n\
    \        {\n            max_count++;\n        }\n    }\n    if(max_count >= max)\n\
    \    {\n        return max;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }", "{\n    long result = -1L;\n    long max = 0L;\n    foreach(long i; lst)\n\
    \    {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    long[] arr = new long[max + 1];\n    foreach(long i; lst)\n    {\n      \
    \  arr[i]++;\n    }\n    foreach(long i; arr)\n    {\n        if(i >= arr[i] &&\
    \ i > result)\n        {\n            result = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long max = 0;\n    long max_count = 0;\n    foreach(l;\
    \ lst)\n    {\n        if(l > max_count)\n        {\n            max = l;\n  \
    \          max_count = l;\n        }\n        else if(l == max_count)\n      \
    \  {\n            max = l;\n        }\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n    long\
    \ max = 0;\n    long maxFreq = 0;\n    long maxNum = 0;\n    for(long i = 0; i\
    \ < lst.length; i++)\n    {\n        if(nums.find(lst[i]) == -1)\n        {\n\
    \            nums[max] = lst[i];\n            freq[max] = 1;\n            max++;\n\
    \        }\n        else\n        {\n            freq[nums.find(lst[i])]++;\n\
    \        }\n    }\n    for(long i = 0; i < max; i++)\n    {\n        if(freq[i]\
    \ >= nums[i] && freq[i] > maxFreq)\n        {\n            maxFreq = freq[i];\n\
    \            maxNum = nums[i];\n        }\n    }\n    if(maxNum == 0)\n    {\n\
    \        return -1;\n    }\n    return maxNum;\n}", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] counts = new long[sorted.length];\n    long[] values = new long[sorted.length];\n\
    \    long[] results = new long[sorted.length];\n    long count = 0;\n    long\
    \ value = 0;\n    long result = 0;\n    long max = 0;\n    long maxIndex = 0;\n\
    \    for (long i = 0; i < sorted.length; i++)\n    {\n        if (i == 0)\n  \
    \      {\n            count = 1;\n            value = sorted[i];\n           \
    \ result = value;\n        }\n        else if (sorted[i] == sorted[i - 1])\n \
    \       {\n            count++;\n            result = value;\n        }\n    \
    \    else\n        {\n            count = 1;\n            value = sorted[i];\n\
    \            result = value;\n        }\n        counts[i] = count;\n        values[i]\
    \ = value;\n        results[i] = result;\n        if (count >= value && count\
    \ > max)\n        {\n            max = count;\n            maxIndex = i;\n   \
    \     }\n    }\n    if (max == 0)\n    {\n        return -1;\n    }\n    else\n\
    \    {\n        return values[maxIndex];\n    }\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n  long[] freq\
    \ = new long[lst.length];\n  long[] nums = new long[lst.length];\n  long[] result\
    \ = new long[lst.length];\n  int i = 0;\n  foreach(long num; lst)\n  {\n    if(nums.canFind(num))\n\
    \    {\n      freq[nums.indexOf(num)]++;\n    }\n    else\n    {\n      nums[i]\
    \ = num;\n      freq[i] = 1;\n      i++;\n    }\n  }\n  int j = 0;\n  foreach(long\
    \ num; nums)\n  {\n    if(num <= freq[j])\n    {\n      result[j] = num;\n   \
    \ }\n    j++;\n  }\n  if(result.length == 0)\n  {\n    return -1;\n  }\n  else\n\
    \  {\n    return result.max;\n  }\n}", "{\n    // your code here\n    long[] arr\
    \ = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n    arr2.removeDuplicates;\n\
    \    foreach(i; arr2)\n    {\n        if(arr.count(i) >= i)\n        {\n     \
    \       return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   long[] values = new long[lst.length];\n    long[] sorted = new long[lst.length];\n\
    \    long[] sortedCounts = new long[lst.length];\n    long[] sortedValues = new\
    \ long[lst.length];\n    long[] sortedSorted = new long[lst.length];\n    long[]\
    \ sortedSortedCounts = new long[lst.length];\n    long[] sortedSortedValues =\
    \ new long[lst.length];\n    long[] sortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedCounts = new long[lst.length];\n    long[] sortedSortedSortedValues\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedCounts = new long[lst.length];\n    long[]\
    \ sortedSortedSortedSortedValues = new long[lst.length];\n    long[] sortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedCounts = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedValues = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSorted = new long[lst.length];\n   \
    \ long[] sortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedValues = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedValues = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSorted", "{\n    long max = -1L;\n    foreach(long\
    \ i; lst)\n    {\n        if(i > max)\n        {\n            long count = 0L;\n\
    \            foreach(long j; lst)\n            {\n                if(i == j)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            if(count >= i)\n            {\n                max = i;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    long[] sorted = new long[lst.length];\n    foreach(i,\
    \ e; lst)\n    {\n        freq[e]++;\n        sorted[i] = e;\n    }\n    sort(sorted);\n\
    \    foreach(e; sorted)\n    {\n        if(freq[e] >= e)\n        {\n        \
    \    return e;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        freq[i] = 0;\n\
    \    }\n    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   long[] values = new long[lst.length];\n    long count = 0;\n    long value\
    \ = 0;\n    long max = 0;\n    long maxCount = 0;\n    long maxValue = 0;\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        count = 0;\n        value = lst[i];\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[j] == value)\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ >= value)\n        {\n            if(count > maxCount)\n            {\n    \
    \            maxCount = count;\n                maxValue = value;\n          \
    \  }\n        }\n    }\n    if(maxCount == 0)\n    {\n        return -1;\n   \
    \ }\n    return maxValue;\n}", "{\n    long[] freq = new long[lst.length];\n \
    \   foreach(i; 0..lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n    arr2.sort;\n\
    \    long[] arr3 = arr2.dup;\n    arr3.sort;\n    long[] arr4 = arr3.dup;\n  \
    \  arr4.sort;\n    long[] arr5 = arr4.dup;\n    arr5.sort;\n    long[] arr6 =\
    \ arr5.dup;\n    arr6.sort;\n    long[] arr7 = arr6.dup;\n    arr7.sort;\n   \
    \ long[] arr8 = arr7.dup;\n    arr8.sort;\n    long[] arr9 = arr8.dup;\n    arr9.sort;\n\
    \    long[] arr10 = arr9.dup;\n    arr10.sort;\n    long[] arr11 = arr10.dup;\n\
    \    arr11.sort;\n    long[] arr12 = arr11.dup;\n    arr12.sort;\n    long[] arr13\
    \ = arr12.dup;\n    arr13.sort;\n    long[] arr14 = arr13.dup;\n    arr14.sort;\n\
    \    long[] arr15 = arr14.dup;\n    arr15.sort;\n    long[] arr16 = arr15.dup;\n\
    \    arr16.sort;\n    long[] arr17 = arr16.dup;\n    arr17.sort;\n    long[] arr18\
    \ = arr17.dup;\n    arr18.sort;\n    long[] arr19 = arr18.dup;\n    arr19.sort;\n\
    \    long[] arr20 = arr19.dup;\n    arr20.sort;\n    long[] arr21 = arr20.dup;\n\
    \    arr21.sort;\n    long[] arr22 = arr21.dup;\n    arr22.sort;\n    long[] arr23\
    \ = arr22.dup;\n    arr23.sort;\n    long[] arr24 = arr23.dup;\n    arr24.sort;\n\
    \    long[] arr25 = arr24.dup;\n    arr25.sort;\n    long[] arr26 = arr25.dup;",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n     \
    \   foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i]++;\n            }\n        }\n    }\n \
    \   long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] num = new long[lst.length];\n\
    \    long[] res = new long[lst.length];\n    long[] res2 = new long[lst.length];\n\
    \    long[] res3 = new long[lst.length];\n    long[] res4 = new long[lst.length];\n\
    \    long[] res5 = new long[lst.length];\n    long[] res6 = new long[lst.length];\n\
    \    long[] res7 = new long[lst.length];\n    long[] res8 = new long[lst.length];\n\
    \    long[] res9 = new long[lst.length];\n    long[] res10 = new long[lst.length];\n\
    \    long[] res11 = new long[lst.length];\n    long[] res12 = new long[lst.length];\n\
    \    long[] res13 = new long[lst.length];\n    long[] res14 = new long[lst.length];\n\
    \    long[] res15 = new long[lst.length];\n    long[] res16 = new long[lst.length];\n\
    \    long[] res17 = new long[lst.length];\n    long[] res18 = new long[lst.length];\n\
    \    long[] res19 = new long[lst.length];\n    long[] res20 = new long[lst.length];\n\
    \    long[] res21 = new long[lst.length];\n    long[] res22 = new long[lst.length];\n\
    \    long[] res23 = new long[lst.length];\n    long[] res24 = new long[lst.length];\n\
    \    long[] res25 = new long[lst.length];\n    long[] res26 = new long[lst.length];\n\
    \    long[] res27 = new long[lst.length];\n    long[] res28 = new long[lst.length];\n\
    \    long[] res29 = new long[lst.length];\n    long[] res30 = new long[lst.length];\n\
    \    long[] res31 = new long[lst.length];\n    long[] res32 = new long[lst.length];\n\
    \   ", "{\n    long max = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n\
    \    {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    foreach(long i; lst)\n    {\n        if(i == max)\n        {\n          \
    \  maxCount++;\n        }\n    }\n    if(maxCount >= max)\n    {\n        return\
    \ max;\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n   \
    \         {\n                freq[i]++;\n            }\n        }\n    }\n   \
    \ long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(lst[i] > max\
    \ && freq[i] >= lst[i])\n        {\n            max = lst[i];\n        }\n   \
    \ }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = -1;\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i && i > max)\n        {\n            max = i;\n        }\n  \
    \  }\n    return max;\n}", "{\n    auto freq = lst.group.length;\n    auto max\
    \ = lst.max;\n    foreach(i; 0 .. max)\n    {\n        if(freq[i] >= i)\n    \
    \        return i;\n    }\n    return -1;\n}", "{\n    return lst.groupBy!(a =>\
    \ a).filter!(a => a.length >= a.key).keys.max;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    long maxIndex = 0;\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i]\
    \ > max)\n        {\n            max = freq[i];\n            maxIndex = i;\n \
    \       }\n    }\n    if(max >= lst[maxIndex])\n    {\n        return lst[maxIndex];\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    long max = 0;\n\
    \    long max_count = 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n\
    \        {\n            max = i;\n            max_count = 1;\n        }\n    \
    \    else if(i == max)\n        {\n            max_count++;\n        }\n    }\n\
    \    if(max_count >= max)\n    {\n        return max;\n    }\n    else\n    {\n\
    \        return -1;\n    }\n}", "{\n    long max = 0;\n    long maxCount = 0;\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max)\n        {\n            max = lst[i];\n     \
    \   }\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. max)\n    {\n        if(counts[i]\
    \ >= i)\n        {\n            maxCount = i;\n        }\n    }\n    if(maxCount\
    \ == 0)\n    {\n        return -1;\n    }\n    return maxCount;\n}", "{\n    long\
    \ max = 0;\n    long maxCount = 0;\n    foreach(elem; lst)\n    {\n        if(elem\
    \ > max)\n        {\n            max = elem;\n            maxCount = 1;\n    \
    \    }\n        else if(elem == max)\n        {\n            maxCount++;\n   \
    \     }\n    }\n    if(maxCount >= max)\n    {\n        return max;\n    }\n \
    \   else\n    {\n        return -1;\n    }\n}", "{\n    auto d = new Map!(long,\
    \ long)();\n    foreach(i; lst)\n    {\n        if(d.count(i) == 0)\n        {\n\
    \            d[i] = 1;\n        }\n        else\n        {\n            d[i]++;\n\
    \        }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n       \
    \ if(d[i] >= i && i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts\
    \ = lst.dup.sort.count;\n    long[] counts_sorted = counts.dup.sort;\n    long[]\
    \ counts_sorted_unique = counts_sorted.dup.sort.uniq;\n    long[] counts_sorted_unique_reversed\
    \ = counts_sorted_unique.dup.reverse;\n    long[] counts_sorted_unique_reversed_greater_than_one\
    \ = counts_sorted_unique_reversed.filter!(a => a > 1);\n    long[] counts_sorted_unique_reversed_greater_than_one_first\
    \ = counts_sorted_unique_reversed_greater_than_one.take(1);\n    long[] counts_sorted_unique_reversed_greater_than_one_first_index\
    \ = counts_sorted_unique_reversed_greater_than_one_first.map!(a => counts_sorted.indexOf(a));\n\
    \    long[] counts_sorted_unique_reversed_greater_than_one_first_index_sorted\
    \ = counts_sorted_unique_reversed_greater_than_one_first_index.dup.sort;\n   \
    \ long[] counts_sorted_unique_reversed_greater_than_one_first_index_sorted_first\
    \ = counts_sorted_unique_reversed_greater_than_one_first_index_sorted.take(1);\n\
    \    long[] counts_sorted_unique_reversed_greater_than_one_first_index_sorted_first_sorted\
    \ = counts_sorted_unique_reversed_greater_than_one_first_index_sorted_first.dup.sort;\n\
    \    long[] counts_sorted_unique_reversed_greater_than_one_first_index_sorted_first_sorted_first\
    \ = counts_sorted_unique_reversed_greater_than_one_first_index_sorted_first_sorted.take(1);\n\
    \    long[] counts_sorted_unique_re", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(counts[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] counts = new long[lst.length];\n    long[] sorted = new long[lst.length];\n\
    \    long[] sortedCounts = new long[lst.length];\n    long[] sortedCountsSorted\
    \ = new long[lst.length];\n    long[] sortedSorted = new long[lst.length];\n \
    \   long[] sortedSortedCounts = new long[lst.length];\n    long[] sortedSortedCountsSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedCounts = new long[lst.length];\n    long[] sortedSortedSortedCountsSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedCounts = new long[lst.length];\n    long[]\
    \ sortedSortedSortedSortedCountsSorted = new long[lst.length];\n    long[] sortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedCounts = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedCountsSorted = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCountsSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedS", "{\n    long[] freq = new long[lst.length];\n    long max\
    \ = 0;\n    foreach(i; lst)\n    {\n        if(i > max)\n            max = i;\n\
    \        freq[i]++;\n    }\n    foreach(i; 0..max)\n    {\n        if(freq[i]\
    \ >= i)\n            return i;\n    }\n    return -1;\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        counts[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(counts[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n\
    \        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n     \
    \       if(lst[i] == lst[j])\n            {\n                count++;\n      \
    \      }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n     \
    \   {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    return max;\n}", "{\n    long[] arr = lst.dup;\n\
    \    arr.sort;\n    long[] counts = new long[arr.length];\n    long[] vals = new\
    \ long[arr.length];\n    long count = 0;\n    long val = 0;\n    long max = 0;\n\
    \    long maxVal = 0;\n    foreach(i; 0..arr.length)\n    {\n        if(i == 0)\n\
    \        {\n            count = 1;\n            val = arr[i];\n        }\n   \
    \     else if(arr[i] == arr[i-1])\n        {\n            count++;\n        }\n\
    \        else\n        {\n            counts[i-1] = count;\n            vals[i-1]\
    \ = val;\n            count = 1;\n            val = arr[i];\n        }\n     \
    \   if(i == arr.length-1)\n        {\n            counts[i] = count;\n       \
    \     vals[i] = val;\n        }\n    }\n    foreach(i; 0..counts.length)\n   \
    \ {\n        if(counts[i] >= vals[i] && vals[i] > max)\n        {\n          \
    \  max = vals[i];\n            maxVal = vals[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return maxVal;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] sorted = new long[lst.length];\n  \
    \  long[] sortedFreq = new long[lst.length];\n    long[] sortedFreq2 = new long[lst.length];\n\
    \    long[] sortedFreq3 = new long[lst.length];\n    long[] sortedFreq4 = new\
    \ long[lst.length];\n    long[] sortedFreq5 = new long[lst.length];\n    long[]\
    \ sortedFreq6 = new long[lst.length];\n    long[] sortedFreq7 = new long[lst.length];\n\
    \    long[] sortedFreq8 = new long[lst.length];\n    long[] sortedFreq9 = new\
    \ long[lst.length];\n    long[] sortedFreq10 = new long[lst.length];\n    long[]\
    \ sortedFreq11 = new long[lst.length];\n    long[] sortedFreq12 = new long[lst.length];\n\
    \    long[] sortedFreq13 = new long[lst.length];\n    long[] sortedFreq14 = new\
    \ long[lst.length];\n    long[] sortedFreq15 = new long[lst.length];\n    long[]\
    \ sortedFreq16 = new long[lst.length];\n    long[] sortedFreq17 = new long[lst.length];\n\
    \    long[] sortedFreq18 = new long[lst.length];\n    long[] sortedFreq19 = new\
    \ long[lst.length];\n    long[] sortedFreq20 = new long[lst.length];\n    long[]\
    \ sortedFreq21 = new long[lst.length];\n    long[] sortedFreq22 = new long[lst.length];\n\
    \    long[] sortedFreq23 = new long[lst.length];\n    long[] sortedFreq24 = new\
    \ long[lst.length];\n    long[] sortedFreq25 = new long[lst.length];\n    long[]\
    \ sortedFreq26 = new long[lst.length];\n    long[] sortedFreq27 = new long[lst.length];\n\
    \    long[] sortedFreq28 = new long[lst.length];\n    long[] sortedFre", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n\
    \        foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(lst[i] >\
    \ max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long maxCount\
    \ = 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n    \
    \        max = i;\n            maxCount = 1;\n        }\n        else if(i ==\
    \ max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    return -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n   \
    \         {\n                freq[i]++;\n            }\n        }\n    }\n   \
    \ long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i]\
    \ && lst[i] > max)\n        {\n            max = lst[i];\n        }\n    }\n \
    \   if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n\
    \        foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n \
    \           if(lst[i] == lst[j])\n            {\n                count++;\n  \
    \          }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        long\
    \ n = lst[i];\n        freq[n]++;\n    }\n    foreach(i; 0..freq.length)\n   \
    \ {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    long[]\
    \ nums = new long[lst.length];\n    int i = 0;\n    foreach(num; lst)\n    {\n\
    \        if(nums.canFind(num))\n        {\n            freq[nums.indexOf(num)]++;\n\
    \        }\n        else\n        {\n            nums[i] = num;\n            freq[i]\
    \ = 1;\n            i++;\n        }\n    }\n    long max = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > max && freq[nums.indexOf(num)] >= num)\n    \
    \    {\n            max = num;\n        }\n    }\n    if(max == 0)\n    {\n  \
    \      return -1;\n    }\n    return max;\n}", "{\n    auto d = new Map!(long,\
    \ long);\n    foreach(i; lst)\n    {\n        if(d.contains(i))\n        {\n \
    \           d[i]++;\n        }\n        else\n        {\n            d[i] = 1;\n\
    \        }\n    }\n    long max = -1;\n    foreach(i; d.keys)\n    {\n       \
    \ if(i > d[i])\n        {\n            continue;\n        }\n        else if(i\
    \ == d[i])\n        {\n            if(i > max)\n            {\n              \
    \  max = i;\n            }\n        }\n        else\n        {\n            return\
    \ -1;\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ maxCount = 0;\n    foreach(i; lst)\n    {\n        if(i > max)\n        {\n\
    \            max = i;\n            maxCount = 1;\n        }\n        else if(i\
    \ == max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    return -1;\n}", "{\n    long[]\
    \ arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n    long[] arr3 =\
    \ arr.dup;\n    long[] arr4 = arr.dup;\n    long[] arr5 = arr.dup;\n    long[]\
    \ arr6 = arr.dup;\n    long[] arr7 = arr.dup;\n    long[] arr8 = arr.dup;\n  \
    \  long[] arr9 = arr.dup;\n    long[] arr10 = arr.dup;\n    long[] arr11 = arr.dup;\n\
    \    long[] arr12 = arr.dup;\n    long[] arr13 = arr.dup;\n    long[] arr14 =\
    \ arr.dup;\n    long[] arr15 = arr.dup;\n    long[] arr16 = arr.dup;\n    long[]\
    \ arr17 = arr.dup;\n    long[] arr18 = arr.dup;\n    long[] arr19 = arr.dup;\n\
    \    long[] arr20 = arr.dup;\n    long[] arr21 = arr.dup;\n    long[] arr22 =\
    \ arr.dup;\n    long[] arr23 = arr.dup;\n    long[] arr24 = arr.dup;\n    long[]\
    \ arr25 = arr.dup;\n    long[] arr26 = arr.dup;\n    long[] arr27 = arr.dup;\n\
    \    long[] arr28 = arr.dup;\n    long[] arr29 = arr.dup;\n    long[] arr30 =\
    \ arr.dup;\n    long[] arr31 = arr.dup;\n    long[] arr32 = arr.dup;\n    long[]\
    \ arr33 = arr.dup;\n    long[] arr34 = arr.dup;\n    long[] arr35 = arr.dup;\n\
    \    long[] arr36 = arr.dup;\n    long[] arr37 = arr.dup;\n    long[] arr38 =\
    \ arr.dup;\n    long[] arr39 = arr.dup;\n    long[] arr40 = arr.dup;\n    long[]\
    \ arr41 = arr.dup;\n    long[] arr42 = arr.dup;", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long count = 0;\n    long max = 0;\n    long max_index = 0;\n    long max_freq\
    \ = 0;\n    long max_freq_index = 0;\n    foreach(i; lst)\n    {\n        if(count\
    \ == 0)\n        {\n            nums[count] = i;\n            freq[count] = 1;\n\
    \            count++;\n        }\n        else\n        {\n            if(nums.canFind(i))\n\
    \            {\n                freq[nums.indexOf(i)]++;\n            }\n    \
    \        else\n            {\n                nums[count] = i;\n             \
    \   freq[count] = 1;\n                count++;\n            }\n        }\n   \
    \ }\n    foreach(i; freq)\n    {\n        if(i > max_freq)\n        {\n      \
    \      max_freq = i;\n            max_freq_index = freq.indexOf(i);\n        }\n\
    \    }\n    foreach(i; nums)\n    {\n        if(i > max)\n        {\n        \
    \    max = i;\n            max_index = nums.indexOf(i);\n        }\n    }\n  \
    \  if(max_freq >= max)\n    {\n        return nums[max_freq_index];\n    }\n \
    \   else\n    {\n        return -1;\n    }\n}", "{\n    long[] count = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long[] result2 = new long[lst.length];\n    long[] result3 = new long[lst.length];\n\
    \    long[] result4 = new long[lst.length];\n    long[] result5 = new long[lst.length];\n\
    \    long[] result6 = new long[lst.length];\n    long[] result7 = new long[lst.length];\n\
    \    long[] result8 = new long[lst.length];\n    long[] result9 = new long[lst.length];\n\
    \    long[] result10 = new long[lst.length];\n    long[] result11 = new long[lst.length];\n\
    \    long[] result12 = new long[lst.length];\n    long[] result13 = new long[lst.length];\n\
    \    long[] result14 = new long[lst.length];\n    long[] result15 = new long[lst.length];\n\
    \    long[] result16 = new long[lst.length];\n    long[] result17 = new long[lst.length];\n\
    \    long[] result18 = new long[lst.length];\n    long[] result19 = new long[lst.length];\n\
    \    long[] result20 = new long[lst.length];\n    long[] result21 = new long[lst.length];\n\
    \    long[] result22 = new long[lst.length];\n    long[] result23 = new long[lst.length];\n\
    \    long[] result24 = new long[lst.length];\n    long[] result25 = new long[lst.length];\n\
    \    long[] result26 = new long[lst.length];\n    long[] result27 = new long[lst.length];\n\
    \    long[] result28 = new long[lst.length];\n    long[] result29 = new long[lst.length];\n\
    \    long[] result30 = new long[lst.length];\n    long[] result31 = new long[lst.length];\n\
    \    long[] result32 = new long[lst.length];\n    long", "{\n    long[] freq =\
    \ new long[lst.length];\n    long[] sorted = new long[lst.length];\n    foreach(i,\
    \ e; lst)\n    {\n        freq[e]++;\n        sorted[i] = e;\n    }\n    sort(sorted);\n\
    \    foreach(e; sorted)\n    {\n        if(freq[e] >= e)\n        {\n        \
    \    return e;\n        }\n    }\n    return -1;\n}", "{\n    long[] lst2 = lst.dup;\n\
    \    lst2.sort();\n    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates();\n\
    \    long[] lst4 = lst3.dup;\n    lst4.reverse;\n    foreach(long i; lst4)\n \
    \   {\n        if(i <= lst.count(i))\n        {\n            return i;\n     \
    \   }\n    }\n    return -1L;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    auto freq = lst.group.length;\n    auto max\
    \ = lst.max;\n    foreach(i; 0 .. max + 1)\n    {\n        if(freq[i] >= i)\n\
    \        {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] counts = new long[lst.length];\n    long max = -1;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[i] = count(lst, lst[i]);\n        if(counts[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = -1L;\n    long maxCount = 0L;\n\
    \    foreach(long i; lst)\n    {\n        long count = 0L;\n        foreach(long\
    \ j; lst)\n        {\n            if(i == j)\n            {\n                count++;\n\
    \            }\n        }\n        if(count >= i && count >= maxCount)\n     \
    \   {\n            max = i;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[] freq =\
    \ new long[sorted.length];\n    long[] nums = new long[sorted.length];\n    long[]\
    \ result = new long[sorted.length];\n    long count = 0;\n    long num = 0;\n\
    \    long res = 0;\n    foreach(i; 0 .. sorted.length)\n    {\n        if(i ==\
    \ 0)\n        {\n            num = sorted[i];\n            count++;\n        }\n\
    \        else if(sorted[i] == sorted[i-1])\n        {\n            count++;\n\
    \        }\n        else\n        {\n            freq[i-1] = count;\n        \
    \    nums[i-1] = num;\n            num = sorted[i];\n            count = 1;\n\
    \        }\n    }\n    freq[sorted.length-1] = count;\n    nums[sorted.length-1]\
    \ = num;\n    foreach(i; 0 .. sorted.length)\n    {\n        if(nums[i] == freq[i])\n\
    \        {\n            res = nums[i];\n        }\n    }\n    if(res == 0)\n \
    \   {\n        return -1;\n    }\n    else\n    {\n        return res;\n    }\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n  \
    \      foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long maxFreq = 0;\n    foreach(long i; lst)\n    {\n\
    \        if(i > max)\n        {\n            max = i;\n        }\n    }\n    foreach(long\
    \ i; lst)\n    {\n        if(i == max)\n        {\n            maxFreq++;\n  \
    \      }\n    }\n    if(maxFreq >= max)\n    {\n        return max;\n    }\n \
    \   else\n    {\n        return -1;\n    }\n}", "{\n    long[] cnt = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                cnt[i]++;\n  \
    \          }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(cnt[i] >= lst[i] && lst[i] > max)\n        {\n            max\
    \ = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n \
    \   }\n    return max;\n}", "{\n    long max = -1L;\n    foreach(k, v; lst.group)\n\
    \    {\n        if(v >= k && k > max)\n        {\n            max = k;\n     \
    \   }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long maxCount =\
    \ 0;\n    foreach(elem; lst)\n    {\n        if(elem > max)\n        {\n     \
    \       max = elem;\n            maxCount = 1;\n        }\n        else if(elem\
    \ == max)\n        {\n            maxCount++;\n        }\n    }\n    return maxCount\
    \ >= max ? max : -1;\n}", "{\n    long[] freq = new long[lst.length];\n    long\
    \ max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                count++;\n            }\n        }\n        freq[i]\
    \ = count;\n        if(count > max)\n        {\n            max = count;\n   \
    \     }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] ==\
    \ max && lst[i] == max)\n        {\n            return lst[i];\n        }\n  \
    \  }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    // Write your code here\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n    {\n        if(i\
    \ > max)\n        {\n            max = i;\n            maxCount = 1;\n       \
    \ }\n        else if(i == max)\n        {\n            maxCount++;\n        }\n\
    \    }\n    if(maxCount >= max)\n    {\n        return max;\n    }\n    return\
    \ -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort(std.algorithm.comparison);\n    long[] arr3 = arr2.dup;\n    arr3.sort(std.algorithm.comparison);\n\
    \    long[] arr4 = arr3.dup;\n    arr4.sort(std.algorithm.comparison);\n    long[]\
    \ arr5 = arr4.dup;\n    arr5.sort(std.algorithm.comparison);\n    long[] arr6\
    \ = arr5.dup;\n    arr6.sort(std.algorithm.comparison);\n    long[] arr7 = arr6.dup;\n\
    \    arr7.sort(std.algorithm.comparison);\n    long[] arr8 = arr7.dup;\n    arr8.sort(std.algorithm.comparison);\n\
    \    long[] arr9 = arr8.dup;\n    arr9.sort(std.algorithm.comparison);\n    long[]\
    \ arr10 = arr9.dup;\n    arr10.sort(std.algorithm.comparison);\n    long[] arr11\
    \ = arr10.dup;\n    arr11.sort(std.algorithm.comparison);\n    long[] arr12 =\
    \ arr11.dup;\n    arr12.sort(std.algorithm.comparison);\n    long[] arr13 = arr12.dup;\n\
    \    arr13.sort(std.algorithm.comparison);\n    long[] arr14 = arr13.dup;\n  \
    \  arr14.sort(std.algorithm.comparison);\n    long[] arr15 = arr14.dup;\n    arr15.sort(std.algorithm.comparison);\n\
    \    long[] arr16 = arr15.dup;\n    arr16.sort(std.algorithm.comparison);\n  \
    \  long[] arr17 = arr16.dup;\n    arr17.sort(std.algorithm.comparison);\n    long[]\
    \ arr18 = arr17.dup;\n    arr18.sort(std.algorithm.comparison);", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(long i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(long i; lst)\n    {\n        if(freq[i] >= i)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    long[] sorted = new long[lst.length];\n    long[]\
    \ sortedFreq = new long[lst.length];\n    long[] sortedFreq2 = new long[lst.length];\n\
    \    long[] sortedFreq3 = new long[lst.length];\n    long[] sortedFreq4 = new\
    \ long[lst.length];\n    long[] sortedFreq5 = new long[lst.length];\n    long[]\
    \ sortedFreq6 = new long[lst.length];\n    long[] sortedFreq7 = new long[lst.length];\n\
    \    long[] sortedFreq8 = new long[lst.length];\n    long[] sortedFreq9 = new\
    \ long[lst.length];\n    long[] sortedFreq10 = new long[lst.length];\n    long[]\
    \ sortedFreq11 = new long[lst.length];\n    long[] sortedFreq12 = new long[lst.length];\n\
    \    long[] sortedFreq13 = new long[lst.length];\n    long[] sortedFreq14 = new\
    \ long[lst.length];\n    long[] sortedFreq15 = new long[lst.length];\n    long[]\
    \ sortedFreq16 = new long[lst.length];\n    long[] sortedFreq17 = new long[lst.length];\n\
    \    long[] sortedFreq18 = new long[lst.length];\n    long[] sortedFreq19 = new\
    \ long[lst.length];\n    long[] sortedFreq20 = new long[lst.length];\n    long[]\
    \ sortedFreq21 = new long[lst.length];\n    long[] sortedFreq22 = new long[lst.length];\n\
    \    long[] sortedFreq23 = new long[lst.length];\n    long[] sortedFreq24 = new\
    \ long[lst.length];\n    long[] sortedFreq25 = new long[lst.length];\n    long[]\
    \ sortedFreq26 = new long[lst.length];\n    long[] sortedFreq27 = new long[lst.length];\n\
    \    long[] sortedFreq28 = new long[lst.length];\n    long[] sortedFre", "{\n\
    \    long max = 0;\n    long maxCount = 0;\n    foreach(i; lst)\n    {\n     \
    \   if(i > max)\n        {\n            max = i;\n            maxCount = 1;\n\
    \        }\n        else if(i == max)\n        {\n            maxCount++;\n  \
    \      }\n    }\n    if(maxCount >= max)\n    {\n        return max;\n    }\n\
    \    return -1;\n}", "{\n    long max = 0;\n    long max_count = 0;\n    foreach(long\
    \ i; lst)\n    {\n        if(i > max)\n        {\n            max = i;\n     \
    \       max_count = 1;\n        }\n        else if(i == max)\n        {\n    \
    \        max_count++;\n        }\n    }\n    return max_count >= max ? max : -1;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(lst[i] > max && lst[i] <= freq[i])\n\
    \        {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n  \
    \  {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] sorted =\
    \ lst.dup.sort;\n    long[] freq = lst.dup.sort.frequency;\n    long[] freq_sorted\
    \ = freq.dup.sort;\n    long[] freq_sorted_rev = freq_sorted.dup.reverse;\n  \
    \  long[] freq_sorted_rev_unique = freq_sorted_rev.dup.uniq;\n    long[] freq_sorted_rev_unique_rev\
    \ = freq_sorted_rev_unique.dup.reverse;\n    long[] freq_sorted_rev_unique_rev_sorted\
    \ = freq_sorted_rev_unique_rev.dup.sort;\n    long[] freq_sorted_rev_unique_rev_sorted_rev\
    \ = freq_sorted_rev_unique_rev_sorted.dup.reverse;\n    long[] freq_sorted_rev_unique_rev_sorted_rev_unique\
    \ = freq_sorted_rev_unique_rev_sorted_rev.dup.uniq;\n    long[] freq_sorted_rev_unique_rev_sorted_rev_unique_rev\
    \ = freq_sorted_rev_unique_rev_sorted_rev_unique.dup.reverse;\n    long[] freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted\
    \ = freq_sorted_rev_unique_rev_sorted_rev_unique_rev.dup.sort;\n    long[] freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted_rev\
    \ = freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted.dup.reverse;\n   \
    \ long[] freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted_rev_unique =\
    \ freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted_rev.dup.uniq;\n    long[]\
    \ freq_sorted_rev_unique_rev_sorted_rev_unique_rev_sorted_rev_", "{\n    long\
    \ max = 0;\n    long maxCount = 0;\n    foreach(elem; lst)\n    {\n        if(elem\
    \ > max)\n        {\n            max = elem;\n            maxCount = 1;\n    \
    \    }\n        else if(elem == max)\n        {\n            maxCount++;\n   \
    \     }\n    }\n    return maxCount >= max ? max : -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    long[] val = new long[lst.length];\n    long max\
    \ = 0;\n    long max_val = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(val.indexOf(lst[i])\
    \ == -1)\n        {\n            val ~= lst[i];\n            freq ~= 1;\n    \
    \    }\n        else\n        {\n            freq[val.indexOf(lst[i])] += 1;\n\
    \        }\n    }\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i] >=\
    \ val[i] && freq[i] > max)\n        {\n            max = freq[i];\n          \
    \  max_val = val[i];\n        }\n    }\n    if(max == 0)\n    {\n        return\
    \ -1;\n    }\n    return max_val;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long max = 0;\n    long max_freq = 0;\n    long max_num = 0;\n    long max_result\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        num[i] = lst[i];\n\
    \        freq[i] = 0;\n        result[i] = 0;\n    }\n    for (int i = 0; i <\
    \ lst.length; i++)\n    {\n        for (int j = 0; j < lst.length; j++)\n    \
    \    {\n            if (num[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < lst.length; i++)\n \
    \   {\n        if (freq[i] >= num[i])\n        {\n            result[i] = num[i];\n\
    \        }\n    }\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (result[i] > max_result)\n        {\n            max_result = result[i];\n \
    \       }\n    }\n    if (max_result == 0)\n    {\n        return -1;\n    }\n\
    \    else\n    {\n        return max_result;\n    }\n}", "{\n    long[] counts\
    \ = new long[lst.length];\n    long[] unique = new long[lst.length];\n    long[]\
    \ sorted = new long[lst.length];\n    long[] sortedCounts = new long[lst.length];\n\
    \    long[] sortedUnique = new long[lst.length];\n    long[] sortedSorted = new\
    \ long[lst.length];\n    long[] sortedSortedCounts = new long[lst.length];\n \
    \   long[] sortedSortedUnique = new long[lst.length];\n    long[] sortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedUnique = new long[lst.length];\n    long[] sortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedUnique = new long[lst.length];\n    long[]\
    \ sortedSortedSortedSortedSorted = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedCounts\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedUnique = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedUnique = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedCounts = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedUnique = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedSorted", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] count = new long[sorted.length];\n    long[] nums = new long[sorted.length];\n\
    \    long[] nums2 = new long[sorted.length];\n    long[] count2 = new long[sorted.length];\n\
    \    long[] nums3 = new long[sorted.length];\n    long[] count3 = new long[sorted.length];\n\
    \    long[] nums4 = new long[sorted.length];\n    long[] count4 = new long[sorted.length];\n\
    \    long[] nums5 = new long[sorted.length];\n    long[] count5 = new long[sorted.length];\n\
    \    long[] nums6 = new long[sorted.length];\n    long[] count6 = new long[sorted.length];\n\
    \    long[] nums7 = new long[sorted.length];\n    long[] count7 = new long[sorted.length];\n\
    \    long[] nums8 = new long[sorted.length];\n    long[] count8 = new long[sorted.length];\n\
    \    long[] nums9 = new long[sorted.length];\n    long[] count9 = new long[sorted.length];\n\
    \    long[] nums10 = new long[sorted.length];\n    long[] count10 = new long[sorted.length];\n\
    \    long[] nums11 = new long[sorted.length];\n    long[] count11 = new long[sorted.length];\n\
    \    long[] nums12 = new long[sorted.length];\n    long[] count12 = new long[sorted.length];\n\
    \    long[] nums13 = new long[sorted.length];\n    long[] count13 = new long[sorted.length];\n\
    \    long[] nums14 = new long[sorted.length];\n    long[] count14 = new long[sorted.length];\n\
    \    long[] nums15 = new long[sorted.length];\n    long[] count15 = new long[sorted.length];\n\
    \    long[] nums16 = new long[sorted.length];\n    long[] count16 = new long[sorted.length];\n\
    \   ", "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long max = 0;\n    long max_freq = 0;\n    long max_num = 0;\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n        nums[i] =\
    \ lst[i];\n    }\n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int\
    \ j = 0; j < lst.length; j++)\n        {\n            if(lst[i] == nums[j])\n\
    \            {\n                freq[j]++;\n            }\n        }\n    }\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(freq[i] >= nums[i]\
    \ && freq[i] > max_freq)\n        {\n            max_freq = freq[i];\n       \
    \     max_num = nums[i];\n        }\n    }\n    if(max_num == 0)\n    {\n    \
    \    return -1;\n    }\n    return max_num;\n}", "{\n    long[] sorted = lst.dup.sort();\n\
    \    long[] counts = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] result = new long[lst.length];\n    long count = 0;\n    long num\
    \ = 0;\n    long res = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(i\
    \ == 0)\n        {\n            num = sorted[i];\n            count = 1;\n   \
    \     }\n        else if(sorted[i] == sorted[i-1])\n        {\n            count++;\n\
    \        }\n        else\n        {\n            nums[i-1] = num;\n          \
    \  counts[i-1] = count;\n            num = sorted[i];\n            count = 1;\n\
    \        }\n    }\n    nums[lst.length-1] = num;\n    counts[lst.length-1] = count;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(nums[i] >= counts[i])\n  \
    \      {\n            res = nums[i];\n        }\n    }\n    if(res == 0)\n   \
    \ {\n        return -1;\n    }\n    return res;\n}", "{\n    long[] arr = lst.dup;\n\
    \    arr.sort;\n    long[] arr2 = arr.dup;\n    arr2.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr3 = arr.dup;\n    arr3.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr4 = arr.dup;\n    arr4.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr5 = arr.dup;\n    arr5.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr6 = arr.dup;\n    arr6.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr7 = arr.dup;\n    arr7.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr8 = arr.dup;\n    arr8.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr9 = arr.dup;\n    arr9.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr10 = arr.dup;\n    arr10.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr11 = arr.dup;\n    arr11.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr12 = arr.dup;\n    arr12.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr13 = arr.dup;\n    arr13.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr14 = arr.dup;\n    arr14.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr15 = arr.dup;\n    arr15.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr16 = arr.dup;\n    arr16.sort(std.algorithm.comparison.greater);\n\
    \    long[] arr17 = arr.dup;\n    arr17.sort(std.algorithm.comparison", "{\n \
    \   long[] sorted = lst.dup.sort();\n    long[] freq = new long[sorted.length];\n\
    \    long[] nums = new long[sorted.length];\n    long[] res = new long[sorted.length];\n\
    \    long max = 0;\n    long count = 0;\n    long index = 0;\n    long num = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] nums = new long[lst.length];\n    long[] res = new long[lst.length];\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(nums.canFind(lst[i]))\n\
    \        {\n            freq[nums.indexOf(lst[i])]++;\n        }\n        else\n\
    \        {\n            nums ~= lst[i];\n            freq ~= 1;\n        }\n \
    \   }\n    foreach(i; 0 .. nums.length)\n    {\n        if(nums[i] <= freq[i])\n\
    \        {\n            res ~= nums[i];\n        }\n    }\n    if(res.length ==\
    \ 0)\n    {\n        return -1;\n    }\n    else\n    {\n        return res.max;\n\
    \    }\n}", "{\n    long[] counts = new long[lst.length];\n    long[] values =\
    \ new long[lst.length];\n    int count = 0;\n    foreach(i; lst)\n    {\n    \
    \    if(count == 0)\n        {\n            values[count] = i;\n            counts[count]\
    \ = 1;\n            count++;\n        }\n        else\n        {\n           \
    \ bool found = false;\n            foreach(j; 0..count)\n            {\n     \
    \           if(values[j] == i)\n                {\n                    counts[j]++;\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if(!found)\n            {\n                values[count]\
    \ = i;\n                counts[count] = 1;\n                count++;\n       \
    \     }\n        }\n    }\n    long max = -1;\n    foreach(i; 0..count)\n    {\n\
    \        if(values[i] <= counts[i] && values[i] > max)\n        {\n          \
    \  max = values[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n    {\n \
    \       freq[i] = 0;\n    }\n    for (int i = 0; i < lst.length; i++)\n    {\n\
    \        for (int j = 0; j < lst.length; j++)\n        {\n            if (lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    for (int i = 0; i < lst.length; i++)\n \
    \   {\n        if (freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n  \
    \      foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] sorted = new long[lst.length];\n\
    \    long[] sortedFreq = new long[lst.length];\n    long[] sortedFreq2 = new long[lst.length];\n\
    \    long[] sortedFreq3 = new long[lst.length];\n    long[] sortedFreq4 = new\
    \ long[lst.length];\n    long[] sortedFreq5 = new long[lst.length];\n    long[]\
    \ sortedFreq6 = new long[lst.length];\n    long[] sortedFreq7 = new long[lst.length];\n\
    \    long[] sortedFreq8 = new long[lst.length];\n    long[] sortedFreq9 = new\
    \ long[lst.length];\n    long[] sortedFreq10 = new long[lst.length];\n    long[]\
    \ sortedFreq11 = new long[lst.length];\n    long[] sortedFreq12 = new long[lst.length];\n\
    \    long[] sortedFreq13 = new long[lst.length];\n    long[] sortedFreq14 = new\
    \ long[lst.length];\n    long[] sortedFreq15 = new long[lst.length];\n    long[]\
    \ sortedFreq16 = new long[lst.length];\n    long[] sortedFreq17 = new long[lst.length];\n\
    \    long[] sortedFreq18 = new long[lst.length];\n    long[] sortedFreq19 = new\
    \ long[lst.length];\n    long[] sortedFreq20 = new long[lst.length];\n    long[]\
    \ sortedFreq21 = new long[lst.length];\n    long[] sortedFreq22 = new long[lst.length];\n\
    \    long[] sortedFreq23 = new long[lst.length];\n    long[] sortedFreq24 = new\
    \ long[lst.length];\n    long[] sortedFreq25 = new long[lst.length];\n    long[]\
    \ sortedFreq26 = new long[lst.length];\n    long[] sortedFreq27 = new long[lst.length];\n\
    \    long[] sortedFreq28 = new long[lst.length];\n    long[] sortedFre", "{\n\
    \    long max = 0;\n    long maxFreq = 0;\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max)\n        {\n\
    \            max = lst[i];\n        }\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(lst[i] == max)\n        {\n            maxFreq++;\n\
    \        }\n        freq[lst[i]]++;\n    }\n    if(maxFreq >= max)\n    {\n  \
    \      return max;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long max = 0;\n    long maxFreq = 0;\n    foreach(long i; lst)\n    {\n\
    \        if(i > maxFreq)\n        {\n            max = i;\n            maxFreq\
    \ = i;\n        }\n        else if(i == maxFreq)\n        {\n            max =\
    \ i;\n        }\n    }\n    return max;\n}", "{\n    // your code here\n    long\
    \ max = 0;\n    long maxCount = 0;\n    foreach(elem; lst)\n    {\n        if(elem\
    \ > max)\n        {\n            max = elem;\n            maxCount = 1;\n    \
    \    }\n        else if(elem == max)\n        {\n            maxCount++;\n   \
    \     }\n    }\n    if(maxCount >= max)\n    {\n        return max;\n    }\n \
    \   else\n    {\n        return -1;\n    }\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] val = new long[lst.length];\n    long[] res = new long[lst.length];\n\
    \    long max = 0;\n    long max_index = 0;\n    long max_val = 0;\n    long max_freq\
    \ = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(freq[lst[i]]\
    \ == 0)\n        {\n            val[lst[i]] = lst[i];\n            freq[lst[i]]\
    \ = 1;\n        }\n        else\n        {\n            freq[lst[i]]++;\n    \
    \    }\n    }\n    for(int i = 0; i < freq.length; i++)\n    {\n        if(freq[i]\
    \ >= val[i])\n        {\n            res[i] = val[i];\n        }\n    }\n    for(int\
    \ i = 0; i < res.length; i++)\n    {\n        if(res[i] > max)\n        {\n  \
    \          max = res[i];\n            max_index = i;\n            max_val = val[i];\n\
    \            max_freq = freq[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return max;\n    }\n}", "{\n\
    \    long max = 0;\n    long maxCount = 0;\n    foreach(l; lst)\n    {\n     \
    \   if(l > maxCount)\n        {\n            max = l;\n            maxCount =\
    \ l;\n        }\n        else if(l == maxCount)\n        {\n            max =\
    \ l;\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] temp = new long[lst.length];\n\
    \    long[] temp2 = new long[lst.length];\n    long[] temp3 = new long[lst.length];\n\
    \    long[] temp4 = new long[lst.length];\n    long[] temp5 = new long[lst.length];\n\
    \    long[] temp6 = new long[lst.length];\n    long[] temp7 = new long[lst.length];\n\
    \    long[] temp8 = new long[lst.length];\n    long[] temp9 = new long[lst.length];\n\
    \    long[] temp10 = new long[lst.length];\n    long[] temp11 = new long[lst.length];\n\
    \    long[] temp12 = new long[lst.length];\n    long[] temp13 = new long[lst.length];\n\
    \    long[] temp14 = new long[lst.length];\n    long[] temp15 = new long[lst.length];\n\
    \    long[] temp16 = new long[lst.length];\n    long[] temp17 = new long[lst.length];\n\
    \    long[] temp18 = new long[lst.length];\n    long[] temp19 = new long[lst.length];\n\
    \    long[] temp20 = new long[lst.length];\n    long[] temp21 = new long[lst.length];\n\
    \    long[] temp22 = new long[lst.length];\n    long[] temp23 = new long[lst.length];\n\
    \    long[] temp24 = new long[lst.length];\n    long[] temp25 = new long[lst.length];\n\
    \    long[] temp26 = new long[lst.length];\n    long[] temp27 = new long[lst.length];\n\
    \    long[] temp28 = new long[lst.length];\n    long[] temp29 = new long[lst.length];\n\
    \    long[] temp30 = new long[lst.length];\n    long[] temp31 = new long[lst.length];\n\
    \    long[] temp32 = new long[lst.length];\n   ", "{\n    long max = -1L;\n  \
    \  foreach(long i; lst)\n    {\n        if(i > max)\n        {\n            long\
    \ count = 0L;\n            foreach(long j; lst)\n            {\n             \
    \   if(i == j)\n                {\n                    count++;\n            \
    \    }\n            }\n            if(count >= i)\n            {\n           \
    \     max = i;\n            }\n        }\n    }\n    return max;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long maxCount = 0;\n    foreach(i; lst)\n    {\n        if(i > max)\n\
    \        {\n            max = i;\n            maxCount = 1;\n        }\n     \
    \   else if(i == max)\n        {\n            maxCount++;\n        }\n    }\n\
    \    if(maxCount >= max)\n    {\n        return max;\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] num = new long[lst.length];\n\
    \    long[] result = new long[lst.length];\n    long max = 0;\n    long max_index\
    \ = 0;\n    long max_num = 0;\n    long max_num_index = 0;\n    long max_result\
    \ = 0;\n    long max_result_index = 0;\n    long temp = 0;\n    long temp_index\
    \ = 0;\n    long temp_num = 0;\n    long temp_num_index = 0;\n    long temp_result\
    \ = 0;\n    long temp_result_index = 0;\n    for(long i = 0; i < lst.length; i++)\n\
    \    {\n        temp = lst[i];\n        temp_index = i;\n        for(long j =\
    \ 0; j < lst.length; j++)\n        {\n            if(temp == lst[j])\n       \
    \     {\n                temp_num = temp;\n                temp_num_index = temp_index;\n\
    \                temp_result = temp;\n                temp_result_index = temp_index;\n\
    \                temp++;\n            }\n        }\n        if(temp > max)\n \
    \       {\n            max = temp;\n            max_index = temp_index;\n    \
    \        max_num = temp_num;\n            max_num_index = temp_num_index;\n  \
    \          max_result = temp_result;\n            max_result_index = temp_result_index;\n\
    \        }\n    }\n    if(max_result >= max_num)\n    {\n        return max_result;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    auto d = new int[lst.length];\n\
    \    foreach(i, e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n\
    \    {\n        if(e >= i && e != 0)\n        {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] temp = new long[lst.length];\n    long[] temp2 = new long[lst.length];\n\
    \    long[] temp3 = new long[lst.length];\n    long[] temp4 = new long[lst.length];\n\
    \    long[] temp5 = new long[lst.length];\n    long[] temp6 = new long[lst.length];\n\
    \    long[] temp7 = new long[lst.length];\n    long[] temp8 = new long[lst.length];\n\
    \    long[] temp9 = new long[lst.length];\n    long[] temp10 = new long[lst.length];\n\
    \    long[] temp11 = new long[lst.length];\n    long[] temp12 = new long[lst.length];\n\
    \    long[] temp13 = new long[lst.length];\n    long[] temp14 = new long[lst.length];\n\
    \    long[] temp15 = new long[lst.length];\n    long[] temp16 = new long[lst.length];\n\
    \    long[] temp17 = new long[lst.length];\n    long[] temp18 = new long[lst.length];\n\
    \    long[] temp19 = new long[lst.length];\n    long[] temp20 = new long[lst.length];\n\
    \    long[] temp21 = new long[lst.length];\n    long[] temp22 = new long[lst.length];\n\
    \    long[] temp23 = new long[lst.length];\n    long[] temp24 = new long[lst.length];\n\
    \    long[] temp25 = new long[lst.length];\n    long[] temp26 = new long[lst.length];\n\
    \    long[] temp27 = new long[lst.length];\n    long[] temp28 = new long[lst.length];\n\
    \    long[] temp29 = new long[lst.length];\n    long[] temp30 = new long[lst.length];\n\
    \    long[] temp31 = new long[lst.length];\n    long[] temp32 = new long[lst.length];\n\
    \    long[] temp33 = new long[lst.length];\n", "{\n    long max = 0;\n    long\
    \ maxCount = 0;\n    foreach(k, v; lst.grouped)\n    {\n        if(v.length >=\
    \ k && k > maxCount)\n        {\n            max = k;\n            maxCount =\
    \ v.length;\n        }\n    }\n    return max > 0 ? max : -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] sorted = new long[lst.length];\n  \
    \  long[] sortedFreq = new long[lst.length];\n    long[] sortedFreq2 = new long[lst.length];\n\
    \    long[] sortedFreq3 = new long[lst.length];\n    long[] sortedFreq4 = new\
    \ long[lst.length];\n    long[] sortedFreq5 = new long[lst.length];\n    long[]\
    \ sortedFreq6 = new long[lst.length];\n    long[] sortedFreq7 = new long[lst.length];\n\
    \    long[] sortedFreq8 = new long[lst.length];\n    long[] sortedFreq9 = new\
    \ long[lst.length];\n    long[] sortedFreq10 = new long[lst.length];\n    long[]\
    \ sortedFreq11 = new long[lst.length];\n    long[] sortedFreq12 = new long[lst.length];\n\
    \    long[] sortedFreq13 = new long[lst.length];\n    long[] sortedFreq14 = new\
    \ long[lst.length];\n    long[] sortedFreq15 = new long[lst.length];\n    long[]\
    \ sortedFreq16 = new long[lst.length];\n    long[] sortedFreq17 = new long[lst.length];\n\
    \    long[] sortedFreq18 = new long[lst.length];\n    long[] sortedFreq19 = new\
    \ long[lst.length];\n    long[] sortedFreq20 = new long[lst.length];\n    long[]\
    \ sortedFreq21 = new long[lst.length];\n    long[] sortedFreq22 = new long[lst.length];\n\
    \    long[] sortedFreq23 = new long[lst.length];\n    long[] sortedFreq24 = new\
    \ long[lst.length];\n    long[] sortedFreq25 = new long[lst.length];\n    long[]\
    \ sortedFreq26 = new long[lst.length];\n    long[] sortedFreq27 = new long[lst.length];\n\
    \    long[] sortedFreq28 = new long[lst.length];\n    long[] sortedFre", "{\n\
    \    auto m = new Map!(long, long)();\n    foreach(e; lst)\n    {\n        if(m.count(e)\
    \ == 0)\n        {\n            m[e] = 1;\n        }\n        else\n        {\n\
    \            m[e] += 1;\n        }\n    }\n    long max = -1;\n    foreach(e;\
    \ m.byKey)\n    {\n        if(e.value >= e.key && e.key > max)\n        {\n  \
    \          max = e.key;\n        }\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n    long[]\
    \ res = new long[lst.length];\n    int i = 0;\n    foreach(elem; lst)\n    {\n\
    \        if(!elem in nums)\n        {\n            nums[i] = elem;\n         \
    \   freq[i] = 1;\n            i++;\n        }\n        else\n        {\n     \
    \       foreach(e; nums)\n            {\n                if(e == elem)\n     \
    \           {\n                    freq[e]++;\n                }\n           \
    \ }\n        }\n    }\n    int j = 0;\n    foreach(e; nums)\n    {\n        if(e\
    \ >= freq[e])\n        {\n            res[j] = e;\n            j++;\n        }\n\
    \    }\n    if(res.length == 0)\n    {\n        return -1;\n    }\n    else\n\
    \    {\n        return max(res);\n    }\n}", "{\n    long max = 0;\n    long maxCount\
    \ = 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n        {\n    \
    \        max = i;\n            maxCount = 1;\n        }\n        else if(i ==\
    \ max)\n        {\n            maxCount++;\n        }\n    }\n    if(maxCount\
    \ >= max)\n    {\n        return max;\n    }\n    return -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] nums = new long[lst.length];\n    long[] sorted = new long[lst.length];\n\
    \    long[] sortedFreq = new long[lst.length];\n    long[] sortedNums = new long[lst.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll\
    \ = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n \
    \   int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu\
    \ = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n \
    \   int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc = 0;\n    int\
    \ ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n    int hhh\
    \ = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n\
    \    int mmm = 0;\n    int nnn = 0;\n    int ooo", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ for(int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n    }\n  \
    \  for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst.length;\
    \ j++)\n        {\n            if(lst[i] == lst[j])\n            {\n         \
    \       freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(freq[i] >= lst[i] && lst[i] >\
    \ max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    long[] nums = new long[lst.length];\n    long[]\
    \ sorted = new long[lst.length];\n    long[] sortedFreq = new long[lst.length];\n\
    \    long[] sortedNums = new long[lst.length];\n    long[] sortedNumsFreq = new\
    \ long[lst.length];\n    long[] sortedNumsFreq2 = new long[lst.length];\n    long[]\
    \ sortedNumsFreq3 = new long[lst.length];\n    long[] sortedNumsFreq4 = new long[lst.length];\n\
    \    long[] sortedNumsFreq5 = new long[lst.length];\n    long[] sortedNumsFreq6\
    \ = new long[lst.length];\n    long[] sortedNumsFreq7 = new long[lst.length];\n\
    \    long[] sortedNumsFreq8 = new long[lst.length];\n    long[] sortedNumsFreq9\
    \ = new long[lst.length];\n    long[] sortedNumsFreq10 = new long[lst.length];\n\
    \    long[] sortedNumsFreq11 = new long[lst.length];\n    long[] sortedNumsFreq12\
    \ = new long[lst.length];\n    long[] sortedNumsFreq13 = new long[lst.length];\n\
    \    long[] sortedNumsFreq14 = new long[lst.length];\n    long[] sortedNumsFreq15\
    \ = new long[lst.length];\n    long[] sortedNumsFreq16 = new long[lst.length];\n\
    \    long[] sortedNumsFreq17 = new long[lst.length];\n    long[] sortedNumsFreq18\
    \ = new long[lst.length];\n    long[] sortedNumsFreq19 = new long[lst.length];\n\
    \    long[] sortedNumsFreq20 = new long[lst.length];\n    long[] sortedNumsFreq21\
    \ = new long[lst.length];\n    long[] sortedNumsFreq22 = new long[lst.length];\n\
    \    long[] sortedNumsFreq23 = new long[lst.", "{\n    long[] sorted = lst.dup.sort();\n\
    \    long[] freq = new long[sorted.length];\n    long[] num = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long[] final = new long[sorted.length];\n\
    \    long[] final2 = new long[sorted.length];\n    long[] final3 = new long[sorted.length];\n\
    \    long[] final4 = new long[sorted.length];\n    long[] final5 = new long[sorted.length];\n\
    \    long[] final6 = new long[sorted.length];\n    long[] final7 = new long[sorted.length];\n\
    \    long[] final8 = new long[sorted.length];\n    long[] final9 = new long[sorted.length];\n\
    \    long[] final10 = new long[sorted.length];\n    long[] final11 = new long[sorted.length];\n\
    \    long[] final12 = new long[sorted.length];\n    long[] final13 = new long[sorted.length];\n\
    \    long[] final14 = new long[sorted.length];\n    long[] final15 = new long[sorted.length];\n\
    \    long[] final16 = new long[sorted.length];\n    long[] final17 = new long[sorted.length];\n\
    \    long[] final18 = new long[sorted.length];\n    long[] final19 = new long[sorted.length];\n\
    \    long[] final20 = new long[sorted.length];\n    long[] final21 = new long[sorted.length];\n\
    \    long[] final22 = new long[sorted.length];\n    long[] final23 = new long[sorted.length];\n\
    \    long[] final24 = new long[sorted.length];\n    long[] final25 = new long[sorted.length];\n\
    \    long[] final26 = new long[sorted.length];\n    long[] final27 = new long[sorted.length];\n\
    \    long[] final28 = new long[sorted.length];\n    long[] final29 = new long[sorted.length];\n\
    \    long[] final30 = new long[sorted.length];\n    long[]", "{\n    long[] lst2\
    \ = lst.dup;\n    lst2.sort;\n    long[] lst3 = lst2.dup;\n    lst3.sort(lst2.count);\n\
    \    long[] lst4 = lst3.dup;\n    lst4.sort(lst3.count);\n    long[] lst5 = lst4.dup;\n\
    \    lst5.sort(lst4.count);\n    long[] lst6 = lst5.dup;\n    lst6.sort(lst5.count);\n\
    \    long[] lst7 = lst6.dup;\n    lst7.sort(lst6.count);\n    long[] lst8 = lst7.dup;\n\
    \    lst8.sort(lst7.count);\n    long[] lst9 = lst8.dup;\n    lst9.sort(lst8.count);\n\
    \    long[] lst10 = lst9.dup;\n    lst10.sort(lst9.count);\n    long[] lst11 =\
    \ lst10.dup;\n    lst11.sort(lst10.count);\n    long[] lst12 = lst11.dup;\n  \
    \  lst12.sort(lst11.count);\n    long[] lst13 = lst12.dup;\n    lst13.sort(lst12.count);\n\
    \    long[] lst14 = lst13.dup;\n    lst14.sort(lst13.count);\n    long[] lst15\
    \ = lst14.dup;\n    lst15.sort(lst14.count);\n    long[] lst16 = lst15.dup;\n\
    \    lst16.sort(lst15.count);\n    long[] lst17 = lst16.dup;\n    lst17.sort(lst16.count);\n\
    \    long[] lst18 = lst17.dup;\n    lst18.sort(lst17.count);\n    long[] lst19\
    \ = lst18.dup;\n    lst19.sort(l", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    long[] res = new long[lst.length];\n\
    \    long max = 0;\n    long max_freq = 0;\n    long max_num = 0;\n    long max_res\
    \ = 0;\n    int j = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n     \
    \   if(!nums.contains(lst[i]))\n        {\n            nums[j] = lst[i];\n   \
    \         freq[j] = lst.count(lst[i]);\n            j++;\n        }\n    }\n \
    \   for(int i = 0; i < j; i++)\n    {\n        if(nums[i] == freq[i])\n      \
    \  {\n            res[i] = nums[i];\n        }\n    }\n    for(int i = 0; i <\
    \ j; i++)\n    {\n        if(res[i] > max_res)\n        {\n            max_res\
    \ = res[i];\n        }\n    }\n    if(max_res == 0)\n    {\n        return -1;\n\
    \    }\n    return max_res;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    foreach(i; 0..lst.length)\n    {\n     \
    \   if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] nums = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long max = 0;\n    long maxIndex = 0;\n    long maxFreq = 0;\n    long maxFreqIndex\
    \ = 0;\n    long maxFreqNum = 0;\n    long maxFreqNumIndex = 0;\n    long maxFreqNumFreq\
    \ = 0;\n    long maxFreqNumFreqIndex = 0;\n    long maxFreqNumFreqNum = 0;\n \
    \   long maxFreqNumFreqNumIndex = 0;\n    long maxFreqNumFreqNumFreq = 0;\n  \
    \  long maxFreqNumFreqNumFreqIndex = 0;\n    long maxFreqNumFreqNumFreqNum = 0;\n\
    \    long maxFreqNumFreqNumFreqNumIndex = 0;\n    long maxFreqNumFreqNumFreqNumFreq\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqIndex = 0;\n    long maxFreqNumFreqNumFreqNumFreqNum\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumIndex = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreq\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqIndex = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNum\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNumIndex = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNumFreq\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNumFreqIndex = 0;\n    long\
    \ maxFreqNumFreqNumFreqNumFreqNumFreqNumFreqNum = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNumFreqNumIndex\
    \ = 0;\n    long maxFreqNumFreqNumFreqNumFreqNumFreqNumFreqNumFreq = 0;\n    long\
    \ max", "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] res = new long[lst.length];\n    long[] res2 = new long[lst.length];\n\
    \    long[] res3 = new long[lst.length];\n    long[] res4 = new long[lst.length];\n\
    \    long[] res5 = new long[lst.length];\n    long[] res6 = new long[lst.length];\n\
    \    long[] res7 = new long[lst.length];\n    long[] res8 = new long[lst.length];\n\
    \    long[] res9 = new long[lst.length];\n    long[] res10 = new long[lst.length];\n\
    \    long[] res11 = new long[lst.length];\n    long[] res12 = new long[lst.length];\n\
    \    long[] res13 = new long[lst.length];\n    long[] res14 = new long[lst.length];\n\
    \    long[] res15 = new long[lst.length];\n    long[] res16 = new long[lst.length];\n\
    \    long[] res17 = new long[lst.length];\n    long[] res18 = new long[lst.length];\n\
    \    long[] res19 = new long[lst.length];\n    long[] res20 = new long[lst.length];\n\
    \    long[] res21 = new long[lst.length];\n    long[] res22 = new long[lst.length];\n\
    \    long[] res23 = new long[lst.length];\n    long[] res24 = new long[lst.length];\n\
    \    long[] res25 = new long[lst.length];\n    long[] res26 = new long[lst.length];\n\
    \    long[] res27 = new long[lst.length];\n    long[] res28 = new long[lst.length];\n\
    \    long[] res29 = new long[lst.length];\n    long[] res30 = new long[lst.length];\n\
    \    long[] res31 = new long[lst.length];\n    long[] res32 = new long[lst.length];\n",
  "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] res = new long[lst.length];\n    long max = -1;\n    long max_freq\
    \ = -1;\n    long max_num = -1;\n    for(int i = 0; i < lst.length; i++)\n   \
    \ {\n        long num = lst[i];\n        long freq = 0;\n        for(int j = 0;\
    \ j < lst.length; j++)\n        {\n            if(lst[j] == num)\n           \
    \ {\n                freq++;\n            }\n        }\n        if(freq >= num)\n\
    \        {\n            if(freq > max_freq)\n            {\n                max_freq\
    \ = freq;\n                max_num = num;\n            }\n            else if(freq\
    \ == max_freq)\n            {\n                if(num > max_num)\n           \
    \     {\n                    max_num = num;\n                }\n            }\n\
    \        }\n    }\n    return max_num;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] count = new long[lst.length];\n    long[] num = new\
    \ long[lst.length];\n    long[] result = new long[lst.length];\n    long[] max\
    \ = new long[lst.length];\n    long[] max_num = new long[lst.length];\n    long[]\
    \ max_result = new long[lst.length];\n    long[] max_count = new long[lst.length];\n\
    \    long[] max_num_count = new long[lst.length];\n    long[] max_result_count\
    \ = new long[lst.length];\n    long[] max_count_count = new long[lst.length];\n\
    \    long[] max_num_count_count = new long[lst.length];\n    long[] max_result_count_count\
    \ = new long[lst.length];\n    long[] max_count_count_count = new long[lst.length];\n\
    \    long[] max_num_count_count_count = new long[lst.length];\n    long[] max_result_count_count_count\
    \ = new long[lst.length];\n    long[] max_count_count_count_count = new long[lst.length];\n\
    \    long[] max_num_count_count_count_count = new long[lst.length];\n    long[]\
    \ max_result_count_count_count_count = new long[lst.length];\n    long[] max_count_count_count_count_count\
    \ = new long[lst.length];\n    long[] max_num_count_count_count_count_count =\
    \ new long[lst.length];\n    long[] max_result_count_count_count_count_count =\
    \ new long[lst.length];\n    long[] max_count_count_count_count_count_count =\
    \ new long[lst.length];\n    long[] max_num_count_count_count_count_count_count\
    \ = new long[lst.length];\n    long[] max_result_count_count_count_count_count_count\
    \ = new long[lst.length];\n    long[] max_count_count_count_count_count_count_count\
    \ =", "{\n    long max = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n\
    \    {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    foreach(long i; lst)\n    {\n        if(i == max)\n        {\n          \
    \  maxCount++;\n        }\n    }\n    if(maxCount >= max)\n    {\n        return\
    \ max;\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ long count = 0;\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(lst[i] > max && lst[i] <= freq[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n      \
    \  {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long max_count = 0;\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[lst[i]] == 0)\n        {\n            counts[lst[i]]\
    \ = 1;\n        }\n        else\n        {\n            counts[lst[i]]++;\n  \
    \      }\n        if(counts[lst[i]] >= lst[i] && lst[i] > max)\n        {\n  \
    \          max = lst[i];\n        }\n    }\n    return max == 0 ? -1 : max;\n}",
  "{\n    long max = 0;\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0..lst.length)\n    {\n  \
    \      foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n    long[] vals\
    \ = new long[sorted.length];\n    long count = 1;\n    long val = sorted[0];\n\
    \    long index = 0;\n    foreach(i; 1..sorted.length)\n    {\n        if(sorted[i]\
    \ == val)\n        {\n            count++;\n        }\n        else\n        {\n\
    \            counts[index] = count;\n            vals[index] = val;\n        \
    \    index++;\n            count = 1;\n            val = sorted[i];\n        }\n\
    \    }\n    counts[index] = count;\n    vals[index] = val;\n    long max = -1;\n\
    \    foreach(i; 0..counts.length)\n    {\n        if(counts[i] >= vals[i] && vals[i]\
    \ > max)\n        {\n            max = vals[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] frequencies = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        frequencies[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        frequencies[lst[i]]++;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(frequencies[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    long[] nums = new long[lst.length];\n    long[] result\
    \ = new long[lst.length];\n    long[] result2 = new long[lst.length];\n    long[]\
    \ result3 = new long[lst.length];\n    long[] result4 = new long[lst.length];\n\
    \    long[] result5 = new long[lst.length];\n    long[] result6 = new long[lst.length];\n\
    \    long[] result7 = new long[lst.length];\n    long[] result8 = new long[lst.length];\n\
    \    long[] result9 = new long[lst.length];\n    long[] result10 = new long[lst.length];\n\
    \    long[] result11 = new long[lst.length];\n    long[] result12 = new long[lst.length];\n\
    \    long[] result13 = new long[lst.length];\n    long[] result14 = new long[lst.length];\n\
    \    long[] result15 = new long[lst.length];\n    long[] result16 = new long[lst.length];\n\
    \    long[] result17 = new long[lst.length];\n    long[] result18 = new long[lst.length];\n\
    \    long[] result19 = new long[lst.length];\n    long[] result20 = new long[lst.length];\n\
    \    long[] result21 = new long[lst.length];\n    long[] result22 = new long[lst.length];\n\
    \    long[] result23 = new long[lst.length];\n    long[] result24 = new long[lst.length];\n\
    \    long[] result25 = new long[lst.length];\n    long[] result26 = new long[lst.length];\n\
    \    long[] result27 = new long[lst.length];\n    long[] result28 = new long[lst.length];\n\
    \    long[] result29 = new long[lst.length];\n    long[] result30 = new long[lst.length];\n\
    \    long[] result31 = new long[lst.length];\n    long[] result32 = new long[lst.length];\n",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i;0..lst.length)\n    {\n\
    \        foreach(j;0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i;0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n   \
    \ {\n        freq[i] = count(lst, lst[i]);\n    }\n    long max = 0;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(lst[i] > max && lst[i] <= freq[i])\n     \
    \   {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n\
    \    long[] values = new long[lst.length];\n    long count = 0;\n    long value\
    \ = 0;\n    long max = 0;\n    long maxValue = 0;\n    long maxCount = 0;\n  \
    \  long result = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(i == 0)\n\
    \        {\n            count = 1;\n            value = lst[i];\n        }\n \
    \       else\n        {\n            if(lst[i] == lst[i-1])\n            {\n \
    \               count++;\n            }\n            else\n            {\n   \
    \             counts[i-1] = count;\n                values[i-1] = value;\n   \
    \             count = 1;\n                value = lst[i];\n            }\n   \
    \     }\n    }\n    counts[lst.length-1] = count;\n    values[lst.length-1] =\
    \ value;\n    foreach(i; 0 .. counts.length)\n    {\n        if(counts[i] >= values[i])\n\
    \        {\n            if(counts[i] > maxCount)\n            {\n            \
    \    maxCount = counts[i];\n                maxValue = values[i];\n          \
    \  }\n            else if(counts[i] == maxCount)\n            {\n            \
    \    if(values[i] > maxValue)\n                {\n                    maxValue\
    \ = values[i];\n                }\n            }\n        }\n    }\n    if(maxCount\
    \ == 0)\n    {\n        result = -1;\n    }\n    else\n    {\n        result =\
    \ maxValue;\n    }\n    return result;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i])\n        {\n            return lst[i];\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n\
    \    {\n        foreach(j; 0..lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long max = 0;\n    long maxFreq = 0;\n    long maxNum = 0;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(nums.canFind(lst[i]))\n        {\n       \
    \     freq[nums.indexOf(lst[i])]++;\n        }\n        else\n        {\n    \
    \        nums[max] = lst[i];\n            freq[max] = 1;\n            max++;\n\
    \        }\n    }\n    foreach(i; 0..max)\n    {\n        if(nums[i] <= freq[i]\
    \ && freq[i] > maxFreq)\n        {\n            maxFreq = freq[i];\n         \
    \   maxNum = nums[i];\n        }\n    }\n    if(maxNum == 0)\n    {\n        return\
    \ -1;\n    }\n    return maxNum;\n}", "{\n    auto d = lst.groupBy!(a => a);\n\
    \    auto max = d.max!((a, b) => a.value.length > b.value.length ? a : b);\n \
    \   return max.value.length >= max.key ? max.key : -1;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n    long[] values\
    \ = new long[sorted.length];\n    long[] result = new long[sorted.length];\n \
    \   long count = 0;\n    long value = 0;\n    long res = 0;\n    for(long i =\
    \ 0; i < sorted.length; i++)\n    {\n        if(i == 0)\n        {\n         \
    \   count = 1;\n            value = sorted[i];\n        }\n        else if(sorted[i]\
    \ == sorted[i-1])\n        {\n            count++;\n        }\n        else\n\
    \        {\n            counts[i-1] = count;\n            values[i-1] = value;\n\
    \            count = 1;\n            value = sorted[i];\n        }\n    }\n  \
    \  counts[sorted.length-1] = count;\n    values[sorted.length-1] = value;\n  \
    \  for(long i = 0; i < sorted.length; i++)\n    {\n        if(values[i] >= counts[i])\n\
    \        {\n            result[i] = values[i];\n        }\n        else\n    \
    \    {\n            result[i] = -1;\n        }\n    }\n    res = result.max;\n\
    \    return res;\n}", "{\n    long[] freq = new long[lst.length];\n    long[]\
    \ sorted = new long[lst.length];\n    long[] sortedFreq = new long[lst.length];\n\
    \    long[] sortedFreqSorted = new long[lst.length];\n    long[] sortedFreqSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedFreqSortedSortedSortedSorted = new long[lst.length];\n    long[]\
    \ sortedFreqSortedSortedSortedSortedSorted = new long[lst.length];\n    long[]\
    \ sortedFreqSortedSortedSortedSortedSortedSorted = new long[lst.length];\n   \
    \ long[] sortedFreqSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSorted = new long[lst.length];\n\
    \    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSorted =\
    \ new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = new long[lst.length];\n    long[] sortedFreqSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "{\n    auto d = lst.groupBy!(a => a);\n    auto r = d.keys.filter!(a => a <= d[a].length).max;\n\
    \    return r.isSome ? r.get : -1L;\n}", "{\n    long[] count = new long[lst.length];\n\
    \    long[] num = new long[lst.length];\n    long[] result = new long[lst.length];\n\
    \    long max = 0;\n    long index = 0;\n    long max_index = 0;\n    long max_num\
    \ = 0;\n    long max_count = 0;\n    long max_result = 0;\n    long max_result_index\
    \ = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(i == 0)\n        {\n\
    \            num[i] = lst[i];\n            count[i] = 1;\n        }\n        else\n\
    \        {\n            if(lst[i] == lst[i-1])\n            {\n              \
    \  count[i] = count[i-1] + 1;\n                num[i] = lst[i];\n            }\n\
    \            else\n            {\n                count[i] = 1;\n            \
    \    num[i] = lst[i];\n            }\n        }\n        if(count[i] >= num[i])\n\
    \        {\n            result[i] = num[i];\n        }\n        else\n       \
    \ {\n            result[i] = 0;\n        }\n        if(result[i] > max_result)\n\
    \        {\n            max_result = result[i];\n            max_result_index\
    \ = i;\n        }\n        if(count[i] > max_count)\n        {\n            max_count\
    \ = count[i];\n            max_num = num[i];\n            max_index = i;\n   \
    \     }\n    }\n    if(max_result == 0)\n    {\n        return -1;\n    }\n  \
    \  else\n    {\n        return max_result;\n    }\n}", "{\n    long[] cnt = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        cnt[lst[i]]++;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(cnt[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long maxCount = 0;\n    foreach(long i; lst)\n    {\n        if(i\
    \ > maxCount)\n        {\n            max = i;\n            maxCount = i;\n  \
    \      }\n        else if(i == maxCount)\n        {\n            max = i;\n  \
    \      }\n    }\n    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
