name: HumanEval_69_search
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a non-empty\
  \ array of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the array.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
  \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
  \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] sorted = new long[lst.length];\n    long[] sortedFreq = new long[lst.length];\n\
    \    long[] sortedNums = new long[lst.length];\n    long[] sortedSortedFreq =\
    \ new long[lst.length];\n    long[] sortedSortedNums = new long[lst.length];\n\
    \    long[] sortedSortedSortedFreq = new long[lst.length];\n    long[] sortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedFreq = new long[lst.length];\n\
    \    long[] sortedSortedSortedSortedNums = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedNums = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedFreq = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedNums = new\
    \ long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedNums\
    \ = new long[lst.length];\n    long[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedFreq\
    \ = new long[lst.length];", "{\n    long[] freq = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    long[] unique = sorted.uniq;\n    foreach(i;\
    \ 0..unique.length)\n    {\n        freq[i] = sorted.count(unique[i]);\n    }\n\
    \    foreach(i; 0..unique.length)\n    {\n        if(unique[i] <= freq[i])\n \
    \       {\n            return unique[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long max = 0;\n    foreach(long i; lst)\n    {\n        if(i > max)\n  \
    \          max = i;\n    }\n    long[] arr = new long[max];\n    foreach(long\
    \ i; lst)\n    {\n        arr[i-1]++;\n    }\n    foreach(long i; arr)\n    {\n\
    \        if(i >= arr.length)\n            return arr.length;\n    }\n    return\
    \ -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort;\n    long[] arr3 = arr2.dup;\n    arr3.sort;\n    long[] arr4\
    \ = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n    arr5.sort;\n \
    \   long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7 = arr6.dup;\n   \
    \ arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n    long[] arr9 = arr8.dup;\n\
    \    arr9.sort;\n    long[] arr10 = arr9.dup;\n    arr10.sort;\n    long[] arr11\
    \ = arr10.dup;\n    arr11.sort;\n    long[] arr12 = arr11.dup;\n    arr12.sort;\n\
    \    long[] arr13 = arr12.dup;\n    arr13.sort;\n    long[] arr14 = arr13.dup;\n\
    \    arr14.sort;\n    long[] arr15 = arr14.dup;\n    arr15.sort;\n    long[] arr16\
    \ = arr15.dup;\n    arr16.sort;\n    long[] arr17 = arr16.dup;\n    arr17.sort;\n\
    \    long[] arr18 = arr17.dup;\n    arr18.sort;\n    long[] arr19 = arr18.dup;\n\
    \    arr19.sort;\n    long[] arr20 = arr19.dup;\n    arr20.sort;\n    long[] arr21\
    \ = arr20.dup;\n    arr21.sort;\n    long[] arr22 = arr21.dup;\n    arr22.sort;\n\
    \    long[] arr23 = arr22.dup;\n    arr23.sort;\n    long[] arr24 = arr23.dup;\n\
    \    arr24.sort;\n    long[] arr25 = arr24.dup;\n    arr25.sort;\n    long[] arr26\
    \ = arr25.dup;", "{\n    long[] count = new long[lst.length];\n    long[] num\
    \ = new long[lst.length];\n    long[] result = new long[lst.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (count[lst[i]]\
    \ == 0)\n        {\n            count[lst[i]] = 1;\n            num[j] = lst[i];\n\
    \            j++;\n        }\n        else\n        {\n            count[lst[i]]++;\n\
    \        }\n    }\n    int k = 0;\n    for (int i = 0; i < j; i++)\n    {\n  \
    \      if (num[i] <= count[num[i]])\n        {\n            result[k] = num[i];\n\
    \            k++;\n        }\n    }\n    if (k == 0)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return result[k - 1];\n    }\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0..lst.length)\n    {\n       \
    \ foreach(j; 0..lst.length)\n        {\n            if(lst[i] == lst[j])\n   \
    \         {\n                freq[i]++;\n            }\n        }\n    }\n   \
    \ long max = 0;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= lst[i]\
    \ && lst[i] > max)\n        {\n            max = lst[i];\n        }\n    }\n \
    \   if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n\
    \    long[] sorted = lst.dup.sort;\n    long[] unique = sorted.uniq;\n    long[]\
    \ freq = unique.map!(x => sorted.count(x));\n    long[] valid = unique.filter!(x\
    \ => x <= freq[unique.indexOf(x)]);\n    return valid.length > 0 ? valid.max :\
    \ -1L;\n}", "{\n    long[] freq = new long[lst.length];\n    long max = 0;\n \
    \   for(int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n       \
    \ for(int j = 0; j < lst.length; j++)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n       \
    \ if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    long[] nums = new\
    \ long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n    long\
    \ max = -1;\n    for(int i = 0; i < sorted.length; i++)\n    {\n        if(i ==\
    \ 0)\n        {\n            freq[i] = 1;\n            nums[i] = sorted[i];\n\
    \        }\n        else if(sorted[i] == sorted[i-1])\n        {\n           \
    \ freq[i] = freq[i-1] + 1;\n            nums[i] = sorted[i];\n        }\n    \
    \    else\n        {\n            freq[i] = 1;\n            nums[i] = sorted[i];\n\
    \        }\n        if(nums[i] >= freq[i] && nums[i] > max)\n        {\n     \
    \       max = nums[i];\n        }\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    long max = 0;\n    long max_i = 0;\n    long max_f = 0;\n    long i = 0;\n\
    \    long f = 0;\n    foreach(e; sorted)\n    {\n        if(e == i)\n        {\n\
    \            f++;\n        }\n        else\n        {\n            if(f >= i)\n\
    \            {\n                if(f > max_f)\n                {\n           \
    \         max_f = f;\n                    max_i = i;\n                }\n    \
    \        }\n            i = e;\n            f = 1;\n        }\n    }\n    if(f\
    \ >= i)\n    {\n        if(f > max_f)\n        {\n            max_f = f;\n   \
    \         max_i = i;\n        }\n    }\n    if(max_f >= max_i)\n    {\n      \
    \  return max_i;\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n\
    \    long[] count = new long[lst.length];\n    long[] index = new long[lst.length];\n\
    \    long[] result = new long[lst.length];\n    long[] temp = new long[lst.length];\n\
    \    long[] temp2 = new long[lst.length];\n    long[] temp3 = new long[lst.length];\n\
    \    long[] temp4 = new long[lst.length];\n    long[] temp5 = new long[lst.length];\n\
    \    long[] temp6 = new long[lst.length];\n    long[] temp7 = new long[lst.length];\n\
    \    long[] temp8 = new long[lst.length];\n    long[] temp9 = new long[lst.length];\n\
    \    long[] temp10 = new long[lst.length];\n    long[] temp11 = new long[lst.length];\n\
    \    long[] temp12 = new long[lst.length];\n    long[] temp13 = new long[lst.length];\n\
    \    long[] temp14 = new long[lst.length];\n    long[] temp15 = new long[lst.length];\n\
    \    long[] temp16 = new long[lst.length];\n    long[] temp17 = new long[lst.length];\n\
    \    long[] temp18 = new long[lst.length];\n    long[] temp19 = new long[lst.length];\n\
    \    long[] temp20 = new long[lst.length];\n    long[] temp21 = new long[lst.length];\n\
    \    long[] temp22 = new long[lst.length];\n    long[] temp23 = new long[lst.length];\n\
    \    long[] temp24 = new long[lst.length];\n    long[] temp25 = new long[lst.length];\n\
    \    long[] temp26 = new long[lst.length];\n    long[] temp27 = new long[lst.length];\n\
    \    long[] temp28 = new long[lst.length];\n    long[] temp29 = new long[lst.length];\n\
    \    long[] temp30 = new long[lst.length];\n    long[] temp31 = new long[lst.length];\n\
    \    long[]", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n\
    \    long[] values = new long[sorted.length];\n    long count = 1;\n    long value\
    \ = sorted[0];\n    long index = 0;\n    for(long i = 1; i < sorted.length; i++)\n\
    \    {\n        if(sorted[i] == value)\n        {\n            count++;\n    \
    \    }\n        else\n        {\n            counts[index] = count;\n        \
    \    values[index] = value;\n            index++;\n            count = 1;\n  \
    \          value = sorted[i];\n        }\n    }\n    counts[index] = count;\n\
    \    values[index] = value;\n    long max = -1;\n    for(long i = 0; i < counts.length;\
    \ i++)\n    {\n        if(counts[i] >= values[i] && values[i] > max)\n       \
    \ {\n            max = values[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long maxCount = 0;\n    foreach(l; lst)\n    {\n     \
    \   if(l > maxCount)\n        {\n            max = l;\n            maxCount =\
    \ lst.count(l);\n        }\n    }\n    return maxCount >= max ? max : -1;\n}",
  "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(counts[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long max = 0;\n    long[]\
    \ count = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    count[i] = 0;\n        foreach(j; 0 .. lst.length)\n        {\n         \
    \   if(lst[i] == lst[j])\n            {\n                count[i]++;\n       \
    \     }\n        }\n        if(count[i] >= lst[i] && lst[i] > max)\n        {\n\
    \            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n      \
    \  return -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0..lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0..lst.length)\n    {\n        foreach(j; 0..lst.length)\n        {\n      \
    \      if(lst[i] == lst[j])\n            {\n                freq[i]++;\n     \
    \       }\n        }\n    }\n    long max = 0;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(counts[i] >= i && i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(counts[i] >= i)\n        {\n            return i;\n        }\n   \
    \ }\n    return -1;\n}", "{\n    long max = -1L;\n    long[] count = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        count[i] = 0L;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        count[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(count[i] >= i && i > max)\n        {\n      \
    \      max = i;\n        }\n    }\n    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
