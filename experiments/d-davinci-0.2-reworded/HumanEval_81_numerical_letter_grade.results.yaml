name: HumanEval_81_numerical_letter_grade
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n  \
    \      }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp49on8mip.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp49on8mip.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmp49on8mip.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x729af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjmd1j6w9.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjmd1j6w9.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpjmd1j6w9.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4b464554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvk8qer1l.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpvk8qer1l.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpvk8qer1l.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1b6d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmn32yylj.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpmn32yylj.__unittest_L90_C1()\
    \ [0x428799]\\n??:? void tmpmn32yylj.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0xe983554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpalctrnai.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpalctrnai.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpalctrnai.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x1c428554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n   \
    \     {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n       \
    \ else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n    \
    \    }\n        else if(grade > 2.7)\n        {\n            letter_grades ~=\
    \ \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n           \
    \ letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n\
    \            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n       \
    \ else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n     \
    \   }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"\
    D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpocjbis93.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a4d]\\n??:? void tmpocjbis93.__unittest_L90_C1()\
    \ [0x4287a9]\\n??:? void tmpocjbis93.__modtest() [0x428cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4297a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42977d]\\n??:? runModuleUnitTests [0x42ecbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e9c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e23]\\n??:? _d_run_main [0x429d8e]\\n??:? main [0x428ccb]\\\
    n??:? __libc_start_main [0x489d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8jo2r7pc.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp8jo2r7pc.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmp8jo2r7pc.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xfc577554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdyp14bp2.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpdyp14bp2.__unittest_L90_C1()\
    \ [0x428591]\\n??:? void tmpdyp14bp2.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0x85fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjnzjd0sr.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpjnzjd0sr.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpjnzjd0sr.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf0198554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa8mqnbi4.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpa8mqnbi4.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpa8mqnbi4.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x17770554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpooqkolqo.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpooqkolqo.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpooqkolqo.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x3db49554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n       \
    \     letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n\
    \        {\n            letter_grades[i] = \"B+\";\n        }\n        else if\
    \ (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n     \
    \   }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n      \
    \      letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n\
    \        {\n            letter_grades[i] = \"C\";\n        }\n        else if\
    \ (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n    \
    \    }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n      \
    \      letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n\
    \        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n\
    \        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyzk0tde_.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpyzk0tde_.__unittest_L90_C1()\
    \ [0x428701]\\n??:? void tmpyzk0tde_.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xb196a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd5h4p4nq.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpd5h4p4nq.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpd5h4p4nq.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x56be9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcat9nbvv.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpcat9nbvv.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpcat9nbvv.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x85202554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9tix7nsb.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp9tix7nsb.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmp9tix7nsb.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x4c105554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx28ulif4.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpx28ulif4.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmpx28ulif4.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb1ffe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprdcjy5gn.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmprdcjy5gn.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmprdcjy5gn.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xb787c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcansn0kx.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpcansn0kx.__unittest_L90_C1()\
    \ [0x428799]\\n??:? void tmpcansn0kx.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0xf36dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbiz_fqxe.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpbiz_fqxe.__unittest_L90_C1()\
    \ [0x428799]\\n??:? void tmpbiz_fqxe.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0x30ef0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppj_adbvk.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmppj_adbvk.__unittest_L90_C1()\
    \ [0x428589]\\n??:? void tmppj_adbvk.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xf07bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
