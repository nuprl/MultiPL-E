name: HumanEval_101_words_string
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You will be given a string\
  \ of words separated by commas or spaces. Your task is\n    to split the string\
  \ into words and return an array of the words.\n    \n    For example:\n    >>>\
  \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\",\
  \ \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n*/\nstring[] words_string(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"\
  name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\"\
  ) == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
  ]);\n}\nvoid main(){}"
completions: ["{\n    return split(s, \" ,\\n\");\n}", "{\n    return s.split;\n}",
  "{\n    return split(s);\n}", "{\n    return s.split();\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split();\n}", "{\n \
    \   return s.split(' ');\n}\n/*", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s);\n}", "{\n    string[] words;\n    foreach(immutable c; s)\n    {\n\
    \        if(c == ' ' || c == ',')\n        {\n            words ~= \"\";\n   \
    \     }\n        else\n        {\n            words[$-1] ~= c;\n        }\n  \
    \  }\n    return words;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split();\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split;\n}", "{\n   \
    \ return split(s, \" ,\\n\");\n}", "{\n    return split(s, \",\");\n}", "{\n \
    \   return s.split(\"[, ]\");\n}", "{\n    return split(s, \" ,;\");\n}", "{\n\
    \    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    auto words = split(s);\n    return\
    \ words;\n}", "{\n    return split(s);\n}", "{\n    return split(s, \" , \");\n\
    }", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"\
    ,\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split();\n}",
  "{\n    return s.split(\",\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s);\n}", "{\n    string[] words = split(s);\n    return words;\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    string[] words = split(s);\n    return words;\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return split(s, \" ,\\n\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s);\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split();\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\"\
    );\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s, \" ,\\n\");\n}", "{\n    return split(s);\n}", "{\n    string[]\
    \ words;\n    int start = 0;\n    int end = 0;\n    int len = s.length;\n    for\
    \ (int i = 0; i < len; i++)\n    {\n        if (s[i] == ' ' || s[i] == ',')\n\
    \        {\n            end = i;\n            words ~= s[start..end];\n      \
    \      start = i + 1;\n        }\n    }\n    words ~= s[start..$];\n    return\
    \ words;\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split();\n\
    }", "{\n    return s.split(\"[ ,]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split();\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    string[] words = split(s);\n    return words;\n}", "{\n    return split(s,\
    \ \" \");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split();\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}",
  "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split();\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s, \"\
    \ \");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\"\
    );\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\"\
    );\n}", "{\n    return s.split(\"[, ]+\");\n}", "{\n    string[] words = s.split(\"\
    [, ]\");\n    return words;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n \
    \   return split(s, \" \");\n}", "{\n    string[] words = split(s);\n    return\
    \ words;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s, \" , \");\n}", "{\n    return split(s, \"\
    \ \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[,\
    \ ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s, \" ,;\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[ ,]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ split(s, \" ,\\t\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split();\n}", "{\n    return split(s);\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s, \"\
    \ ,\\t\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split();\n\
    }", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    string[] words;\n    words = s.split();\n    return words;\n}", "{\n    return\
    \ split(s);\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\"\
    );\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    return words;\n}\n/*", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}",
  "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s, \" \");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    string[]\
    \ words;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n   \
    \ int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab =\
    \ 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n   \
    \ int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak =\
    \ 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n   \
    \ int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at =\
    \ 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n   \
    \ int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc =\
    \ 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n   \
    \ int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl =\
    \ 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n   \
    \ int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu =\
    \ 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n   \
    \ int bz =", "{\n    return s.split(\"[, ]\");\n}", "{\n    string[] words;\n\
    \    int i = 0;\n    foreach(c; s)\n    {\n        if(c == ' ' || c == ',')\n\
    \        {\n            words ~= s[0..i];\n            s = s[i+1..$];\n      \
    \      i = 0;\n        }\n        else\n        {\n            i++;\n        }\n\
    \    }\n    words ~= s;\n    return words;\n}", "{\n    return split(s);\n}",
  "{\n    return split(s, \" \");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s, \" ,\\n\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    string[] words = split(s);\n    return words;\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}",
  "{\n    string[] words;\n    int i = 0;\n    foreach(w; s.split)\n    {\n      \
    \  if(w.length > 0)\n        {\n            words ~= w;\n        }\n    }\n  \
    \  return words;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split();\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split();\n}", "{\n \
    \   return s.split;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
