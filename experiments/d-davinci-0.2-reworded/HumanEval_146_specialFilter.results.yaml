name: HumanEval_146_specialFilter
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2xevd2ur.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp2xevd2ur.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp2xevd2ur.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x5209f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2w68h5th.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2w68h5th.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                result++;\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgk2bzluk.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpgk2bzluk.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpgk2bzluk.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x31c70554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpun8k2rzd.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpun8k2rzd.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmpun8k2rzd.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0xb24b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpepbiii7u.d(19): Error: no property `to` for type `long`\\n/tmp/tmpepbiii7u.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpepbiii7u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscufcd0k.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscufcd0k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprn7z5sjo.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmprn7z5sjo.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmprn7z5sjo.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xc7174554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long lastDigit = num % 10;\n     \
    \           if(lastDigit % 2 == 1)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc5l09_pd.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428295]\\n??:? void tmpc5l09_pd.__unittest_L33_C1()\
    \ [0x427ebd]\\n??:? void tmpc5l09_pd.__modtest() [0x428014]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b112]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430754]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430231]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e9]\\n??:? runModuleUnitTests [0x42c055]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42866b]\\n??:? _d_run_main [0x4285d6]\\n??:? main [0x428027]\\\
    n??:? __libc_start_main [0x45573554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long lastDigit = num % 10;\n     \
    \           if(lastDigit % 2 != 0)\n                {\n                    long\
    \ firstDigit = num;\n                    while(firstDigit > 10)\n            \
    \        {\n                        firstDigit = firstDigit / 10;\n          \
    \          }\n                    if(firstDigit % 2 != 0)\n                  \
    \  {\n                        count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L])\
    \ == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzllwmwoy.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282d5]\\n??:? void tmpzllwmwoy.__unittest_L41_C1()\
    \ [0x427efd]\\n??:? void tmpzllwmwoy.__modtest() [0x428054]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2bf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b152]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430794]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430271]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b129]\\n??:? runModuleUnitTests [0x42c095]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428724]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286ab]\\n??:? _d_run_main [0x428616]\\n??:? main [0x428067]\\\
    n??:? __libc_start_main [0x33234554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long\
    \ first = n / 10;\n            long last = n % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi9ovyazj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpi9ovyazj.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpi9ovyazj.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x34596554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && n % 2 != 0 && n % 10 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp41ubmgjn.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp41ubmgjn.__unittest_L26_C1()\
    \ [0x427ea1]\\n??:? void tmp41ubmgjn.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x4af5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp02iuzbet.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmp02iuzbet.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmp02iuzbet.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0x7c2f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                if(num / 10 % 2 != 0)\n          \
    \      {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyk7jgqmt.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpyk7jgqmt.__unittest_L32_C1()\
    \ [0x427eb5]\\n??:? void tmpyk7jgqmt.__modtest() [0x42800c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c277]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43029d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430229]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e1]\\n??:? runModuleUnitTests [0x42c04d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428663]\\n??:? _d_run_main [0x4285ce]\\n??:? main [0x42801f]\\\
    n??:? __libc_start_main [0x95db4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpywy5lh38.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpywy5lh38.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpywy5lh38.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xb4b2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9xwzxfne.d(19): Error: no property `to` for type `long`\\n/tmp/tmp9xwzxfne.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9xwzxfne.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] %\
    \ 2 == 1)\n            {\n                result++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb89gxncj.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpb89gxncj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxun589_r.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpxun589_r.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpxun589_r.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xd8512554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpchxg00la.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpchxg00la.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmpchxg00la.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x76a09554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp4km2ylg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpp4km2ylg.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpp4km2ylg.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x1fc6a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg20ce5_x.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpg20ce5_x.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpg20ce5_x.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xb6ff8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqboe2v7o.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpqboe2v7o.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpqboe2v7o.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x71da7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppoqryp6x.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmppoqryp6x.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmppoqryp6x.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x7b8dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vogpkmy.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmp6vogpkmy.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vogpkmy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 && num.to!string().back.to!long() % 2)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_sm3vam.d(19): Error: no property `to` for type `long`\\n/tmp/tmpa_sm3vam.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpa_sm3vam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr6o6s_ox.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpr6o6s_ox.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpr6o6s_ox.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x93cc3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzaohr5bg.d(19): Error: no property `to` for type `long`\\n/tmp/tmpzaohr5bg.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzaohr5bg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && (n % 2 == 1) && (n % 10 ==\
    \ 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L])\
    \ == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpljluuw6f.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428295]\\n??:? void tmpljluuw6f.__unittest_L26_C1()\
    \ [0x427ec1]\\n??:? void tmpljluuw6f.__modtest() [0x428018]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b112]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430754]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430231]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e9]\\n??:? runModuleUnitTests [0x42c055]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42866b]\\n??:? _d_run_main [0x4285d6]\\n??:? main [0x42802b]\\\
    n??:? __libc_start_main [0x8bd05554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first >= 10)\n                {\n \
    \                   first /= 10;\n                }\n                while(last\
    \ % 10 != last)\n                {\n                    last %= 10;\n        \
    \        }\n                if(first % 2 == 1 && last % 2 == 1)\n            \
    \    {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyyknu3o.d(19): Error: no property `to` for type `long`\\n/tmp/tmpbyyknu3o.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbyyknu3o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbe_phrr6.d(19): Error: no property `to` for type `long`\\n/tmp/tmpbe_phrr6.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbe_phrr6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0].to!long\
    \ % 2 != 0 && num.to!string[$-1].to!long % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfi8j3x_o.d(19): Error: no property `to` for type `long`\\n/tmp/tmpfi8j3x_o.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpfi8j3x_o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7chb6emj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp7chb6emj.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp7chb6emj.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x73894554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums) \n    {\n        if(num > 10 && num.toString().front.to!long\
    \ % 2 && num.toString().back.to!long % 2) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lftv3gm.d(19): Error: no property `toString` for type `long`\\\
    n/tmp/tmp_lftv3gm.d(19): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lftv3gm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm10qosol.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpm10qosol.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpm10qosol.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x403fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4qeo1f27.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmp4qeo1f27.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmp4qeo1f27.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0x54c74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front % 2 != 0 && num.back\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpew4ckbrm.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpew4ckbrm.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpew4ckbrm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkvhz53qj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpkvhz53qj.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmpkvhz53qj.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x74971554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long\
    \ first = n / 10;\n            long last = n % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3u6gw76q.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp3u6gw76q.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp3u6gw76q.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xfe695554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9lthcsl6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp9lthcsl6.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp9lthcsl6.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x10182554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            int\
    \ first = num / 10;\n            int last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_4gq2z8.d(21): Error: cannot implicitly convert expression `num\
    \ / 10L` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm_4gq2z8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86xrm64f.d(19): Error: no property `to` for type `long`\\n/tmp/tmp86xrm64f.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp86xrm64f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzvpygd49.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpzvpygd49.__unittest_L26_C1()\
    \ [0x427ea1]\\n??:? void tmpzvpygd49.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xc14b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 == 1)\n            {\n                if(n % 10 == 1 || n % 10 == 3 || n\
    \ % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeu0jp15_.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42829d]\\n??:? void tmpeu0jp15_.__unittest_L32_C1()\
    \ [0x427ec5]\\n??:? void tmpeu0jp15_.__modtest() [0x42801c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c287]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b11a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430239]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f1]\\n??:? runModuleUnitTests [0x42c05d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428673]\\n??:? _d_run_main [0x4285de]\\n??:? main [0x42802f]\\\
    n??:? __libc_start_main [0xf693b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                if(num % 10 == 1 || num % 10 == 3\
    \ || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)\n                {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsqi8vqpw.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42829d]\\n??:? void tmpsqi8vqpw.__unittest_L32_C1()\
    \ [0x427ec5]\\n??:? void tmpsqi8vqpw.__modtest() [0x42801c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c287]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b11a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430239]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f1]\\n??:? runModuleUnitTests [0x42c05d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428673]\\n??:? _d_run_main [0x4285de]\\n??:? main [0x42802f]\\\
    n??:? __libc_start_main [0xbb26e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string[0]\
    \ % 2 != 0 && num.to!string[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsto97pmj.d(21): Error: no property `to` for type `long`\\n/tmp/tmpsto97pmj.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsto97pmj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6bfh0w_n.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp6bfh0w_n.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp6bfh0w_n.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x9d301554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums) \n    {\n        if(n > 10 && n.toString().front.to!long\
    \ % 2 != 0 && n.toString().back.to!long % 2 != 0) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20cl0yj_.d(19): Error: no property `toString` for type `long`\\\
    n/tmp/tmp20cl0yj_.d(19): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20cl0yj_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3phv09vz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp3phv09vz.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp3phv09vz.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x4bf1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / cast(long)pow(10, floor(log10(num)));\n            long last =\
    \ num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq_p_l14j.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpq_p_l14j.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpq_p_l14j.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xbacb0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 == 1 && last % 2 == 1)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuahtpu37.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmpuahtpu37.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmpuahtpu37.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0x70d34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ct29x3h.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp_ct29x3h.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmp_ct29x3h.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x3c1f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfssfo7d_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpfssfo7d_.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpfssfo7d_.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x95960554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwjc8mq9g.d(19): Error: no property `to` for type `long`\\n/tmp/tmpwjc8mq9g.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwjc8mq9g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjqvp3mfb.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpjqvp3mfb.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpjqvp3mfb.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x9301a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplv783fsf.d(19): Error: no property `to` for type `long`\\n/tmp/tmplv783fsf.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplv783fsf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprus1g572.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmprus1g572.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmprus1g572.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x37691554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mo5o1w4.d(19): Error: no property `to` for type `long`\\n/tmp/tmp_mo5o1w4.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_mo5o1w4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long firstDigit = num / pow(10, floor(log10(num)));\n\
    \                long lastDigit = num % 10;\n                if(firstDigit % 2\
    \ != 0 && lastDigit % 2 != 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_acn_9z.d(23): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_acn_9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi1bab9c_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpi1bab9c_.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpi1bab9c_.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x5efe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_7m5uxdx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp_7m5uxdx.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp_7m5uxdx.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x9c19a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwpj2y7ix.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpwpj2y7ix.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpwpj2y7ix.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x3f7bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp89ha31xe.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmp89ha31xe.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmp89ha31xe.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0x84ece554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first > 10)\n                {\n  \
    \                  first = first / 10;\n                }\n                while(last\
    \ > 10)\n                {\n                    last = last % 10;\n          \
    \      }\n                if(first % 2 == 1 && last % 2 == 1)\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpop108fge.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ed]\\n??:? void tmpop108fge.__unittest_L42_C1()\
    \ [0x427f19]\\n??:? void tmpop108fge.__modtest() [0x428070]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b16a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430289]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b141]\\n??:? runModuleUnitTests [0x42c0ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42873c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c3]\\n??:? _d_run_main [0x42862e]\\n??:? main [0x428083]\\\
    n??:? __libc_start_main [0x403ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplulg07j4.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmplulg07j4.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmplulg07j4.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xbccde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9_u462nd.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp9_u462nd.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp9_u462nd.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xf26a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 == 1 && last % 2 == 1)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo893x3m2.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo893x3m2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                result++;\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl15sqi_g.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpl15sqi_g.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpl15sqi_g.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xc1377554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhjak3bm.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmplhjak3bm.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhjak3bm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0kicvdm.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0kicvdm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppv254x3y.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmppv254x3y.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv254x3y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe2peo8qo.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpe2peo8qo.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpe2peo8qo.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xba9e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpanmwfkmr.d(19): Error: no property `to` for type `long`\\n/tmp/tmpanmwfkmr.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpanmwfkmr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n\
    \ => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxpn0eil.d(16): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxpn0eil.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 != 0 && digits[$-1] %\
    \ 2 != 0)\n            {\n                result++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5hhfer0r.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5hhfer0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4tgs3ya9.d(19): Error: no property `to` for type `long`\\n/tmp/tmp4tgs3ya9.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4tgs3ya9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 && num.to!string().back.to!long() % 2)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp32orcoge.d(19): Error: no property `to` for type `long`\\n/tmp/tmp32orcoge.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp32orcoge.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphfeck292.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmphfeck292.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmphfeck292.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xc037e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn7x5_qcf.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpn7x5_qcf.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpn7x5_qcf.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xdb536554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmy9ogi1p.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpmy9ogi1p.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpmy9ogi1p.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xf7169554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first >= 10)\n                {\n \
    \                   first /= 10;\n                }\n                while(last\
    \ % 10 != last)\n                {\n                    last %= 10;\n        \
    \        }\n                if(first % 2 != 0 && last % 2 != 0)\n            \
    \    {\n                    result++;\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf6xp5e1m.d(19): Error: no property `to` for type `long`\\n/tmp/tmpf6xp5e1m.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpf6xp5e1m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_ht6f0g.d(19): Error: no property `to` for type `long`\\n/tmp/tmp2_ht6f0g.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2_ht6f0g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezf9pa0u.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpezf9pa0u.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezf9pa0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] %\
    \ 2 == 1)\n            {\n                result++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1nyulqc.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpp1nyulqc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp__6p1869.d(19): Error: no property `to` for type `long`\\n/tmp/tmp__6p1869.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp__6p1869.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpesp085lj.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpesp085lj.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpesp085lj.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xe387d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ str = to!string(num);\n            if(str[0] % 2 != 0 && str[$-1] % 2 != 0)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n   \
    \ assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2mulpszi.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2mulpszi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmjel2w49.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpmjel2w49.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpmjel2w49.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x655cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb5jupzn9.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpb5jupzn9.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpb5jupzn9.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xa4004554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxvtxvtdy.d(19): Error: no property `to` for type `long`\\n/tmp/tmpxvtxvtdy.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxvtxvtdy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mx7kghz.d(19): Error: no property `to` for type `long`\\n/tmp/tmp9mx7kghz.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9mx7kghz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrkkspu2.d(19): Error: no property `to` for type `long`\\n/tmp/tmpxrkkspu2.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxrkkspu2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first > 10)\n                {\n  \
    \                  first = first / 10;\n                }\n                while(last\
    \ < -10)\n                {\n                    last = last / 10;\n         \
    \       }\n                if(first % 2 == 1 && last % 2 == 1)\n             \
    \   {\n                    count++;\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5_2iwrcz.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ed]\\n??:? void tmp5_2iwrcz.__unittest_L42_C1()\
    \ [0x427f19]\\n??:? void tmp5_2iwrcz.__modtest() [0x428070]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b16a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430289]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b141]\\n??:? runModuleUnitTests [0x42c0ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42873c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c3]\\n??:? _d_run_main [0x42862e]\\n??:? main [0x428083]\\\
    n??:? __libc_start_main [0x55739554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5g7oqkvt.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp5g7oqkvt.__unittest_L26_C1()\
    \ [0x427ea1]\\n??:? void tmp5g7oqkvt.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xb7e5d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(i; nums)\n    {\n        if(i > 10 && (i % 10) % 2 != 0 && (i / 10)\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk5hryia4.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpk5hryia4.__unittest_L26_C1()\
    \ [0x427eb9]\\n??:? void tmpk5hryia4.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c277]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43029d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430229]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e1]\\n??:? runModuleUnitTests [0x42c04d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428663]\\n??:? _d_run_main [0x4285ce]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0xa146d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long first = num / 10;\n         \
    \       long last = num % 10;\n                if(first % 2 != 0 && last % 2 !=\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpre3b4w3w.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282bd]\\n??:? void tmpre3b4w3w.__unittest_L34_C1()\
    \ [0x427ee9]\\n??:? void tmpre3b4w3w.__modtest() [0x428040]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b13a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430259]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b111]\\n??:? runModuleUnitTests [0x42c07d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42870c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428693]\\n??:? _d_run_main [0x4285fe]\\n??:? main [0x428053]\\\
    n??:? __libc_start_main [0x7d60e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && (num /\
    \ 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvgyxs47a.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpvgyxs47a.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpvgyxs47a.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x4f3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 == 1\
    \ && num.digits[$-1] % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzkjty9s.d(19): Error: no property `digits` for type `long`\\\
    n/tmp/tmpzzkjty9s.d(19): Error: no property `digits` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzkjty9s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8l70mug9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp8l70mug9.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmp8l70mug9.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x41059554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2e2_1bi.d(19): Error: no property `to` for type `long`\\n/tmp/tmpp2e2_1bi.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpp2e2_1bi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi730426_.d(19): Error: no property `to` for type `long`\\n/tmp/tmpi730426_.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpi730426_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkih05pcc.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpkih05pcc.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkih05pcc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvpf7_ie9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpvpf7_ie9.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpvpf7_ie9.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x87dce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpny0ycao5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpny0ycao5.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmpny0ycao5.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x83dbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpludwckxe.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpludwckxe.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpludwckxe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps1cxwlvy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmps1cxwlvy.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmps1cxwlvy.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0x6860c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbwvbf8yy.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpbwvbf8yy.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwvbf8yy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphd2ed93i.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmphd2ed93i.__unittest_L26_C1()\
    \ [0x427ea1]\\n??:? void tmphd2ed93i.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xc7734554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long lastDigit = num % 10;\n     \
    \           long firstDigit = num;\n                while(firstDigit > 10)\n \
    \               {\n                    firstDigit = firstDigit / 10;\n       \
    \         }\n                if(firstDigit % 2 == 1)\n                {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ye7e03c.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282bd]\\n??:? void tmp5ye7e03c.__unittest_L38_C1()\
    \ [0x427ee5]\\n??:? void tmp5ye7e03c.__modtest() [0x42803c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b13a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430259]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b111]\\n??:? runModuleUnitTests [0x42c07d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42870c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428693]\\n??:? _d_run_main [0x4285fe]\\n??:? main [0x42804f]\\\
    n??:? __libc_start_main [0x9bde3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr_ff7w_x.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpr_ff7w_x.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpr_ff7w_x.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x2527f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnk850iwb.d(19): Error: no property `to` for type `long`\\n/tmp/tmpnk850iwb.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnk850iwb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp13b155m0.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp13b155m0.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp13b155m0.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x1f9e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq44dcd9_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpq44dcd9_.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpq44dcd9_.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x2eaff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3287_g33.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp3287_g33.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp3287_g33.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xf8386554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front % 2 !=\
    \ 0 && num.digits.back % 2 != 0)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc_r5ns3.d(19): Error: no property `digits` for type `long`\\\
    n/tmp/tmpjc_r5ns3.d(19): Error: no property `digits` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc_r5ns3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjj6qv4kg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpjj6qv4kg.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpjj6qv4kg.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xa50c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n.to!string[0]\
    \ % 2 != 0 && n.to!string[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeo463zd5.d(21): Error: no property `to` for type `long`\\n/tmp/tmpeo463zd5.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpeo463zd5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3chslslv.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp3chslslv.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp3chslslv.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x846f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp25nd5afr.d(19): Error: no property `to` for type `long`\\n/tmp/tmp25nd5afr.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp25nd5afr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf1yfrges.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpf1yfrges.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpf1yfrges.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x2b7c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphwj0qj5d.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmphwj0qj5d.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwj0qj5d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8pz3jnvv.d(19): Error: no property `to` for type `long`\\n/tmp/tmp8pz3jnvv.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8pz3jnvv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 == 1 && last % 2 == 1)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsx6yfxwa.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmpsx6yfxwa.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmpsx6yfxwa.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0xf0cb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3f9t4x9l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp3f9t4x9l.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmp3f9t4x9l.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0xb5bb9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6b31w72m.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp6b31w72m.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmp6b31w72m.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x12f12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz_2uf4l.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpzz_2uf4l.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz_2uf4l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyg8t2aov.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpyg8t2aov.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpyg8t2aov.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xfa037554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ firstDigit = num % 10;\n            auto lastDigit = num / 10;\n           \
    \ if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl3ecsuad.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmpl3ecsuad.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmpl3ecsuad.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0xe7a73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt95sn15d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpt95sn15d.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmpt95sn15d.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0xebff3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmefei4z8.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpmefei4z8.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpmefei4z8.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xb3875554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_7c9kcid.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp_7c9kcid.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp_7c9kcid.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xfee58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(i; nums)\n    {\n        if(i > 10)\n        {\n            auto\
    \ first = i / pow(10, floor(log10(i)));\n            auto last = i % 10;\n   \
    \         if(first % 2 != 0 && last % 2 != 0)\n            {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi00z1txc.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fe5]\\n??:? void tmpi00z1txc.__unittest_L31_C1()\
    \ [0x4282f9]\\n??:? void tmpi00z1txc.__modtest() [0x428d68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d1a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c036]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431678]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431155]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c00d]\\n??:? runModuleUnitTests [0x42cf79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429434]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4293bb]\\n??:? _d_run_main [0x429326]\\n??:? main [0x428d7b]\\\
    n??:? __libc_start_main [0xf353a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplvcm7erz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmplvcm7erz.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmplvcm7erz.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xd2c4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdg7wh683.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpdg7wh683.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdg7wh683.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq03nuq9w.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpq03nuq9w.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq03nuq9w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 == 1 && last % 2 == 1)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jo55ol1.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jo55ol1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimgyejow.d(19): Error: no property `to` for type `long`\\n/tmp/tmpimgyejow.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpimgyejow.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhl_d0z4.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhl_d0z4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgq_njqiy.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpgq_njqiy.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpgq_njqiy.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x28a27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphbytpdsw.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbytpdsw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long[] result = nums.filter!(a\
    \ => a > 10 && a.to!string[0] % 2 != 0 && a.to!string[$-1] % 2 != 0);\n    return\
    \ result.length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n   \
    \ assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_yp955c.d(16): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_yp955c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbcxk1zxc.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpbcxk1zxc.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpbcxk1zxc.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xff677554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(long num; nums)\n    {\n        if(num > 10)\n        {\n       \
    \     long firstDigit = num / 10;\n            long lastDigit = num % 10;\n  \
    \          if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7017anyt.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp7017anyt.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp7017anyt.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xd71ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe5c0huoc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmpe5c0huoc.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmpe5c0huoc.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0xa3ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp85alw8ll.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp85alw8ll.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp85alw8ll.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x82737554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long temp = num;\n               \
    \ long first = temp % 10;\n                while(temp > 10)\n                {\n\
    \                    temp /= 10;\n                }\n                if(temp %\
    \ 2 == 1)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1cdekut3.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282bd]\\n??:? void tmp1cdekut3.__unittest_L38_C1()\
    \ [0x427ee5]\\n??:? void tmp1cdekut3.__modtest() [0x42803c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b13a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430259]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b111]\\n??:? runModuleUnitTests [0x42c07d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42870c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428693]\\n??:? _d_run_main [0x4285fe]\\n??:? main [0x42804f]\\\
    n??:? __libc_start_main [0xbe44d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcnjipvzc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpcnjipvzc.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpcnjipvzc.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xa3b5c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxq7afakk.d(19): Error: no property `to` for type `long`\\n/tmp/tmpxq7afakk.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxq7afakk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5kwte2ad.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmp5kwte2ad.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmp5kwte2ad.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0x7c063554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 == 1 && last % 2 == 1)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9trwaveg.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmp9trwaveg.__unittest_L31_C1()\
    \ [0x427ed9]\\n??:? void tmp9trwaveg.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c297]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430249]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b101]\\n??:? runModuleUnitTests [0x42c06d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428683]\\n??:? _d_run_main [0x4285ee]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0xdd9df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptuysts5j.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmptuysts5j.__unittest_L26_C1()\
    \ [0x427e36]\\n??:? void tmptuysts5j.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x7da7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk76nrb2v.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpk76nrb2v.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpk76nrb2v.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xb63b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1wh8hcez.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp1wh8hcez.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp1wh8hcez.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xcbd07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6lds_ipb.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp6lds_ipb.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp6lds_ipb.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x7a68d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn42cdns7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmpn42cdns7.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmpn42cdns7.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0x5d9bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && isOdd(n) && isOdd(n % 10))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_x_0z5ov.d(19): Error: undefined identifier `isOdd`\\n/tmp/tmp_x_0z5ov.d(19):\
    \ Error: undefined identifier `isOdd`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_x_0z5ov.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj18s3lpz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpj18s3lpz.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpj18s3lpz.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x23d11554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp_nys0t8.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpp_nys0t8.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpp_nys0t8.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x6ffbc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / cast(long)pow(10, floor(log10(num)));\n            long last =\
    \ num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                result++;\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps65gtjtx.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmps65gtjtx.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmps65gtjtx.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x3f2ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzfpu7c3.d(19): Error: no property `to` for type `long`\\n/tmp/tmpfzfpu7c3.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpfzfpu7c3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaapnlwjt.d(19): Error: no property `to` for type `long`\\n/tmp/tmpaapnlwjt.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpaapnlwjt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp65wdt_ww.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp65wdt_ww.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp65wdt_ww.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x6c882554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_h2pk5n1.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_h2pk5n1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n      \
    \          result++;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbdbfbtd.d(21): Error: no property `to` for type `long`\\n/tmp/tmpdbdbfbtd.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdbdbfbtd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long firstDigit = num / 10;\n    \
    \            long lastDigit = num % 10;\n                if(firstDigit % 2 !=\
    \ 0 && lastDigit % 2 != 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt18_cbju.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282bd]\\n??:? void tmpt18_cbju.__unittest_L34_C1()\
    \ [0x427ee9]\\n??:? void tmpt18_cbju.__modtest() [0x428040]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b13a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430259]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b111]\\n??:? runModuleUnitTests [0x42c07d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42870c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428693]\\n??:? _d_run_main [0x4285fe]\\n??:? main [0x428053]\\\
    n??:? __libc_start_main [0xa4aeb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 != 0)\n            {\n                long temp = n;\n                long\
    \ lastDigit = temp % 10;\n                temp /= 10;\n                long firstDigit\
    \ = temp % 10;\n                if(lastDigit % 2 != 0 && firstDigit % 2 != 0)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4yv7cgw1.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282d5]\\n??:? void tmp4yv7cgw1.__unittest_L36_C1()\
    \ [0x427efd]\\n??:? void tmp4yv7cgw1.__modtest() [0x428054]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2bf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b152]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430794]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430271]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b129]\\n??:? runModuleUnitTests [0x42c095]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428724]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286ab]\\n??:? _d_run_main [0x428616]\\n??:? main [0x428067]\\\
    n??:? __libc_start_main [0xf101b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoyq_99du.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpoyq_99du.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyq_99du.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppthjo2ua.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppthjo2ua.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpir9y4749.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmpir9y4749.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmpir9y4749.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0xa2cfa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long[] result;\n \
    \   foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  result ~= num;\n        }\n    }\n    return result.length;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqbzm00mk.d(19): Error: no property `to` for type `long`\\n/tmp/tmpqbzm00mk.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqbzm00mk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                if(num % 10 == 1 || num % 10 == 3\
    \ || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)\n                {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphrjlemz5.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42829d]\\n??:? void tmphrjlemz5.__unittest_L32_C1()\
    \ [0x427ec5]\\n??:? void tmphrjlemz5.__modtest() [0x42801c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c287]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b11a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430239]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f1]\\n??:? runModuleUnitTests [0x42c05d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428673]\\n??:? _d_run_main [0x4285de]\\n??:? main [0x42802f]\\\
    n??:? __libc_start_main [0xd3684554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3j23j3m7.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp3j23j3m7.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp3j23j3m7.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xba887554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxw413m5v.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmpxw413m5v.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmpxw413m5v.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x9e995554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp47el2tew.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp47el2tew.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp47el2tew.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x3fe54554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz_nfyqm7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428fc5]\\n??:? void tmpz_nfyqm7.__unittest_L26_C1()\
    \ [0x42826a]\\n??:? void tmpz_nfyqm7.__modtest() [0x428d48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfed]\\n??:? runModuleUnitTests [0x42cf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429414]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42939b]\\n??:? _d_run_main [0x429306]\\n??:? main [0x428d5b]\\\
    n??:? __libc_start_main [0xe1f88554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0zsf_y6a.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp0zsf_y6a.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp0zsf_y6a.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xf96c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0v979hhb.d(19): Error: no property `to` for type `long`\\n/tmp/tmp0v979hhb.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0v979hhb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69v9mfbr.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp69v9mfbr.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp69v9mfbr.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xaf0c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2rc6_eo.d(19): Error: no property `to` for type `long`\\n/tmp/tmpj2rc6_eo.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpj2rc6_eo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprt2u2y8e.d(21): Error: no property `to` for type `long`\\n/tmp/tmprt2u2y8e.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmprt2u2y8e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22r7q7qx.d(19): Error: no property `to` for type `long`\\n/tmp/tmp22r7q7qx.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp22r7q7qx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq52fykam.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmpq52fykam.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq52fykam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmposk6tnn8.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmposk6tnn8.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmposk6tnn8.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0x11762554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2_4l2e_v.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp2_4l2e_v.__unittest_L31_C1()\
    \ [0x427ed1]\\n??:? void tmp2_4l2e_v.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b122]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430241]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f9]\\n??:? runModuleUnitTests [0x42c065]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867b]\\n??:? _d_run_main [0x4285e6]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xd8db8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 != 0)\n            {\n                if(n % 10 != 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppj_nyhh8.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmppj_nyhh8.__unittest_L32_C1()\
    \ [0x427ea9]\\n??:? void tmppj_nyhh8.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c267]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43028d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430219]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d1]\\n??:? runModuleUnitTests [0x42c03d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x425c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjsiye7__.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpjsiye7__.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpjsiye7__.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0x54e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_dvaovqv.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp_dvaovqv.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmp_dvaovqv.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xfe046554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvkjke98l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmpvkjke98l.__unittest_L26_C1()\
    \ [0x427eb1]\\n??:? void tmpvkjke98l.__modtest() [0x428008]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865b]\\n??:? _d_run_main [0x4285c6]\\n??:? main [0x42801b]\\\
    n??:? __libc_start_main [0xad098554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgn4c4ir.d(19): Error: no property `to` for type `long`\\n/tmp/tmpzgn4c4ir.d(19):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzgn4c4ir.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first > 9)\n                {\n   \
    \                 first = first / 10;\n                }\n                while(last\
    \ > 9)\n                {\n                    last = last % 10;\n           \
    \     }\n                if(first % 2 == 1 && last % 2 == 1)\n               \
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.digits.front\
    \ % 2 != 0 && num.digits.back % 2 != 0)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjt0zoh4.d(21): Error: no property `digits` for type `long`\\\
    n/tmp/tmpkjt0zoh4.d(21): Error: no property `digits` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjt0zoh4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu8gbkq_0.d(21): Error: cannot implicitly convert expression `cast(real)num\
    \ / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8gbkq_0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpta7tz771.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpta7tz771.__unittest_L26_C1()\
    \ [0x427ea1]\\n??:? void tmpta7tz771.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xc43cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo2vj8pi.d(21): Error: no property `to` for type `long`\\n/tmp/tmpvo2vj8pi.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvo2vj8pi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front & 1 && num.back\
    \ & 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_9y2yk26.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmp_9y2yk26.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_9y2yk26.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4x8ulc8i.d(19): Error: no property `front` for type `long`\\\
    n/tmp/tmp4x8ulc8i.d(19): Error: no property `back` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4x8ulc8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
