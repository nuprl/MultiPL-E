name: HumanEval_111_histogram
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return an associative array\n    of the letter\
  \ with the most repetition and containing the corresponding count.\n    If several\
  \ letters have the same occurrence, return all of them.\n    \n    Example:\n  \
  \  >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n  \
  \  >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
  a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\"\
  )\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n  \
  \  \n*/\nNullable!(long[string]) histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    long[string] counts;\n    foreach(c; test.split)\n    {\n  \
    \      counts[c]++;\n    }\n    long max = maxElement(counts.values);\n    Nullable!(long[string])\
    \ result = null;\n    foreach(c; counts.keys)\n    {\n        if(counts[c] ==\
    \ max)\n        {\n            if(result.isNull)\n            {\n            \
    \    result = new long[string];\n            }\n            result.get!true[c]\
    \ = max;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] dict;\n    foreach (word;\
    \ words)\n    {\n        if (dict.length == 0)\n        {\n            dict[word]\
    \ = 1L;\n        }\n        else\n        {\n            if (dict.count(word)\
    \ == 0)\n            {\n                dict[word] = 1L;\n            }\n    \
    \        else\n            {\n                dict[word] += 1L;\n            }\n\
    \        }\n    }\n    long max = max(dict.values);\n    foreach (key, value;\
    \ dict)\n    {\n        if (value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test.split())\n    {\n        if(result.count(c) == 0)\n     \
    \   {\n            result[c] = 1;\n        }\n        else\n        {\n      \
    \      result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] ret;\n    foreach(k, v; result)\n    {\n        if(v == max)\n\
    \        {\n            ret[k] = v;\n        }\n    }\n    return ret.length ==\
    \ 0 ? null : ret;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ temp = null;\n    long max = 0;\n    foreach(c; test.split)\n    {\n       \
    \ if(temp.count(c) == 0)\n        {\n            temp[c] = 1;\n        }\n   \
    \     else\n        {\n            temp[c]++;\n        }\n        if(temp[c] >\
    \ max)\n        {\n            max = temp[c];\n        }\n    }\n    foreach(c;\
    \ temp.keys)\n    {\n        if(temp[c] == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = temp;\n            }\n            else\n\
    \            {\n                result[c] = temp[c];\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    import std.algorithm : max, min;\n   \
    \ import std.array : array;\n    import std.conv : to;\n    import std.range :\
    \ iota;\n    import std.typecons : Nullable;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : T", "{\n    long[string] result;\n    foreach(c;\
    \ test.split())\n    {\n        if(result.contains(c))\n        {\n          \
    \  result[c] += 1;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(result.values);\n    long[string]\
    \ max_result;\n    foreach(k, v; result)\n    {\n        if(v == max)\n      \
    \  {\n            max_result[k] = v;\n        }\n    }\n    return max_result.length\
    \ == 0 ? null : max_result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] hist = new\
    \ long[string];\n    foreach (c; test.split)\n    {\n        hist[c]++;\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach (k, v; hist)\n    {\n  \
    \      if (v == max)\n        {\n            if (result is null)\n           \
    \     result = new long[string];\n            result[k] = v;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    else\n    {\n        string[]\
    \ words = test.split(\" \");\n        long[string] hist = [words[0]: 1L];\n  \
    \      foreach (word; words[1..$])\n        {\n            if (hist.count(word)\
    \ == 0)\n            {\n                hist[word] = 1L;\n            }\n    \
    \        else\n            {\n                hist[word] += 1L;\n            }\n\
    \        }\n        long max = max(hist.values);\n        long[string] max_hist\
    \ = [word: count for (word, count) in hist if count == max];\n        result =\
    \ max_hist;\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c in dict)\n        {\n            dict[c]++;\n        }\n \
    \       else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(k, v; dict)\n    {\n        if(v\
    \ == max)\n        {\n            if(result.isNull)\n            {\n         \
    \       result = [k: v];\n            }\n            else\n            {\n   \
    \             result[k] = v;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] counts;\n        foreach(word; words)\n        {\n\
    \            if (counts.count(word) == 0)\n            {\n                counts[word]\
    \ = 1;\n            }\n            else\n            {\n                counts[word]++;\n\
    \            }\n        }\n        long max = maxElement(counts.values);\n   \
    \     result = new long[string];\n        foreach(word; words)\n        {\n  \
    \          if (counts[word] == max)\n            {\n                result[word]\
    \ = max;\n            }\n        }\n        return result;\n    }\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n       \
    \ return result;\n    }\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        counts[letter]++;\n \
    \   }\n    long max = maxElement(counts.values);\n    foreach (letter; counts.keys)\n\
    \    {\n        if (counts[letter] == max)\n        {\n            result.insert(letter,\
    \ counts[letter]);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n\
    \        return result.byKeyValue.filter!(a => a.value == max).map!(a => a.key).array;\n\
    \    }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string] histogram;\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         if(histogram.count(c) == 0)\n            {\n                histogram[c]\
    \ = 1;\n            }\n            else\n            {\n                histogram[c]++;\n\
    \            }\n        }\n    }\n    if(histogram.length > 0)\n    {\n      \
    \  long max = maxElement(histogram.values);\n        foreach(key, value; histogram)\n\
    \        {\n            if(value == max)\n            {\n                if(result\
    \ is null)\n                {\n                    result = new long[string];\n\
    \                }\n                result[key] = value;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length > 0)\n    {\n        long[string] hist = test.split.assocArray.map!(a\
    \ => a[1]).group.map!(a => a[0] => a.length).array;\n        long max = hist.values.max;\n\
    \        result = hist.filter!(a => a.value == max).nullable;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    else\n    {\n        auto words\
    \ = test.split(\" \");\n        auto dict = new long[string];\n        foreach\
    \ (word; words)\n        {\n            if (dict.count(word) == 0)\n         \
    \   {\n                dict[word] = 1;\n            }\n            else\n    \
    \        {\n                dict[word] += 1;\n            }\n        }\n     \
    \   long max = 0;\n        foreach (key, value; dict)\n        {\n           \
    \ if (value > max)\n            {\n                max = value;\n            }\n\
    \        }\n        foreach (key, value; dict)\n        {\n            if (value\
    \ == max)\n            {\n                result[key] = value;\n            }\n\
    \        }\n        return result;\n    }\n}", "{\n    long[string] result;\n\
    \    foreach(c; test.split)\n    {\n        if(!result.contains(c))\n        {\n\
    \            result[c] = 0;\n        }\n        result[c]++;\n    }\n    long\
    \ max = maxElement(result.values);\n    long[string] result2;\n    foreach(k,\
    \ v; result)\n    {\n        if(v == max)\n        {\n            result2[k] =\
    \ v;\n        }\n    }\n    return result2.length == 0 ? null : result2;\n}",
  "{\n    long[string] result = [:];\n    foreach(letter; test.split)\n    {\n   \
    \     result[letter]++;\n    }\n    long max = maxElement(result.values);\n  \
    \  if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n       \
    \ long[string] result2 = [:];\n        foreach(letter; result.keys)\n        {\n\
    \            if(result[letter] == max)\n            {\n                result2[letter]\
    \ = max;\n            }\n        }\n        return result2;\n    }\n}", "{\n \
    \   Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n       \
    \ return result;\n    }\n    else\n    {\n        long[string] histogram;\n  \
    \      string[] words = test.split(\" \");\n        foreach(word; words)\n   \
    \     {\n            if(histogram.count(word) == 0)\n            {\n         \
    \       histogram[word] = 1;\n            }\n            else\n            {\n\
    \                histogram[word] += 1;\n            }\n        }\n        long\
    \ max = maxElement(histogram.values);\n        foreach(word; words)\n        {\n\
    \            if(histogram[word] == max)\n            {\n                result[word]\
    \ = max;\n            }\n        }\n        return result;\n    }\n}", "{\n  \
    \  long[string] result;\n    long max = 0;\n    foreach(c; test.split())\n   \
    \ {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \     max = max(max, result[c]);\n    }\n    return result.filter!(a => a.value\
    \ == max).nullable;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto splitted = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; splitted)\n    {\n    \
    \    counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n   \
    \ foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] counts;\n        foreach(word; words)\n        {\n\
    \            if (counts.count(word) == 0)\n            {\n                counts[word]\
    \ = 1;\n            }\n            else\n            {\n                counts[word]\
    \ += 1;\n            }\n        }\n        long max = maxElement(counts.values);\n\
    \        long[string] max_counts;\n        foreach(word; words)\n        {\n \
    \           if (counts[word] == max)\n            {\n                max_counts[word]\
    \ = max;\n            }\n        }\n        result = max_counts;\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto words = test.split;\n\
    \    long[string] counts;\n    foreach (word; words) \n    {\n        counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; words) \n\
    \    {\n        if (counts[word] == max) \n        {\n            result.insert(word,\
    \ max);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   result = new long[string];\n    foreach (letter; test.split(\" \"))\n    {\n\
    \        if (result.get(letter) is null)\n        {\n            result[letter]\
    \ = 1L;\n        }\n        else\n        {\n            result[letter]++;\n \
    \       }\n    }\n    long max = max(result.values);\n    foreach (key, value;\
    \ result)\n    {\n        if (value != max)\n        {\n            result.remove(key);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        string[] words = test.split(\" \");\n        long[string] counts;\n\
    \        foreach(word; words)\n        {\n            if (counts.count(word) ==\
    \ 0)\n            {\n                counts[word] = 1;\n            }\n      \
    \      else\n            {\n                counts[word] += 1;\n            }\n\
    \        }\n        long max = max(counts.values);\n        foreach(word; words)\n\
    \        {\n            if (counts[word] == max)\n            {\n            \
    \    result.insert(word, counts[word]);\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ hist = [:];\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n\
    \        {\n            if(c in hist)\n            {\n                hist[c]++;\n\
    \            }\n            else\n            {\n                hist[c] = 1;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n  \
    \  {\n        if(c.value > max)\n        {\n            max = c.value;\n     \
    \   }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c;\
    \ hist)\n        {\n            if(c.value == max)\n            {\n          \
    \      result[c.key] = c.value;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(letter; test.split)\n    {\n   \
    \     if(letter in result)\n        {\n            result[letter] += 1L;\n   \
    \     }\n        else\n        {\n            result[letter] = 1L;\n        }\n\
    \    }\n    long max = maxElement(result.values);\n    long[string] max_letters;\n\
    \    foreach(letter; result.keys)\n    {\n        if(result[letter] == max)\n\
    \        {\n            max_letters[letter] = max;\n        }\n    }\n    return\
    \ max_letters.nullable;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    string[] words = test.split(\"\
    \ \");\n    long[string] wordCounts;\n    foreach (word; words)\n    {\n     \
    \   if (wordCounts.contains(word))\n        {\n            wordCounts[word]++;\n\
    \        }\n        else\n        {\n            wordCounts[word] = 1;\n     \
    \   }\n    }\n    long maxCount = max(wordCounts.values);\n    foreach (word;\
    \ wordCounts.keys)\n    {\n        if (wordCounts[word] == maxCount)\n       \
    \ {\n            result[word] = maxCount;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach (letter; letters)\n    {\n        if (letterCounts.count(letter)\
    \ == 0)\n        {\n            letterCounts[letter] = 1;\n        }\n       \
    \ else\n        {\n            letterCounts[letter]++;\n        }\n    }\n   \
    \ long maxCount = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n\
    \    {\n        if (letterCounts[letter] == maxCount)\n        {\n           \
    \ result.insert(letter, letterCounts[letter]);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n        {\n            continue;\n        }\n        if (dict.count(word)\
    \ == 0)\n        {\n            dict[word] = 1;\n        }\n        else\n   \
    \     {\n            dict[word] += 1;\n        }\n    }\n    long max = 0;\n \
    \   foreach (key, value; dict)\n    {\n        if (value > max)\n        {\n \
    \           max = value;\n        }\n    }\n    auto resultDict = new long[string];\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n\
    \            resultDict[key] = value;\n        }\n    }\n    result = resultDict;\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    string[] splitted = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (letter; splitted)\n    {\n      \
    \  if (dict.contains(letter))\n        {\n            dict[letter]++;\n      \
    \  }\n        else\n        {\n            dict[letter] = 1;\n        }\n    }\n\
    \    long max = maxElement(dict.values);\n    long[string] maxDict;\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n        {\n          \
    \  maxDict[key] = value;\n        }\n    }\n    result = maxDict;\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0) \n    {\n        return result;\n    }\n    auto words = test.split(\" \"\
    );\n    long[string] histogram;\n    foreach (word; words) \n    {\n        if\
    \ (word.length == 0) \n        {\n            continue;\n        }\n        histogram[word]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach (word; words)\
    \ \n    {\n        if (word.length == 0) \n        {\n            continue;\n\
    \        }\n        if (histogram[word] == max) \n        {\n            result\
    \ = histogram;\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] result;\n    if(test.length == 0)\n        return null;\n \
    \   foreach(c; test.split)\n    {\n        if(c.length == 0)\n            continue;\n\
    \        if(result.length == 0)\n        {\n            result[c] = 1;\n     \
    \       continue;\n        }\n        if(result.count(c) == 0)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    long max = result.values.max;\n\
    \    long[string] finalResult;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n            finalResult[c] = max;\n    }\n    return finalResult;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] letters =\
    \ new long[string];\n    foreach(char c; test)\n    {\n        if(c == ' ')\n\
    \            continue;\n        letters[c]++;\n    }\n    long max = maxElement(letters.values);\n\
    \    foreach(string key; letters.keys)\n    {\n        if(letters[key] == max)\n\
    \        {\n            if(result is null)\n                result = new long[string];\n\
    \            result[key] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    long[string] dict = [:];\n  \
    \  foreach(c; test.split())\n    {\n        if(c in dict)\n        {\n       \
    \     dict[c] += 1;\n        }\n        else\n        {\n            dict[c] =\
    \ 1;\n        }\n    }\n    if(dict.length == 0)\n    {\n        return null;\n\
    \    }\n    long max = dict.values.max;\n    foreach(k, v; dict)\n    {\n    \
    \    if(v == max)\n        {\n            if(result is null)\n            {\n\
    \                result = [k: v];\n            }\n            else\n         \
    \   {\n                result[k] = v;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    long max = 0;\n    foreach(c;\
    \ test.split)\n    {\n        if(!result.contains(c))\n        {\n           \
    \ result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n        if(result[c] > max)\n        {\n            max = result[c];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n\
    \    {\n        return result.filter!(a => a.value == max);\n    }\n}", "{\n \
    \   Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n      \
    \  return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] counts;\n        foreach(word; words)\n        {\n\
    \            if (counts.count(word) == 0)\n            {\n                counts[word]\
    \ = 1;\n            }\n            else\n            {\n                counts[word]\
    \ += 1;\n            }\n        }\n        long max = maxElement(counts.values);\n\
    \        foreach(word; words)\n        {\n            if (counts[word] == max)\n\
    \            {\n                result[word] = max;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    long[string] result;\n    long max\
    \ = 0;\n    foreach(c; test.split) \n    {\n        if(result.length == 0)\n \
    \       {\n            result[c] = 1;\n            max = 1;\n        }\n     \
    \   else\n        {\n            if(result.count(c) == 0)\n            {\n   \
    \             result[c] = 1;\n            }\n            else\n            {\n\
    \                result[c] += 1;\n            }\n            if(result[c] > max)\n\
    \            {\n                max = result[c];\n            }\n        }\n \
    \   }\n    if(result.length == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result2;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n\
    \        {\n            result2[c] = max;\n        }\n    }\n    return result2;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] counts;\n\
    \    foreach(c; test.split)\n    {\n        if(!counts.contains(c))\n        {\n\
    \            counts[c] = 0;\n        }\n        counts[c]++;\n    }\n    long\
    \ max = maxElement(counts.values);\n    foreach(c; counts.keys)\n    {\n     \
    \   if(counts[c] == max)\n        {\n            if(result is null)\n        \
    \    {\n                result = new long[string];\n            }\n          \
    \  result[c] = max;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        result[c] = result.getOrInit(c,\
    \ 0) + 1;\n    }\n    long max = result.values.max;\n    if(max == 0)\n    {\n\
    \        return null;\n    }\n    long[string] result2;\n    foreach(c; result.keys)\n\
    \    {\n        if(result[c] == max)\n        {\n            result2[c] = max;\n\
    \        }\n    }\n    return result2;\n}", "{\n    long[string] result;\n   \
    \ long max = 0;\n    foreach(c; test.split)\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c]++;\n        }\n        if(result[c] > max)\n        {\n\
    \            max = result[c];\n        }\n    }\n    if(max == 0)\n    {\n   \
    \     return null;\n    }\n    else\n    {\n        return result.filter!(a =>\
    \ a.value == max);\n    }\n}", "{\n    long[string] result;\n    long max = 0;\n\
    \    foreach(c; test.split)\n    {\n        if(result.contains(c))\n        {\n\
    \            result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n        max = max(max, result[c]);\n    }\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    long[string] ret;\n    foreach(c; result.keys)\n\
    \    {\n        if(result[c] == max)\n        {\n            ret[c] = max;\n \
    \       }\n    }\n    return ret;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if(test.length == 0)\n    {\n        return result;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] counts;\n    foreach(word; words)\n\
    \    {\n        if(counts.count(word) == 0)\n        {\n            counts[word]\
    \ = 1;\n        }\n        else\n        {\n            counts[word] += 1;\n \
    \       }\n    }\n    long maxCount = max(counts.values);\n    foreach(key, value;\
    \ counts)\n    {\n        if(value == maxCount)\n        {\n            result.put(key,\
    \ value);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] letters = new long[string];\n    foreach(letter;\
    \ test.split)\n    {\n        if(letter.length == 1)\n        {\n            letters[letter]++;\n\
    \        }\n    }\n    long max = maxElement(letters.values);\n    foreach(letter;\
    \ letters.keys)\n    {\n        if(letters[letter] == max)\n        {\n      \
    \      if(result is null)\n            {\n                result = new long[string];\n\
    \            }\n            result[letter] = max;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto result = new long[string];\n    foreach(letter; test.split)\n\
    \    {\n        if(letter.length == 1)\n        {\n            if(result.count(letter))\n\
    \            {\n                result[letter]++;\n            }\n           \
    \ else\n            {\n                result[letter] = 1;\n            }\n  \
    \      }\n    }\n    if(result.length == 0)\n    {\n        return null;\n   \
    \ }\n    else\n    {\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(letter; test.split)\n\
    \    {\n        if(letter in histogram)\n        {\n            histogram[letter]++;\n\
    \        }\n        else\n        {\n            histogram[letter] = 1;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = [key: value];\n          \
    \  }\n            else\n            {\n                result[key] = value;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] maxes;\n \
    \   foreach (count; counts)\n    {\n        if (count.value == max)\n        \
    \    maxes[count.key] = count.value;\n    }\n    return maxes;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        result[c]++;\n    }\n\
    \    long max = maxElement(result.values);\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.filter!(a => a.value ==\
    \ max);\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ hist = [:];\n    foreach(c; test.split)\n    {\n        if(!hist.containsKey(c))\n\
    \        {\n            hist[c] = 1;\n        }\n        else\n        {\n   \
    \         hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max > 0)\n    {\n        result = [:];\n        foreach(k, v; hist)\n\
    \        {\n            if(v == max)\n            {\n                result[k]\
    \ = v;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        auto words = test.split(\" \");\n        long[string]\
    \ dict;\n        foreach (word; words)\n        {\n            if (word in dict)\n\
    \            {\n                dict[word]++;\n            }\n            else\n\
    \            {\n                dict[word] = 1;\n            }\n        }\n  \
    \      long max = 0;\n        foreach (key, value; dict)\n        {\n        \
    \    if (value > max)\n            {\n                max = value;\n         \
    \   }\n        }\n        long[string] result_dict;\n        foreach (key, value;\
    \ dict)\n        {\n            if (value == max)\n            {\n           \
    \     result_dict[key] = value;\n            }\n        }\n        result = result_dict;\n\
    \        return result;\n    }\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(result.contains(c))\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n  \
    \      return null;\n    }\n    long[string] res;\n    foreach(c; result.keys)\n\
    \    {\n        if(result[c] == max)\n        {\n            res[c] = max;\n \
    \       }\n    }\n    return res;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        string[] words = test.split(\" \");\n        long[string] histogram\
    \ = new long[string];\n        foreach (word; words)\n        {\n            histogram[word]++;\n\
    \        }\n        long max = max(histogram.values);\n        foreach (key, value;\
    \ histogram)\n        {\n            if (value == max)\n            {\n      \
    \          result.insert(key, value);\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ hist = new long[string];\n    foreach(c; test.split())\n    {\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n   \
    \ {\n        if(v == max)\n        {\n            if(result.isNull)\n        \
    \    {\n                result = new long[string];\n            }\n          \
    \  result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n\
    \    import std.uni;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.conv;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.uni;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n\
    \    import std.uni;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.conv;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.uni;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.tra", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] letterCounts;\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCounts.contains(letter))\n     \
    \   {\n            letterCounts[letter]++;\n        }\n        else\n        {\n\
    \            letterCounts[letter] = 1;\n        }\n    }\n    long maxCount =\
    \ max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n    {\n\
    \        if (letterCounts[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ maxCount);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histo = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        histo[c]++;\n\
    \    }\n    long max = 0;\n    foreach(char c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(histo[c] > max)\n            max = histo[c];\n\
    \    }\n    foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(histo[c] == max)\n        {\n            if(result.isNull)\n     \
    \           result = new long[string];\n            result.get!(long[string])[c]\
    \ = max;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    long[string] counts;\n    foreach (word;\
    \ words)\n    {\n        counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (word; words)\n    {\n        if (counts[word] == max)\n        {\n\
    \            result[word] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    long[string] letters = new long[string];\n\
    \    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n  \
    \      letters[c]++;\n    }\n    long max = 0;\n    foreach(c; letters.keys)\n\
    \    {\n        if(letters[c] > max)\n            max = letters[c];\n    }\n \
    \   foreach(c; letters.keys)\n    {\n        if(letters[c] == max)\n         \
    \   result[c] = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length > 0)\n    {\n        long[string] counts;\n   \
    \     foreach (c; test.split())\n        {\n            if (counts.count(c) ==\
    \ 0)\n            {\n                counts[c] = 1;\n            }\n         \
    \   else\n            {\n                counts[c]++;\n            }\n       \
    \ }\n        long max = maxElement(counts.values);\n        foreach (k, v; counts)\n\
    \        {\n            if (v == max)\n            {\n                result.insert(k,\
    \ v);\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n   \
    \     }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n \
    \       foreach(c; hist.keys)\n        {\n            if(hist[c] == max)\n   \
    \         {\n                result[c] = max;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ temp;\n    foreach(c; test.split)\n    {\n        if(temp.count(c) == 0)\n \
    \       {\n            temp[c] = 1;\n        }\n        else\n        {\n    \
    \        temp[c] += 1;\n        }\n    }\n    long max = temp.values.max;\n  \
    \  foreach(k, v; temp)\n    {\n        if(v == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = new long[string];\n      \
    \      }\n            result[k] = v;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] letters = new long[string];\n\
    \    foreach(c; test)\n    {\n        if(c != ' ')\n        {\n            letters[c.to!string]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(c; letters)\n    {\n       \
    \ if(c.value > max)\n        {\n            max = c.value;\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = new long[string];\n        foreach(c;\
    \ letters)\n        {\n            if(c.value == max)\n            {\n       \
    \         result[c.key] = c.value;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    long max = 0;\n    foreach(c;\
    \ test.split)\n    {\n        if(result.length == 0)\n        {\n            result[c]\
    \ = 1;\n            max = 1;\n        }\n        else\n        {\n           \
    \ if(result.contains(c))\n            {\n                result[c] += 1;\n   \
    \             if(result[c] > max)\n                {\n                    max\
    \ = result[c];\n                }\n            }\n            else\n         \
    \   {\n                result[c] = 1;\n            }\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    else\n    {\n        long[string]\
    \ result2;\n        foreach(c; result.keys)\n        {\n            if(result[c]\
    \ == max)\n            {\n                result2[c] = max;\n            }\n \
    \       }\n        return result2;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] counts;\n    long maxCount = 0;\n    foreach(c;\
    \ test.split)\n    {\n        if(!counts.contains(c))\n        {\n           \
    \ counts[c] = 0;\n        }\n        counts[c]++;\n        if(counts[c] > maxCount)\n\
    \        {\n            maxCount = counts[c];\n        }\n    }\n    if(maxCount\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(c; counts.keys)\n\
    \        {\n            if(counts[c] == maxCount)\n            {\n           \
    \     result[c] = maxCount;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] histogram\
    \ = [:];\n    foreach(char c; test)\n    {\n        if(c == ' ')\n           \
    \ continue;\n        if(!histogram.contains(c))\n            histogram[c] = 0;\n\
    \        histogram[c]++;\n    }\n    long max = 0;\n    foreach(char c; histogram.keys)\n\
    \    {\n        if(histogram[c] > max)\n            max = histogram[c];\n    }\n\
    \    foreach(char c; histogram.keys)\n    {\n        if(histogram[c] == max)\n\
    \            result[c] = max;\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        if(result.count(c) ==\
    \ 0)\n        {\n            result[c] = 1;\n        }\n        else\n       \
    \ {\n            result[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n\
    \    {\n        long[string] result2;\n        foreach(c; result)\n        {\n\
    \            if(c.value == max)\n            {\n                result2[c.key]\
    \ = c.value;\n            }\n        }\n        return result2;\n    }\n}", "{\n\
    \    long[string] result;\n    foreach(c; test.split)\n    {\n        if(result.byKey.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    if(result.byKey.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = maxElement(result.byKey.values);\n\
    \    long[string] result2;\n    foreach(c; result.byKey.keys)\n    {\n       \
    \ if(result[c] == max)\n        {\n            result2[c] = max;\n        }\n\
    \    }\n    return result2;\n}", "{\n    //return test.split(\" \").map!(a =>\
    \ a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n  \
    \  //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.split(\"\
    \ \").map!(a => a.length).max;\n    //return test.split(\" \").map!(a => a.length).max;\n\
    \    //return test.split(\" \").map!(a => a.length).max;\n    //return test.",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] letters = new long[string];\n\
    \    foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        letters[c]++;\n    }\n    long max = maxElement(letters.values);\n  \
    \  foreach(string key; letters.keys)\n    {\n        if(letters[key] == max)\n\
    \        {\n            if(result is null)\n                result = new long[string];\n\
    \            result[key] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (test.empty)\n        return null;\n    auto letters = test.split;\n \
    \   auto letterCounts = letters.map!(a => a.countUntil(a)).array;\n    auto maxCount\
    \ = max(letterCounts);\n    auto maxLetters = letters.filter!(a => a.countUntil(a)\
    \ == maxCount);\n    return maxLetters.assocArray.nullable;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histo = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        histo[c]++;\n\
    \    }\n    long max = 0;\n    foreach(char c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(histo[c] > max)\n            max = histo[c];\n\
    \    }\n    foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(histo[c] == max)\n        {\n            if(result.isNull)\n     \
    \           result = new long[string];\n            result.get!(long[string])[c]\
    \ = max;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(letter; test.split)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(letter, count; histogram)\n    {\n        if(count == max)\n    \
    \    {\n            if(result.isNull)\n            {\n                result =\
    \ [letter: count];\n            }\n            else\n            {\n         \
    \       result[letter] = count;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(c; test.split)\n    {\n        hist[c]++;\n    }\n    long max =\
    \ 0;\n    foreach(c; hist.keys)\n    {\n        if(hist[c] > max)\n        {\n\
    \            max = hist[c];\n        }\n    }\n    if(max > 0)\n    {\n      \
    \  result = [:];\n        foreach(c; hist.keys)\n        {\n            if(hist[c]\
    \ == max)\n            {\n                result[c] = max;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] histo;\n    foreach(c; test.split)\n    {\n      \
    \  histo[c]++;\n    }\n    long max = maxElement(histo.values);\n    foreach(k,\
    \ v; histo)\n    {\n        if(v == max)\n        {\n            result[k] = v;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] histo;\n    foreach(c; test.split)\n    {\n      \
    \  if(histo.count(c) == 0)\n        {\n            histo[c] = 1;\n        }\n\
    \        else\n        {\n            histo[c] += 1;\n        }\n    }\n    long\
    \ max = 0;\n    foreach(c; histo.keys)\n    {\n        if(histo[c] > max)\n  \
    \      {\n            max = histo[c];\n        }\n    }\n    foreach(c; histo.keys)\n\
    \    {\n        if(histo[c] == max)\n        {\n            result[c] = max;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] res;\n    long\
    \ max = 0;\n    foreach(c; test.split)\n    {\n        if(res.count(c) == 0)\n\
    \        {\n            res[c] = 1;\n        }\n        else\n        {\n    \
    \        res[c]++;\n        }\n        max = max(max, res[c]);\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    long[string] ret;\n    foreach(c;\
    \ res.keys)\n    {\n        if(res[c] == max)\n        {\n            ret[c] =\
    \ max;\n        }\n    }\n    return ret;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] counts;\n    foreach (letter;\
    \ letters)\n    {\n        counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ hist = [:];\n    foreach(c; test.split)\n    {\n        hist[c]++;\n       \
    \ if(hist[c] > max)\n        {\n            max = hist[c];\n        }\n    }\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         if(result.isNull)\n            {\n                result = [c: max];\n\
    \            }\n            else\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(char c; test.split())\n    {\n     \
    \   if(result.contains(c))\n        {\n            result[c]++;\n        }\n \
    \       else\n        {\n            result[c] = 1;\n        }\n        max =\
    \ max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    long[string] ret;\n    foreach(k, v; result)\n    {\n        if(v\
    \ == max)\n        {\n            ret[k] = v;\n        }\n    }\n    return ret;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach (letter; letters)\n    {\n        if (letterCounts.hasKey(letter))\n\
    \        {\n            letterCounts[letter]++;\n        }\n        else\n   \
    \     {\n            letterCounts[letter] = 1;\n        }\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n    {\n\
    \        if (letterCounts[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ letterCounts[letter]);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        if(result.contains(c))\n\
    \        {\n            result[c]++;\n        }\n        else\n        {\n   \
    \         result[c] = 1;\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return null;\n    }\n    long max = result.values.max;\n    long[string]\
    \ max_result;\n    foreach(key, value; result)\n    {\n        if(value == max)\n\
    \        {\n            max_result[key] = value;\n        }\n    }\n    return\
    \ max_result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ letters;\n    long max = 0;\n    foreach(c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(letters.count(c) == 0)\n            letters[c]\
    \ = 1;\n        else\n            letters[c]++;\n        if(letters[c] > max)\n\
    \            max = letters[c];\n    }\n    foreach(c; letters.keys)\n    {\n \
    \       if(letters[c] == max)\n        {\n            if(result is null)\n   \
    \             result = new long[string];\n            result[c] = letters[c];\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] count = [:];\n    foreach(c; test.split)\n    {\n\
    \        if(count.count(c) == 0)\n        {\n            count[c] = 1;\n     \
    \   }\n        else\n        {\n            count[c] += 1;\n        }\n    }\n\
    \    long max = maxElement(count.values);\n    foreach(c; count.keys)\n    {\n\
    \        if(count[c] == max)\n        {\n            if(result is null)\n    \
    \        {\n                result = [c: count[c]];\n            }\n         \
    \   else\n            {\n                result[c] = count[c];\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split())\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = new long[string];\n      \
    \      }\n            result[k] = v;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] result = new long[string];\n    foreach(c; test.split)\n  \
    \  {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    long max = max(result.values);\n    long[string] result2 = new long[string];\n\
    \    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n        {\n\
    \            result2[c] = max;\n        }\n    }\n    return result2.nullable;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] histogram\
    \ = [:];\n    foreach(letter; test.split)\n    {\n        histogram[letter]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(key, value;\
    \ histogram)\n    {\n        if(value == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = [key: value];\n            }\n      \
    \      else\n            {\n                result[key] = value;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length > 0)\n        {\n            hist[c]++;\n        }\n\
    \    }\n    if(hist.length > 0)\n    {\n        long max = maxElement(hist.values);\n\
    \        foreach(k, v; hist)\n        {\n            if(v == max)\n          \
    \  {\n                result[k] = v;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length >\
    \ 0) \n    {\n        long[string] histogram;\n        foreach (c; test.split)\
    \ \n        {\n            histogram[c]++;\n        }\n        long max = maxElement(histogram.values);\n\
    \        foreach (k, v; histogram) \n        {\n            if (v == max) \n \
    \           {\n                result.insert(k, v);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    long max = 0;\n\
    \    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n       \
    \ {\n            result[c] = 1;\n        }\n        else\n        {\n        \
    \    result[c]++;\n        }\n        max = max(max, result[c]);\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    else\n    {\n        return result.filter!(a\
    \ => a.value == max);\n    }\n}", "{\n    Nullable!(long[string]) result;\n  \
    \  if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] letterCounts;\n    foreach (letter; letters)\n\
    \    {\n        if (letterCounts.count(letter) == 0)\n        {\n            letterCounts[letter]\
    \ = 1;\n        }\n        else\n        {\n            letterCounts[letter]++;\n\
    \        }\n    }\n    long maxCount = max(letterCounts.values);\n    foreach\
    \ (letter; letterCounts.keys)\n    {\n        if (letterCounts[letter] == maxCount)\n\
    \        {\n            result[letter] = maxCount;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    else\n    {\n        auto words\
    \ = test.split(\" \");\n        long[string] counts;\n        foreach (word; words)\n\
    \        {\n            if (counts.count(word) == 0)\n            {\n        \
    \        counts[word] = 1;\n            }\n            else\n            {\n \
    \               counts[word] += 1;\n            }\n        }\n        long max\
    \ = counts.values.max;\n        foreach (key, value; counts)\n        {\n    \
    \        if (value == max)\n            {\n                result.set(key, value);\n\
    \            }\n        }\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n\
    \        if(c.length == 1)\n        {\n            if(dict.count(c) == 0)\n  \
    \          {\n                dict[c] = 1;\n            }\n            else\n\
    \            {\n                dict[c] += 1;\n            }\n        }\n    }\n\
    \    if(dict.length > 0)\n    {\n        long max = dict.values.max;\n       \
    \ foreach(k, v; dict)\n        {\n            if(v == max)\n            {\n  \
    \              result = dict;\n                break;\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] histo;\n    foreach(c; test.split)\n    {\n        if(!histo.contains(c))\n\
    \        {\n            histo[c] = 1;\n        }\n        else\n        {\n  \
    \          histo[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histo.keys)\n    {\n        if(histo[c] > max)\n        {\n            max =\
    \ histo[c];\n        }\n    }\n    foreach(c; histo.keys)\n    {\n        if(histo[c]\
    \ == max)\n        {\n            result[c] = max;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    string[] words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n        {\n            continue;\n        }\n        if (dict.count(word)\
    \ == 0)\n        {\n            dict[word] = 1;\n        }\n        else\n   \
    \     {\n            dict[word] += 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n\
    \            result.set(dict);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ histo = [:];\n    foreach(c; test.split)\n    {\n        histo[c]++;\n    }\n\
    \    long max = maxElement(histo.values);\n    foreach(k, v; histo)\n    {\n \
    \       if(v == max)\n        {\n            if(result.isNull)\n            {\n\
    \                result = [k: v];\n            }\n            else\n         \
    \   {\n                result[k] = v;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ histogram = [:];\n    foreach(letter; test.split)\n    {\n        histogram[letter]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(key, value;\
    \ histogram)\n    {\n        if(value == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = [key: value];\n          \
    \  }\n            else\n            {\n                result[key] = value;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histo = [:];\n    foreach(c; test.split())\n\
    \    {\n        if(histo.count(c) == 0)\n        {\n            histo[c] = 1;\n\
    \        }\n        else\n        {\n            histo[c]++;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; histo.keys)\n    {\n        if(histo[c] > max)\n\
    \        {\n            max = histo[c];\n        }\n    }\n    if(max > 0)\n \
    \   {\n        result = [:];\n        foreach(c; histo.keys)\n        {\n    \
    \        if(histo[c] == max)\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0) \n    {\n        return result;\n    }\n\
    \    auto letters = test.split(\" \");\n    long[string] counts;\n    foreach\
    \ (letter; letters) \n    {\n        if (counts.count(letter) == 0) \n       \
    \ {\n            counts[letter] = 1;\n        } \n        else \n        {\n \
    \           counts[letter] += 1;\n        }\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts) \n    {\n        if (value == max) \n      \
    \  {\n            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(char c; test.split(\" \"))\n    {\n        if(hist.count(c.to!string))\n\
    \        {\n            hist[c.to!string]++;\n        }\n        else\n      \
    \  {\n            hist[c.to!string] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(string key; hist.keys)\n    {\n        if(hist[key] == max)\n   \
    \     {\n            if(result is null)\n            {\n                result\
    \ = [key: hist[key]];\n            }\n            else\n            {\n      \
    \          result[key] = hist[key];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ dict = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(dict.count(c) == 0)\n            {\n      \
    \          dict[c] = 1;\n            }\n            else\n            {\n    \
    \            dict[c]++;\n            }\n        }\n    }\n    if(dict.length >\
    \ 0)\n    {\n        long max = dict.values.max;\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result.insert(c,\
    \ max);\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(letter; test.split)\n    {\n\
    \        if(!histogram.contains(letter))\n        {\n            histogram[letter]\
    \ = 1L;\n        }\n        else\n        {\n            histogram[letter] +=\
    \ 1L;\n        }\n    }\n    if(histogram.length == 0)\n    {\n        return\
    \ ___null_dict___;\n    }\n    long max = histogram.values.max;\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    long max = 0;\n    foreach(c; test.split)\n    {\n        if(c.length ==\
    \ 0)\n            continue;\n        if(!result.contains(c))\n            result[c]\
    \ = 0;\n        result[c]++;\n        if(result[c] > max)\n            max = result[c];\n\
    \    }\n    if(max == 0)\n        return null;\n    long[string] ret;\n    foreach(c;\
    \ result.keys)\n    {\n        if(result[c] == max)\n            ret[c] = max;\n\
    \    }\n    return ret;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.empty)\n\
    \    {\n        return result;\n    }\n    auto letters = test.split(\" \");\n\
    \    auto letter_counts = new long[string];\n    foreach (letter; letters)\n \
    \   {\n        if (letter_counts.contains(letter))\n        {\n            letter_counts[letter]\
    \ += 1;\n        }\n        else\n        {\n            letter_counts[letter]\
    \ = 1;\n        }\n    }\n    long max_count = max(letter_counts.values);\n  \
    \  foreach (letter; letter_counts.keys)\n    {\n        if (letter_counts[letter]\
    \ == max_count)\n        {\n            result.insert(letter, letter_counts[letter]);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n    {\n \
    \       if(c in hist)\n        {\n            hist[c]++;\n        }\n        else\n\
    \        {\n            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ if(result is null)\n            {\n                result = [k: v];\n      \
    \      }\n            else\n            {\n                result[k] = v;\n  \
    \          }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(letter; test.split)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(key, value; histogram)\n    {\n        if(value == max)\n       \
    \ {\n            if(result.isNull)\n            {\n                result = [key:\
    \ value];\n            }\n            else\n            {\n                result[key]\
    \ = value;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        long max = 0;\n        foreach (i, word;\
    \ words)\n        {\n            counts[i] = count(words, word);\n           \
    \ if (counts[i] > max)\n            {\n                max = counts[i];\n    \
    \        }\n        }\n        result = new long[string];\n        foreach (i,\
    \ word; words)\n        {\n            if (counts[i] == max)\n            {\n\
    \                result[word] = max;\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[string] result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        result[c]++;\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] res =\
    \ new long[string];\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            res[c] = max;\n        }\n    }\n    return\
    \ res;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string] histo\
    \ = [:];\n    foreach(char c; test)\n    {\n        if(c == ' ')\n           \
    \ continue;\n        histo[c]++;\n    }\n    long max = 0;\n    foreach(k, v;\
    \ histo)\n    {\n        if(v > max)\n            max = v;\n    }\n    if(max\
    \ == 0)\n        return null;\n    foreach(k, v; histo)\n    {\n        if(v ==\
    \ max)\n            result[k] = v;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[string];\n    foreach(char c; test)\n    {\n        if(c ==\
    \ ' ') continue;\n        result[c]++;\n    }\n    if(result.empty) return null;\n\
    \    long max = result.values.max;\n    return result.filter!(a => a.value ==\
    \ max);\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ letters = new long[string];\n    foreach(c; test)\n    {\n        if(c != '\
    \ ')\n        {\n            letters[c.toString()]++;\n        }\n    }\n    long\
    \ max = maxElement(letters.values);\n    foreach(key, value; letters)\n    {\n\
    \        if(value == max)\n        {\n            if(result is null)\n       \
    \     {\n                result = new long[string];\n            }\n         \
    \   result[key] = value;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0) \n    {\n        return result;\n    }\n\
    \    long[string] dict;\n    foreach (ch; test.split) \n    {\n        if (ch\
    \ in dict) \n        {\n            dict[ch] += 1L;\n        }\n        else \n\
    \        {\n            dict[ch] = 1L;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict) \n    {\n        if (value == max) \n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    string[] words = test.split(\" \");\n    long[string]\
    \ hist = [words[0]: 1L];\n    foreach (word; words[1..$])\n    {\n        if (word\
    \ in hist)\n        {\n            hist[word]++;\n        }\n        else\n  \
    \      {\n            hist[word] = 1L;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach (key, value; hist)\n    {\n        if (value == max)\n        {\n\
    \            result.put(key, value);\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n    \
    \    return result;\n    }\n    auto words = test.split(\" \");\n    auto counts\
    \ = [words[0]: 1L];\n    foreach (i, word; words[1..$])\n    {\n        if (word\
    \ in counts)\n        {\n            counts[word]++;\n        }\n        else\n\
    \        {\n            counts[word] = 1L;\n        }\n    }\n    long maxCount\
    \ = max(counts.values);\n    foreach (key, value; counts)\n    {\n        if (value\
    \ == maxCount)\n        {\n            result.insert(key, value);\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] temp;\n    foreach(c; test.split())\n    {\n        if(temp.count(c)\
    \ == 0)\n        {\n            temp[c] = 1;\n        }\n        else\n      \
    \  {\n            temp[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ temp.keys)\n    {\n        if(temp[c] > max)\n        {\n            max = temp[c];\n\
    \        }\n    }\n    foreach(c; temp.keys)\n    {\n        if(temp[c] == max)\n\
    \        {\n            result[c] = temp[c];\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length > 0)\n    {\n\
    \        result = new long[string];\n        foreach (c; test.split)\n       \
    \ {\n            if (c in result)\n            {\n                result[c]++;\n\
    \            }\n            else\n            {\n                result[c] = 1;\n\
    \            }\n        }\n        long max = maxElement(result.values);\n   \
    \     foreach (key, value; result)\n        {\n            if (value != max)\n\
    \            {\n                result.remove(key);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] hist = [:];\n    foreach(c; test.split)\n    {\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n   \
    \ {\n        if(v == max)\n        {\n            result = [k: v];\n        }\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        result[c]++;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}", "{\n   \
    \ Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n        return\
    \ result;\n    }\n    auto letters = test.split(\" \");\n    long[string] letterCounts;\n\
    \    foreach (letter; letters)\n    {\n        if (letterCounts.contains(letter))\n\
    \        {\n            letterCounts[letter]++;\n        }\n        else\n   \
    \     {\n            letterCounts[letter] = 1;\n        }\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    foreach (letter; letters)\n    {\n        if\
    \ (letterCounts[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ maxCount);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(c; test.split(\"\
    \ \"))\n    {\n        if(c.length == 0)\n            continue;\n        histogram[c]++;\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ > max)\n            max = c.value;\n    }\n    if(max > 0)\n    {\n        result\
    \ = [:];\n        foreach(c; histogram)\n        {\n            if(c.value ==\
    \ max)\n                result[c.key] = c.value;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ temp = new long[string];\n    foreach(c; test.split)\n    {\n        temp[c]++;\n\
    \    }\n    long max = maxElement(temp.values);\n    foreach(c; temp.keys)\n \
    \   {\n        if(temp[c] == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = new long[string];\n            }\n  \
    \          result[c] = max;\n        }\n    }\n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(!hist.containsKey(c))\n        {\n          \
    \  hist[c] = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n\
    \        }\n    }\n    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n        {\n            if(result is null)\n\
    \            {\n                result = [c: max];\n            }\n          \
    \  else\n            {\n                result[c] = max;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] histogram = new long[string]();\n    foreach(letter;\
    \ test.split)\n    {\n        histogram[letter]++;\n    }\n    long max = histogram.values.max;\n\
    \    foreach(key, value; histogram)\n    {\n        if(value == max)\n       \
    \ {\n            if(result.isNull)\n            {\n                result = new\
    \ long[string]();\n            }\n            result[key] = value;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n    {\n        return result;\n    }\n    auto letters =\
    \ test.split(\" \");\n    long[string] histogram;\n    foreach (letter; letters)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach (letter; histogram.keys)\n    {\n        if (histogram[letter] ==\
    \ max)\n        {\n            result.insert(letter, histogram[letter]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] letters = new long[string];\n    foreach(c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        letters[c]++;\n \
    \   }\n    long max = 0;\n    foreach(key, value; letters)\n    {\n        if(value\
    \ > max)\n        {\n            max = value;\n            result = new long[string];\n\
    \            result[key] = value;\n        }\n        else if(value == max)\n\
    \        {\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split(\" \"))\n    {\n \
    \       if(c.length > 0)\n        {\n            if(result.contains(c))\n    \
    \        {\n                result[c]++;\n            }\n            else\n  \
    \          {\n                result[c] = 1;\n            }\n        }\n    }\n\
    \    if(result.length == 0)\n    {\n        return null;\n    }\n    long max\
    \ = max(result.values);\n    long[string] max_result;\n    foreach(c; result.keys)\n\
    \    {\n        if(result[c] == max)\n        {\n            max_result[c] = max;\n\
    \        }\n    }\n    return max_result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] letters = new long[string];\n    foreach(c;\
    \ test)\n    {\n        if(c != ' ')\n        {\n            letters[c.to!string]++;\n\
    \        }\n    }\n    long max = maxElement(letters.values);\n    if(max > 0)\n\
    \    {\n        result = new long[string];\n        foreach(k, v; letters)\n \
    \       {\n            if(v == max)\n            {\n                result[k]\
    \ = v;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_result;\n    foreach(c; result)\n    {\n        if(c.value\
    \ == max)\n        {\n            max_result[c.key] = c.value;\n        }\n  \
    \  }\n    return max_result.length == 0 ? null : max_result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         counts[i] = 0;\n            foreach (j, word2; words)\n            {\n\
    \                if (word == word2)\n                {\n                    counts[i]++;\n\
    \                }\n            }\n        }\n        long max = maxElement(counts);\n\
    \        long[string] dict;\n        foreach (i, word; words)\n        {\n   \
    \         if (counts[i] == max)\n            {\n                dict[word] = max;\n\
    \            }\n        }\n        result = dict;\n        return result;\n  \
    \  }\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n\
    \    {\n        return result;\n    }\n    else\n    {\n        auto words = test.split(\"\
    \ \");\n        auto wordCounts = new long[string];\n        foreach (word; words)\n\
    \        {\n            if (wordCounts.contains(word))\n            {\n      \
    \          wordCounts[word] += 1;\n            }\n            else\n         \
    \   {\n                wordCounts[word] = 1;\n            }\n        }\n     \
    \   auto maxCount = max(wordCounts.values);\n        foreach (word; wordCounts.keys)\n\
    \        {\n            if (wordCounts[word] == maxCount)\n            {\n   \
    \             result.insert(word, wordCounts[word]);\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] letters = new long[string];\n    foreach(c; test)\n    {\n \
    \       if(c == ' ')\n            continue;\n        letters[c]++;\n    }\n  \
    \  long max = max(letters.values);\n    if(max == 0)\n        return result;\n\
    \    result = new long[string];\n    foreach(c; test)\n    {\n        if(c ==\
    \ ' ')\n            continue;\n        if(letters[c] == max)\n            result[c]\
    \ = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = new long[string];\n      \
    \      }\n            result[k] = v;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] result;\n    long max = 0;\n    foreach(c; test.split)\n  \
    \  {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \     max = max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.byValue.retro.filter!(a\
    \ => a.value == max).array;\n    }\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] letters = new long[string];\n    foreach(c; test)\n\
    \    {\n        if(c != ' ')\n        {\n            letters[c.to!string]++;\n\
    \        }\n    }\n    long max = maxElement(letters.values);\n    foreach(k,\
    \ v; letters)\n    {\n        if(v == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = new long[string];\n            }\n  \
    \          result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(char c; test)\n    {\n        if(c ==\
    \ ' ')\n            continue;\n        if(!result.contains(c))\n            result[c]\
    \ = 0;\n        result[c]++;\n        max = max(max, result[c]);\n    }\n    if(max\
    \ == 0)\n        return null;\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(result[c] != max)\n            result.remove(c);\n\
    \    }\n    return result;\n}", "{\n    auto test_arr = test.split(\" \");\n \
    \   if (test_arr.length == 0)\n        return null;\n    auto result = new long[string];\n\
    \    foreach (i, elem; test_arr)\n    {\n        result[elem]++;\n    }\n    long\
    \ max = maxElement(result.values);\n    auto result_arr = new long[string];\n\
    \    foreach (i, elem; result)\n    {\n        if (elem.value == max)\n      \
    \      result_arr[elem.key] = elem.value;\n    }\n    return result_arr;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] dict = new long[string];\n\
    \    foreach(c; test.split(\" \"))\n    {\n        if(c.length == 0)\n       \
    \     continue;\n        if(dict.count(c) == 0)\n            dict[c] = 1;\n  \
    \      else\n            dict[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ dict.keys)\n    {\n        if(dict[c] > max)\n            max = dict[c];\n \
    \   }\n    if(max == 0)\n        return null;\n    result = new long[string];\n\
    \    foreach(c; dict.keys)\n    {\n        if(dict[c] == max)\n            result[c]\
    \ = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = new long[string];\n            }\n  \
    \          result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto words = test.split(\" \");\n    long[string] histogram;\n    foreach(word;\
    \ words)\n    {\n        if(histogram.count(word) == 0)\n        {\n         \
    \   histogram[word] = 1;\n        }\n        else\n        {\n            histogram[word]\
    \ += 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach(word;\
    \ histogram.keys)\n    {\n        if(histogram[word] == max)\n        {\n    \
    \        result.insert(word, histogram[word]);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] letters =\
    \ new long[string];\n    foreach(char c; test)\n    {\n        if(c != ' ')\n\
    \        {\n            letters[c.to!string]++;\n        }\n    }\n    long max\
    \ = 0;\n    foreach(string key; letters.keys)\n    {\n        if(letters[key]\
    \ > max)\n        {\n            max = letters[key];\n        }\n    }\n    foreach(string\
    \ key; letters.keys)\n    {\n        if(letters[key] == max)\n        {\n    \
    \        if(result is null)\n            {\n                result = new long[string];\n\
    \            }\n            result[key] = max;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) res;\n    if (test.length == 0)\n        return\
    \ res;\n    auto words = test.split(\" \");\n    long[string] counts;\n    foreach\
    \ (word; words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word]++;\n    }\n    long max = counts.values.max;\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    res[key] = value;\n    }\n    return res;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histo = [:];\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            if(histo.count(c) ==\
    \ 0)\n            {\n                histo[c] = 1;\n            }\n          \
    \  else\n            {\n                histo[c] += 1;\n            }\n      \
    \  }\n    }\n    if(histo.length > 0)\n    {\n        long max = histo.values.max;\n\
    \        foreach(k, v; histo)\n        {\n            if(v == max)\n         \
    \   {\n                if(result is null)\n                {\n               \
    \     result = [k: v];\n                }\n                else\n            \
    \    {\n                    result[k] = v;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] result_map;\n    long max_count = 0;\n    foreach(c;\
    \ test.split())\n    {\n        if(result_map.count(c) == 0)\n        {\n    \
    \        result_map[c] = 1;\n        }\n        else\n        {\n            result_map[c]++;\n\
    \        }\n        if(result_map[c] > max_count)\n        {\n            max_count\
    \ = result_map[c];\n        }\n    }\n    if(max_count > 0)\n    {\n        result\
    \ = result_map;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] counts;\n    foreach\
    \ (word; words)\n    {\n        counts[word]++;\n    }\n    long max = max(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(c; test.split())\n    {\n        if(c in hist)\n        {\n     \
    \       hist[c]++;\n        }\n        else\n        {\n            hist[c] =\
    \ 1;\n        }\n    }\n    if(hist.length > 0)\n    {\n        long max = hist.values.max;\n\
    \        foreach(k, v; hist)\n        {\n            if(v == max)\n          \
    \  {\n                result = [k: v];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (test.empty) return null;\n    long[string] result;\n\
    \    foreach (letter; test.split)\n    {\n        if (result.contains(letter))\n\
    \        {\n            result[letter]++;\n        }\n        else\n        {\n\
    \            result[letter] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    foreach (key, value; result)\n    {\n        if (value != max)\n        {\n\
    \            result.remove(key);\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    else\n    {\n        long[string] histo;\n     \
    \   string[] words = test.split(\" \");\n        foreach(word; words)\n      \
    \  {\n            if(histo.count(word) == 0)\n            {\n                histo[word]\
    \ = 1;\n            }\n            else\n            {\n                histo[word]\
    \ += 1;\n            }\n        }\n        long max = maxElement(histo.values);\n\
    \        foreach(word; words)\n        {\n            if(histo[word] == max)\n\
    \            {\n                result[word] = max;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] counts;\n    foreach(char c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(!counts.contains(c))\n            counts[c]\
    \ = 0;\n        counts[c]++;\n    }\n    if(counts.length == 0)\n        return\
    \ result;\n    long max = counts.values.max;\n    foreach(char c; test)\n    {\n\
    \        if(c == ' ')\n            continue;\n        if(counts[c] == max)\n \
    \       {\n            result.insert(c, counts[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    auto words = test.split(\" \"\
    );\n    auto counts = words.map!(a => 1L).assocArray;\n    foreach (word; words)\n\
    \    {\n        counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    result = counts.filter!(a => a.value == max).values;\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    string[] words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \ {\n            dict[word]++;\n        }\n        else\n        {\n         \
    \   dict[word] = 1;\n        }\n    }\n    long max = max(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n        {\n          \
    \  result.set(dict);\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n\
    \        {\n            result[c]++;\n        }\n    }\n    if(result.length)\n\
    \    {\n        long max = maxElement(result.values);\n        long[string] max_result;\n\
    \        foreach(k, v; result)\n        {\n            if(v == max)\n        \
    \    {\n                max_result[k] = v;\n            }\n        }\n       \
    \ return max_result;\n    }\n    return null;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto arr = test.split(\" \");\n    long[string] map;\n    foreach (i, elem;\
    \ arr)\n    {\n        if (map.count(elem) == 0)\n        {\n            map[elem]\
    \ = 1;\n        }\n        else\n        {\n            map[elem]++;\n       \
    \ }\n    }\n    long max = 0;\n    foreach (key, value; map)\n    {\n        if\
    \ (value > max)\n        {\n            max = value;\n        }\n    }\n    long[string]\
    \ res;\n    foreach (key, value; map)\n    {\n        if (value == max)\n    \
    \    {\n            res[key] = value;\n        }\n    }\n    return res;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n \
    \   foreach(c; test.split)\n    {\n        if(hist.containsKey(c))\n        {\n\
    \            hist[c]++;\n        }\n        else\n        {\n            hist[c]\
    \ = 1;\n        }\n    }\n    if(hist.length > 0)\n    {\n        long max = maxElement(hist.values);\n\
    \        foreach(key, value; hist)\n        {\n            if(value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length)\n        {\n            result[c]++;\n        }\n\
    \    }\n    if(result.length)\n    {\n        long max = maxElement(result.values);\n\
    \        foreach(k, v; result)\n        {\n            if(v != max)\n        \
    \    {\n                result.remove(k);\n            }\n        }\n        return\
    \ result;\n    }\n    return null;\n}", "{\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.uni;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.uni;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.uni;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.uni;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.algorithm;\n  \
    \  import std.array;\n    import", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(!dict.contains(c))\n            {\n       \
    \         dict[c] = 1;\n            }\n            else\n            {\n     \
    \           dict[c]++;\n            }\n        }\n    }\n    if(dict.length >\
    \ 0)\n    {\n        long max = maxElement(dict.values);\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         counts[i] = 1;\n            foreach (j, other; words)\n            {\n\
    \                if (i != j && word == other)\n                {\n           \
    \         counts[i]++;\n                }\n            }\n        }\n        long\
    \ max = maxElement(counts);\n        result = new long[string];\n        foreach\
    \ (i, word; words)\n        {\n            if (counts[i] == max)\n           \
    \ {\n                result[word] = max;\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ tmp;\n    foreach(c; test.split())\n    {\n        if(tmp.count(c) == 0)\n \
    \       {\n            tmp[c] = 1;\n        }\n        else\n        {\n     \
    \       tmp[c]++;\n        }\n    }\n    if(tmp.length > 0)\n    {\n        long\
    \ max = maxElement(tmp.values);\n        foreach(k, v; tmp)\n        {\n     \
    \       if(v == max)\n            {\n                result[k] = v;\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    if (test.empty)\n  \
    \      return null;\n    auto result = new long[string];\n    foreach (ch; test.split)\n\
    \    {\n        if (ch.length != 1)\n            continue;\n        if (result.contains(ch))\n\
    \            result[ch]++;\n        else\n            result[ch] = 1;\n    }\n\
    \    long max = maxElement(result.values);\n    if (max == 1)\n        return\
    \ null;\n    auto res = new long[string];\n    foreach (k, v; result)\n    {\n\
    \        if (v == max)\n            res[k] = v;\n    }\n    return res;\n}", "{\n\
    \    long[string] result;\n    long max = 0;\n    foreach(c; test.split)\n   \
    \ {\n        if(c.length == 0)\n            continue;\n        if(result.length\
    \ == 0)\n            result[c] = 1;\n        else if(result.length == 1)\n   \
    \     {\n            if(result.byKey.front == c)\n                result[c] =\
    \ 2;\n            else\n                result[c] = 1;\n        }\n        else\n\
    \        {\n            if(result.byKey.front == c)\n                result[c]\
    \ = result[c] + 1;\n            else\n                result[c] = 1;\n       \
    \ }\n        max = max(max, result[c]);\n    }\n    if(result.length == 0)\n \
    \       return null;\n    else\n    {\n        long[string] res;\n        foreach(c;\
    \ result.byKey)\n        {\n            if(result[c] == max)\n               \
    \ res[c] = max;\n        }\n        return res;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         counts[i] = 0;\n            foreach (j, w; words)\n            {\n \
    \               if (word == w)\n                {\n                    counts[i]++;\n\
    \                }\n            }\n        }\n        long max = maxElement(counts);\n\
    \        string[] keys = new string[words.length];\n        foreach (i, word;\
    \ words)\n        {\n            if (counts[i] == max)\n            {\n      \
    \          keys ~= word;\n            }\n        }\n        result = new long[string](keys);\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] count;\n    foreach (letter; letters)\n\
    \    {\n        count[letter]++;\n    }\n    long max = maxElement(count.values);\n\
    \    foreach (key, value; count)\n    {\n        if (value == max)\n        {\n\
    \            result[key] = value;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    if (test.length == 0)\n     \
    \   return result;\n    long[string] dict = [test[0]: 1L];\n    long max = 1L;\n\
    \    for (size_t i = 1; i < test.length; i++)\n    {\n        if (test[i] in dict)\n\
    \        {\n            dict[test[i]]++;\n            if (dict[test[i]] > max)\n\
    \                max = dict[test[i]];\n        }\n        else\n            dict[test[i]]\
    \ = 1L;\n    }\n    if (max == 1L)\n        return result;\n    result = [test[0]:\
    \ dict[test[0]]];\n    for (size_t i = 1; i < test.length; i++)\n    {\n     \
    \   if (dict[test[i]] == max)\n            result[test[i]] = dict[test[i]];\n\
    \    }\n    return result;\n}", "{\n    long[string] result = null;\n    long[string]\
    \ max = null;\n    long[string] tmp = null;\n    foreach(c; test.split)\n    {\n\
    \        if(tmp.find(c) == null)\n        {\n            tmp[c] = 1;\n       \
    \ }\n        else\n        {\n            tmp[c]++;\n        }\n        if(max.find(c)\
    \ == null)\n        {\n            max[c] = 1;\n        }\n        else\n    \
    \    {\n            max[c]++;\n        }\n    }\n    foreach(c; max.keys)\n  \
    \  {\n        if(max[c] == max.values.max)\n        {\n            result[c] =\
    \ max[c];\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length > 0) \n    {\n        long[string] histogram;\n\
    \        foreach (letter; test.split) \n        {\n            if (histogram.contains(letter))\
    \ \n            {\n                histogram[letter]++;\n            } \n    \
    \        else \n            {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = max(histogram.values);\n        foreach\
    \ (letter; histogram.keys) \n        {\n            if (histogram[letter] == max)\
    \ \n            {\n                result.insert(letter, histogram[letter]);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] counts;\n    foreach\
    \ (word; words)\n    {\n        counts[word]++;\n    }\n    long max = max(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result = counts;\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    string[] words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n        {\n            dict[word] = 1;\n        }\n        else\n   \
    \     {\n            dict[word] += 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return null;\n    }\n    else\n    {\n        auto letters = test.split(\"\
    \ \");\n        long[string] letterCounts;\n        foreach(letter; letters)\n\
    \        {\n            if(letterCounts.count(letter) == 0)\n            {\n \
    \               letterCounts[letter] = 1;\n            }\n            else\n \
    \           {\n                letterCounts[letter]++;\n            }\n      \
    \  }\n        long maxCount = max(letterCounts.values);\n        foreach(letter;\
    \ letterCounts.keys)\n        {\n            if(letterCounts[letter] == maxCount)\n\
    \            {\n                result[letter] = maxCount;\n            }\n  \
    \      }\n        return result;\n    }\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] letters = new long[string];\n    foreach(char c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        letters[c]++;\n \
    \   }\n    long max = 0;\n    foreach(char c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(letters[c] > max)\n            max = letters[c];\n\
    \    }\n    foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(letters[c] == max)\n        {\n            if(result is null)\n  \
    \              result = new long[string];\n            result[c] = max;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] temp = [:];\n    foreach(c; test.split)\n    {\n \
    \       if(temp.containsKey(c))\n        {\n            temp[c]++;\n        }\n\
    \        else\n        {\n            temp[c] = 1;\n        }\n    }\n    if(temp.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = temp.values.max;\n\
    \    foreach(k, v; temp)\n    {\n        if(v == max)\n        {\n           \
    \ result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(hist.contains(c))\n        {\n            hist[c] += 1;\n  \
    \      }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = max(hist.values);\n    if(max > 0)\n    {\n        result = [:];\n\
    \        foreach(c; hist.keys)\n        {\n            if(hist[c] == max)\n  \
    \          {\n                result[c] = max;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[string] hist = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            if(hist.count(c))\n\
    \            {\n                hist[c] += 1;\n            }\n            else\n\
    \            {\n                hist[c] = 1;\n            }\n        }\n    }\n\
    \    if(hist.length == 0)\n    {\n        return null;\n    }\n    long max =\
    \ hist.values.max;\n    long[string] max_hist = [:];\n    foreach(key, value;\
    \ hist)\n    {\n        if(value == max)\n        {\n            max_hist[key]\
    \ = value;\n        }\n    }\n    return max_hist;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n\
    \        if(c.length == 1)\n        {\n            if(dict.contains(c))\n    \
    \        {\n                dict[c]++;\n            }\n            else\n    \
    \        {\n                dict[c] = 1;\n            }\n        }\n    }\n  \
    \  if(dict.length == 0)\n    {\n        return result;\n    }\n    long max =\
    \ dict.values.max;\n    foreach(k, v; dict)\n    {\n        if(v == max)\n   \
    \     {\n            result.insert(k, v);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] histo = [:];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n        \
    \    if(!histo.contains(c))\n            {\n                histo[c] = 1;\n  \
    \          }\n            else\n            {\n                histo[c] += 1;\n\
    \            }\n        }\n    }\n    if(histo.length)\n    {\n        long max\
    \ = maxElement(histo.values);\n        foreach(k, v; histo)\n        {\n     \
    \       if(v == max)\n            {\n                if(result.isNull)\n     \
    \           {\n                    result = [k: v];\n                }\n     \
    \           else\n                {\n                    result[k] = v;\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    long[string] histo;\n    foreach(c;\
    \ test.split())\n    {\n        if(histo.count(c) == 0)\n        {\n         \
    \   histo[c] = 1;\n        }\n        else\n        {\n            histo[c]++;\n\
    \        }\n    }\n    if(histo.length == 0)\n    {\n        return result;\n\
    \    }\n    long max = histo.values.max;\n    foreach(k, v; histo)\n    {\n  \
    \      if(v == max)\n        {\n            result.insert(k, v);\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] hist = [:];\n    foreach(c; test.split) \n    {\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    if(max > 0) \n    {\n   \
    \     result = [:];\n        foreach(c; hist.keys) \n        {\n            if(hist[c]\
    \ == max) \n            {\n                result[c] = max;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if(test.length == 0)\n    {\n        return result;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] hist = [words[0]:1];\n    foreach(word;\
    \ words[1..$])\n    {\n        if(word in hist)\n        {\n            hist[word]++;\n\
    \        }\n        else\n        {\n            hist[word] = 1;\n        }\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach(word; words)\n  \
    \  {\n        if(hist[word] == max)\n        {\n            result.insert(word,\
    \ hist[word]);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] letters = new long[string];\n    foreach(letter;\
    \ test.split())\n    {\n        letters[letter]++;\n    }\n    long max = max(letters.values);\n\
    \    if(max > 0)\n    {\n        result = new long[string];\n        foreach(letter;\
    \ letters.keys)\n        {\n            if(letters[letter] == max)\n         \
    \   {\n                result[letter] = max;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    auto counts = words.map!(a => a.length).array;\n    auto max = counts.max;\n\
    \    auto max_indexes = counts.filter!(a => a == max).array;\n    auto max_words\
    \ = words.filter!(a => a.length == max).array;\n    result = max_words.map!(a\
    \ => a.length).array;\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            if(hist.count(c) == 0)\n\
    \            {\n                hist[c] = 1;\n            }\n            else\n\
    \            {\n                hist[c]++;\n            }\n        }\n    }\n\
    \    if(hist.length > 0)\n    {\n        long max = maxElement(hist.values);\n\
    \        foreach(k, v; hist)\n        {\n            if(v == max)\n          \
    \  {\n                result = [k: v];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (word\
    \ in dict)\n        {\n            dict[word]++;\n        }\n        else\n  \
    \      {\n            dict[word] = 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict;\n    foreach(c; test.split(\" \"))\n    {\n        if(c in dict)\n   \
    \     {\n            dict[c]++;\n        }\n        else\n        {\n        \
    \    dict[c] = 1;\n        }\n        if(dict[c] > max)\n        {\n         \
    \   max = dict[c];\n        }\n    }\n    if(max > 0)\n    {\n        result =\
    \ new long[string];\n        foreach(c; dict.keys)\n        {\n            if(dict[c]\
    \ == max)\n            {\n                result[c] = max;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   if(max > 0)\n    {\n        result = new long[string];\n        foreach(c;\
    \ hist.keys)\n        {\n            if(hist[c] == max)\n            {\n     \
    \           result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        auto words = test.split(\"\
    \ \");\n        auto histo = words.assocArray;\n        foreach(word; words)\n\
    \        {\n            histo[word]++;\n        }\n        long max = maxElement(histo.values);\n\
    \        foreach(word; words)\n        {\n            if (histo[word] == max)\n\
    \            {\n                result[word] = max;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        string[] words = test.split(\" \");\n        long[string] counts;\n\
    \        foreach(word; words)\n        {\n            counts[word]++;\n      \
    \  }\n        long max = max(counts.values);\n        foreach(word; words)\n \
    \       {\n            if (counts[word] == max)\n            {\n             \
    \   result[word] = max;\n            }\n        }\n        return result;\n  \
    \  }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    if(max > 0)\n    {\n    \
    \    result = new long[string];\n        foreach(c; hist.keys)\n        {\n  \
    \          if(hist[c] == max)\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto words = test.split;\n    auto result = words.assocArray;\n\
    \    foreach (word; words)\n    {\n        result[word]++;\n    }\n    auto max\
    \ = result.values.max;\n    return result.filter!(x => x.value == max).values;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] dict;\n \
    \   foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(dict.count(c.to!string) == 0)\n            dict[c.to!string] = 1;\n\
    \        else\n            dict[c.to!string]++;\n    }\n    if(dict.length ==\
    \ 0)\n        return null;\n    long max = dict.values[0];\n    foreach(long v;\
    \ dict.values)\n    {\n        if(v > max)\n            max = v;\n    }\n    foreach(string\
    \ key; dict.keys)\n    {\n        if(dict[key] == max)\n            result[key]\
    \ = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] letters = new long[string];\n    foreach(c; test)\n\
    \    {\n        if(c != ' ')\n        {\n            letters[c.to!string]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(c; letters)\n    {\n       \
    \ if(c.value > max)\n        {\n            max = c.value;\n        }\n    }\n\
    \    foreach(c; letters)\n    {\n        if(c.value == max)\n        {\n     \
    \       if(result is null)\n            {\n                result = new long[string];\n\
    \            }\n            result[c.key] = c.value;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    string[] words = test.split(\"\
    \ \");\n    long[string] histogram;\n    foreach (word; words)\n    {\n      \
    \  if (histogram.contains(word))\n        {\n            histogram[word] += 1;\n\
    \        }\n        else\n        {\n            histogram[word] = 1;\n      \
    \  }\n    }\n    long max = max(histogram.values);\n    foreach (key, value; histogram)\n\
    \    {\n        if (value == max)\n        {\n            result.set(key, value);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n\
    \        }\n    }\n    long max = maxElement(result.values);\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    long[string] max_result;\n    foreach(c;\
    \ result)\n    {\n        if(c.value == max)\n        {\n            max_result[c.key]\
    \ = c.value;\n        }\n    }\n    return max_result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            if(result.count(c))\n            {\n                result[c]++;\n\
    \            }\n            else\n            {\n                result[c] = 1;\n\
    \            }\n        }\n    }\n    if(result.length)\n    {\n        long max\
    \ = result.values.max;\n        foreach(key, value; result)\n        {\n     \
    \       if(value != max)\n            {\n                result.remove(key);\n\
    \            }\n        }\n        return result;\n    }\n    return null;\n}",
  "{\n    import std.array;\n    import std.algorithm;\n    import std.range;\n  \
    \  import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.uni;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto words\
    \ = test.split(\" \");\n    auto counts = new long[words.length];\n    foreach\
    \ (i, word; words)\n    {\n        counts[i] = 0;\n        foreach (j, w; words)\n\
    \        {\n            if (word == w)\n            {\n                counts[i]++;\n\
    \            }\n        }\n    }\n    long max = maxElement(counts);\n    result\
    \ = new long[words.length];\n    foreach (i, word; words)\n    {\n        if (counts[i]\
    \ == max)\n        {\n            result[word] = counts[i];\n        }\n    }\n\
    \    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.find(c) is null)\n        {\n            result[c] =\
    \ 1;\n        }\n        else\n        {\n            result[c] += 1;\n      \
    \  }\n    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n\
    \    long max = result.values.max;\n    long[string] max_result;\n    foreach(c;\
    \ result.keys)\n    {\n        if(result[c] == max)\n        {\n            max_result[c]\
    \ = max;\n        }\n    }\n    return max_result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    long[string] counts;\n    foreach (word;\
    \ words)\n    {\n        counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (word; words)\n    {\n        if (counts[word] == max)\n        {\n\
    \            result.assign(counts);\n            break;\n        }\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] histogram;\n    foreach(word; words)\n    {\n       \
    \ if(histogram.count(word) == 0)\n        {\n            histogram[word] = 1;\n\
    \        }\n        else\n        {\n            histogram[word] += 1;\n     \
    \   }\n    }\n    long max = maxElement(histogram.values);\n    foreach(word;\
    \ histogram.keys)\n    {\n        if(histogram[word] == max)\n        {\n    \
    \        result[word] = max;\n        }\n    }\n    return result;\n}", "{\n \
    \   if (test.empty)\n        return null;\n    auto result = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (c.length != 1)\n            continue;\n\
    \        if (result.contains(c))\n            result[c]++;\n        else\n   \
    \         result[c] = 1;\n    }\n    long max = result.values.max;\n    if (max\
    \ == 0)\n        return null;\n    auto keys = result.keys.filter!(k => result[k]\
    \ == max);\n    return keys.map!(k => tuple(k, max)).assocArray;\n}", "{\n   \
    \ Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n        return\
    \ result;\n    }\n    auto words = test.split(\" \");\n    auto counts = words.map!(a\
    \ => 1L).assocArray;\n    foreach (word; words)\n    {\n        counts[word]++;\n\
    \    }\n    long max = counts.values.max;\n    result = counts.filter!(a => a.value\
    \ == max).values;\n    return result;\n}", "{\n    auto result = nullable!(long[string])();\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    auto counts = long[string](words.length);\n    foreach (word; words)\n\
    \    {\n        counts[word]++;\n    }\n    auto max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.insert(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] letterCount;\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCount.count(letter) == 0)\n    \
    \    {\n            letterCount[letter] = 1;\n        }\n        else\n      \
    \  {\n            letterCount[letter]++;\n        }\n    }\n    long max = letterCount.values.max;\n\
    \    foreach (letter; letterCount.keys)\n    {\n        if (letterCount[letter]\
    \ == max)\n        {\n            result[letter] = max;\n        }\n    }\n  \
    \  return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
