name: HumanEval_31_is_prime
language: d
results:
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9zver5d6.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9zver5d6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n\
    \        return false;\n    else\n    {\n        long i = 3;\n        while (i\
    \ <= sqrt(n))\n        {\n            if (n % i == 0)\n                return\
    \ false;\n            i += 2;\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphwra5_jy.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphwra5_jy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    if (n == 2) \n    {\n        return true;\n   \
    \ }\n    if (n % 2 == 0) \n    {\n        return false;\n    }\n    long i = 3;\n\
    \    while (i <= sqrt(n)) \n    {\n        if (n % i == 0) \n        {\n     \
    \       return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvqor36_.d(35): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjvqor36_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28ii66i2.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp28ii66i2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeknwiunk.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeknwiunk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp69nv5uf9.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp69nv5uf9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n    \
    \    if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2b2e5a5.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpo2b2e5a5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2x0kuhu.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd2x0kuhu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_a8jwsz9.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_a8jwsz9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    if (n <= 3) \n    {\n        return true;\n  \
    \  }\n    if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n\
    \    for (long i = 5; i * i <= n; i = i + 6) \n    {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    \n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwq95lg7j.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwq95lg7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2v25u9c.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph2v25u9c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    if (n == 2) \n    {\n        return true;\n   \
    \ }\n    if (n % 2 == 0) \n    {\n        return false;\n    }\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1jrb6d_.d(34): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpf1jrb6d_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    if (n <\
    \ 9) return true;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return\
    \ false;\n    long max = sqrt(n);\n    for (long i = 5; i <= max; i += 6) \n \
    \   {\n        if (n % i == 0) return false;\n        if (n % (i + 2) == 0) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9mivu6u.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpe9mivu6u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    else if (n <= 3) \n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0) \n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n\
    \        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n\
    \        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\n/*\nReturn the nth prime number.\n\
    \    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n\
    \    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n\
    \    13\n    >>> nth_prime(7)\n    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n\
    \    23\n    >>> nth_prime(10)\n    29\n    >>> nth_prime(11)\n    31\n    >>>\
    \ nth_prime(12)\n    37\n    >>> nth_prime(13)\n    41\n    >>> nth_prime(14)\n\
    \    43\n    >>> nth_prime(15)\n    47\n    >>> nth_prime(16)\n    53\n    >>>\
    \ nth_prime(17)\n    59\n    >>> nth_prime(18)\n    61\n    >>> nth_prime(19)\n\
    \    67\n    >>> nth_prime(20)\n    71\n    >>> nth_prime(21)\n    73\n    >>>\
    \ nth_prime(22)\n    79\n    >>> nth_prime(23)\n    83\n    >>> nth_prime(24)\n\
    \    89\n    >>> nth_prime(25)\n    97\n    >>> nth_prime(26)\n    101\n    >>>\
    \ nth_prime(27)\n    103\n    >>> nth_prime(\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefg5bf7c.d(45): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefg5bf7c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp115jy6z7.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp115jy6z7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    if (n <= 3) \n    {\n        return true;\n  \
    \  }\n    if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n\
    \    for (long i = 5; i * i <= n; i = i + 6) \n    {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeziowuta.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeziowuta.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_meg7un.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph_meg7un.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    for (long i = 2; i <= sqrt(n); i++) \n    {\n \
    \       if (n % i == 0) \n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0hn487b.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx0hn487b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i\
    \ + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n        return\
    \ false;\n    if (n == 2) \n        return true;\n    if (n % 2 == 0) \n     \
    \   return false;\n    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n      \
    \  if (n % i == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfh83rhra.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfh83rhra.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i\
    \ + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3kh1at1w.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3kh1at1w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    else if (n <= 3) \n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0) \n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w66jrwj.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8w66jrwj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (int i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i +\
    \ 2) == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n\
    \        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) \n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    for (long i = 2; i <= sqrt(n); i++) \n    {\n \
    \       if (n % i == 0) \n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvhn94xx.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphvhn94xx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\n/*\nReturn the nth prime number.\n    >>> nth_prime(1)\n\
    \    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n\
    \    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n    13\n    >>> nth_prime(7)\n\
    \    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n    23\n    >>> nth_prime(10)\n\
    \    29\n    >>> nth_prime(11)\n    31\n    >>> nth_prime(12)\n    37\n    >>>\
    \ nth_prime(13)\n    41\n    >>> nth_prime(14)\n    43\n    >>> nth_prime(15)\n\
    \    47\n    >>> nth_prime(16)\n    53\n    >>> nth_prime(17)\n    59\n    >>>\
    \ nth_prime(18)\n    61\n    >>> nth_prime(19)\n    67\n    >>> nth_prime(20)\n\
    \    71\n    >>> nth_prime(21)\n    73\n    >>> nth_prime(22)\n    79\n    >>>\
    \ nth_prime(23)\n    83\n    >>> nth_prime(24)\n    89\n    >>> nth_prime(25)\n\
    \    97\n    >>> nth_prime(26)\n    101\n    >>> nth_prime(27)\n    103\n    >>>\
    \ nth_prime(28)\n    107\n    >>> nth_prime(29)\n    109\n    >>> n\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkzvgcm4.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkzvgcm4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vpds2j2.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8vpds2j2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqc029af.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzqc029af.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_t651ik.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn_t651ik.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    long i = 3;\n    while (i <= sqrt(n))\n    {\n        if\
    \ (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4voqrpo.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx4voqrpo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n    \
    \    return false;\n    }\n    else if (n <= 3)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        for (long i = 5; i * i <= n; i += 6)\n      \
    \  {\n            if (n % i == 0 || n % (i + 2) == 0)\n            {\n       \
    \         return false;\n            }\n        }\n        return true;\n    }\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (int i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i +\
    \ 2) == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n\
    \        return false;\n    else\n    {\n        long i = 3;\n        while (i\
    \ <= sqrt(n))\n        {\n            if (n % i == 0)\n                return\
    \ false;\n            i += 2;\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprmnpdigi.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprmnpdigi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    if (n == 2) \n    {\n        return true;\n   \
    \ }\n    if (n % 2 == 0) \n    {\n        return false;\n    }\n    long m = cast(long)sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) \n    {\n        if (n % i == 0) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsodr2u04.d(34): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsodr2u04.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1f6iy9d1.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1f6iy9d1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n\
    \    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n    {\n     \
    \   return false;\n    }\n    else if (n == 2)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        for (long i = 3; i <= sqrt(n); i += 2)\n        {\n          \
    \  if (n % i == 0)\n            {\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5t2t0lp6.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5t2t0lp6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i*i <= n; i += 6)\n        if (n % i == 0 || n % (i+2) ==\
    \ 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    else if (n == 2) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0) \n    {\n        return false;\n    }\n    else\
    \ \n    {\n        for (long i = 3; i <= sqrt(n); i += 2) \n        {\n      \
    \      if (n % i == 0) \n            {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6qf9vqvi.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6qf9vqvi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2lsn92t.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw2lsn92t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else {\n        long i = 5;\n   \
    \     while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0)\n\
    \                return false;\n            i += 6;\n        }\n        return\
    \ true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n\
    \        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4pdas56.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpt4pdas56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04n8x516.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp04n8x516.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i\
    \ + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5pfk9_2s.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5pfk9_2s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n    \
    \    return false;\n    }\n    else if (n <= 3)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n   \
    \     {\n            if (n % i == 0 || n % (i + 2) == 0)\n            {\n    \
    \            return false;\n            }\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i +\
    \ 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt00hb0cr.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpt00hb0cr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n\
    \        return false;\n    else\n    {\n        long i = 3;\n        long max\
    \ = sqrt(n);\n        while (i <= max)\n        {\n            if (n % i == 0)\n\
    \                return false;\n            i += 2;\n        }\n        return\
    \ true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6rha6c3b.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6rha6c3b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i =\
    \ 3;\n    while (i <= sqrt(n))\n    {\n        if (n % i == 0) return false;\n\
    \        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuhbyb9e7.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpuhbyb9e7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i\
    \ + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return\
    \ false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n\
    \        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_4pk_si3.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_4pk_si3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpevjzcubk.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpevjzcubk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ssbejm0.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0ssbejm0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long limit\
    \ = sqrt(n);\n    for (long i = 3; i <= limit; i += 2) {\n        if (n % i ==\
    \ 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mzyn_qb.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4mzyn_qb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwslsaewm.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwslsaewm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcdjqmro.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwcdjqmro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpabdleybe.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpabdleybe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\n/*\nReturn the nth prime number.\n    >>> nth_prime(1)\n\
    \    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n\
    \    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n    13\n    >>> nth_prime(7)\n\
    \    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n    23\n    >>> nth_prime(10)\n\
    \    29\n    >>> nth_prime(11)\n    31\n    >>> nth_prime(12)\n    37\n    >>>\
    \ nth_prime(13)\n    41\n    >>> nth_prime(14)\n    43\n    >>> nth_prime(15)\n\
    \    47\n    >>> nth_prime(16)\n    53\n    >>> nth_prime(17)\n    59\n    >>>\
    \ nth_prime(18)\n    61\n    >>> nth_prime(19)\n    67\n    >>> nth_prime(20)\n\
    \    71\n    >>> nth_prime(21)\n    73\n    >>> nth_prime(22)\n    79\n    >>>\
    \ nth_prime(23)\n    83\n    >>> nth_prime(24)\n    89\n    >>> nth_prime(25)\n\
    \    97\n    >>> nth_prime(26)\n    101\n    >>> nth_prime(27)\n    103\n    >>>\
    \ nth_prime(28)\n    107\n    >>> nth_prime(29)\n    109\n    >>> nth_prime(30)\n\
    \    113\n    >>> nth_prime(31)\n    127\n    >>> nth_prime(32)\n    131\n   \n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqp27cw20.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp27cw20.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppt5x22br.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppt5x22br.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhvcz5yp.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvhvcz5yp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n    \
    \    return false;\n    }\n    else if (n <= 3)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n   \
    \     {\n            if (n % i == 0 || n % (i + 2) == 0)\n            {\n    \
    \            return false;\n            }\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmysad81.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvmysad81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppi_6_bd4.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppi_6_bd4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\n/*\nReturn the nth prime number.\n    >>> nth_prime(1)\n    2\n  \
    \  >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n\
    \    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n    13\n    >>> nth_prime(7)\n\
    \    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n    23\n    >>> nth_prime(10)\n\
    \    29\n    >>> nth_prime(11)\n    31\n    >>> nth_prime(12)\n    37\n    >>>\
    \ nth_prime(13)\n    41\n    >>> nth_prime(14)\n    43\n    >>> nth_prime(15)\n\
    \    47\n    >>> nth_prime(16)\n    53\n    >>> nth_prime(17)\n    59\n    >>>\
    \ nth_prime(18)\n    61\n    >>> nth_prime(19)\n    67\n    >>> nth_prime(20)\n\
    \    71\n    >>> nth_prime(21)\n    73\n    >>> nth_prime(22)\n    79\n    >>>\
    \ nth_prime(23)\n    83\n    >>> nth_prime(24)\n    89\n    >>> nth_prime(25)\n\
    \    97\n    >>> nth_prime(26)\n    101\n    >>> nth_prime(27)\n    103\n    >>>\
    \ nth_prime(28)\n    107\n    >>> nth_prime(29)\n    109\n    >>> nth_prime(30)\n\
    \    113\n    >>> nth_prime(31)\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph5npnw9t.d(33): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5npnw9t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyw4usjt.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbyw4usjt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8ir_f2t.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpe8ir_f2t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long m =\
    \ sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n        if (n % i == 0)\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpufd6nneh.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpufd6nneh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long m =\
    \ sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n    {\n        if (n % i ==\
    \ 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyufx927h.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyufx927h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcq4bvzuu.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcq4bvzuu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n    \
    \    return false;\n    }\n    if (n == 2) \n    {\n        return true;\n   \
    \ }\n    if (n % 2 == 0) \n    {\n        return false;\n    }\n    long i = 3;\n\
    \    long max = sqrt(n);\n    while (i <= max) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return false;\n        }\n        i += 2;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplypiqvp6.d(35): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplypiqvp6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4zxkviq.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj4zxkviq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ad_pnfs.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7ad_pnfs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2kg9zc6c.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2kg9zc6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n    \
    \    return false;\n    }\n    else if (n <= 3)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        for (long i = 5; i * i <= n; i += 6)\n      \
    \  {\n            if (n % i == 0 || n % (i + 2) == 0)\n            {\n       \
    \         return false;\n            }\n        }\n        return true;\n    }\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22p7w5_t.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp22p7w5_t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n   \
    \     return false;\n    }\n    else if (n <= 3) \n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) \n        {\n            return false;\n        }\n \
    \       i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    long i = 3;\n    while (i <= sqrt(n))\n    {\n        if\
    \ (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_hp4e_8.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph_hp4e_8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    if (n <\
    \ 9) return true;\n    if (n % 3 == 0) return false;\n    long r = (long)sqrt(n);\n\
    \    long f = 5;\n    while (f <= r) \n    {\n        if (n % f == 0) return false;\n\
    \        if (n % (f + 2) == 0) return false;\n        f += 6;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5pysa52w.d(27): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pysa52w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else {\n        long i = 5;\n   \
    \     while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0)\n\
    \                return false;\n            i += 6;\n        }\n        return\
    \ true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    else if (n <= 3) return true;\n    else if (n % 2 == 0 || n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzdpn55h.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjzdpn55h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mwi2nhl.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0mwi2nhl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n        return\
    \ false;\n    if (n == 2) \n        return true;\n    if (n % 2 == 0) \n     \
    \   return false;\n    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n      \
    \  if (n % i == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuc8bx6fq.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpuc8bx6fq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq5ync1vh.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq5ync1vh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else {\n        for (long i = 5;\
    \ i * i <= n; i += 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n     \
    \           return false;\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0)\n                return false;\n            i += 6;\n        }\n  \
    \      return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_sf5wrtu.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_sf5wrtu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0eegbm8.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw0eegbm8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (int i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2)\
    \ == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqw0642l5.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqw0642l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4lmja7t.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr4lmja7t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n    \
    \    return false;\n    }\n    else if (n <= 3)\n    {\n        return true;\n\
    \    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n\
    \    }\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0\
    \ || n % (i + 2) == 0)\n        {\n            return false;\n        }\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    long i = 3;\n    while (i <= sqrt(n))\n    {\n        if\
    \ (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0xjny54t.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0xjny54t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    long i = 3;\n    while (i < n) {\n        if (n % i == 0)\n\
    \            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hhddzv1.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0hhddzv1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n   \
    \     if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmped5faavw.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmped5faavw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n\
    \    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    for (long i = 5; i * i <= n; i += 6) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
