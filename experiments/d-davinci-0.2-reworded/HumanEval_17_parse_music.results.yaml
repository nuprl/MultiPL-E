name: HumanEval_17_parse_music
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfmkfevhp.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmkfevhp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkj2e6eem.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2e6eem.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] res;\n    foreach(e; music_string.split(\" \"\
    ))\n    {\n        if(e == \"o\")\n            res ~= 4;\n        else if(e ==\
    \ \"o|\")\n            res ~= 2;\n        else if(e == \".|\")\n            res\
    \ ~= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp669rhsqb.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp669rhsqb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[];\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                beats[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzn_gwukt.d(19): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpzn_gwukt.d(22): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzn_gwukt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'object.Exception@/tmp/tmp7_0i4y7t.d(33): Invalid character\\n----------------\\\
    n??:? long[] tmp7_0i4y7t.parse_music(immutable(char)[]) [0x427f53]\\n??:? void\
    \ tmp7_0i4y7t.__unittest_L38_C1() [0x427fe6]\\n??:? void tmp7_0i4y7t.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1a1]\\n??:? runModuleUnitTests [0x42d10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a88]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a0f]\\n??:? _d_run_main [0x42897a]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0xd0f19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ppra0g0.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ppra0g0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\
    \ in music string\");\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'object.Exception@/tmp/tmpzyll0888.d(33): Invalid character in music string\\\
    n----------------\\n??:? long[] tmpzyll0888.parse_music(immutable(char)[]) [0x427f53]\\\
    n??:? void tmpzyll0888.__unittest_L38_C1() [0x427fe6]\\n??:? void tmpzyll0888.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1a1]\\n??:? runModuleUnitTests [0x42d10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a88]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a0f]\\n??:? _d_run_main [0x42897a]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0x2b877554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafge84ub.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpafge84ub.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpafge84ub.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xa895c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto notes = music_string.split(\" \");\n    long[] result;\n\
    \    foreach(note; notes)\n    {\n        if(note == \"o\")\n            result\
    \ ~= 4;\n        else if(note == \"o|\")\n            result ~= 2;\n        else\
    \ if(note == \".|\")\n            result ~= 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09lnbsst.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09lnbsst.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbj_bfrqw.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpbj_bfrqw.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpbj_bfrqw.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xcd599554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxh1_aj9z.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpxh1_aj9z.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpxh1_aj9z.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpxh1_aj9z.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x4208d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] res;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            res ~= 4;\n        else if(c == '|')\n\
    \            res ~= 2;\n        else if(c == '.')\n            res ~= 1;\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppc07qh8_.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmppc07qh8_.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmppc07qh8_.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xe17f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4__9vpx.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4__9vpx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    return music_string.split(\" \").map!(x => x.length).array;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfg17ay2.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfg17ay2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1eiq5881.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmp1eiq5881.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmp1eiq5881.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x62814554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = appender!(long[])();\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result.put(4);\n\
    \                break;\n            case '|':\n                result.put(2);\n\
    \                break;\n            case '.':\n                result.put(1);\n\
    \                break;\n        }\n    }\n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4xi1axjc.d(19): Error: template instance `appender!(long[])`\
    \ template `appender` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4xi1axjc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7d5swg7.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7d5swg7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           break;\n            default:\n                assert(false);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvgcr6co6.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpvgcr6co6.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpvgcr6co6.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpvgcr6co6.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x2916d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp84hhqhh_.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84hhqhh_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'object.Exception@/tmp/tmpcnc00sm2.d(33): Invalid character\\n----------------\\\
    n??:? long[] tmpcnc00sm2.parse_music(immutable(char)[]) [0x427f53]\\n??:? void\
    \ tmpcnc00sm2.__unittest_L38_C1() [0x427fe6]\\n??:? void tmpcnc00sm2.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1a1]\\n??:? runModuleUnitTests [0x42d10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a88]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a0f]\\n??:? _d_run_main [0x42897a]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0xbea64554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqtwau9cq.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpqtwau9cq.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpqtwau9cq.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpqtwau9cq.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x42ad1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpaki55wfq.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpaki55wfq.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpaki55wfq.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpaki55wfq.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xce94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9280jnt.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9280jnt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpag14vlm1.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag14vlm1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpoymzdjpb.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpoymzdjpb.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpoymzdjpb.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpoymzdjpb.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x6cb97554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pg0c9ba.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pg0c9ba.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9oomuvc3.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp9oomuvc3.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp9oomuvc3.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp9oomuvc3.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x6f300554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ur3yeim.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ur3yeim.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lx359__.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lx359__.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph8_656r5.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmph8_656r5.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmph8_656r5.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xfd4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'object.Exception@/tmp/tmp21txitdo.d(33): Invalid character\\n----------------\\\
    n??:? long[] tmp21txitdo.parse_music(immutable(char)[]) [0x427f53]\\n??:? void\
    \ tmp21txitdo.__unittest_L38_C1() [0x427fe6]\\n??:? void tmp21txitdo.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1a1]\\n??:? runModuleUnitTests [0x42d10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a88]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a0f]\\n??:? _d_run_main [0x42897a]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0x41922554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpki3i4s6f.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpki3i4s6f.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpki3i4s6f.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpki3i4s6f.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x4ff97554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppbz9lukw.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbz9lukw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo7y7kj8e.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpo7y7kj8e.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpo7y7kj8e.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpo7y7kj8e.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xafb51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdeg_nkj4.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeg_nkj4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_nu2axux.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp_nu2axux.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp_nu2axux.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp_nu2axux.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x7311d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyey1ybbh.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyey1ybbh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpugr5716g.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugr5716g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjt3xmbp.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjt3xmbp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmoidmvwy.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpmoidmvwy.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpmoidmvwy.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xa16a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmphhe0q6a2.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmphhe0q6a2.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmphhe0q6a2.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmphhe0q6a2.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xb16cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl7zcq907.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpl7zcq907.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpl7zcq907.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpl7zcq907.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x82b0b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpz9wfgdso.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpz9wfgdso.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpz9wfgdso.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpz9wfgdso.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x1e680554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd4lrrkrw.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpd4lrrkrw.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpd4lrrkrw.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x3439b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           result[$-1] /= 4;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo6yodolk.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6yodolk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbbe2zvc3.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpbbe2zvc3.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpbbe2zvc3.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpbbe2zvc3.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x20955554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptt26vb9t.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmptt26vb9t.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmptt26vb9t.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmptt26vb9t.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xebd76554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpt5pdnuk2.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpt5pdnuk2.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpt5pdnuk2.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpt5pdnuk2.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xad495554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] res;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n            res ~= 4;\n        else if(c == '|')\n      \
    \      res ~= 2;\n        else if(c == '.')\n            res ~= 1;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb71l0yo_.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpb71l0yo_.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpb71l0yo_.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x4286554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpib30qifk.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpib30qifk.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpib30qifk.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpib30qifk.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xae398554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp5yre4_q.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpp5yre4_q.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpp5yre4_q.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpp5yre4_q.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xff23f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i;\n    int j;\n    int k;\n\
    \    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int\
    \ r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n\
    \    int y;\n    int z;\n    int aa;\n    int ab;\n    int ac;\n    int ad;\n\
    \    int ae;\n    int af;\n    int ag;\n    int ah;\n    int ai;\n    int aj;\n\
    \    int ak;\n    int al;\n    int am;\n    int an;\n    int ao;\n    int ap;\n\
    \    int aq;\n    int ar;\n    int as;\n    int at;\n    int au;\n    int av;\n\
    \    int aw;\n    int ax;\n    int ay;\n    int az;\n    int ba;\n    int bb;\n\
    \    int bc;\n    int bd;\n    int be;\n    int bf;\n    int bg;\n    int bh;\n\
    \    int bi;\n    int bj;\n    int bk;\n    int bl;\n    int bm;\n    int bn;\n\
    \    int bo;\n    int bp;\n    int bq;\n    int br;\n    int bs;\n    int bt;\n\
    \    int bu;\n    int bv;\n    int bw;\n    int bx;\n    int by;\n    int bz;\n\
    \    int ca;\n    int cb;\n    int cc;\n    int cd;\n    int ce;\n    int cf;\n\
    \    int cg;\n    int ch;\n    int ci;\n    int cj;\n    int ck;\n    int cl;\n\
    \    int cm;\n    int cn;\n    int co;\n    int cp;\n    int cq;\n    int cr;\n\
    \    int cs;\n    int ct;\n    int cu;\n    int cv;\n    int cw;\n    int cx;\n\
    \nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnd7sn60d.d(115): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnd7sn60d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn8be73pi.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpn8be73pi.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpn8be73pi.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpn8be73pi.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xc234c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = appender!(long[])();\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result.put(4);\n\
    \                break;\n            case '|':\n                result.put(2);\n\
    \                break;\n            case '.':\n                result.put(1);\n\
    \                break;\n        }\n    }\n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp78g3hny7.d(19): Error: template instance `appender!(long[])`\
    \ template `appender` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp78g3hny7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4gk59su3.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmp4gk59su3.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmp4gk59su3.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xc287c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    immutable(char)[] notes = music_string.split();\n\
    \    foreach(note; notes)\n    {\n        switch(note)\n        {\n          \
    \  case 'o':\n                result ~= 4;\n                break;\n         \
    \   case 'o|':\n                result ~= 2;\n                break;\n       \
    \     case '.|':\n                result ~= 1;\n                break;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbozoyos.d(28): Error: unterminated character constant\\n/tmp/tmptbozoyos.d(28):\
    \ Error: unterminated character constant\\n/tmp/tmptbozoyos.d(29): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmptbozoyos.d(29): Error: found `~=` instead\
    \ of statement\\n/tmp/tmptbozoyos.d(31): Error: unterminated character constant\\\
    n/tmp/tmptbozoyos.d(31): Error: unterminated character constant\\n/tmp/tmptbozoyos.d(32):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmptbozoyos.d(32): Error: found\
    \ `~=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptbozoyos.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpiwwpd0m0.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpiwwpd0m0.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpiwwpd0m0.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpiwwpd0m0.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x52b44554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            result ~= 4;\n        }\n\
    \        else if(c == '|')\n        {\n            result[$-1] /= 2;\n       \
    \ }\n        else if(c == '.')\n        {\n            result[$-1] /= 4;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfzftc93x.d(33): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285be]\\n??:? long[] tmpfzftc93x.parse_music(immutable(char)[])\
    \ [0x427f23]\\n??:? void tmpfzftc93x.__unittest_L38_C1() [0x42803f]\\n??:? void\
    \ tmpfzftc93x.__modtest() [0x428290]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42be0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430861]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bde5]\\n??:? runModuleUnitTests [0x42cd51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428957]\\n??:? _d_run_main [0x4288c2]\\n??:? main [0x4282a3]\\\
    n??:? __libc_start_main [0x76f27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        if(c == 'o') \n        {\n            result ~= 4;\n      \
    \  }\n        else if(c == '|') \n        {\n            result[$-1] /= 2;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmshcy3n7.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpmshcy3n7.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpmshcy3n7.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpmshcy3n7.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xb4b00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwx3cvxsj.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx3cvxsj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoay6hcos.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoay6hcos.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqcyagokt.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpqcyagokt.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpqcyagokt.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpqcyagokt.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xe9204554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2petvign.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2petvign.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 4;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 4)\n                {\n                   \
    \ result[$-1] = 8;\n                }\n                else\n                {\n\
    \                    result ~= 4;\n                }\n            }\n        }\n\
    \        else if(c == '|')\n        {\n            if(result[$-1] == 4)\n    \
    \        {\n                result[$-1] = 2;\n            }\n            else\n\
    \            {\n                result[$-1] = 1;\n            }\n        }\n \
    \       i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuhxkja6l.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285e5]\\n??:? void tmpuhxkja6l.__unittest_L56_C1()\
    \ [0x4280ff]\\n??:? void tmpuhxkja6l.__modtest() [0x428364]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d053]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bee6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430939]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4308c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bebd]\\n??:? runModuleUnitTests [0x42ce29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428aa8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a2f]\\n??:? _d_run_main [0x42899a]\\n??:? main [0x428377]\\\
    n??:? __libc_start_main [0x590c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmfafe0vc.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfafe0vc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpl1s_qosc.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpl1s_qosc.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpl1s_qosc.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpl1s_qosc.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x5045554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           break;\n            default:\n                assert(false);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4tsjvu9j.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp4tsjvu9j.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp4tsjvu9j.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp4tsjvu9j.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xeeff2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result = new long[1];\n                result[0] = 4;\n     \
    \       }\n            else\n            {\n                result ~= 4;\n   \
    \         }\n            i++;\n        }\n        else if(c == '|')\n        {\n\
    \            if(i == 0)\n            {\n                result = new long[1];\n\
    \                result[0] = 2;\n            }\n            else\n           \
    \ {\n                result ~= 2;\n            }\n            i++;\n        }\n\
    \        else if(c == '.')\n        {\n            if(i == 0)\n            {\n\
    \                result = new long[1];\n                result[0] = 1;\n     \
    \       }\n            else\n            {\n                result ~= 1;\n   \
    \         }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo_92aura.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285ed]\\n??:? void tmpo_92aura.__unittest_L65_C1()\
    \ [0x42817e]\\n??:? void tmpo_92aura.__modtest() [0x42836c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d0b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bf4a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a95]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a21]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bf21]\\n??:? runModuleUnitTests [0x42ce8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ab0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a37]\\n??:? _d_run_main [0x4289a2]\\n??:? main [0x42837f]\\\
    n??:? __libc_start_main [0x6d8fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result = new long[1];\n                result[0] = 4;\n     \
    \       }\n            else\n            {\n                result ~= 4;\n   \
    \         }\n            i++;\n        }\n        else if(c == '|')\n        {\n\
    \            if(result[i-1] == 4)\n            {\n                result[i-1]\
    \ = 2;\n            }\n            else\n            {\n                result[i-1]\
    \ = 1;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbbz43inq.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428626]\\n??:? long[] tmpbbz43inq.parse_music(immutable(char)[])\
    \ [0x427f32]\\n??:? void tmpbbz43inq.__unittest_L50_C1() [0x4280a7]\\n??:? void\
    \ tmpbbz43inq.__modtest() [0x4282f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d03f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bed2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ecc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bea9]\\n??:? runModuleUnitTests [0x42ce15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a38]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289bf]\\n??:? _d_run_main [0x42892a]\\n??:? main [0x42830b]\\\
    n??:? __libc_start_main [0x18fb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppcbcbb8t.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcbcbb8t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = [];\n    foreach(c; music_string)\n  \
    \  {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                beats[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxqomyth.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxqomyth.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4L, 2L, 1L, 2L,\
    \ 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtmmn8dt.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtmmn8dt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe2o8po99.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpe2o8po99.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpe2o8po99.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpe2o8po99.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x7f20554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6p5sm74g.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p5sm74g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = appender!(long[])();\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result.put(4);\n\
    \                break;\n            case '|':\n                result.put(2);\n\
    \                break;\n            case '.':\n                result.put(1);\n\
    \                break;\n        }\n    }\n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkyrnsj25.d(19): Error: template instance `appender!(long[])`\
    \ template `appender` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkyrnsj25.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            result ~= 4;\n        }\n\
    \        else if(c == '.')\n        {\n            result ~= 1;\n        }\n \
    \       else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5qbze7cd.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp5qbze7cd.__unittest_L38_C1()\
    \ [0x42808e]\\n??:? void tmp5qbze7cd.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdfe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430851]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdd5]\\n??:? runModuleUnitTests [0x42cd41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x5d120554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprzb08n5q.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmprzb08n5q.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmprzb08n5q.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmprzb08n5q.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xad821554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3no6ewod.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp3no6ewod.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp3no6ewod.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp3no6ewod.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xb3072554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 4;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 4)\n                {\n                   \
    \ result[$-1] = 8;\n                }\n                else\n                {\n\
    \                    result ~= 4;\n                }\n            }\n        }\n\
    \        else if(c == '|')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 2;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 2)\n                {\n                   \
    \ result[$-1] = 4;\n                }\n                else\n                {\n\
    \                    result ~= 2;\n                }\n            }\n        }\n\
    \        else if(c == '.')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 1;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 1)\n                {\n                   \
    \ result[$-1] = 2;\n                }\n                else\n                {\n\
    \                    result ~= 1;\n                }\n            }\n        }\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa84smesp.d(86): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42877d]\\n??:? void tmpa84smesp.__unittest_L81_C1()\
    \ [0x428297]\\n??:? void tmpa84smesp.__modtest() [0x4284fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d1eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c07e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c055]\\n??:? runModuleUnitTests [0x42cfc1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428c40]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428bc7]\\n??:? _d_run_main [0x428b32]\\n??:? main [0x42850f]\\\
    n??:? __libc_start_main [0x97cf4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscwiw5om.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscwiw5om.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp167d2mwj.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmp167d2mwj.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmp167d2mwj.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmp167d2mwj.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xd46ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpox3hajpw.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox3hajpw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            beats ~= 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            beats[$-1] /= 2;\n        }\n    }\n\
    \    return beats;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_jbgj0vc.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp_jbgj0vc.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp_jbgj0vc.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmp_jbgj0vc.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x5beea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkueu0fjm.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpkueu0fjm.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpkueu0fjm.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpkueu0fjm.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xd379c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj00xxtkc.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj00xxtkc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0l3gzrww.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp0l3gzrww.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp0l3gzrww.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp0l3gzrww.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x8fcfa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                beats ~= 4;\n            }\n       \
    \     else if(music_string[i+1] == '|')\n            {\n                beats\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       beats ~= 1;\n            }\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpy_4pyq3y.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpy_4pyq3y.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpy_4pyq3y.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpy_4pyq3y.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x12777554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpy036ihd_.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpy036ihd_.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpy036ihd_.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpy036ihd_.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x207fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpocdl88hp.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpocdl88hp.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpocdl88hp.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpocdl88hp.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x264f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr52v5fzl.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr52v5fzl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpk2uh1037.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpk2uh1037.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpk2uh1037.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpk2uh1037.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x3cc73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptnjlv2az.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmptnjlv2az.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmptnjlv2az.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmptnjlv2az.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x79bc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbd7hr7ho.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbd7hr7ho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrhvvttm.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrhvvttm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case 'o|':\n                result\
    \ ~= 2;\n                break;\n            case '.|':\n                result\
    \ ~= 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqm1daeas.d(27): Error: unterminated character constant\\n/tmp/tmpqm1daeas.d(27):\
    \ Error: unterminated character constant\\n/tmp/tmpqm1daeas.d(28): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpqm1daeas.d(28): Error: found `~=` instead\
    \ of statement\\n/tmp/tmpqm1daeas.d(30): Error: unterminated character constant\\\
    n/tmp/tmpqm1daeas.d(30): Error: unterminated character constant\\n/tmp/tmpqm1daeas.d(31):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpqm1daeas.d(31): Error: found\
    \ `~=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqm1daeas.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwhafm6y0.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhafm6y0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0vrpo_48.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp0vrpo_48.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp0vrpo_48.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmp0vrpo_48.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x437f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2fdhotp6.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp2fdhotp6.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp2fdhotp6.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp2fdhotp6.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x9b202554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxtjem1f1.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpxtjem1f1.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpxtjem1f1.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpxtjem1f1.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x59c23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfptsn90c.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfptsn90c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2pdeq_ak.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp2pdeq_ak.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp2pdeq_ak.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp2pdeq_ak.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x1ad6a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0sc33sw.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0sc33sw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats\
    \ ~= 2;\n                break;\n            case '.':\n                beats\
    \ ~= 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqwo6i7y.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqwo6i7y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4va29akw.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp4va29akw.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp4va29akw.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmp4va29akw.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x9348554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0fgfnbd6.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmp0fgfnbd6.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmp0fgfnbd6.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xae6b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2dor8sui.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dor8sui.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 4;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 4)\n                {\n                   \
    \ result[$-1] = 8;\n                }\n                else\n                {\n\
    \                    result ~= 4;\n                }\n            }\n        }\n\
    \        else if(c == '|')\n        {\n            if(result[$-1] == 4)\n    \
    \        {\n                result[$-1] = 2;\n            }\n            else\n\
    \            {\n                result[$-1] = 1;\n            }\n        }\n \
    \       i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6mvl1zgy.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285e5]\\n??:? void tmp6mvl1zgy.__unittest_L56_C1()\
    \ [0x4280ff]\\n??:? void tmp6mvl1zgy.__modtest() [0x428364]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d053]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bee6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430939]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4308c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bebd]\\n??:? runModuleUnitTests [0x42ce29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428aa8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a2f]\\n??:? _d_run_main [0x42899a]\\n??:? main [0x428377]\\\
    n??:? __libc_start_main [0x8fb30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj5kjz7yg.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpj5kjz7yg.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpj5kjz7yg.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpj5kjz7yg.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x858fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0txkrrtu.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0txkrrtu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpv5gognf0.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpv5gognf0.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpv5gognf0.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpv5gognf0.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xfe38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '.')\n\
    \            result ~= 1;\n        else if(c == '|')\n            result[$-1]\
    \ /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe90hrybj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpe90hrybj.__unittest_L31_C1()\
    \ [0x42808e]\\n??:? void tmpe90hrybj.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdfe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430851]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdd5]\\n??:? runModuleUnitTests [0x42cd41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x90ef7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    immutable string[] notes = music_string.split(\" \");\n\
    \    long[] result = new long[notes.length];\n    foreach(i, note; notes)\n  \
    \  {\n        if(note == \"o\")\n            result[i] = 4;\n        else if(note\
    \ == \"o|\")\n            result[i] = 2;\n        else if(note == \".|\")\n  \
    \          result[i] = 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaduakd44.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaduakd44.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp__8utlcg.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42857e]\\n??:? long[] tmp__8utlcg.parse_music(immutable(char)[])\
    \ [0x427ee2]\\n??:? void tmp__8utlcg.__unittest_L38_C1() [0x427fff]\\n??:? void\
    \ tmp__8utlcg.__modtest() [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430821]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bda5]\\n??:? runModuleUnitTests [0x42cd11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0x958e1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptjqjzb85.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmptjqjzb85.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmptjqjzb85.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmptjqjzb85.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x43169554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7k67_52a.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp7k67_52a.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp7k67_52a.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmp7k67_52a.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x8e3c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprj5sn3j1.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmprj5sn3j1.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmprj5sn3j1.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xbb941554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp545brxdn.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmp545brxdn.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmp545brxdn.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmp545brxdn.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xc9e70554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsoy_m5ro.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpsoy_m5ro.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpsoy_m5ro.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpsoy_m5ro.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x2083d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpe5b7u5yg.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpe5b7u5yg.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpe5b7u5yg.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpe5b7u5yg.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x17747554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcc8pss19.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcc8pss19.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvpxbtwdj.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpvpxbtwdj.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpvpxbtwdj.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpvpxbtwdj.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x4e56d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprnzm60jn.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmprnzm60jn.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmprnzm60jn.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x908c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdyjkai33.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyjkai33.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86dsrjsd.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86dsrjsd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4L, 2L, 1L, 2L,\
    \ 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4swu2evo.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4swu2evo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'object.Exception@/tmp/tmp9guc9yd9.d(33): Invalid character\\n----------------\\\
    n??:? long[] tmp9guc9yd9.parse_music(immutable(char)[]) [0x427f53]\\n??:? void\
    \ tmp9guc9yd9.__unittest_L38_C1() [0x427fe6]\\n??:? void tmp9guc9yd9.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1a1]\\n??:? runModuleUnitTests [0x42d10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a88]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a0f]\\n??:? _d_run_main [0x42897a]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0xdd23f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmh3xq3de.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmh3xq3de.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0473eutu.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmp0473eutu.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmp0473eutu.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmp0473eutu.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0x98365554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmakyw4pn.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpmakyw4pn.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpmakyw4pn.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpmakyw4pn.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xfbc5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfofmc5aj.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpfofmc5aj.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpfofmc5aj.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpfofmc5aj.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xb8287554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgkkt8_b2.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkkt8_b2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z47to06.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_z47to06.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvvrmt69.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvvrmt69.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1cie9o56.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cie9o56.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hiy8d0a.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hiy8d0a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu7no0ypv.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7no0ypv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a56pvik.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a56pvik.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9siadnir.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9siadnir.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzaqokefo.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpzaqokefo.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpzaqokefo.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpzaqokefo.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x26e28554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsn68r99c.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpsn68r99c.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpsn68r99c.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpsn68r99c.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x4b5a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_czs4dki.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp_czs4dki.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp_czs4dki.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp_czs4dki.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xf25ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64v48ufq.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64v48ufq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkocfpsgp.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkocfpsgp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpluus1d2u.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpluus1d2u.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpluus1d2u.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpluus1d2u.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xa0c53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           break;\n            default:\n                assert(0);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp_3d4yr7.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpp_3d4yr7.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpp_3d4yr7.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpp_3d4yr7.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x5a766554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    auto notes = music_string.split(\"\
    \ \");\n    foreach(note; notes)\n    {\n        if(note == \"o\")\n         \
    \   result ~= 4;\n        else if(note == \"o|\")\n            result ~= 2;\n\
    \        else if(note == \".|\")\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqzs3ea_.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqzs3ea_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpzxt9hnbf.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpzxt9hnbf.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpzxt9hnbf.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpzxt9hnbf.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xe31e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmlbhz_t.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmlbhz_t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                beats[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjto055d9.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjto055d9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpre14zobs.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre14zobs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4ttz_u8.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4ttz_u8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp142n_k3g.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp142n_k3g.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp142n_k3g.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmp142n_k3g.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x9df53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                beats ~=\
    \ 4;\n                break;\n            case '|':\n                beats ~=\
    \ 2;\n                break;\n            case '.':\n                beats ~=\
    \ 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgl6rxzj9.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl6rxzj9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfl0raev.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfl0raev.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(inout long beat; music_string)\n\
    \    {\n        switch(beat)\n        {\n            case 'o':\n             \
    \   result ~= 4;\n                break;\n            case 'o|':\n           \
    \     result ~= 2;\n                break;\n            case '.|':\n         \
    \       result ~= 1;\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2_dhyb9.d(27): Error: unterminated character constant\\n/tmp/tmph2_dhyb9.d(27):\
    \ Error: unterminated character constant\\n/tmp/tmph2_dhyb9.d(28): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmph2_dhyb9.d(28): Error: found `~=` instead\
    \ of statement\\n/tmp/tmph2_dhyb9.d(30): Error: unterminated character constant\\\
    n/tmp/tmph2_dhyb9.d(30): Error: unterminated character constant\\n/tmp/tmph2_dhyb9.d(31):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmph2_dhyb9.d(31): Error: found\
    \ `~=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph2_dhyb9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8a_29sl.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8a_29sl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwj4z9xv0.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj4z9xv0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n \
    \           result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpk68egtec.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpk68egtec.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpk68egtec.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpk68egtec.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x986ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5ecidr9.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5ecidr9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppu74yxzy.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmppu74yxzy.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmppu74yxzy.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmppu74yxzy.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x3b445554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = appender!(long[])();\n    foreach(ch; music_string)\n\
    \    {\n        switch(ch)\n        {\n            case 'o':\n               \
    \ result.put(4);\n                break;\n            case '|':\n            \
    \    result.put(2);\n                break;\n            case '.':\n         \
    \       result.put(1);\n                break;\n        }\n    }\n    return result.data;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvy_engig.d(19): Error: template instance `appender!(long[])`\
    \ template `appender` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvy_engig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result = new long[1];\n                result[0] = 4;\n     \
    \       }\n            else\n            {\n                result ~= 4;\n   \
    \         }\n            i++;\n        }\n        else if(c == '|')\n        {\n\
    \            if(i == 0)\n            {\n                result = new long[1];\n\
    \                result[0] = 2;\n            }\n            else\n           \
    \ {\n                result ~= 2;\n            }\n            i++;\n        }\n\
    \        else if(c == '.')\n        {\n            if(i == 0)\n            {\n\
    \                result = new long[1];\n                result[0] = 1;\n     \
    \       }\n            else\n            {\n                result ~= 1;\n   \
    \         }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzz0ytbpb.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285ed]\\n??:? void tmpzz0ytbpb.__unittest_L65_C1()\
    \ [0x42817e]\\n??:? void tmpzz0ytbpb.__modtest() [0x42836c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d0b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bf4a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a95]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a21]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bf21]\\n??:? runModuleUnitTests [0x42ce8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ab0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a37]\\n??:? _d_run_main [0x4289a2]\\n??:? main [0x42837f]\\\
    n??:? __libc_start_main [0x1cb71554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1s9o7sn.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1s9o7sn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmi3hy30e.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpmi3hy30e.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpmi3hy30e.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpmi3hy30e.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x5fffd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp36jmhs5m.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp36jmhs5m.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp36jmhs5m.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp36jmhs5m.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x16525554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptfyi1vao.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmptfyi1vao.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmptfyi1vao.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xd6ddd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmppsinjj5t.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmppsinjj5t.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmppsinjj5t.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmppsinjj5t.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xdf25a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt7xpp_z3.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7xpp_z3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxswnj7l.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxswnj7l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] res;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n            res ~= 4;\n        else if(c == '|')\n      \
    \      res ~= 2;\n        else if(c == '.')\n            res ~= 1;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi7pg6yli.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpi7pg6yli.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpi7pg6yli.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x7a2fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpr_g69tn4.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpr_g69tn4.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpr_g69tn4.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpr_g69tn4.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xf6c91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgvrq8x9h.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpgvrq8x9h.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpgvrq8x9h.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmpgvrq8x9h.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xcbe90554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vr7_lg7.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vr7_lg7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprxwqrio0.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmprxwqrio0.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmprxwqrio0.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmprxwqrio0.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x6c310554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[];\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n            beats ~= 4;\n        else if(c == '|')\n\
    \            beats ~= 2;\n        else if(c == '.')\n            beats ~= 1;\n\
    \    }\n    return beats;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2eno171.d(19): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu2eno171.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzde0vr5i.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpzde0vr5i.__unittest_L31_C1()\
    \ [0x42807e]\\n??:? void tmpzde0vr5i.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430759]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd51]\\n??:? runModuleUnitTests [0x42ccbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42893c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c3]\\n??:? _d_run_main [0x42882e]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x40810554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjncoxrzo.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpjncoxrzo.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpjncoxrzo.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpjncoxrzo.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x24c7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8d_7qwdr.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmp8d_7qwdr.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmp8d_7qwdr.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmp8d_7qwdr.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x236ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_1r09trx.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1r09trx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm0891y19.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0891y19.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9niy2mag.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9niy2mag.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(i; 0 .. music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            if(music_string[i+1]\
    \ == ' ')\n            {\n                result ~= 4;\n            }\n      \
    \      else if(music_string[i+1] == '|')\n            {\n                result\
    \ ~= 2;\n            }\n        }\n        else if(music_string[i] == '.')\n \
    \       {\n            if(music_string[i+1] == '|')\n            {\n         \
    \       result ~= 1;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsnoq53c6.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42865e]\\n??:? long[] tmpsnoq53c6.parse_music(immutable(char)[])\
    \ [0x427eb1]\\n??:? void tmpsnoq53c6.__unittest_L43_C1() [0x428066]\\n??:? void\
    \ tmpsnoq53c6.__modtest() [0x42832c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d01b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430901]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430db0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43088d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be85]\\n??:? runModuleUnitTests [0x42cdf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289f7]\\n??:? _d_run_main [0x428962]\\n??:? main [0x42833f]\\\
    n??:? __libc_start_main [0xee433554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    long[] temp;\n    int i;\n    int\
    \ j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n\
    \    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int\
    \ w;\n    int x;\n    int y;\n    int z;\n    int aa;\n    int bb;\n    int cc;\n\
    \    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n\
    \    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n\
    \    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n\
    \    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n\
    \    int bbb;\n    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int\
    \ ggg;\n    int hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n\
    \    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int\
    \ rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n\
    \    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int\
    \ cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n\
    \    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n \
    \   int nnnn;\n    int oooo;\n    int pppp;\n   \nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2eo28fpg.d(108): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2eo28fpg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3fxa9_mk.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fxa9_mk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbgnr4x4.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbgnr4x4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp313ewgyd.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp313ewgyd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ngl9h15.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ngl9h15.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprr0qx39o.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr0qx39o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0tsprj8.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0tsprj8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgz5qtnx_.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpgz5qtnx_.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpgz5qtnx_.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpgz5qtnx_.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x96fe6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '.')\n        {\n            result ~= 1;\n        }\n       \
    \ else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfwghoy6u.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpfwghoy6u.__unittest_L37_C1()\
    \ [0x42808e]\\n??:? void tmpfwghoy6u.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdfe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430851]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdd5]\\n??:? runModuleUnitTests [0x42cd41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfe841554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn81rnktm.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpn81rnktm.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpn81rnktm.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpn81rnktm.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xd0f66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp35ylfxb.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp35ylfxb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv5xpzfa1.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpv5xpzfa1.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpv5xpzfa1.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpv5xpzfa1.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x2b661554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                beats ~=\
    \ 4;\n                break;\n            case '|':\n                beats ~=\
    \ 2;\n                break;\n            case '.':\n                beats ~=\
    \ 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjnfdew2.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjnfdew2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            result ~= 4;\n        }\n\
    \        else if(c == '.')\n        {\n            result ~= 1;\n        }\n \
    \       else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy1jhdknw.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpy1jhdknw.__unittest_L38_C1()\
    \ [0x42808e]\\n??:? void tmpy1jhdknw.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdfe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430851]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdd5]\\n??:? runModuleUnitTests [0x42cd41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xa0a7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxg59wmwe.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg59wmwe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpu86svnkr.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmpu86svnkr.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmpu86svnkr.__unittest_L29_C1() [0x427ff7]\\n??:? void\
    \ tmpu86svnkr.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0x4c1ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvogeoscj.d(33): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x4284d5]\\n??:? long[] tmpvogeoscj.parse_music(immutable(char)[])\
    \ [0x427f35]\\n??:? void tmpvogeoscj.__unittest_L38_C1() [0x427fc2]\\n??:? void\
    \ tmpvogeoscj.__modtest() [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d027]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42beba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43090d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430899]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42be91]\\n??:? runModuleUnitTests [0x42cdfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a7c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a03]\\n??:? _d_run_main [0x42896e]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x84167554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdehz12v.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdehz12v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
