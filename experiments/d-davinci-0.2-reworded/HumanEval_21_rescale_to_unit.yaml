name: HumanEval_21_rescale_to_unit
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of at\
  \ least two elements), apply a linear transform to that array,\n    such that the\
  \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
  \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
  \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  }\nvoid main(){}"
completions: ["{\n    float min = min(numbers);\n    float max = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n; numbers)\n\
    \    {\n        if(n < min)\n            min = n;\n        if(n > max)\n     \
    \       max = n;\n    }\n    float scale = 1.0f / (max - min);\n    foreach(i,\
    \ n; numbers)\n    {\n        result[i] = (n - min) * scale;\n    }\n    return\
    \ result;\n}", "{\n    float min_value = min(numbers);\n    float max_value =\
    \ max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float min = minElement(numbers);\n    float max = maxElement(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(i, n; numbers)\n    {\n        if (n < min)\n            min = n;\n\
    \        if (n > max)\n            max = n;\n    }\n    float range = max - min;\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / range;\n \
    \   }\n    return result;\n}", "{\n    float min = minElement(numbers);\n    float\
    \ max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    foreach(i, number; numbers)\n    {\n        result[i]\
    \ = (number - min_value) / (max_value - min_value);\n    }\n    return result;\n\
    }\n/*\n Given a list of numbers, return a list of tuples, where each tuple contains\
    \ the original number and its square\n    >>> square_numbers([1, 2, 3, 4, 5])\n\
    \    [(1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n*/\nTuple!(int, int)[] square_numbers(int[]\
    \ numbers)\n{\n    Tuple!(int, int)[] result = new Tuple!(int, int)[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = tuple(number, number\
    \ * number);\n    }\n    return result;\n}\n/*\n Given a list of numbers, return\
    \ a list of tuples, where each tuple contains the original number and its square\n\
    \    >>> square_numbers([1, 2, 3, 4, 5])\n    [(1, 1), (2, 4), (3, 9), (4, 16),\
    \ (5, 25)]\n*/\nTuple!(int, int)[] square_numbers(int[] numbers)\n{\n    Tuple!(int,\
    \ int)[] result = new Tuple!(int, int)[numbers.length];\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = tuple(number, number * number);\n    }\n\
    \    return result;\n}\n/*\n Given a list of numbers, return a list of tuples,\
    \ where each tuple contains the original number and its square\n    >>> square_numbers([1,\
    \ 2, 3, 4, 5])\n    [(1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n*/\nTuple!(int,\
    \ int)[] square_numbers(int[] numbers)\n{\n    Tuple!(int, int)", "{\n    float\
    \ min = min(numbers);\n    float max = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = min(numbers);\n    float max =\
    \ max(numbers);\n    foreach(i, n; numbers)\n    {\n        result[i] = (n - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    foreach(i, num; numbers) \n    {\n        if (num < min)\
    \ \n        {\n            min = num;\n        }\n        if (num > max) \n  \
    \      {\n            max = num;\n        }\n    }\n    float range = max - min;\n\
    \    foreach(i, num; numbers) \n    {\n        result[i] = (num - min) / range;\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    foreach(i, num; numbers) \n\
    \    {\n        if (num < min) \n        {\n            min = num;\n        }\n\
    \        if (num > max) \n        {\n            max = num;\n        }\n    }\n\
    \    float range = max - min;\n    foreach(i, num; numbers) \n    {\n        result[i]\
    \ = (num - min) / range;\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float[]", "{\n  \
    \  float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such",
  "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float[] result;\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    foreach(i, number; numbers)\n    {\n     \
    \   result ~= (number - min) / (max - min);\n    }\n    return result;\n}", "{\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n    \
    \    result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float range = max - min;\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = (number - min) / range;\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ range;\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ range;\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n   ", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    foreach(i, number;\
    \ numbers)\n    {\n        if(number < min)\n            min = number;\n     \
    \   if(number > max)\n            max = number;\n    }\n    float range = max\
    \ - min;\n    foreach(i, number; numbers)\n    {\n        result[i] = (number\
    \ - min) / range;\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    foreach(i, number;\
    \ numbers)\n    {\n        min = min(min, number);\n        max = max(max, number);\n\
    \    }\n    float range = max - min;\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / range;\n    }\n    return result;\n}", "{\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min_number = min(numbers);\n    float max_number\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min\
    \ = minElement(numbers);\n    float max = maxElement(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers) \n    {\n      \
    \  if (number < min) \n        {\n            min = number;\n        }\n     \
    \   if (number > max) \n        {\n            max = number;\n        }\n    }\n\
    \    float range = max - min;\n    foreach(i, number; numbers) \n    {\n     \
    \   result[i] = (number - min) / range;\n    }\n    return result;\n}", "{\n \
    \   float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    auto min_max = minmax(numbers);\n    auto min_value = min_max[0];\n\
    \    auto max_value = min_max[1];\n    auto range = max_value - min_value;\n \
    \   return numbers.map!((x) => (x - min_value) / range);\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min_val\
    \ = min(numbers);\n    float max_val = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n  \
    \  return result;\n}", "{\n    assert(numbers.length >= 2);\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n      \
    \  result[i] = (number - min_number) / (max_number - min_number);\n    }\n   \
    \ return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n    }\n    float range = max - min;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / range;\n    }\n    return\
    \ result;\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.length; i++)\
    \ {\n        result[i] = (numbers[i] - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min_value =\
    \ min(numbers);\n    float max_value = max(numbers);\n    float range = max_value\
    \ - min_value;\n    for (int i = 0; i < numbers.length; i++) \n    {\n       \
    \ result[i] = (numbers[i] - min_value) / range;\n    }\n    return result;\n}\n\
    /*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float[] result = new float[numbers.length];\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float range = max_value - min_value;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min_value) / range;\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float[] result =\
    \ new float[numbers.length];\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float range = max_value - min_value;\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i] = (", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such",
  "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(n; numbers) \n    {\n        min = min(min, n);\n        max = max(max,\
    \ n);\n    }\n    foreach(i, n; numbers) \n    {\n        result[i] = (n - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_val = min(numbers);\n\
    \    float max_val = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_val) / (max_val - min_val);\n    }\n    return result;\n}\n/*\n Given\
    \ array of numbers (of at least two elements), apply a linear transform to that\
    \ array,\n    such that the smallest number will become 0 and the largest will\
    \ become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n  \
    \  float min_val = min(numbers);\n    float max_val = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_val = min(numbers);\n    float max_val = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n\
    \    }\n    return result;", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers,\
    \ return a list where each element has been rounded to the nearest integer\n \
    \   >>> round_to_int([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1, 2, 3, 4, 5]\n    >>>\
    \ round_to_int([1.1, 2.1, 3.1, 4.1, 5.1])\n    [1, 2, 3, 4, 5]\n    >>> round_to_int([1.5,\
    \ 2.5, 3.5, 4.5, 5.5])\n    [2, 3, 4, 5, 6]\n    >>> round_to_int([1.9, 2.9, 3.9,\
    \ 4.9, 5.9])\n    [2, 3, 4, 5, 6]\n*/", "{\n    float min = min(numbers);\n  \
    \  float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest", "{\n    float[] result = new float[numbers.length];\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    foreach(n; numbers)\n\
    \    {\n        if(n < min) min = n;\n        if(n > max) max = n;\n    }\n  \
    \  float range = max - min;\n    foreach(i, n; numbers)\n    {\n        result[i]\
    \ = (n - min) / range;\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(n; numbers) \n    {\n        min = min(min,\
    \ n);\n        max = max(max, n);\n    }\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers) \n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n   \
    \ float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min_number) / (max_number - min_number);\n    }\n    return result;\n}", "{\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    foreach(i, number; numbers)\
    \ \n    {\n        if (number < min) \n        {\n            min = number;\n\
    \        }\n        if (number > max) \n        {\n            max = number;\n\
    \        }\n    }\n    float scale = 1.0 / (max - min);\n    foreach(i, number;\
    \ numbers) \n    {\n        result[i] = (number - min) * scale;\n    }\n    return\
    \ result;\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n   \
    \     result[i] = (n - min) / (max - min);\n    }\n    return result;\n}\n/*\n\
    \ Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n        result[i]\
    \ = (n - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of\
    \ numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,", "{\n \
    \   float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n            min = number;\n        if(number > max)\n    \
    \        max = number;\n    }\n    float scale = 1.0f / (max - min);\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) * scale;\n    }\n\
    \    return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers) \n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers) \n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float range\
    \ = max - min;\n    foreach(i, number; numbers)\n    {\n        result[i] = (number\
    \ - min) / range;\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ range;\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ range;\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n   ", "{\n    float min\
    \ = minElement(numbers);\n    float max = maxElement(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n            min = number;\n        if(number > max)\n    \
    \        max = number;\n    }\n    foreach(i, number; numbers)\n    {\n      \
    \  result[i] = (number - min) / (max - min);\n    }\n    return result;\n}", "{\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float min_value = min(numbers);\n    float max_value = max(numbers);\n   \
    \ float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n    }\n  \
    \  return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float min = minElement(numbers);\n    float max = maxElement(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n            min = numbers[i];\n        if (numbers[i] > max)\n       \
    \     max = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    foreach(i, n; numbers)\n\
    \    {\n        if (n < min)\n            min = n;\n        if (n > max)\n   \
    \         max = n;\n    }\n    float range = max - min;\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / range;\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min_value = min(numbers);\n    float max_value =\
    \ max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] < min)\n            min = numbers[i];\n        if\
    \ (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++)\n    {\n \
    \       result[i] = (numbers[i] - min) * scale;\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) \n    {\n        if (numbers[i] < min) \n        {\n\
    \            min = numbers[i];\n        }\n        if (numbers[i] > max) \n  \
    \      {\n            max = numbers[i];\n        }\n    }\n    for (int i = 0;\
    \ i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_value = min(numbers);\n    float max_value = max(numbers);\n  \
    \  float range = max_value - min_value;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / range;\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to", "{\n    float min_n\
    \ = min(numbers);\n    float max_n = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_n) / (max_n - min_n);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n;\
    \ numbers) \n    {\n        min = min(min, n);\n        max = max(max, n);\n \
    \   }\n    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\
    \ \n    {\n        result[i] = (n - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n            min = number;\n        if(number > max)\n    \
    \        max = number;\n    }\n    foreach(i, number; numbers)\n    {\n      \
    \  result[i] = (number - min) / (max - min);\n    }\n    return result;\n}", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n            min = number;\n        if(number > max)\n    \
    \        max = number;\n    }\n    float range = max - min;\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = (number - min) / range;\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given two arrays of numbers (of the same length),\
    \ apply a linear transform to each of them,\n    such that the smallest number\
    \ in each array will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0])\n    [[0.0, 0.25, 0.5, 0.75,\
    \ 1.0], [0.0, 0.25, 0.5, 0.75, 1.0]]\n*/\nfloat[][] rescale_to_unit(float[] numbers1,\
    \ float[] numbers2) \n{\n    float[] min_values = new float[2];\n    float[] max_values\
    \ = new float[2];\n    min_values[0] = min(numbers1);\n    min_values[1] = min(numbers2);\n\
    \    max_values[0] = max(numbers1);\n    max_values[1] = max(numbers2);\n    float[][]\
    \ result = new float[2][];\n    result[0] = new float[numbers1.length];\n    result[1]\
    \ = new float[numbers2.length];\n    foreach(i, number; numbers1)\n    {\n   \
    \     result[0][i] = (number - min_values[0]) / (max_values[0] - min_values[0]);\n\
    \    }\n    foreach(i, number; numbers2)\n    {\n        result[1][i] = (number\
    \ - min_values[1]) / (max_values[1] - min_values[1]);\n    }\n    return result;\n\
    }\n/*\n Given three arrays of numbers (of the same length), apply a linear transform\
    \ to", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1", "{\n    float\
    \ min = minElement(numbers);\n    float max = maxElement(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float range = max - min;\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = (number - min) / range;\n    }\n    return\
    \ result;\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such",
  "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers) \n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0", "{\n  \
    \  float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(float number; numbers)\n    {\n        if(number < min)\n       \
    \     min = number;\n        if(number > max)\n            max = number;\n   \
    \ }\n    float range = max - min;\n    foreach(int i, float number; numbers)\n\
    \    {\n        result[i] = (number - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest", "{\n    float[] result = new float[numbers.length];\n  \
    \  float min = min(numbers);\n    float max = max(numbers);\n    float range =\
    \ max - min;\n    foreach(i, number; numbers)\n    {\n        result[i] = (number\
    \ - min) / range;\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers) \n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0", "{\n  \
    \  float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float max = numbers[0];\n    float min = numbers[0];\n    foreach(n; numbers)\n\
    \    {\n        if(n > max)\n            max = n;\n        if(n < min)\n     \
    \       min = n;\n    }\n    foreach(i, n; numbers)\n    {\n        result[i]\
    \ = (n - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, v; numbers)\n    {\n        result[i] = (v - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest", "{\n \
    \   float min = minElement(numbers);\n    float max = maxElement(numbers);\n \
    \   return map!((x) => (x - min) / (max - min))(numbers);\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(n; numbers)\n    {\n        min = min(min, n);\n        max = max(max,\
    \ n);\n    }\n    float range = max - min;\n    foreach(i, n; numbers)\n    {\n\
    \        result[i] = (n - min) / range;\n    }\n    return result;\n}", "{\n \
    \   float min = minElement(numbers);\n    float max = maxElement(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, x; numbers)\n    {\n        result[i] = (x - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = min(numbers);\n    float max =\
    \ max(numbers);\n    float range = max - min;\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] scaled_numbers = new float[numbers.length];\n    foreach(i, number;\
    \ numbers)\n    {\n        scaled_numbers[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return scaled_numbers;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,", "{\n \
    \   float min = minElement(numbers);\n    float max = maxElement(numbers);\n \
    \   float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0,", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(n; numbers)\n    {\n        if(n < min)\n            min = n;\n \
    \       if(n > max)\n            max = n;\n    }\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such", "{\n    float[] result =\
    \ new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(n; numbers)\n    {\n        if(n < min)\n            min = n;\n \
    \       if(n > max)\n            max = n;\n    }\n    float range = max - min;\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / range;\n \
    \   }\n    return result;\n}", "{\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    foreach(i, number; numbers) \n    {\n        result[i]\
    \ = (number - min_value) / (max_value - min_value);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float range = max - min;\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = (number - min) / range;\n    }\n    return\
    \ result;\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,", "{\n \
    \   float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float range = max - min;\n    foreach(i, number; numbers)\n    {\n      \
    \  result[i] = (number - min) / range;\n    }\n    return result;\n}", "{\n  \
    \  float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n            min = number;\n        if(number > max)\n    \
    \        max = number;\n    }\n    float range = max - min;\n    foreach(i, number;\
    \ numbers)\n    {\n        result[i] = (number - min) / range;\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
