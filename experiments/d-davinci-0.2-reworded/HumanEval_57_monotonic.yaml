name: HumanEval_57_monotonic
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn true is array elements\
  \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n\
  \    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
  \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n         \
    \   decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    long[]\
    \ l2 = l[0..$-1];\n    long[] l3 = l[1..$];\n    return l2.zip(l3).all!((a, b)\
    \ => a <= b || a >= b);\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2) return true;\n   \
    \ long prev = l[0];\n    bool increasing = true;\n    foreach (i, e; l) {\n  \
    \      if (i == 0) continue;\n        if (e == prev) continue;\n        if (increasing)\
    \ {\n            if (e < prev) {\n                increasing = false;\n      \
    \      }\n        } else {\n            if (e > prev) {\n                return\
    \ false;\n            }\n        }\n        prev = e;\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && v < l[i - 1])\n            {\n                return\
    \ false;\n            }\n            if (!increasing && v > l[i - 1])\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n    \n*/", "{\n    if (l.length < 2)\n    {\n        return\
    \ true;\n    }\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1])\n        {\n  \
    \          return false;\n        }\n        if (!increasing && l[i] < l[i + 1])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    /*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    \    \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n  \
    \      {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, x; l[1..$]) \n   \
    \ {\n        if (increasing && x < l[i - 1]) \n        {\n            return false;\n\
    \        }\n        if (!increasing && x > l[i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn the index of\
    \ the first element in the array that is greater than or equal to the given value.\n\
    \    >>> binarySearch([1L, 2L, 4L, 20L], 3L)\n    2\n    >>> binarySearch([1L,\
    \ 2L, 4L, 20L], 5L)\n    3\n    >>> binarySearch([1L, 2L, 4L, 20L], 0L)\n    0\n\
    \    >>> binarySearch([1L, 2L, 4L, 20L], -1L)\n    0\n    >>> binarySearch([1L,\
    \ 2L, 4L, 20L], 21L)\n    4\n    >>> binarySearch([1L, 2L, 4L, 20L], 1L)\n   \
    \ 0\n    >>> binarySearch([1L, 2L, 4L, 20L], 2L)\n    1\n    >>> binarySearch([1L,\
    \ 2L, 4L, 20L], 4L)\n    2\n    >>> binarySearch([1L, 2L, 4L, 20L], 20L)\n   \
    \ 3\n*/\nsize_t binarySearch(long[] l, long x) \n{\n    if (l.length == 0) \n\
    \    {\n        return 0;\n    }\n    if (x <= l[0]) \n    {\n        return 0;\n\
    \    }\n    if (x > l[$ - 1]) \n    {\n        return l.length;\n    }\n    size_t\
    \ lo = 0;\n    size_t hi = l.length;\n    while (lo + 1 < hi) \n    {\n      \
    \  size_t mid = (lo + hi) / 2;\n        if (l[mid] < x) \n       ", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n \
    \   for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i]\
    \ > l[i + 1])\n            return false;\n        if (!increasing && l[i] < l[i\
    \ + 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) return true;\n    long first\
    \ = l[0];\n    long last = l[0];\n    for (long i = 1; i < l.length; i++)\n  \
    \  {\n        if (l[i] < first)\n        {\n            first = l[i];\n      \
    \      last = l[i];\n        }\n        else if (l[i] > last)\n        {\n   \
    \         last = l[i];\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <\
    \ 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach (i,\
    \ v; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && l[i] < l[i - 1])\n            return false;\n        if (!increasing && l[i]\
    \ > l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1])\n            return false;\n        if (!increasing && l[i] < l[i + 1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ == 0)\n    {\n        return true;\n    }\n    else\n    {\n        long prev\
    \ = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        foreach (i; l)\n        {\n            if (i < prev)\n            {\n\
    \                increasing = false;\n            }\n            if (i > prev)\n\
    \            {\n                decreasing = false;\n            }\n         \
    \   prev = i;\n        }\n        return increasing || decreasing;\n    }\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i < l.length - 1)\n\
    \        {\n            if (increasing)\n            {\n                if (e\
    \ > l[i + 1])\n                {\n                    return false;\n        \
    \        }\n            }\n            else\n            {\n                if\
    \ (e < l[i + 1])\n                {\n                    return false;\n     \
    \           }\n            }\n        }\n    }\n    return true;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\
    \ \n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn true if array elements are\
    \ monotonically increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n \
    \   true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2)\n    {\n        return\
    \ true;\n    }\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n  \
    \  {\n        if (i == 0)\n        {\n            continue;\n        }\n     \
    \   if (increasing)\n        {\n            if (e < l[i - 1])\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            if (e > l[i - 1])\n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L,\
    \ 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach (i, j; zip(l[0\
    \ .. $ - 1], l[1 .. $])) \n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if\
    \ array elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if (l.length < 2)\n\
    \    {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n        {\n            continue;\n  \
    \      }\n        if (increasing && e < l[i - 1])\n        {\n            return\
    \ false;\n        }\n        if (!increasing && e > l[i - 1])\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing.\n    >>> strictly_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> strictly_increasing([1L, 20L, 4L, 10L])\n \
    \   false\n    >>> strictly_increasing([4L, 1L, 0L, -10L])\n    false\n    \n\
    */", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing\
    \ && l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  if (l.length == 0) return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) increasing = false;\n        if (l[i] > l[i - 1]) decreasing = false;\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    return l.length < 2\
    \ || l[0] < l[1] ? l.isSorted() : l.isSorted(std.math.greater);\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing.\n    >>> monotonicIncreasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonicIncreasing([1L, 20L, 4L, 10L])\n \
    \   false\n    >>> monotonicIncreasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    if (l.length == 0)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        long[] l2 = l[1..$];\n        return l2.length == 0 || l[0] <= l2[0]\
    \ ? monotonic(l2) : monotonic(l2.reverse);\n    }\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach (i, j; zip(l[0 .. $ - 1],\
    \ l[1 .. $]))\n    {\n        if (i > j)\n            increasing = false;\n  \
    \      if (i < j)\n            decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    if\
    \ (l[0] < l[1])\n    {\n        for (int i = 1; i < l.length; i++)\n        {\n\
    \            if (l[i] < l[i - 1])\n                return false;\n        }\n\
    \    }\n    else\n    {\n        for (int i = 1; i < l.length; i++)\n        {\n\
    \            if (l[i] > l[i - 1])\n                return false;\n        }\n\
    \    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L,\
    \ 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $])) \n    {\n       \
    \ increasing = increasing && (i < j);\n        decreasing = decreasing && (i >\
    \ j);\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n   \
    \ \n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing\
    \ && e < l[i - 1]) \n        {\n            return false;\n        }\n       \
    \ if (!increasing && e > l[i - 1]) \n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>>\
    \ strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l[1..$])\n    {\n    \
    \    if (increasing && e < l[i])\n            return false;\n        if (!increasing\
    \ && e > l[i])\n            return false;\n    }\n    return true;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    foreach (i, j; zip(l[0\
    \ .. $ - 1], l[1 .. $]))\n    {\n        if (i > j)\n            increasing =\
    \ false;\n        if (i < j)\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\n    {\n        if\
    \ (i > j)\n            increasing = false;\n        if (i < j)\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach (i, j; zip(l[0 .. $ - 1],\
    \ l[1 .. $]))\n    {\n        if (i > j)\n            increasing = false;\n  \
    \      if (i < j)\n            decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length == 0)\n        return true;\n    long prev\
    \ = l[0];\n    bool increasing = true;\n    foreach (i; 1..l.length)\n    {\n\
    \        if (prev == l[i])\n            continue;\n        if (prev > l[i])\n\
    \            increasing = false;\n        if (prev < l[i] && !increasing)\n  \
    \          return false;\n        prev = l[i];\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (size_t i =\
    \ 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n  \
    \      return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l[1..$])\n\
    \    {\n        if (increasing && e < l[i - 1])\n            return false;\n \
    \       if (!increasing && e > l[i - 1])\n            return false;\n    }\n \
    \   return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++) {\n        if (increasing\
    \ && l[i] > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1])\
    \ return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n    {\n\
    \        return true;\n    }\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && v < l[i - 1])\n            {\n                return false;\n           \
    \ }\n            if (!increasing && v > l[i - 1])\n            {\n           \
    \     return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (e == l[i])\
    \ \n        {\n            continue;\n        }\n        if (increasing && e <\
    \ l[i]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && e > l[i]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing.\n    >>> strictly_monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n  \
    \  false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    if (l.length < 2)\n    {\n        return true;\n    }\n    auto d = l[1]\
    \ - l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (e - l[i] != d)\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    if (l.length < 2) \n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l) \n    {\n        if (i == 0) \n            continue;\n\
    \        if (increasing && e < l[i - 1]) \n            return false;\n       \
    \ if (!increasing && e > l[i - 1]) \n            return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  foreach (i, v; l) {\n        if (i > 0) {\n            increasing &= v >= l[i\
    \ - 1];\n            decreasing &= v <= l[i - 1];\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    return l[0] < l[1] ? l.every!((a, b) => a < b) : l.every!((a, b) => a > b);\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n     \
    \       if (increasing && v < l[i - 1])\n                return false;\n     \
    \       if (!increasing && v > l[i - 1])\n                return false;\n    \
    \    }\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>>\
    \ strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n     \
    \       increasing &= l[i - 1] <= v;\n            decreasing &= l[i - 1] >= v;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    long prev = l[0];\n    bool increasing\
    \ = true;\n    foreach (i, e; l[1..$])\n    {\n        if (prev == e)\n      \
    \  {\n            continue;\n        }\n        if (prev > e)\n        {\n   \
    \         increasing = false;\n        }\n        if (increasing && prev > e)\n\
    \        {\n            return false;\n        }\n        if (!increasing && prev\
    \ < e)\n        {\n            return false;\n        }\n        prev = e;\n \
    \   }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, v; l) {\n        if (i > 0) {\n            increasing\
    \ &= v >= l[i - 1];\n            decreasing &= v <= l[i - 1];\n        }\n   \
    \ }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    long prev = l[0];\n    foreach(i; l[1..$])\n\
    \    {\n        if(i < prev)\n            increasing = false;\n        if(i >\
    \ prev)\n            decreasing = false;\n        prev = i;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1])\
    \ {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) \n        return true;\n \
    \   long prev = l[0];\n    bool increasing = true;\n    foreach (i, x; l[1..$])\
    \ \n    {\n        if (prev == x) \n            continue;\n        if (prev <\
    \ x) \n        {\n            if (!increasing) \n                return false;\n\
    \        }\n        else \n        {\n            if (increasing) \n         \
    \       increasing = false;\n        }\n        prev = x;\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (e < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        } \n        else \n        {\n       \
    \     if (e > l[i - 1]) \n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing.\n    >>> strictly_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> strictly_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ strictly_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n        {\n            return false;\n        }\n        if\
    \ (!increasing && l[i] < l[i + 1])\n        {\n            return false;\n   \
    \     }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n    \
    \    return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i,\
    \ v; l[1..$]) \n    {\n        if (increasing) \n        {\n            if (v\
    \ < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (v > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing && l[i] > l[i + 1])\n            return false;\n     \
    \   if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n  \
    \  return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return true;\n  \
    \  bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\
    \ \n    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n   \
    \ {\n        if (increasing) \n        {\n            if (e < l[i - 1]) \n   \
    \         {\n                return false;\n            }\n        } \n      \
    \  else \n        {\n            if (e > l[i - 1]) \n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l[1..$])\n    {\n        if (increasing && e < l[i - 1])\n\
    \            return false;\n        if (!increasing && e > l[i - 1])\n       \
    \     return false;\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \n*/", "{\n    auto ret = true;\n    auto i = 0;\n\
    \    while (i < l.length - 1)\n    {\n        if (l[i] > l[i + 1])\n        {\n\
    \            ret = false;\n            break;\n        }\n        i++;\n    }\n\
    \    return ret;\n}", "{\n    if (l.length == 0) \n    {\n        return true;\n\
    \    }\n    long prev = l[0];\n    long diff = 0;\n    foreach (i, e; l) \n  \
    \  {\n        if (i == 0) \n        {\n            continue;\n        }\n    \
    \    if (diff == 0) \n        {\n            diff = e - prev;\n        }\n   \
    \     else if (diff > 0) \n        {\n            if (e - prev < 0) \n       \
    \     {\n                return false;\n            }\n        }\n        else\
    \ if (diff < 0) \n        {\n            if (e - prev > 0) \n            {\n \
    \               return false;\n            }\n        }\n        prev = e;\n \
    \   }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach\
    \ (i, v; l)\n    {\n        if (i == 0) continue;\n        if (v < l[i - 1]) increasing\
    \ = false;\n        if (v > l[i - 1]) decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> increasing([1L, 2L, 4L, 20L])\n    true\n    >>> increasing([1L, 20L,\
    \ 4L, 10L])\n    false\n    >>> increasing([4L, 1L, 0L, -10L])\n    false\n  \
    \  \n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n   \
    \ bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n      \
    \  if (increasing && e < l[i - 1]) \n        {\n            return false;\n  \
    \      }\n        if (!increasing && e > l[i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (v < l[i]) \n            {\n                return false;\n    \
    \        }\n        } \n        else \n        {\n            if (v > l[i]) \n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> strictly_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, v; l[1..$]) \n    {\n        if (increasing\
    \ && v < l[i - 1]) \n        {\n            return false;\n        }\n       \
    \ if (!increasing && v > l[i - 1]) \n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>>\
    \ strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    bool increasing = true;\n  \
    \  bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n  \
    \      if (l[i] < l[i - 1])\n        {\n            increasing = false;\n    \
    \    }\n        if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if\
    \ array elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n        {\n            return false;\n        }\n        if\
    \ (!increasing && l[i] < l[i + 1])\n        {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l[1..$])\n   \
    \ {\n        if (increasing && e < l[i - 1])\n            return false;\n    \
    \    if (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n\
    \    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n   \
    \     if (increasing) \n        {\n            if (e < l[i - 1]) \n          \
    \  {\n                return false;\n            }\n        } \n        else \n\
    \        {\n            if (e > l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, v; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (v < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        } \n        else \n        {\n       \
    \     if (v > l[i - 1]) \n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <\
    \ 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int i\
    \ = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n   \
    \         if (l[i] > l[i + 1])\n                return false;\n        }\n   \
    \     else\n        {\n            if (l[i] < l[i + 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    int i;\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (i = 1; i < l.length; i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n\
    \        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2) \n\
    \    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    for\
    \ (int i = 1; i < l.length; i++) \n    {\n        if (increasing && l[i] < l[i\
    \ - 1]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l[1..$]) \n   \
    \ {\n        if (increasing) \n        {\n            if (v < l[i - 1]) \n   \
    \         {\n                return false;\n            }\n        } \n      \
    \  else \n        {\n            if (v > l[i - 1]) \n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && e < l[i - 1])\n            {\n                return\
    \ false;\n            }\n            if (!increasing && e > l[i - 1])\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach (i, v;\
    \ l) {\n        if (i > 0) {\n            increasing &= v >= l[i - 1];\n     \
    \       decreasing &= v <= l[i - 1];\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    long[] l2 = l.dup;\n    l2.sort;\n    foreach(i, e; l)\n    {\n        if(e\
    \ != l2[i])\n        {\n            increasing = false;\n        }\n    }\n  \
    \  l2.sort(std.algorithm.comparison.greater);\n    foreach(i, e; l)\n    {\n \
    \       if(e != l2[i])\n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach (i, v; l) {\n        if (i > 0) {\n\
    \            increasing &= v >= l[i - 1];\n            decreasing &= v <= l[i\
    \ - 1];\n        }\n    }\n    return increasing || decreasing;\n}", "{\n    if\
    \ (l.length == 0)\n    {\n        return true;\n    }\n    long prev = l[0];\n\
    \    bool increasing = true;\n    foreach (long i; l)\n    {\n        if (i <\
    \ prev)\n        {\n            increasing = false;\n            break;\n    \
    \    }\n        prev = i;\n    }\n    if (increasing)\n    {\n        return true;\n\
    \    }\n    prev = l[0];\n    foreach (long i; l)\n    {\n        if (i > prev)\n\
    \        {\n            return false;\n        }\n        prev = i;\n    }\n \
    \   return true;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> monotonicIncreasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonicIncreasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonicIncreasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] > l[i + 1]) return\
    \ false;\n        }\n        else\n        {\n            if (l[i] < l[i + 1])\
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n     \
    \   if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n     \
    \   if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn true if array elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n*/", "{\n    if (l.length < 2)\n    {\n        return\
    \ true;\n    }\n    auto d = l[1] - l[0];\n    foreach (i, e; l[1..$])\n    {\n\
    \        if (d * (e - l[i]) < 0)\n        {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\n    {\n        if\
    \ (i > j)\n            increasing = false;\n        if (i < j)\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if\
    \ array elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n*/", "{\n    if (l.length <\
    \ 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int i\
    \ = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1])\n\
    \            return false;\n        if (!increasing && l[i] < l[i + 1])\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e;\
    \ l[1..$])\n    {\n        if (increasing && e < l[i - 1])\n            return\
    \ false;\n        if (!increasing && e > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return true;\n  \
    \  bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l) {\n        if (i == 0) continue;\n   \
    \     if (increasing && e < l[i-1]) return false;\n        if (!increasing &&\
    \ e > l[i-1]) return false;\n    }\n    return true;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n*/", "{\n    if (l.length < 2) \n\
    \    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, v; l[1..$]) \n    {\n        if (increasing) \n        {\n            if\
    \ (v < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (v > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing)\n        {\n            if (l[i] > l[i + 1])\n      \
    \          return false;\n        }\n        else\n        {\n            if (l[i]\
    \ < l[i + 1])\n                return false;\n        }\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach\
    \ (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\n    {\n        if (i > j)\n         \
    \   increasing = false;\n        if (i < j)\n            decreasing = false;\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing && l[i] > l[i + 1])\n            return false;\n     \
    \   if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L,\
    \ 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    if (l.length < 2)\n        return true;\n    foreach (i, v; l)\
    \ {\n        if (i > 0) {\n            increasing = increasing && (v >= l[i -\
    \ 1]);\n            decreasing = decreasing && (v <= l[i - 1]);\n        }\n \
    \   }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\
    \ \n    {\n        increasing = increasing && (i < j);\n        decreasing = decreasing\
    \ && (i > j);\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing.\n    >>> strictly_monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n  \
    \  false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    foreach (i, v;\
    \ l) {\n        if (i > 0) {\n            increasing &= l[i] >= l[i - 1];\n  \
    \          decreasing &= l[i] <= l[i - 1];\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n   \
    \ }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n\
    \        if (increasing && e < l[i - 1]) \n        {\n            return false;\n\
    \        }\n        if (!increasing && e > l[i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if\
    \ array elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing) \n  \
    \      {\n            if (l[i] < l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        }\n        else \n        {\n            if (l[i]\
    \ > l[i - 1]) \n            {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n \
    \       return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (increasing && l[i] < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ l[i] > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (increasing && l[i] < l[i - 1]) \n        {\n     \
    \       return false;\n        }\n        if (!increasing && l[i] > l[i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach\
    \ (i, v; l) {\n        if (i > 0) {\n            increasing &= l[i - 1] <= v;\n\
    \            decreasing &= l[i - 1] >= v;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\n    {\n        if (i > j)\n\
    \            increasing = false;\n        if (i < j)\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    \    \n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing && l[i] > l[i + 1])\n            return false;\n        if (!increasing\
    \ && l[i] < l[i + 1])\n            return false;\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach (i, j;\
    \ zip(l[0 .. $ - 1], l[1 .. $])) \n    {\n        increasing &= i < j;\n     \
    \   decreasing &= i > j;\n    }\n    return increasing || decreasing;\n}\n/*\n\
    Return true if array elements are monotonically increasing.\n    >>> strictly_monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n  \
    \  false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n   \
    \ \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n    long\
    \ prev = l[0];\n    foreach(long i; l)\n    {\n        if (i < prev)\n       \
    \     increasing = false;\n        if (i > prev)\n            decreasing = false;\n\
    \        prev = i;\n    }\n    return increasing || decreasing;\n}", "{\n    if\
    \ (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l[1..$])\
    \ \n    {\n        if (increasing && v < l[i - 1]) \n        {\n            return\
    \ false;\n        }\n        if (!increasing && v > l[i - 1]) \n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    auto diff = l[1] - l[0];\n   \
    \ foreach (i, e; l[1..$])\n    {\n        if (e - l[i] != diff)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    long[] l2 = l.dup;\n\
    \    l2.sort;\n    if (l == l2)\n        return true;\n    l2.reverse;\n    if\
    \ (l == l2)\n        return true;\n    return false;\n}", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    long[] diffs = l[1 .. $] - l[0\
    \ .. $ - 1];\n    return diffs.all!(x => x == 0 || x == diffs[0]);\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1])\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    auto n = l.length;\n    if (n < 2) \n    {\n   \
    \     return true;\n    }\n    auto inc = l[1] > l[0];\n    for (size_t i = 1;\
    \ i < n; i++) \n    {\n        if (inc && l[i] < l[i - 1]) \n        {\n     \
    \       return false;\n        }\n        if (!inc && l[i] > l[i - 1]) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    if (l.length == 0) return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) increasing = false;\n        if (l[i] > l[i - 1]) decreasing = false;\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l[1..$])\n    {\n        if (increasing && e < l[i - 1])\n          \
    \  return false;\n        if (!increasing && e > l[i - 1])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n \
    \   for (size_t i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n\
    \            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n\
    \            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1])\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n    \n*/", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn true if array elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\n    {\n     \
    \   if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i] >\
    \ l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l[1..$])\n    {\n        if (increasing &&\
    \ e < l[i - 1])\n            return false;\n        if (!increasing && e > l[i\
    \ - 1])\n            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && v < l[i - 1])\n                return false;\n\
    \            if (!increasing && v > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n    {\n  \
    \      return true;\n    }\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn true if array elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach (i, v; l) {\n \
    \       if (i > 0) {\n            increasing &= v >= l[i - 1];\n            decreasing\
    \ &= v <= l[i - 1];\n        }\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach (i, j;\
    \ zip(l[0 .. $ - 1], l[1 .. $])) \n    {\n        increasing = increasing && (i\
    \ < j);\n        decreasing = decreasing && (i > j);\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n     \
    \       increasing &= l[i] >= l[i - 1];\n            decreasing &= l[i] <= l[i\
    \ - 1];\n        }\n    }\n    return increasing || decreasing;\n}", "{\n    long[]\
    \ l2 = l.dup;\n    l2.sort;\n    return l == l2 || l == l2.reverse;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n   \
    \ \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n         \
    \   decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if\
    \ (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing = l[0]\
    \ < l[1];\n    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n     \
    \       if (increasing && v < l[i - 1])\n            {\n                return\
    \ false;\n            }\n            if (!increasing && v > l[i - 1])\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing && l[i] > l[i + 1])\n            return false;\n        if (!increasing\
    \ && l[i] < l[i + 1])\n            return false;\n    }\n    return true;\n}",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for\
    \ (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n       \
    \ {\n            if (l[i] > l[i + 1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] < l[i + 1]) return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l[1..$]) \n   \
    \ {\n        if (increasing) \n        {\n            if (v < l[i - 1]) \n   \
    \         {\n                return false;\n            }\n        } \n      \
    \  else \n        {\n            if (v > l[i - 1]) \n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    for (size_t i = 1; i < l.length - 1; i++)\n    {\n     \
    \   if (increasing)\n        {\n            if (l[i] > l[i + 1])\n           \
    \ {\n                return false;\n            }\n        }\n        else\n \
    \       {\n            if (l[i] < l[i + 1])\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach (i, j; zip(l[0\
    \ .. $ - 1], l[1 .. $]))\n    {\n        if (i > j)\n            increasing =\
    \ false;\n        if (i < j)\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>>\
    \ strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\
    \ \n    {\n        if (increasing && e < l[i - 1]) \n        {\n            return\
    \ false;\n        }\n        if (!increasing && e > l[i - 1]) \n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nReturn true\
    \ if array elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l[1..$])\n    {\n        if (increasing && e < l[i - 1])\n          \
    \  return false;\n        if (!increasing && e > l[i - 1])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn true if array elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n\
    \    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length < 2) \n    {\n      \
    \  return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int i = 2;\
    \ i < l.length; i++) \n    {\n        if (increasing && l[i] < l[i - 1]) \n  \
    \      {\n            return false;\n        }\n        if (!increasing && l[i]\
    \ > l[i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn true if array elements are monotonically increasing or\
    \ decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1])\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n            increasing\
    \ &= l[i] >= l[i - 1];\n            decreasing &= l[i] <= l[i - 1];\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing.\n    >>> monotonicIncreasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonicIncreasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonicIncreasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1]) increasing\
    \ = false;\n        if (l[i] > l[i - 1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l[1..$])\n   \
    \ {\n        if (increasing && e < l[i - 1])\n            return false;\n    \
    \    if (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn true if array elements are monotonically increasing.\n\
    \    >>> strictly_monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $]))\n    {\n        if (i > j)\n\
    \            increasing = false;\n        if (i < j)\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) return false;\n        } else {\n      \
    \      if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (size_t\
    \ i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0,\
    \ 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ true if array elements are monotonically increasing or decreasing.\n    >>>\
    \ monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n\
    \    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n \
    \           if (l[i] > l[i + 1])\n                return false;\n        }\n \
    \       else\n        {\n            if (l[i] < l[i + 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <\
    \ 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i <\
    \ l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n\
    */", "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1])\
    \ return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return false;\n\
    \        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn true if array elements are monotonically increasing or\
    \ decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0,\
    \ 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n  \
    \  true\n    \n*/", "{\n    if (l.length < 2)\n    {\n        return true;\n \
    \   }\n    long prev = l[0];\n    bool increasing = true;\n    foreach (i, v;\
    \ l[1..$])\n    {\n        if (prev == v)\n        {\n            continue;\n\
    \        }\n        if (prev > v)\n        {\n            increasing = false;\n\
    \        }\n        if (prev < v && !increasing)\n        {\n            return\
    \ false;\n        }\n        prev = v;\n    }\n    return true;\n}", "{\n    if\
    \ (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n\
    \    }\n    return true;\n}\n/*\nReturn true if array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length < 2) \n    {\n      \
    \  return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (long i =\
    \ 2; i < l.length; i++) \n    {\n        if (increasing) \n        {\n       \
    \     if (l[i] < l[i - 1]) \n            {\n                return false;\n  \
    \          }\n        } \n        else \n        {\n            if (l[i] > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n*/", "{\n\
    \    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, v; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing)\n        {\n            if (v < l[i - 1])\n           \
    \     return false;\n        }\n        else\n        {\n            if (v > l[i\
    \ - 1])\n                return false;\n        }\n    }\n    return true;\n}\n\
    /*\nReturn true if array elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\
    \ return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) return false;\n    \
    \    if (!increasing && l[i] < l[i + 1]) return false;\n    }\n    return true;\n\
    }\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing\
    \ && l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && e < l[i - 1])\n            {\n                return\
    \ false;\n            }\n            if (!increasing && e > l[i - 1])\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return true;\n  \
    \  bool increasing = l[0] < l[1];\n    foreach (i, e; l[1..$])\n    {\n      \
    \  if (increasing && e < l[i - 1])\n            return false;\n        if (!increasing\
    \ && e > l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    foreach (i, v; l)\
    \ {\n        if (i > 0) {\n            increasing &= l[i] >= l[i - 1];\n     \
    \       decreasing &= l[i] <= l[i - 1];\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn true if array elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach (i, j; zip(l[0 .. $ - 1], l[1 .. $])) \n    {\n       \
    \ increasing = increasing && (i < j);\n        decreasing = decreasing && (i >\
    \ j);\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if array\
    \ elements are monotonically increasing.\n    >>> strictly_monotonic([1L, 2L,\
    \ 4L, 20L])\n    true\n    >>> strictly_monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> strictly_monotonic([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i - 1] > l[i])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i - 1] < l[i])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn true if array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <\
    \ 2)\n    {\n        return true;\n    }\n    long[] diffs = l[1..$] - l[0..$-1];\n\
    \    return diffs.all!(x => x == diffs[0]);\n}", "{\n    if (l.length < 2)\n \
    \       return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1])\n\
    \            return false;\n        if (!increasing && l[i] < l[i + 1])\n    \
    \        return false;\n    }\n    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
