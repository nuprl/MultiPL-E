name: HumanEval_25_factorize
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors\
  \ of given integer in the order from smallest to largest.\n    Each of the factors\
  \ should be arrayed number of times corresponding to how many times it appeares\
  \ in factorization.\n    Input number should be equal to the product of all factors\n\
  \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
  \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n"
tests: "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
  \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) ==\
  \ [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
  \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L,\
  \ 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
  \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    long[] res = [];\n    long i = 2;\n    while (i <= n) \n   \
    \ {\n        if (n % i == 0) \n        {\n            res ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return res;\n}", "{\n    long[] factors = [];\n    long i = 2;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors =\
    \ [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    long[] primeFactors;\n    long[] primeFactorsCount;\n    long i;\n    long\
    \ j;\n    long k;\n    long prime;\n    long count;\n    long temp;\n    long\
    \ temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n\
    \    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long\
    \ temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n\
    \    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long\
    \ temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n\
    \    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long\
    \ temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n\
    \    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long\
    \ temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n\
    \    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long\
    \ temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n\
    \    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long\
    \ temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n\
    \    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long\
    \ temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n\
    \    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long\
    \ temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n", "{\n    long[]\
    \ factors = [];\n    long[] primeFactors = [];\n    long[] primeFactorsCount =\
    \ [];\n    long[] primeFactorsCount2 = [];\n    long[] primeFactors2 = [];\n \
    \   long[] primeFactors3 = [];\n    long[] primeFactorsCount3 = [];\n    long[]\
    \ primeFactorsCount4 = [];\n    long[] primeFactors4 = [];\n    long[] primeFactors5\
    \ = [];\n    long[] primeFactorsCount5 = [];\n    long[] primeFactorsCount6 =\
    \ [];\n    long[] primeFactors6 = [];\n    long[] primeFactors7 = [];\n    long[]\
    \ primeFactorsCount7 = [];\n    long[] primeFactorsCount8 = [];\n    long[] primeFactors8\
    \ = [];\n    long[] primeFactors9 = [];\n    long[] primeFactorsCount9 = [];\n\
    \    long[] primeFactorsCount10 = [];\n    long[] primeFactors10 = [];\n    long[]\
    \ primeFactors11 = [];\n    long[] primeFactorsCount11 = [];\n    long[] primeFactorsCount12\
    \ = [];\n    long[] primeFactors12 = [];\n    long[] primeFactors13 = [];\n  \
    \  long[] primeFactorsCount13 = [];\n    long[] primeFactorsCount14 = [];\n  \
    \  long[] primeFactors14 = [];\n    long[] primeFactors15 = [];\n    long[] primeFactorsCount15\
    \ = [];\n    long[] primeFactorsCount16 = [];\n    long[] primeFactors16 = [];\n\
    \    long[] primeFactors17 = [];\n    long[] primeFactorsCount17 = [];\n    long[]\
    \ primeFactorsCount18 = [];\n    long[] primeFactors18 = [];\n    long[] primeFactors19\
    \ = [];\n    long[] primeFactorsCount19 = [];\n    long[] primeFactorsCount20\
    \ = [];\n    long[] primeFactors20 = [];\n    long[] primeFactors21 = [];\n  \
    \  long[] primeFactorsCount21 = [];\n    long[] primeFactorsCount22 = [];\n  \
    \  long[] primeFactors22 = [];\n    long[] primeFactors23 = [];\n    long[] primeFactorsCount23\
    \ = [];\n    long[] primeFactorsCount24 = [];\n    long[] primeFactors24 = [];\n",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (n >\
    \ 1) \n    {\n        while (n % i == 0) \n        {\n            factors ~= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    /*\n    Return the number of prime factors of given integer.\n    >>> factorize(8L)\n\
    \    3\n    >>> factorize(25L)\n    2\n    >>> factorize(70L)\n    3\n*/\nlong\
    \ num_factors(long n) \n{\n    long num_factors = 0;\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            num_factors++;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return num_factors;\n\
    }\n/*\n    Return the number of prime factors of given integer.\n    >>> factorize(8L)\n\
    \    3\n    >>> factorize(25L)\n    2\n    >>> factorize(70L)\n    3\n*/\nlong\
    \ num_factors(long n) \n{\n    long num_factors = 0;\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            num_factors++;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return num_factors;\n\
    }\n/*\n    Return the number of prime factors of given integer.\n    >>> factorize(8L)\n\
    \    3\n    >>> factorize(25L)\n    2\n    >>> factorize(70L)\n    3\n*/\nlong\
    \ num_factors(long n) \n{\n    long num_factors = 0;\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            num_factors++;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return num_factors;\n\
    }\n/*\n    Return the number of prime factors of given integer", "{\n    long[]\
    \ res = [];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i ==\
    \ 0)\n        {\n            res ~= i;\n            n /= i;\n        }\n     \
    \   else\n        {\n            i++;\n        }\n    }\n    return res;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return factors;\n}", "{\n    long[] result = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ res = new long[];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n\
    \ % i == 0)\n        {\n            res ~= i;\n            n /= i;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] res = [];\n    long i = 2;\n    while (n > 1) \n    {\n   \
    \     if (n % i == 0) \n        {\n            res ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return res;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         result ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ i == 0) \n        {\n            result ~= i;\n            n /= i;\n       \
    \ }\n        i++;\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    if (n <= 1) \n    {\n        return result;\n    }\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return result;\n}", "{\n    long[] factors;\n\
    \    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L,\
    \ 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L,\
    \ 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L,\
    \ 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L,\
    \ 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L,\
    \ 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L,\
    \ 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L,\
    \ 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L,\
    \ 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L,\
    \ 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L,\
    \ 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L,\
    \ 829L, 839L,", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % d == 0) \n        {\n            result ~= d;\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
    \ 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L,\
    \ 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            factors ~= d;\n            n /= d;\n        }\n        d += 1;\n\
    \    }\n    return factors;\n}", "{\n    long[] res = [];\n    long i = 2;\n \
    \   while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            res\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return res;\n}", "{\n    long[] factors;\n   \
    \ long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L,\
    \ 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L,\
    \ 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L,\
    \ 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L,\
    \ 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L,\
    \ 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L,\
    \ 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L,", "{\n    long[] res = [];\n    long i = 2;\n    while (i <= n) \n   \
    \ {\n        if (n % i == 0) \n        {\n            res ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return res;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ factors;\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L,\
    \ 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L,", "{\n    long[] res = new long[];\n    if (n <= 1)\n    \
    \    return res;\n    long[] primes = primesUpTo(n);\n    foreach (prime; primes)\
    \ \n    {\n        while (n % prime == 0) \n        {\n            res ~= prime;\n\
    \            n /= prime;\n        }\n    }\n    return res;\n}\n/*\n Return array\
    \ of prime numbers up to given integer.\n    >>> primesUpTo(10L)\n    [2L, 3L,\
    \ 5L, 7L]\n    >>> primesUpTo(20L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n\
    */\nlong[] primesUpTo(long n) \n{\n    long[] res = new long[];\n    if (n <=\
    \ 1)\n        return res;\n    res ~= 2;\n    for (long i = 3; i <= n; i += 2)\
    \ \n    {\n        bool isPrime = true;\n        foreach (prime; res) \n     \
    \   {\n            if (i % prime == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            res ~= i;\n    }\n    return res;\n}\n/*\n Return array of prime\
    \ numbers up to given integer.\n    >>> primesUpTo(10L)\n    [2L, 3L, 5L, 7L]\n\
    \    >>> primesUpTo(20L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n*/\nlong[]\
    \ primesUpTo(long n) \n{\n    long[] res = new long[];\n    if (n <= 1)\n    \
    \    return res;\n    res ~= 2;\n    for (long i = 3; i <= n; i += 2) \n    {\n\
    \        bool isPrime = true;\n        foreach (prime; res) \n        {\n    \
    \        if (i % prime == 0) \n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n       ", "{\n    long[] factors\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors;\n    long[]\
    \ primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L,",
  "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
    \ 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L,\
    \ 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long[]\
    \ primes = primesTill(n);\n    foreach(prime; primes)\n    {\n        while(n\
    \ % prime == 0)\n        {\n            factors ~= prime;\n            n /= prime;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L,\
    \ 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L,\
    \ 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L,\
    \ 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L,\
    \ 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L,\
    \ 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L,\
    \ 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n     \
    \       n /= i;\n        } \n        else \n        {\n            i++;\n    \
    \    }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long[]\
    \ primes = primesTill(n);\n    foreach(prime; primes)\n    {\n        while(n\
    \ % prime == 0)\n        {\n            n /= prime;\n            factors ~= prime;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   n /= i;\n            factors ~= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    foreach(i; 2 .. n)\n    {\n \
    \       while(n % i == 0)\n        {\n            result ~= i;\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}", "{\n    long[] res = [];\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            res ~= i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n   \
    \     {\n            factors ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] result;\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L,\
    \ 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L,\
    \ 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L,\
    \ 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L,\
    \ 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L,\
    \ 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L,\
    \ 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L,\
    \ 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L,\
    \ 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L,\
    \ 809L, 811L, 821L, 823L, 827L, 829L, 839L,", "{\n    long[] factors = [];\n \
    \   long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n      \
    \  {\n            factors ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
    \ 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L,\
    \ 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n        {\n    \
    \        factors ~= i;\n            n /= i;\n        }\n        else\n       \
    \ {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            factors ~= i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            result ~= i;\n            n /=\
    \ i;\n        }\n        else\n        {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] res = [];\n    foreach(i;\
    \ 2..n)\n    {\n        while(n % i == 0)\n        {\n            res ~= i;\n\
    \            n /= i;\n        }\n    }\n    return res;\n}", "{\n    long[] factors\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            factors ~= d;\n            n /= d;\n        }\n   \
    \     d += 1;\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n\
    \    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n   \
    \     {\n            factors ~= d;\n            n /= d;\n        }\n        d\
    \ += 1;\n    }\n    return factors;\n}", "{\n    long[] result = new long[];\n\
    \    long[] primes = primesTill(n);\n    foreach(prime; primes)\n    {\n     \
    \   while(n % prime == 0)\n        {\n            result ~= prime;\n         \
    \   n /= prime;\n        }\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors;\n    long[] primeFactors;\n\
    \    long[] primeFactorsCount;\n    long[] primeFactorsCount2;\n    long[] primeFactorsCount3;\n\
    \    long[] primeFactorsCount4;\n    long[] primeFactorsCount5;\n    long[] primeFactorsCount6;\n\
    \    long[] primeFactorsCount7;\n    long[] primeFactorsCount8;\n    long[] primeFactorsCount9;\n\
    \    long[] primeFactorsCount10;\n    long[] primeFactorsCount11;\n    long[]\
    \ primeFactorsCount12;\n    long[] primeFactorsCount13;\n    long[] primeFactorsCount14;\n\
    \    long[] primeFactorsCount15;\n    long[] primeFactorsCount16;\n    long[]\
    \ primeFactorsCount17;\n    long[] primeFactorsCount18;\n    long[] primeFactorsCount19;\n\
    \    long[] primeFactorsCount20;\n    long[] primeFactorsCount21;\n    long[]\
    \ primeFactorsCount22;\n    long[] primeFactorsCount23;\n    long[] primeFactorsCount24;\n\
    \    long[] primeFactorsCount25;\n    long[] primeFactorsCount26;\n    long[]\
    \ primeFactorsCount27;\n    long[] primeFactorsCount28;\n    long[] primeFactorsCount29;\n\
    \    long[] primeFactorsCount30;\n    long[] primeFactorsCount31;\n    long[]\
    \ primeFactorsCount32;\n    long[] primeFactorsCount33;\n    long[] primeFactorsCount34;\n\
    \    long[] primeFactorsCount35;\n    long[] primeFactorsCount36;\n    long[]\
    \ primeFactorsCount37;\n    long[] primeFactorsCount38;\n    long[] primeFactorsCount39;\n\
    \    long[] primeFactorsCount40;\n    long[] primeFactorsCount41;\n    long[]\
    \ primeFactorsCount42;\n    long[] primeFactorsCount43;\n    long[] primeFactorsCount44;\n\
    \    long[] primeFactorsCount45;\n    long[] primeFactorsCount46;\n    long[]\
    \ primeFactorsCount47;\n    long[] primeFactorsCount48;\n    long[] primeFactorsCount49;\n\
    \    long[] primeFactors", "{\n    long[] factors = [];\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n\
    \    while (n % 2 == 0) \n    {\n        result ~= 2;\n        n /= 2;\n    }\n\
    \    long divisor = 3;\n    while (n != 1) \n    {\n        while (n % divisor\
    \ == 0) \n        {\n            result ~= divisor;\n            n /= divisor;\n\
    \        }\n        divisor += 2;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors;\n    foreach(i; 2 .. n)\n    {\n        if(n % i == 0)\n        {\n\
    \            factors ~= i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return factors;\n}", "{\n    long[] factors = [];\n    long[] primes\
    \ = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] res = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            res ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        } \n        else \n   \
    \     {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         factors ~= i;\n            n /= i;\n        }\n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors;\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n     \
    \       factors ~= i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1;\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long[] primes\
    \ = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] res = [];\n    long d = 2;\n    while (n > 1) \n    {\n   \
    \     while (n % d == 0) \n        {\n            res ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return res;\n}", "{\n    long[] factors\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] result = [];\n    long[] primes = primesUpTo(n);\n\
    \    foreach(prime; primes)\n    {\n        while(n % prime == 0)\n        {\n\
    \            result ~= prime;\n            n /= prime;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L,\
    \ 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L,\
    \ 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L,\
    \ 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L,\
    \ 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L,\
    \ 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L,\
    \ 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L", "{\n    long[] factors = [];\n    long factor = 2L;\n    while (n > 1L)\
    \ \n    {\n        if (n % factor == 0L) \n        {\n            factors ~= factor;\n\
    \            n /= factor;\n        } \n        else \n        {\n            factor++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] res = new long[0];\n\
    \    long[] primes = new long[0];\n    long[] powers = new long[0];\n    long\
    \ i = 2;\n    while (i < n)\n    {\n        if (n % i == 0)\n        {\n     \
    \       primes ~= i;\n            powers ~= 0;\n            while (n % i == 0)\n\
    \            {\n                n /= i;\n                powers[$-1]++;\n    \
    \        }\n        }\n        i++;\n    }\n    if (n > 1)\n    {\n        primes\
    \ ~= n;\n        powers ~= 1;\n    }\n    foreach (i, p; zip(primes, powers))\n\
    \    {\n        res ~= repeat(i, p);\n    }\n    return res;\n}", "{\n    long[]\
    \ factors;\n    long[] primeFactors;\n    long[] primeFactorsCount;\n    long[]\
    \ primeFactorsCounted;\n    long i;\n    long j;\n    long k;\n    long l;\n \
    \   long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n\
    \    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n\
    \    long y;\n    long z;\n    long aa;\n    long ab;\n    long ac;\n    long\
    \ ad;\n    long ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n\
    \    long aj;\n    long ak;\n    long al;\n    long am;\n    long an;\n    long\
    \ ao;\n    long ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n\
    \    long au;\n    long av;\n    long aw;\n    long ax;\n    long ay;\n    long\
    \ az;\n    long ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n\
    \    long bf;\n    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long\
    \ bk;\n    long bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n\
    \    long bq;\n    long br;\n    long bs;\n    long bt;\n    long bu;\n    long\
    \ bv;\n    long bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n\
    \    long cb;\n    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long\
    \ cg;\n    long ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n\
    \    long cm;\n    long cn;\n    long co;\n    long cp;\n    long cq;\n    long\
    \ cr;\n    long cs;\n   ", "{\n    long[] factors = [];\n    long i = 2;\n   \
    \ while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n\
    \    long divisor = 2L;\n    while (n > 1L) \n    {\n        while (n % divisor\
    \ == 0L) \n        {\n            factors ~= divisor;\n            n /= divisor;\n\
    \        }\n        divisor += 1L;\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
    \ 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L,\
    \ 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L,", "{\n    long[] factors = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            factors ~= d;\n            n /= d;\n        }\n        d += 1;\n\
    \    }\n    return factors;\n}\n/*\n    Return array of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n\
    \    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n\
    \    [2L, 5L, 7L]\n    \n*/\nlong[] factorize2(long n) \n{\n    long[] factors\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        if (n % d == 0) \n\
    \        {\n            factors ~= d;\n            n /= d;\n        }\n      \
    \  else \n        {\n            d += 1;\n        }\n    }\n    return factors;\n\
    }\n/*\n    Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n\
    \    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n\
    \    \n*/\nlong[] factorize3(long n) \n{\n    long[] factors = [];\n    long d\
    \ = 2;\n    while (n > 1) \n    {\n        if (n % d == 0) \n        {\n     \
    \       factors ~= d;\n            n /= d;\n        }\n        else \n       \
    \ {\n            d += (d == 2) ? 1 : 2;\n        }\n    }", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        }\n   \
    \     i++;\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long[]\
    \ primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n)\n    {\n     \
    \   if (n % i == 0)\n        {\n            factors ~= i;\n            n /= i;\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L,\
    \ 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L,\
    \ 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L,\
    \ 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L,\
    \ 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L,\
    \ 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L,\
    \ 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L,\
    \ 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L,\
    \ 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L,\
    \ 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L,\
    \ 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L,\
    \ 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L,\
    \ 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L,\
    \ 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L,\
    \ 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L,\
    \ 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L,\
    \ 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L,\
    \ 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L", "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L,\
    \ 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L,\
    \ 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L,\
    \ 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L,\
    \ 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L,\
    \ 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L,\
    \ 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L,\
    \ 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L,\
    \ 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L,\
    \ 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n   \
    \ foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n            result\
    \ ~= i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = new long[];\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            factors ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] result = [];\n    foreach(i; 2 .. n)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            result ~= i;\n            n /= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result;\n    long[] primes = sieve(n);\n\
    \    foreach(i; primes)\n    {\n        if(n % i == 0)\n        {\n          \
    \  result ~= i;\n            n /= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n\
    \            factors ~= i;\n            n /= i;\n        } \n        else \n \
    \       {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n \
    \   long[] res = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            res ~= i;\n            n /= i;\n     \
    \   }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] result;\n    long[] primeFactors;\n    long[] primeFactorsCount;\n\
    \    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long\
    \ ct;\n    long cu;\n", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] res = new long[];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            res ~= i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ d == 0) \n        {\n            result ~= d;\n            n /= d;\n       \
    \ }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] res;\n   \
    \ foreach(i; 2 .. n)\n    {\n        if(n % i == 0)\n        {\n            res\
    \ ~= i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n\
    \            result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n   \
    \ while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] res = new\
    \ long[];\n    long i = 2;\n    while (n > 1)\n    {\n        if (n % i == 0)\n\
    \        {\n            res ~= i;\n            n /= i;\n        }\n        else\n\
    \        {\n            i++;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n\
    \ % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n    \
    \    }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] factors =\
    \ [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            factors ~= d;\n            n /= d;\n        }\n        d += 1;\n\
    \    }\n    return factors;\n}", "{\n    long[] result;\n    long[] primeFactors;\n\
    \    long[] primeFactorsCount;\n    long i;\n    long j;\n    long k;\n    long\
    \ l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long\
    \ r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long\
    \ x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n    long ac;\n   \
    \ long ad;\n    long ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n\
    \    long aj;\n    long ak;\n    long al;\n    long am;\n    long an;\n    long\
    \ ao;\n    long ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n\
    \    long au;\n    long av;\n    long aw;\n    long ax;\n    long ay;\n    long\
    \ az;\n    long ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n\
    \    long bf;\n    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long\
    \ bk;\n    long bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n\
    \    long bq;\n    long br;\n    long bs;\n    long bt;\n    long bu;\n    long\
    \ bv;\n    long bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n\
    \    long cb;\n    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long\
    \ cg;\n    long ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n\
    \    long cm;\n    long cn;\n    long co;\n    long cp;\n    long cq;\n    long\
    \ cr;\n    long cs;\n    long ct;\n    long cu;\n", "{\n    long[] result = [];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n   \
    \     {\n            result ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    long[] factors;\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L,", "{\n   \
    \ long[] result = new long[];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L,", "{\n    long[] result = [];\n    while (n %\
    \ 2 == 0) \n    {\n        result ~= 2;\n        n /= 2;\n    }\n    long i =\
    \ 3;\n    while (i <= sqrt(n)) \n    {\n        while (n % i == 0) \n        {\n\
    \            result ~= i;\n            n /= i;\n        }\n        i += 2;\n \
    \   }\n    if (n > 2) \n    {\n        result ~= n;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            factors ~= d;\n         \
    \   n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            factors ~= i;\n         \
    \   n /= i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n   \
    \ long[] result = [];\n    foreach(i; 2..n)\n    {\n        while(n % i == 0)\n\
    \        {\n            result ~= i;\n            n /= i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] factors = [];\n    foreach(i; 2 .. n)\n\
    \    {\n        if(n % i == 0)\n        {\n            factors ~= i;\n       \
    \     n /= i;\n            i--;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] result = new long[];\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 2 ..\
    \ n)\n    {\n        if(n % i == 0)\n        {\n            result ~= i;\n   \
    \         n /= i;\n            i = 1;\n        }\n    }\n    return result;\n}",
  "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n     \
    \   while (n % d == 0) \n        {\n            factors ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            factors ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1)\n    {\n\
    \        if (n % i == 0)\n        {\n            factors ~= i;\n            n\
    \ /= i;\n        }\n        else\n        {\n            i++;\n        }\n   \
    \ }\n    return factors;\n}", "{\n    long[] result = [];\n    long[] primes =\
    \ [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ res = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            res ~= i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return res;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = [];\n   \
    \ long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n      \
    \  {\n            factors ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return factors;\n}", "{\n    long[] factors;\n    long[] primeFactors;\n\
    \    long[] primeFactorsCount;\n    long[] primeFactorsCount2;\n    long[] primeFactors2;\n\
    \    long[] primeFactors3;\n    long[] primeFactorsCount3;\n    long[] primeFactorsCount4;\n\
    \    long[] primeFactors4;\n    long[] primeFactors5;\n    long[] primeFactorsCount5;\n\
    \    long[] primeFactorsCount6;\n    long[] primeFactors6;\n    long[] primeFactors7;\n\
    \    long[] primeFactorsCount7;\n    long[] primeFactorsCount8;\n    long[] primeFactors8;\n\
    \    long[] primeFactors9;\n    long[] primeFactorsCount9;\n    long[] primeFactorsCount10;\n\
    \    long[] primeFactors10;\n    long[] primeFactors11;\n    long[] primeFactorsCount11;\n\
    \    long[] primeFactorsCount12;\n    long[] primeFactors12;\n    long[] primeFactors13;\n\
    \    long[] primeFactorsCount13;\n    long[] primeFactorsCount14;\n    long[]\
    \ primeFactors14;\n    long[] primeFactors15;\n    long[] primeFactorsCount15;\n\
    \    long[] primeFactorsCount16;\n    long[] primeFactors16;\n    long[] primeFactors17;\n\
    \    long[] primeFactorsCount17;\n    long[] primeFactorsCount18;\n    long[]\
    \ primeFactors18;\n    long[] primeFactors19;\n    long[] primeFactorsCount19;\n\
    \    long[] primeFactorsCount20;\n    long[] primeFactors20;\n    long[] primeFactors21;\n\
    \    long[] primeFactorsCount21;\n    long[] primeFactorsCount22;\n    long[]\
    \ primeFactors22;\n    long[] primeFactors23;\n    long[] primeFactorsCount23;\n\
    \    long[] primeFactorsCount24;\n    long[] primeFactors24;\n    long[] primeFactors25;\n\
    \    long[] primeFactorsCount25;\n    long[] primeFactorsCount26;\n    long[]\
    \ primeFactors26;\n    long[] primeFactors27;\n    long", "{\n    long[] res;\n\
    \    if (n == 1)\n        return [1];\n    long i = 2;\n    while (i <= n)\n \
    \   {\n        if (n % i == 0)\n        {\n            res ~= i;\n           \
    \ n /= i;\n        }\n        else\n            i++;\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[];\n    long i = 2L;\n    while (n > 1L)\n\
    \    {\n        if (n % i == 0L)\n        {\n            result ~= i;\n      \
    \      n /= i;\n        }\n        else\n        {\n            i++;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long[] primes\
    \ = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ factors ~= i;\n            n /= i;\n        } \n        else \n        {\n \
    \           i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            result ~= i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    long[] factors;\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L,\
    \ 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L,\
    \ 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L,\
    \ 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L,\
    \ 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L,\
    \ 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L,\
    \ 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L,\
    \ 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L,\
    \ 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L,\
    \ 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L,\
    \ 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L,\
    \ 821L, 823L, 827L, 829L, 839L,", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] res = [];\n    foreach(i; 2 .. n + 1)\n    {\n\
    \        while(n % i == 0)\n        {\n            res ~= i;\n            n /=\
    \ i;\n        }\n    }\n    return res;\n}", "{\n    long[] result = new long[];\n\
    \    long i = 2L;\n    while (n > 1L) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            result ~= i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            factors ~= d;\n         \
    \   n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            factors ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors =\
    \ [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            factors ~= i;\n         \
    \   n /= i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n   \
    \ long[] res = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n     \
    \   if (n % i == 0) \n        {\n            res ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return res;\n}", "{\n    long[] factors = [2L];\n    long[] result = [];\n\
    \    long i = 0;\n    while (n > 1)\n    {\n        if (n % factors[i] == 0)\n\
    \        {\n            result ~= factors[i];\n            n /= factors[i];\n\
    \        }\n        else\n        {\n            i++;\n            if (i == factors.length)\n\
    \            {\n                factors ~= factors[$-1] + 1;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          factors ~= i;\n            n /= i;\n        }\n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = new long[];\n    long i = 2L;\n    while (n > 1L) \n    {\n       \
    \ if (n % i == 0L) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] factors = [];\n    long[] primes = primesTill(n);\n\
    \    foreach(prime; primes)\n    {\n        while(n % prime == 0)\n        {\n\
    \            n /= prime;\n            factors ~= prime;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            factors\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        }\n        else \n        {\n   \
    \         i++;\n        }\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        }\n   \
    \     i++;\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    foreach(i;\
    \ 2..n)\n    {\n        while(n % i == 0)\n        {\n            result ~= i;\n\
    \            n /= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] factors = [];\n    long[] primes = primesUpTo(n);\n    foreach(prime;\
    \ primes)\n    {\n        while(n % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            n /= prime;\n        }\n    }\n    return factors;\n}",
  "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n     \
    \   while (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = primesTill(n);\n    foreach(prime; primes)\n\
    \    {\n        while(n % prime == 0)\n        {\n            n /= prime;\n  \
    \          factors ~= prime;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] result = new long[];\n    long i = 2L;\n\
    \    while (n > 1L) \n    {\n        while (n % i == 0L) \n        {\n       \
    \     result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n    Return the greatest common divisor of two integers.\n  \
    \  >>> gcd(12L, 18L)\n    6L\n    >>> gcd(8L, 12L)\n    4L\n    >>> gcd(8L, 9L)\n\
    \    1L\n*/\nlong gcd(long a, long b) \n{\n    long c;\n    while (b != 0L) \n\
    \    {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return\
    \ a;\n}\n/*\n    Return the least common multiple of two integers.\n    >>> lcm(12L,\
    \ 18L)\n    36L\n    >>> lcm(8L, 12L)\n    24L\n    >>> lcm(8L, 9L)\n    72L\n\
    */\nlong lcm(long a, long b) \n{\n    return a * b / gcd(a, b);\n}\n/*\n    Return\
    \ the least common multiple of all integers in the given array.\n    >>> lcm([12L,\
    \ 18L, 24L])\n    72L\n    >>> lcm([8L, 12L, 9L])\n    72L\n*/\nlong lcm(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) \n    {\n        result =\
    \ lcm(result, i);\n    }\n    return result;\n}\n/*\n    Return the greatest common\
    \ divisor of all integers in the given array.\n    >>> gcd([12L, 18L, 24L])\n\
    \    6L\n    >>> gcd([8L, 12L, 9L])\n    1L\n*/\nlong gcd(long[] a) \n{\n    long\
    \ result = a[0];\n    foreach (i; a[1 .. $]) \n    {\n        result = g", "{\n\
    \    long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            result ~= i;\n          \
    \  n /= i;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % i == 0) \n        {\n            result ~= i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        }\n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L,\
    \ 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L,\
    \ 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L,\
    \ 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L,\
    \ 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L,\
    \ 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L,\
    \ 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L,\
    \ 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L,\
    \ 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L,\
    \ 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L,\
    \ 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L,\
    \ 821L, 823L, 827L, 829L,", "{\n    long[] result = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d++;\n    }\n    return result;\n\
    }\n/*\n    Return the number of divisors of given integer.\n    >>> numDivisors(8L)\n\
    \    4\n    >>> numDivisors(25L)\n    3\n    >>> numDivisors(70L)\n    8\n*/\n\
    long numDivisors(long n) \n{\n    long[] factors = factorize(n);\n    long[] counts\
    \ = [1L];\n    foreach (factor; factors) \n    {\n        if (factor == counts[$-1])\
    \ \n        {\n            counts[$-1]++;\n        } \n        else \n       \
    \ {\n            counts ~= 1;\n        }\n    }\n    return product(counts);\n\
    }\n/*\n    Return the sum of all divisors of given integer.\n    >>> sumDivisors(8L)\n\
    \    15\n    >>> sumDivisors(25L)\n    6\n    >>> sumDivisors(70L)\n    100\n\
    */\nlong sumDivisors(long n) \n{\n    long[] factors = factorize(n);\n    long[]\
    \ counts = [1L];\n    foreach (factor; factors) \n    {\n        if (factor ==\
    \ counts[$-1]) \n        {\n            counts[$-1]++;\n        } \n        else\
    \ \n        {\n            counts ~= 1;\n        }\n    }\n    long[] divisors\
    \ = [1L];\n    foreach (factor; factors) \n    {\n        long[] newDivisors =\
    \ [];\n        foreach (divisor; divisors) \n        {\n            newDivisors\
    \ ~= divisor * factor;\n        }\n        divisors ~= newDivisors;\n    }\n \
    \   return sum(divisors);\n}\n/*\n    Return the sum of all divisors of given\
    \ integer.\n    >>> sumDivisors", "{\n    long[] factors;\n    long[] primes =\
    \ [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L,", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] res =\
    \ new long[];\n    long[] primes = sieve(n);\n    foreach(p; primes)\n    {\n\
    \        while(n % p == 0)\n        {\n            res ~= p;\n            n /=\
    \ p;\n        }\n    }\n    return res;\n}", "{\n    long[] factors = new long[];\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            factors ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
