name: HumanEval_117_select_words
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
  \ number n, you have been tasked to implement \n    a function that returns an array\
  \ of all words from string s that contain exactly \n    n consonants, in order these\
  \ words appear in the string s.\n    If the string s is empty then the function\
  \ should return an empty array.\n    Note: you may assume the input string contains\
  \ only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little\
  \ lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\"\
  , 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n\
  \    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"\
  Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring select_words(string s, long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
  Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
  \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
  \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"\
  ]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
  \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
  d\", \"f\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] words = s.split(\" \");\n    string[] result = new\
    \ string[];\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split();\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = new string[];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    int count = 0;\n        foreach(letter; word)\n        {\n            if(letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u')\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants == n)\n        {\n    \
    \        result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        long count = 0;\n\
    \        foreach(ch; word)\n        {\n            if(ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u')\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.length\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \          {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char;\
    \ word)\n        {\n            if(char == 'a' || char == 'e' || char == 'i' ||\
    \ char == 'o' || char == 'u')\n            {\n                count++;\n     \
    \       }\n        }\n        if(word.length - count == n)\n        {\n      \
    \      result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\nlong countConsonants(string\
    \ s)\n{\n    long result = 0;\n    foreach(c; s)\n    {\n        if(c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  long count = 0;\n        foreach(ch; word)\n        {\n            if(ch ==\
    \ 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n            {\n  \
    \              count++;\n            }\n        }\n        if(count == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split();\n    string[] result = [];\n    foreach(string word; words)\n   \
    \ {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(count_consonants(word) == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(countConsonants(word) == n)\n        {\n            result ~= word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n  \
    \  {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}\nlong count_consonants(string\
    \ s)\n{\n    long result = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(countConsonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split();\n    string[] result = [];\n    foreach(word; words)\n  \
    \  {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        int count = 0;\n\
    \        foreach(c; word)\n        {\n            if(c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u')\n            {\n                count++;\n \
    \           }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split();\n    string[] result;\n   \
    \ foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] res;\n    foreach(string word; words)\n    {\n     \
    \   if(countConsonants(word) == n)\n        {\n            res ~= word;\n    \
    \    }\n    }\n    return res;\n}", "{\n    string[] words = s.split(\" \");\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(word.count_if!(a => a.isConsonant())().length == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = new string[];\n    foreach(string word; words)\n\
    \    {\n        if(word.countConsonants == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(countConsonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n  \
    \  {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(i,\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(count_consonants(word) == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(word.countConsonants() == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(count_consonants(word) == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(countConsonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(string word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(string word; words)\n    {\n        if(word.countConsonants() ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\
    \ {\n        if(countConsonants(word) == n) {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}", "{\n    auto words = split(s);\n   \
    \ string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto words = split(s);\n  \
    \  auto result = filter!(word => count_consonants(word) == n)(words);\n    return\
    \ join(result);\n}", "{\n    string[] words = split(s);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
