name: HumanEval_26_remove_duplicates
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(i; numbers)\n    {\n        if(i in result)\n \
    \           continue;\n        result ~= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhn7wiqs.d(15): Error: incompatible types for `(i) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhn7wiqs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjx7116l.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjx7116l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0fr28nku.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fr28nku.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczb17_vl.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpczb17_vl.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpczb17_vl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48rok3aq.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp48rok3aq.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp48rok3aq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    int i;\n    int j;\n    int k;\n    int count;\n    int\
    \ length;\n    length = numbers.length;\n    result = new long[length];\n    i\
    \ = 0;\n    j = 0;\n    while (i < length) {\n        count = 0;\n        k =\
    \ 0;\n        while (k < length) {\n            if (numbers[i] == numbers[k])\
    \ {\n                count = count + 1;\n            }\n            k = k + 1;\n\
    \        }\n        if (count == 1) {\n            result[j] = numbers[i];\n \
    \           j = j + 1;\n        }\n        i = i + 1;\n    }\n    return result[0..j];\n\
    }\n/*\n Given a list of integers, return the sum of the integers that are in the\
    \ list.\n    >>> sum_of_integers([1L, 2L, 3L])\n    6L\n    >>> sum_of_integers([])\n\
    \    0L\n*/\nlong sum_of_integers(long[] numbers) \n{\n    long result;\n    int\
    \ i;\n    int length;\n    result = 0L;\n    length = numbers.length;\n    i =\
    \ 0;\n    while (i < length) {\n        result = result + numbers[i];\n      \
    \  i = i + 1;\n    }\n    return result;\n}\n/*\n Given a list of integers, return\
    \ the sum of the integers that are in the list.\n    >>> sum_of_integers([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_of_integers([])\n    0L\n*/\nlong sum_of_integers_2(long[]\
    \ numbers) \n{\n    long result;\n    int i;\n    int length;\n    result = 0L;\n\
    \    length = numbers.length;\n    i = 0;\n    while (i < length) {\n        result\
    \ = result + numbers[i];\n        i = i + 1;\n    }\n    return result;\n}\n/*\n\
    \ Given a list of integers, return the sum of the integers that are in the list.\n\
    \    >>> sum_of_\nunittest\n{\n    alias candidate = remove_duplicates;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprlrkiytj.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlrkiytj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers) \n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\n/*\n    Given a list\
    \ of integers, return a list of the integers, omitting any that are less than\
    \ 0.\n    >>> no_neg([1, -2])\n    [1]\n    >>> no_neg([-3, -3, 3, 3])\n    [3,\
    \ 3]\n    >>> no_neg([-1, -1, -1])\n    []\n*/\nlong[] no_neg(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers) \n    {\n    \
    \    if(n >= 0)\n            result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of the integers, omitting any that\
    \ are less than 0.\n    >>> no_9([1, 2, 19])\n    [1, 2]\n    >>> no_9([9, 19,\
    \ 29, 3])\n    [3]\n    >>> no_9([1, 2, 3])\n    [1, 2, 3]\n*/\nlong[] no_9(long[]\
    \ numbers) \n{\n    long[] result = new long[];\n    foreach(n; numbers) \n  \
    \  {\n        if(n % 10 != 9)\n            result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of non-negative integers, return a list of those numbers\
    \ except omitting any that end with 9.\n    >>> no_teen([12, 13, 19, 20])\n  \
    \  [12, 20]\n    >>> no_teen([1, 14, 1])\n    [1, 1]\n    >>> no_teen([15])\n\
    \    []\n*/\nlong[] no_teen(long[] numbers) \n{\n    long[] result = new long[];\n\
    \    foreach(n; numbers) \n    {\n        if(n < 13 || n > 19)\n            result\
    \ ~= n;\n    }\n    return result;\n}\n/*\n   \nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa8vyrbuq.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8vyrbuq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzfgvukkm.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzfgvukkm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfadfuors.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpfadfuors.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfadfuors.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9bo9e4m6.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bo9e4m6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ {\n        if (seen[n]) continue;\n        seen[n] = true;\n        result ~=\
    \ n;\n    }\n    return result;\n}\n/*\n    Given a list of integers, return the\
    \ largest product that can be made by multiplying any three integers.\n    For\
    \ example, if the list is [-10, -10, 5, 2], we should return 500, since that's\
    \ -10 * -10 * 5.\n    You can assume the list has at least three integers.\n \
    \   >>> largest_product([-10L, -10L, 5L, 2L])\n    500L\n*/\nlong largest_product(long[]\
    \ numbers) \n{\n    auto sorted = numbers.sort();\n    auto result = sorted[0]\
    \ * sorted[1] * sorted[$ - 1];\n    result = max(result, sorted[$ - 1] * sorted[$\
    \ - 2] * sorted[$ - 3]);\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return the largest product that can be made by multiplying any three integers.\n\
    \    For example, if the list is [-10, -10, 5, 2], we should return 500, since\
    \ that's -10 * -10 * 5.\n    You can assume the list has at least three integers.\n\
    \    >>> largest_product([-10L, -10L, 5L, 2L])\n    500L\n*/\nlong largest_product(long[]\
    \ numbers) \n{\n    auto sorted = numbers.sort();\n    auto result = sorted[0]\
    \ * sorted[1] * sorted[$ - 1];\n    result = max(result, sorted[$ - 1] * sorted[$\
    \ - 2] * sorted[$ - 3]);\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return the largest product that can be made by multiplying any three integers.\n\
    \    For example, if the list is [-10, -10, 5, 2], we should return 500, since\
    \ that's -10 * -10 * 5.\n    You can assume the list has at least three integers.\n\
    \    >>> largest_product([-10L, -10L, 5L, 2L\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkiwe29l.d(49): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkiwe29l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long[] unique;\n    foreach(num; numbers)\n    {\n    \
    \    if(!unique.canFind(num))\n        {\n            unique ~= num;\n       \
    \ }\n    }\n    foreach(num; unique)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbl1l1hll.d(16): Error: no property `canFind` for type `long[]`\\\
    n/tmp/tmpbl1l1hll.d(23): Error: no property `canFind` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl1l1hll.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ \n    {\n        if (seen[n]) \n        {\n            continue;\n        }\n\
    \        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7u0a4ht5.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7u0a4ht5.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7u0a4ht5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjj3h2gpz.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpjj3h2gpz.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjj3h2gpz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0plpb7xm.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0plpb7xm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm71l1hot.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpm71l1hot.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm71l1hot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of the integers, omitting any that\
    \ are less than 0.\n    >>> no_neg([1, -2])\n    [1]\n    >>> no_neg([-3, -3,\
    \ 3, 3])\n    []\n    >>> no_neg([-1, -1, -1])\n    []\n*/\nlong[] no_neg(long[]\
    \ numbers) \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n\
    \ < 0)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of the integers, omitting any\
    \ that are less than 0.\n    >>> no_9([1, 2, 19])\n    [1, 2]\n    >>> no_9([9,\
    \ 19, 29, 3])\n    [3]\n    >>> no_9([1, 2, 3])\n    [1, 2, 3]\n*/\nlong[] no_9(long[]\
    \ numbers) \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n\
    \ % 10 == 9)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of non-negative integers, return a list of those numbers\
    \ except omitting any that end with 9.\n    >>> no_teen([12, 13, 19, 20])\n  \
    \  [12, 20]\n    >>> no_teen([1, 14, 1])\n    [1, 1]\n    >>> no_teen([15])\n\
    \    []\n*/\nlong[] no_teen(long[] numbers) \n{\n    long[] result;\n    foreach(n;\
    \ numbers)\n    {\n        if(n > 12 && n < 20)\n            continue;\n     \
    \   result ~= n;\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of those numbers\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ozqpzuk.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ozqpzuk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp246w3c22.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp246w3c22.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp246w3c22.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2h8e0qgt.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2h8e0qgt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk0840idt.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0840idt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphnzf_9a3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmphnzf_9a3.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnzf_9a3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(num; numbers)\n    {\n        if(count(numbers,\
    \ num) == 1)\n        {\n            result ~= num;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5wg8rp2.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5wg8rp2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzd8_u4_t.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd8_u4_t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5m9weos6.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m9weos6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppg3rgjbx.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg3rgjbx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of integers where each integer\
    \ is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n*/\n\
    long[] double_list(long[] numbers) \n{\n    long[] result = new long[];\n    foreach(n;\
    \ numbers)\n    {\n        result ~= n * 2;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of integers where each integer is\
    \ multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n*/\n\
    long[] double_list_map(long[] numbers) \n{\n    return numbers.map!(n => n * 2);\n\
    }\n/*\n    Given a list of integers, return a list of integers where each integer\
    \ is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n*/\n\
    long[] double_list_map_lambda(long[] numbers) \n{\n    return numbers.map!((n)\
    \ => n * 2);\n}\n/*\n    Given a list of integers, return a list of integers where\
    \ each integer is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L,\
    \ 4L, 6L]\n*/\nlong[] double_list_map_lambda_2(long[] numbers) \n{\n    return\
    \ numbers.map!((n) => n * 2);\n}\n/*\n    Given a list of integers, return a list\
    \ of integers where each integer is multiplied by 2.\n    >>> double_list([1L,\
    \ 2L, 3L])\n    [2L, 4L, 6L]\n*/\nlong[] double_list_map_lambda_3(long[] numbers)\
    \ \n{\n    return numbers.map!\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4m_8my5.d(71): Error: template argument expected following `!`\\\
    n/tmp/tmpb4m_8my5.d(71): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpb4m_8my5.d(79): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb4m_8my5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long[] seen;\n    foreach(n; numbers)\n    {\n        if(seen.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n        else\n        {\n   \
    \         seen ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqy5csqj.d(16): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqy5csqj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3gkukfe.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3gkukfe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcc8zkd_d.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcc8zkd_d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvb7byp4.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmvb7byp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe46dn3p4.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpe46dn3p4.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe46dn3p4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0a8fwnan.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a8fwnan.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfdt0iet8.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfdt0iet8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] result;\n\tforeach(n; numbers)\n\t{\n\t\tif(numbers.count(n) == 1)\n\t\t\
    {\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xswuwaa.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xswuwaa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq4p8fiyr.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4p8fiyr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnlmtyyuv.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlmtyyuv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7c5n9o6.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7c5n9o6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] result = [];\n\tforeach(n; numbers)\n\t{\n\t\tif(n in result)\n\t\t{\n\t\
    \t\tresult -= n;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphk3ui_hs.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\n/tmp/tmphk3ui_hs.d(17): Error: invalid array operation\
    \ `result -= n` (possible missing [])\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphk3ui_hs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzqbp2eo.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwzqbp2eo.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwzqbp2eo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmao8g7xi.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmao8g7xi.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmao8g7xi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq66bzm12.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpq66bzm12.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq66bzm12.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mkkv5n0.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mkkv5n0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers) \n    {\n        if(result.count(n)\
    \ == 0) \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprl09uica.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprl09uica.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_4aa8cfo.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4aa8cfo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprumx3vbo.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprumx3vbo.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprumx3vbo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdn7ko4ku.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdn7ko4ku.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdn7ko4ku.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo59j2nvh.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo59j2nvh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers) \n    {\n        if(numbers.count(n)\
    \ == 1) \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8b31w3d4.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp8b31w3d4.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8b31w3d4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe82x9l4i.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe82x9l4i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrfozmk0.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrfozmk0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsco3ckz7.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsco3ckz7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7yapy6e5.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yapy6e5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        else\n            result ~= n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5moladfu.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp5moladfu.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5moladfu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnssfw1_b.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnssfw1_b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplpfvy_7j.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpfvy_7j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_2kp5qq.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpq_2kp5qq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1mvdl7o.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1mvdl7o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0r3sdsw3.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0r3sdsw3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9fgjccvn.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fgjccvn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lhn_40x.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lhn_40x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tkjan2h.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tkjan2h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mmx727c.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp0mmx727c.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0mmx727c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmk30_865.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmk30_865.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnavhyyo5.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnavhyyo5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmaehru3c.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmaehru3c.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmaehru3c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4u49z0q.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4u49z0q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long[] unique;\n    unique = numbers.dup;\n    unique.sort;\n\
    \    unique.uniq;\n    foreach(n; numbers)\n    {\n        if(unique.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe35qyrsg.d(15): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpe35qyrsg.d(16): Error: no property `uniq` for type `long[]`\\n/tmp/tmpe35qyrsg.d(19):\
    \ Error: no property `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpe35qyrsg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8e87fl8_.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e87fl8_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsdc1rg_7.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpsdc1rg_7.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsdc1rg_7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcoxhqznx.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcoxhqznx.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcoxhqznx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphma2y1vf.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphma2y1vf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpun5ex629.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpun5ex629.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun5ex629.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, find the pair of adjacent elements that has the\
    \ largest product and return that product.\n    >>> adjacent_product([3, 6, -2,\
    \ -5, 7, 3])\n    21\n*/\nlong adjacent_product(long[] numbers) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. numbers.length - 1)\n    {\n        if(numbers[i]\
    \ * numbers[i + 1] > result)\n            result = numbers[i] * numbers[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    Given a list of integers, find the pair\
    \ of adjacent elements that has the largest product and return that product.\n\
    \    >>> adjacent_product([3, 6, -2, -5, 7, 3])\n    21\n*/\nlong adjacent_product(long[]\
    \ numbers) \n{\n    long result = 0;\n    foreach(i; 0 .. numbers.length - 1)\n\
    \    {\n        if(numbers[i] * numbers[i + 1] > result)\n            result =\
    \ numbers[i] * numbers[i + 1];\n    }\n    return result;\n}\n/*\n    Given a\
    \ list of integers, find the pair of adjacent elements that has the largest product\
    \ and return that product.\n    >>> adjacent_product([3, 6, -2, -5, 7, 3])\n \
    \   21\n*/\nlong adjacent_product(long[] numbers) \n{\n    long result = 0;\n\
    \    foreach(i; 0 .. numbers.length - 1)\n    {\n        if(numbers[i] * numbers[i\
    \ + 1] > result)\n            result = numbers[i] * numbers[i + 1];\n    }\n \
    \   return result;\n}\n/*\n    Given a list of integers, find the pair of adjacent\
    \ elements that has the largest product and return that product.\n    >>> adjacent_product([3,\
    \ 6, -2, -5, 7, 3])\n    21\n*/\nlong adjacent_product(long[] numbers\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxp35_m0.d(72): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxp35_m0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9yyx2ege.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9yyx2ege.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yyx2ege.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(i; numbers)\n    {\n        if(count(numbers,\
    \ i) == 1)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4q6m_hby.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4q6m_hby.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbnbjd4o.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbnbjd4o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5m_g_1k.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpd5m_g_1k.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd5m_g_1k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2_u53vc.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2_u53vc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qee2k7g.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qee2k7g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzfdp9er.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmptzfdp9er.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzfdp9er.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_5whr93o.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_5whr93o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ \n    {\n        if (seen[n]) \n        {\n            continue;\n        }\n\
    \        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8kcfa6c3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp8kcfa6c3.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kcfa6c3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  //long[] numbers = [1L, 2L, 3L, 2L, 4L];\n    long[] result;\n    foreach(n;\
    \ numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n            result\
    \ ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkt1bxcir.d(16): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt1bxcir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsyomjztg.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyomjztg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0d6wsl_.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0d6wsl_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = numbers.dup;\n    foreach(i; 0 .. numbers.length)\n    {\n\
    \        foreach(j; i+1 .. numbers.length)\n        {\n            if(numbers[i]\
    \ == numbers[j])\n            {\n                result.remove(j);\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrf2fm45.d(19): Error: no property `remove` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrf2fm45.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoy4jo0z8.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoy4jo0z8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(number; numbers)\n    {\n        if(count(numbers,\
    \ number) == 1)\n        {\n            result ~= number;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkisax442.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpkisax442.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkisax442.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprqkddefs.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprqkddefs.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqkddefs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6sm_kp19.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sm_kp19.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcj9f2ab.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcj9f2ab.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ \n    {\n        if (!seen[n]) \n        {\n            seen[n] = true;\n  \
    \          result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9b_ygmu.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmps9b_ygmu.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9b_ygmu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwal2vstf.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwal2vstf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphbcv1prq.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbcv1prq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mp6q3jf.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_mp6q3jf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjeo6haw3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpjeo6haw3.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjeo6haw3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvzi2axx7.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzi2axx7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprfeu95mw.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprfeu95mw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ixt0enf.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ixt0enf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    /*\n Given a list of integers, return a list of integers where each integer is\
    \ multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n*/\n\
    long[] double_list(long[] numbers) \n{\n    long[] result = [];\n    foreach(n;\
    \ numbers)\n    {\n        result ~= n * 2;\n    }\n    return result;\n}\n/*\n\
    \ Given a list of integers, return a list of integers where each integer is multiplied\
    \ by 2.\n    >>> double_list([1L, 2L, 3L])\n    [2L, 4L, 6L]\n*/\nlong[] double_list(long[]\
    \ numbers) \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n    \
    \    result ~= n * 2;\n    }\n    return result;\n}\n/*\n Given a list of integers,\
    \ return a list of integers where each integer is multiplied by 2.\n    >>> double_list([1L,\
    \ 2L, 3L])\n    [2L, 4L, 6L]\n*/\nlong[] double_list(long[] numbers) \n{\n   \
    \ long[] result = [];\n    foreach(n; numbers)\n    {\n        result ~= n * 2;\n\
    \    }\n    return result;\n}\n/*\n Given a list of integers, return a list of\
    \ integers where each integer is multiplied by 2.\n    >>> double_list([1L, 2L,\
    \ 3L])\n    [2L, 4L, 6L]\n*/\nlong[] double_list(long[] numbers) \n{\n    long[]\
    \ result = [];\n    foreach(n; numbers)\n    {\n        result ~= n * 2;\n   \
    \ }\n    return result;\n}\n/*\n Given a list of integers, return a list of integers\
    \ where each integer is multiplied by 2.\n    >>> double_list([1L, 2L, 3L])\n\
    \   \nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk88gu8l0.d(78): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk88gu8l0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7mtm_3h.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7mtm_3h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_ikpg4x.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_ikpg4x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new long[];\n    foreach(n; numbers)\n\
    \    {\n        if(n in seen)\n            continue;\n        seen ~= n;\n   \
    \     result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprxam7awu.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprxam7awu.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprxam7awu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto seen = new long[0];\n    auto result = new long[0];\n    foreach(n; numbers)\n\
    \    {\n        if (n in seen)\n            continue;\n        seen ~= n;\n  \
    \      result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2u98gf3.d(16): Error: incompatible types for `(n) in (seen)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2u98gf3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8qjw6uwb.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qjw6uwb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qtjyh0r.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_qtjyh0r.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_qtjyh0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ {\n        if (seen[n]) {\n            continue;\n        }\n        seen[n]\
    \ = true;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzoz8xsj.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpqzoz8xsj.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzoz8xsj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaf6i0phg.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpaf6i0phg.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpaf6i0phg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return the sum of the integers.\n    >>> sum_list([1,\
    \ 2, 3, 4])\n    10\n*/\nlong sum_list(long[] numbers)\n{\n    long sum = 0;\n\
    \    foreach(n; numbers)\n    {\n        sum += n;\n    }\n    return sum;\n}\n\
    /*\n    Given a list of integers, return the sum of the integers.\n    >>> sum_list([1,\
    \ 2, 3, 4])\n    10\n*/\nlong sum_list_2(long[] numbers)\n{\n    return reduce!((a,\
    \ b) => a + b)(numbers);\n}\n/*\n    Given a list of integers, return the sum\
    \ of the integers.\n    >>> sum_list([1, 2, 3, 4])\n    10\n*/\nlong sum_list_3(long[]\
    \ numbers)\n{\n    return reduce!((a, b) => a + b)(numbers);\n}\n/*\n    Given\
    \ a list of integers, return the sum of the integers.\n    >>> sum_list([1, 2,\
    \ 3, 4])\n    10\n*/\nlong sum_list_4(long[] numbers)\n{\n    return reduce!((a,\
    \ b) => a + b)(numbers);\n}\n/*\n    Given a list of integers, return the sum\
    \ of the integers.\n    >>> sum_list([1, 2, 3, 4])\n    10\n*/\nlong sum_list_5(long[]\
    \ numbers)\n{\n    return reduce!((a, b) => a + b)(numbers);\n}\n/*\n    Given\
    \ a list of integers, return the sum of the integers.\n    >>> sum_list([1, 2,\
    \ 3, 4])\n    10\n*/\nlong sum_list_6(long[] numbers)\n{\n    return reduce!((a,\
    \ b) => a + b)(numbers);\n}\n/*\n    Given a list of integers, return the sum\
    \ of the integers.\n    >>> sum_list([\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpft_pq2nl.d(80): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft_pq2nl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjlqogfkx.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlqogfkx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwuv4gpnk.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuv4gpnk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpewyuw7sh.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewyuw7sh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplpxxlzaf.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpxxlzaf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncgcrfnn.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncgcrfnn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of the integers, omitting any\
    \ that are less than 0.\n    >>> no_negatives([1, -2])\n    [1]\n    >>> no_negatives([-3,\
    \ -3, 3, 3])\n    [3, 3]\n    >>> no_negatives([-1, -1, -1])\n    []\n*/\nlong[]\
    \ no_negatives(long[] numbers) \n{\n    long[] result = new long[];\n    foreach(n;\
    \ numbers)\n    {\n        if(n < 0)\n            continue;\n        result ~=\
    \ n;\n    }\n    return result;\n}\n/*\n    Given a list of integers, return a\
    \ list of those integers, omitting any that are less than 0.\n    >>> no_negatives([1,\
    \ -2])\n    [1]\n    >>> no_negatives([-3, -3, 3, 3])\n    [3, 3]\n    >>> no_negatives([-1,\
    \ -1, -1])\n    []\n*/\nlong[] no_negatives(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n < 0)\n         \
    \   continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n    Given\
    \ a list of integers, return a list of those integers, omitting any that are less\
    \ than 0.\n    >>> no_negatives([1, -2])\n    [1]\n    >>> no_negatives([-3, -3,\
    \ 3, 3])\n    [3, 3]\n    >>> no_negatives([-1, -1, -1])\n    []\n*/\nlong[] no_negatives(long[]\
    \ numbers) \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n   \
    \ {\n        if(n < 0)\n            continue;\n        result ~=\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmjmxpmm.d(78): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmmjmxpmm.d(79): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpmmjmxpmm.d(86): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmjmxpmm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2slzy0nv.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2slzy0nv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncikj6xe.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncikj6xe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxsg7qkp.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxsg7qkp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (number;\
    \ numbers) \n    {\n        if (seen[number]) \n        {\n            continue;\n\
    \        }\n        seen[number] = true;\n        result ~= number;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tqf9_8z.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp1tqf9_8z.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tqf9_8z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5uk0cj35.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp5uk0cj35.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uk0cj35.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6rb5o_x4.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rb5o_x4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  //long[] result = new long[];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9dnsa0u.d(47): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9dnsa0u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(number; numbers)\n    {\n        if(!result.canFind(number))\n\
    \        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshsqwz_0.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpshsqwz_0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjw8zi_d.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjw8zi_d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe03fvwk0.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe03fvwk0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpilgzed.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxpilgzed.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    /*\n    Given a list of integers, return a list of the integers, omitting any\
    \ that are less than 0.\n    >>> no_negatives([1, -2])\n    [1]\n    >>> no_negatives([0,\
    \ 1, 2])\n    [0, 1, 2]\n    >>> no_negatives([-3, -3, 3, 3])\n    [3, 3]\n*/\n\
    long[] no_negatives(long[] numbers) \n{\n    auto result = new long[];\n    foreach(n;\
    \ numbers)\n    {\n        if(n >= 0)\n        {\n            result ~= n;\n \
    \       }\n    }\n    return result;\n}\n/*\n    Given a list of integers, return\
    \ a list of those integers, omitting any that are less than 0.\n    >>> no_negatives([1,\
    \ -2])\n    [1]\n    >>> no_negatives([0, 1, 2])\n    [0, 1, 2]\n    >>> no_negatives([-3,\
    \ -3, 3, 3])\n    [3, 3]\n*/\nlong[] no_negatives(long[] numbers) \n{\n    auto\
    \ result = new long[];\n    foreach(n; numbers)\n    {\n        if(n >= 0)\n \
    \       {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    /*\n    Given a list of integers, return a list of those integers, omitting any\
    \ that are less than 0.\n    >>> no_negatives([1, -2])\n    [1]\n    >>> no_negatives([0,\
    \ 1, 2])\n    [0, 1, 2]\n    >>> no_negatives([-3, -3, 3, 3])\n    [3, 3]\n*/\n\
    long[] no_negatives(long[] numbers) \n{\n    auto result = new long[];\n    foreach(n;\
    \ numbers)\n    {\n       \nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplc3u5vlu.d(79): Error: found `unittest` instead of statement\\\
    n/tmp/tmplc3u5vlu.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplc3u5vlu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54nyptzn.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54nyptzn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr1time0k.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1time0k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(number; numbers)\n    {\n        if(count(numbers,\
    \ number) == 1)\n        {\n            result ~= number;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpicdyzu2n.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpicdyzu2n.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicdyzu2n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpazimxk3f.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazimxk3f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppum_pvxx.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppum_pvxx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ro2xhzx.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ro2xhzx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfdoyx_32.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfdoyx_32.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprf3g4abk.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprf3g4abk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45ppk0f7.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp45ppk0f7.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp45ppk0f7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkwxqxesp.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwxqxesp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59816gqj.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59816gqj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp431ompl_.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp431ompl_.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp431ompl_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1s5yzkkx.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1s5yzkkx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cd6dqhd.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7cd6dqhd.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7cd6dqhd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7r61sh2s.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7r61sh2s.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7r61sh2s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcb_7mgcr.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcb_7mgcr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprifao4q9.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprifao4q9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpusko7jm_.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpusko7jm_.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpusko7jm_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo1qllj4i.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo1qllj4i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of the integers, omitting any\
    \ that are less than 0.\n    >>> no_neg([1, -2])\n    [1]\n    >>> no_neg([-3,\
    \ -3, 3, 3])\n    [3, 3]\n    >>> no_neg([-1, -1, -1])\n    []\n*/\nlong[] no_neg(long[]\
    \ numbers) \n{\n    long[] result;\n    foreach(num; numbers)\n    {\n       \
    \ if(num >= 0)\n        {\n            result ~= num;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    Given a list of non-negative integers, return a list of\
    \ those numbers multiplied by 2, omitting any of the resulting numbers that end\
    \ in 2.\n    >>> no_twos([1, 2, 3])\n    [4, 6]\n    >>> no_twos([2, 6, 11])\n\
    \    [4]\n    >>> no_twos([0])\n    [0]\n*/\nlong[] no_twos(long[] numbers) \n\
    {\n    long[] result;\n    foreach(num; numbers)\n    {\n        if(num * 2 %\
    \ 10 != 2)\n        {\n            result ~= num * 2;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    Given a list of integers, return a list of those numbers,\
    \ omitting any that are between 13 and 19 inclusive.\n    >>> no_teen([12, 13,\
    \ 19, 20])\n    [12, 20]\n    >>> no_teen([1, 14, 1])\n    [1, 1]\n    >>> no_teen([15])\n\
    \    []\n*/\nlong[] no_teen(long[] numbers) \n{\n    long[] result;\n    foreach(num;\
    \ numbers)\n    {\n        if(num < 13 || num > 19)\n        {\n            result\
    \ ~= num;\n        }\n    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcj837u3.d(83): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcj837u3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnfyzvbb6.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfyzvbb6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dqj02wc.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dqj02wc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc6vepu8y.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6vepu8y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps6ymzkwc.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6ymzkwc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long[] unique;\n    unique = numbers[0..$];\n    unique.sort();\n\
    \    unique.unique();\n    foreach(n; numbers)\n    {\n        if(unique.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpypd9vvk_.d(15): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpypd9vvk_.d(16): Error: no property `unique` for type `long[]`\\n/tmp/tmpypd9vvk_.d(19):\
    \ Error: no property `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpypd9vvk_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9h0ojgqi.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h0ojgqi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhpbsyvd.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhpbsyvd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qiab0ry.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_qiab0ry.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_qiab0ry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of integers where each integer is\
    \ the sum of the integers in the list.\n    >>> sum_of_numbers([1L, 2L, 3L])\n\
    \    [1L, 3L, 6L]\n*/\nlong[] sum_of_numbers(long[] numbers) \n{\n    long[] result;\n\
    \    long sum = 0;\n    foreach(n; numbers)\n    {\n        sum += n;\n      \
    \  result ~= sum;\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of integers where each integer is the sum of the integers in the\
    \ list.\n    >>> sum_of_numbers([1L, 2L, 3L])\n    [1L, 3L, 6L]\n*/\nlong[] sum_of_numbers(long[]\
    \ numbers) \n{\n    long[] result;\n    long sum = 0;\n    foreach(n; numbers)\n\
    \    {\n        sum += n;\n        result ~= sum;\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of integers where each integer\
    \ is the sum of the integers in the list.\n    >>> sum_of_numbers([1L, 2L, 3L])\n\
    \    [1L, 3L, 6L]\n*/\nlong[] sum_of_numbers(long[] numbers) \n{\n    long[] result;\n\
    \    long sum = 0;\n    foreach(n; numbers)\n    {\n        sum += n;\n      \
    \  result ~= sum;\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of integers where each integer is the sum of the integers in the\
    \ list.\n    >>> sum_of_numbers([1L, 2L, 3L])\n    [1L, 3L, 6L]\n*/\nlong[] sum_of_numbers(long[]\
    \ numbers) \n{\n    long[] result;\n\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphst14sse.d(78): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphst14sse.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24nhbwad.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24nhbwad.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ \n    {\n        if (seen[n]) \n        {\n            continue;\n        }\n\
    \        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6g09mrb9.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6g09mrb9.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g09mrb9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpofd3k7aa.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofd3k7aa.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdjzn_6xe.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdjzn_6xe.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjzn_6xe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphe3wnjt_.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmphe3wnjt_.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphe3wnjt_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspxelare.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpspxelare.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpspxelare.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8oldgcdx.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8oldgcdx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long[] unique;\n    foreach(n; numbers)\n    {\n      \
    \  if(n in unique)\n        {\n            continue;\n        }\n        else\n\
    \        {\n            unique ~= n;\n            result ~= n;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46frrdgx.d(16): Error: incompatible types for `(n) in (unique)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46frrdgx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3k3_jqbz.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3k3_jqbz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprt_o05ea.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprt_o05ea.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprt_o05ea.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_bu__ks3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_bu__ks3.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_bu__ks3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_2gqev2.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpi_2gqev2.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi_2gqev2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_2t2e29.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz_2t2e29.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpz_2t2e29.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpog3qt81m.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog3qt81m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34x0ru8m.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34x0ru8m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(number; numbers) \n    {\n        if(!result.canFind(number))\
    \ \n        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mzgjtju.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mzgjtju.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxdm006x.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxdm006x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6u22x73q.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u22x73q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3972kul.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3972kul.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcliqmy8x.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcliqmy8x.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcliqmy8x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto set = new Set!long();\n    foreach(n; numbers)\n    {\n        set.insert(n);\n\
    \    }\n    return set.keys;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgbt1vz3.d(12): Error: template instance `Set!long` template\
    \ `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V)\
    \ defaultValue)?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgbt1vz3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers) \n    {\n        if(n\
    \ in result) continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ozg3z6q.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_ozg3z6q.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_ozg3z6q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return the sum of the integers that are multiples\
    \ of 3 or 5.\n    >>> sum_multiples_3_5(1, 10)\n    23\n*/\nlong sum_multiples_3_5(long\
    \ start, long end)\n{\n    long sum = 0;\n    foreach(i; start..end)\n    {\n\
    \        if(i % 3 == 0 || i % 5 == 0)\n        {\n            sum += i;\n    \
    \    }\n    }\n    return sum;\n}\n/*\n    Given a list of integers, return the\
    \ sum of the integers that are multiples of 3 or 5.\n    >>> sum_multiples_3_5(1,\
    \ 10)\n    23\n*/\nlong sum_multiples_3_5_2(long start, long end)\n{\n    long\
    \ sum = 0;\n    foreach(i; start..end)\n    {\n        if(i % 3 == 0 || i % 5\
    \ == 0)\n        {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n/*\n    Given a list of integers, return the sum of the integers that are multiples\
    \ of 3 or 5.\n    >>> sum_multiples_3_5(1, 10)\n    23\n*/\nlong sum_multiples_3_5_3(long\
    \ start, long end)\n{\n    long sum = 0;\n    foreach(i; start..end)\n    {\n\
    \        if(i % 3 == 0 || i % 5 == 0)\n        {\n            sum += i;\n    \
    \    }\n    }\n    return sum;\n}\n/*\n    Given a list of integers, return the\
    \ sum of the integers that are multiples of 3 or 5.\n    >>> sum_multiples_3_5(1,\
    \ 10)\n    23\n*/\nlong sum_multiples_3_5_4(long start, long end)\n{\n    long\
    \ sum = 0;\n   \nunittest\n{\n    alias candidate = remove_duplicates;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp627epsp1.d(82): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp627epsp1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyapcozbo.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyapcozbo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxott0bq8.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpxott0bq8.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxott0bq8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mqi_hdz.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mqi_hdz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb2b13nzj.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpb2b13nzj.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpb2b13nzj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnqkg82qd.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqkg82qd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7fkyb1sd.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fkyb1sd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp402l0gz3.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp402l0gz3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwdvyhtn.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwdvyhtn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuwbe5lbe.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwbe5lbe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jz14crn.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jz14crn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbwwtta3s.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpbwwtta3s.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbwwtta3s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8127g13.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8127g13.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp__8y8rkx.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__8y8rkx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(i; numbers)\n    {\n        if(result.count(i)\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpms2e55f2.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpms2e55f2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpabve_p7q.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabve_p7q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjr89e8d.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjr89e8d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpboxz6m0e.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpboxz6m0e.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpboxz6m0e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvjx6jr5f.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjx6jr5f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0o3jpky.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0o3jpky.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[0];\n    foreach(num; numbers)\n    {\n        if(result.count(num)\
    \ == 0)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3dtakv2x.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dtakv2x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpgf555c.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpgf555c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
