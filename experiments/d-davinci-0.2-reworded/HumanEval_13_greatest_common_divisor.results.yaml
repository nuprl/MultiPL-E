name: HumanEval_13_greatest_common_divisor
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a;\n        a\
    \ = b % a;\n        b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_of_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_list([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_of_list(long[] a) \n{\n    long result = a[0];\n\
    \    for (int i = 1; i < a.length; i++)\n        result = least_common_multiple(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_of_list([3L, 5L])\n    1L\n   \
    \ >>> greatest_common_divisor_of_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_of_list(long[]\
    \ a) \n{\n    long result = a[0];\n    for (int i = 1; i < a.length; i++)\n  \
    \      result = greatest_common_divisor(result, a[i]);\n    return result;\n}\n\
    /*\n Return a list of prime factors of a number\n    >>> prime_factors(15L)\n\
    \    [3L, 5L]\n    >>> prime_factors(25L)\n    [5L]\n*/\nlong[] prime_factors(long\
    \ n) \n{\n    long[] result = new long[0];\n    long d = 2L;\n    while (n > 1L)\
    \ \n    {\n        while (\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgfitp4df.d(72): Error: expression expected, not `unittest`\\\
    n/tmp/tmpgfitp4df.d(73): Error: found `{` when expecting `)`\\n/tmp/tmpgfitp4df.d(81):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfitp4df.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a; a = b % a;\
    \  b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a < 0)\n        a = -a;\n    if (b < 0)\n        b = -b;\n\
    \    while (a != b)\n    {\n        if (a > b)\n            a -= b;\n        else\n\
    \            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ long[] a) \n{\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n   \
    \     result = greatest_common_divisor(result, a[i]);\n    return result;\n}\n\
    /*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    375L\n\
    */\nlong least_common_multiple(in long[] a) \n{\n    long result = a[0];\n   \
    \ foreach (i; 1 .. a.length)\n        result = least_common_multiple(result, a[i]);\n\
    \    return result;\n}\n/*\n Return a greatest common divisor of a list of integers\n\
    \    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L,\
    \ 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in long[] a) \n{\n    long\
    \ result = a[0];\n    foreach (i; 1 .. a.length)\n        result = greatest_common_\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr7ez5hb.d(70): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpcr7ez5hb.d(79): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpcr7ez5hb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n  \
    \      return a;\n    if (a > b) \n        return greatest_common_divisor(a %\
    \ b, b);\n    else \n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    225L\n\
    \    \n*/\nlong least_common_multiple(long[] a) \n{\n    long result = 1L;\n \
    \   foreach (i; a)\n        result = least_common_multiple(result, i);\n    return\
    \ result;\n}\n/*\n Return a greatest common divisor of a list of integers\n  \
    \  >>> greatest_common_div\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuem_kcw8.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuem_kcw8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n  \
    \      return a;\n    if (a == b) \n        return a;\n    if (a == 1L || b ==\
    \ 1L) \n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) \n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L) \n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L\
    \ != 0L && b % 2L == 0L) \n        return greatest_common_divisor(a, b / 2L);\n\
    \    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqukbfgap.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqukbfgap.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return\
    \ greatest_common_divisor(a - b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b - a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) return b;\n    if (b == 0L) return a;\n   \
    \ if (a == b) return a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L,\
    \ b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppybdhv9u.d(20): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppybdhv9u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a greatest common divisor of a list of integers\n    >>> greatest_common_divisor([3L,\
    \ 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n\
    */\nlong greatest_common_divisor(in long[] a) \n{\n    if (a.length == 0)\n  \
    \      return 0L;\n    else if (a.length == 1)\n        return a[0];\n    else\n\
    \        return a.reduce!greatest_common_divisor;\n}\n/*\n Return a least common\
    \ multiple of a list of integers\n    >>> least_common_multiple([3L, 5L, 7L])\n\
    \    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    375L\n*/\nlong\
    \ least_common_multiple(in long[] a) \n{\n    if (a.length == 0)\n        return\
    \ 0L;\n    else if (a.length == 1)\n        return a[0];\n    else\n        return\
    \ a.reduce!least_common_multiple;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ long[] a) \n{\n    if (a.length == 0)\n        return 0L;\nunittest\n{\n   \
    \ alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) ==\
    \ 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jbq8xnt.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jbq8xnt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    else\n\
    \        return greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n  \
    \  alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n  \
    \      return a;\n    if (a == b) \n        return a;\n    if (a == 1L || b ==\
    \ 1L) \n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L) \n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L) \n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L\
    \ != 0L && b % 2L == 0L) \n        return greatest_common_divisor(a, b / 2L);\n\
    \    if (a % 2L != 0L && b % 2L != 0L && a < b) \n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b) \n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (b != 0) {\n        c = a % b;\n    \
    \    a = b;\n        b = c;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : (greatest_common_divisor(a >> 1, b) << 1);\n    if ((b & 1) == 0)\n\
    \        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return\
    \ greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg5m0ja5m.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dfd]\\n??:? void tmpg5m0ja5m.__unittest_L29_C1()\
    \ [0x427b6b]\\n??:? void tmpg5m0ja5m.__modtest() [0x427b80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a98d]\\n??:? runModuleUnitTests [0x42b8f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42824c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281d3]\\n??:? _d_run_main [0x42813e]\\n??:? main [0x427b93]\\\
    n??:? __libc_start_main [0xca68e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a > b)\n        return greatest_common_divisor((a\
    \ - b) / 2L, b);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return\
    \ greatest_common_divisor((b - a) / 2L, a);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n \
    \       return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    if (a > b) \n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else \n    {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc7to747.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc7to747.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n        return\
    \ a;\n    }\n    if (a > b) \n    {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(long[] a) \n{\n    long result = 1L;\n    foreach\
    \ (i; a) \n    {\n        result = least_common_multiple(result, i);\n    }\n\
    \    return result;\n}\n/*\n Return a least common multiple of a list of integers\n\
    \    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n*/\nlong least_common_multiple_list(Tuple!(long[]) a) \n{\n\
    \    long result = 1L;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkz57gfd8.d(82): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkz57gfd8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkt2o1dgg.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt2o1dgg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a; a = b % a;\
    \  b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[] a) \n\
    {\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8og8qiqw.d(79): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8og8qiqw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    while (a != b)\n    {\n        if (a > b)\n            a -= b;\n  \
    \      else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) return b;\n    if (b == 0L) return a;\n   \
    \ if (a == b) return a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L,\
    \ b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqiwu7ci.d(20): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqiwu7ci.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return -1L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L,\
    \ 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n*/\nlong greatest_common_divisor(long[]\
    \ a) \n{\n    if (a.length == 0)\n        return 0L;\n    if (a.length == 1)\n\
    \        return a[0];\n    long result = greatest_common_divisor(a[0], a[1]);\n\
    \    for (long\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8f2bfag.d(59): Error: no identifier for declarator `long`\\\
    n/tmp/tmpk8f2bfag.d(59): Error: expression expected, not `unittest`\\n/tmp/tmpk8f2bfag.d(60):\
    \ Error: found `{` when expecting `;` following `for` condition\\n/tmp/tmpk8f2bfag.d(61):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpk8f2bfag.d(61): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmpk8f2bfag.d(61): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8f2bfag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ics8wdc.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ics8wdc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a;\n        a\
    \ = b % a;\n        b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    } \n    else\
    \ if (b == 0L) \n    {\n        return a;\n    }\n    else \n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return a == 0 ? b : greatest_common_divisor(b % a, a);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    else\n\
    \        return greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n  \
    \  alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) \n    {\n        c = a;\n  \
    \      a = b % a;\n        b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) return b;\n    if (b == 0L) return a;\n   \
    \ if (a == b) return a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L,\
    \ b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkoecj7yr.d(20): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkoecj7yr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3L,\
    \ 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong\
    \ greatest_common_divisor(long a, long b) \n{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor\
    \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n \
    \   >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppdrb6sqk.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdrb6sqk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqf4rwacu.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf4rwacu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a; a = b % a;\
    \  b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n        return\
    \ a;\n    }\n    if (a == 1L || b == 1L) \n    {\n        return 1L;\n    }\n\
    \    if (a % 2L == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n     \
    \   return greatest_common_divisor(a / 2L, b);\n    }\n    if (a % 2L != 0L &&\
    \ b % 2L == 0L) \n    {\n        return greatest_common_divisor(a, b / 2L);\n\
    \    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpysy19865.d(41): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysy19865.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdj6f_sny.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdj6f_sny.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a;\n        a\
    \ = b % a;\n        b = c;\n    }\n    return b;\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n\
    \    2520L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result\
    \ = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    2520L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_9l7rzk.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_9l7rzk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a % 2 == 0) && (b % 2 == 0))\n        return 2 *\
    \ greatest_common_divisor(a / 2, b / 2);\n    if ((a % 2 == 0) && (b % 2 != 0))\n\
    \        return greatest_common_divisor(a / 2, b);\n    if ((a % 2 != 0) && (b\
    \ % 2 == 0))\n        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02mxobo4.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02mxobo4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(long[] list) \n{\n    long result = 1L;\n    foreach\
    \ (elem; list)\n        result = least_common_multiple(result, elem);\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n*/\nlong least_common_multiple_list(long[] list) \n{\n    long\
    \ result = 1L;\n    foreach (elem; list)\n        result = least_common_multiple(result,\
    \ elem);\n    return result;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>>\
    \ least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ list) \n{\n    long result = 1L;\n    foreach (elem; list)\n        result =\
    \ least_common_multiple(result, elem);\n    return result;\n}\n/*\n Return a least\
    \ common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qmuc390.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qmuc390.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return\
    \ greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a, b\
    \ - a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    while (a != b)\n    {\n        if (a > b)\n            a -= b;\n  \
    \      else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) return b;\n    if (b == 0L) return a;\n   \
    \ if (a == b) return a;\n    if (a == 1L || b == 1L) return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a / 2L,\
    \ b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n\
    \ Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ \n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result = 1L;\n\
    \    foreach (i; a) \n    {\n        result = least_common_multiple(result, i);\n\
    \    }\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    \n*/\nlong least_common_multiple_list(long[] a) \n{\n  \
    \  long result = 1L;\n    foreach (i; a) \n    {\n        result = least_\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv0p5dfy4.d(65): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpv0p5dfy4.d(74): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpv0p5dfy4.d(74): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0p5dfy4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n \
    \       return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n        return b;\n    if (b == 0L) \n  \
    \      return a;\n    if (a > b) \n        return greatest_common_divisor(a %\
    \ b, b);\n    else \n        return greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long\
    \ result = a[0];\n    for (int i = 1; i < a.length; i++) \n    {\n        result\
    \ = least_common_multiple(result, a[i]);\n    }\n    return result;\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 5L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = a[0];\n    for (int i = 1; i < a.length; i++) \n \
    \   {\n        result = least_common_multiple(result, a[i]);\n    }\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfntodca.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfntodca.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\
    \ if (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    if (a > b)\n        return greatest_common_divisor(b, a);\n    return\
    \ greatest_common_divisor(b % a, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a == 2L || b == 2L)\n        return 1L;\n    if (a\
    \ % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a /\
    \ 2L, b / 2L);\n    if (a % 2L == 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegul_ucd.d(29): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpegul_ucd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor([3L,\
    \ 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n\
    */\nlong greatest_common_divisor(in long[] a) \n{\n    if (a.length == 0)\n  \
    \      return 0L;\n    if (a.length == 1)\n        return a[0];\n    long result\
    \ = greatest_common_divisor(a[0], a[1]);\n    for (size_t i = 2; i < a.length;\
    \ i++)\n        result = greatest_common_divisor(result, a[i]);\n    return result;\n\
    }\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptjrl809a.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjrl809a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    while (a != b) {\n        if (a > b)\n            a -= b;\n       \
    \ else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ list) \n{\n    if (list.length == 0)\n        return 1L;\n    if (list.length\
    \ == 1)\n        return list[0];\n    return least_common_multiple(list[0], least_common_multiple_list(list[1\
    \ .. $]));\n}\n/*\n Return a least common multiple of a list of integers\n   \
    \ >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n\
    \    \n*/\nlong least_common_multiple_list(long[] list) \n{\n    if (list.length\
    \ == 0)\n        return 1L;\n    if (list.length == 1)\n        return list[0];\n\
    \    return least_common_multiple(list[0], least_common_multiple_list(list[1 ..\
    \ $]));\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_moqjy8g.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_moqjy8g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a;\n        a\
    \ = b % a;\n        b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    else\n\
    \        return greatest_common_divisor((b - a) / 2L, a);\n}\n/*\n Return a least\
    \ common multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n\
    \    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple_list([25L, 15L, 75L])\n  \
    \  75L\n*/\nlong least_common_multiple_list(in long[] a) \n{\n    long result\
    \ = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result, i);\n\
    \    return result;\n}\n/*\n Return a greatest common divisor of a list of integers\n\
    \    >>> greatest_common_divisor_list([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor_list([25L,\
    \ 15L, 75L])\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2f_vxrz.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2f_vxrz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n \
    \       return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L, 3L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L,\
    \ 2L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[] list) \n{\n\
    \    long result = 1L;\n    foreach (i; list) {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n  \
    \  >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L])\n\
    \    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L, 2L])\n    150L\n\
    \    \n*/\nlong least_common_multiple_list(long[] list) \n{\n    long result =\
    \ 1L;\n    foreach (i; list) {\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkdfafgl.d(72): Error: found `unittest` instead of statement\\\
    n/tmp/tmptkdfafgl.d(81): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkdfafgl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    while (a != b)\n    {\n        if (a > b)\n            a -= b;\n  \
    \      else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b =\
    \ -b;\n    while (a != b) {\n        if (a > b)\n            a -= b;\n       \
    \ else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b\
    \ == 0L) \n    {\n        return a;\n    }\n    if (a > b) \n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else \n    {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiw3rwgkm.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiw3rwgkm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (b != 0) {\n        c = a % b;\n    \
    \    a = b;\n        b = c;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    if (b\
    \ == 0L)\n    {\n        return a;\n    }\n    if (a > b)\n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    if (b\
    \ == 0L)\n    {\n        return a;\n    }\n    if (a > b)\n    {\n        return\
    \ greatest_common_divisor(a % b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcigxw2md.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcigxw2md.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
