language: d
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool is_min = true;\n    foreach (el; lst)\n    {\n        if (is_min)\n\
    \        {\n            result[i] = sorted[0];\n            sorted = sorted[1..$];\n\
    \        }\n        else\n        {\n            result[i] = sorted[$-1];\n  \
    \          sorted = sorted[0..$-1];\n        }\n        is_min = !is_min;\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpagudk0rf.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpagudk0rf.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagudk0rf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int index = 0;\n  \
    \  int min = 0;\n    int max = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (index < lst.length)\n    {\n        if (is_min)\n        {\n            res[index]\
    \ = lst[min];\n            min++;\n        }\n        else\n        {\n      \
    \      res[index] = lst[max];\n            max--;\n        }\n        is_min =\
    \ !is_min;\n        index++;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbbd_c8n6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbbd_c8n6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = lst[i];\n         \
    \   i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n \
    \           j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nuahndp.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2nuahndp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    int i = 0;\n    while (lst_copy.length > 0)\n    {\n       \
    \ res[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n        if (lst_copy.length\
    \ == 0)\n            break;\n        res[i+1] = lst_copy[$-1];\n        lst_copy\
    \ = lst_copy[0..$-1];\n        i += 2;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5ti7tttu.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x429ab1]\n??:? void tmp5ti7tttu.__unittest_L36_C1() [0x4284b3]\n??:?
    void tmp5ti7tttu.__modtest() [0x428a28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42973a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b479]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b508]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b405]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429711]\n??:? runModuleUnitTests [0x42e4c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429fc8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429f4f]\n??:? _d_run_main [0x429eba]\n??:? main [0x428a3b]\n??:?
    __libc_start_main [0xf74d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (k < result.length)\n    {\n        if (i <= j)\n \
    \       {\n            result[k] = sorted[i];\n            i++;\n        }\n \
    \       if (i <= j)\n        {\n            result[k] = sorted[j];\n         \
    \   j--;\n        }\n        k++;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk5660mny.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpk5660mny.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5660mny.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int[] idx =\
    \ new int[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        idx[i]\
    \ = i;\n    sort(idx, (a, b) => lst[a] < lst[b]);\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[idx[i++]];\n        if (i <= j)\n            res[k++] = lst[idx[j--]];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpft_u1ql_.d(25): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpft_u1ql_.d(27): Error: cannot implicitly convert
    expression `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpft_u1ql_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] lst_sorted =\
    \ lst.dup;\n    lst_sorted.sort;\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i <= j) {\n        res[k++] = lst_sorted[i++];\n \
    \       if (i <= j) res[k++] = lst_sorted[j--];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjf2nj2v.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmprjf2nj2v.d(24):
    Error: cannot implicitly convert expression `lst.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjf2nj2v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool is_min = true;\n    foreach (el; lst)\n    {\n        if (is_min)\n\
    \        {\n            result[i] = sorted[i];\n            i++;\n        }\n\
    \        else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqjge9z70.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpqjge9z70.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjge9z70.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool asc = true;\n    while\
    \ (i <= j)\n    {\n        if (asc)\n        {\n            result[i] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            result[j] =\
    \ lst[i];\n            j--;\n        }\n        asc = !asc;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7jvc58d.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi7jvc58d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] tmp =\
    \ lst.dup;\n    sort(tmp);\n    int i = 0;\n    int j = tmp.length - 1;\n    int\
    \ k = 0;\n    while (i <= j)\n    {\n        res[k++] = tmp[i++];\n        if\
    \ (i <= j)\n            res[k++] = tmp[j--];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdio6izt4.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpdio6izt4.d(25): Error: cannot implicitly convert
    expression `tmp.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdio6izt4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyd28826.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxyd28826.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1klbnwse.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1klbnwse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqw1b9xm_.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqw1b9xm_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n        if (flag)\n\
    \        {\n            res[i] = lst_copy[i];\n            i++;\n        }\n \
    \       else\n        {\n            res[i] = lst_copy[j];\n            j--;\n\
    \        }\n        flag = !flag;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L])\
    \ == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L,\
    \ 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L,\
    \ 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5b9t0hlf.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmp5b9t0hlf.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5b9t0hlf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j) {\n        result[k++] = lst[i++];\n        if (i <= j) {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy1o3qinc.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy1o3qinc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        if (lst[i] < lst[j])\n         \
    \   i++;\n        else\n            j--;\n        if (i <= j)\n            res[k++]\
    \ = max(lst[i], lst[j]);\n        if (lst[i] > lst[j])\n            i++;\n   \
    \     else\n            j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0zwlaq7.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpb0zwlaq7.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpb0zwlaq7.d(33): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpb0zwlaq7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    bool\
    \ is_min = true;\n    while (lst.length != 0)\n    {\n        if (is_min)\n  \
    \      {\n            res[i] = lst[0];\n            lst = lst[1..$];\n       \
    \ }\n        else\n        {\n            res[i] = lst[$-1];\n            lst\
    \ = lst[0..$-1];\n        }\n        i++;\n        is_min = !is_min;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpb39hnhjq.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x42893d]\n??:? void tmpb39hnhjq.__unittest_L40_C1() [0x4282bf]\n??:?
    void tmpb39hnhjq.__modtest() [0x4286c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430fe8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430ac5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b885]\n??:? runModuleUnitTests [0x42c7f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d87]\n??:? _d_run_main [0x428cf2]\n??:? main [0x4286d3]\n??:?
    __libc_start_main [0x8bb10554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvxf5csrt.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvxf5csrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    lst_copy.sort;\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    while (i <= j)\n    {\n        result[i] = lst_copy[i];\n        if\
    \ (i != j)\n            result[j] = lst_copy[j];\n        i++;\n        j--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp729cl488.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp729cl488.d(25):
    Error: cannot implicitly convert expression `lst_copy.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp729cl488.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int[] idx =\
    \ new int[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int k\
    \ = 0;\n    while (i <= j)\n    {\n        if (k % 2 == 0)\n        {\n      \
    \      res[k] = lst[i];\n            idx[k] = i;\n            i++;\n        }\n\
    \        else\n        {\n            res[k] = lst[j];\n            idx[k] = j;\n\
    \            j--;\n        }\n        k++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp739urygl.d(24): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp739urygl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool flag = true;\n    foreach (long x; lst_copy)\n    {\n       \
    \ if (flag)\n        {\n            res[i] = x;\n            i++;\n        }\n\
    \        else\n        {\n            res[j] = x;\n            j--;\n        }\n\
    \        flag = !flag;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp886spd4y.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmp886spd4y.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp886spd4y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    bool asc = true;\n\
    \    int i = 0;\n    while (lst.length > 0)\n    {\n        long min = lst[0];\n\
    \        long max = lst[0];\n        foreach (long x; lst)\n        {\n      \
    \      if (x < min)\n                min = x;\n            if (x > max)\n    \
    \            max = x;\n        }\n        if (asc)\n        {\n            res[i]\
    \ = min;\n            lst = lst.remove(min);\n        }\n        else\n      \
    \  {\n            res[i] = max;\n            lst = lst.remove(max);\n        }\n\
    \        i++;\n        asc = !asc;\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptys06ifk.d(38): Error: no property `remove` for type `long[]`\n/tmp/tmptys06ifk.d(43):
    Error: no property `remove` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptys06ifk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    lst.sort();\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0u3l2ewz.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmp0u3l2ewz.d(24):
    Error: cannot implicitly convert expression `lst.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0u3l2ewz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool flag = true;\n    while (i < lst.length)\n\
    \    {\n        if (flag)\n        {\n            result[i] = lst[j];\n      \
    \      j--;\n        }\n        else\n        {\n            result[i] = lst[j];\n\
    \            j++;\n        }\n        flag = !flag;\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprxq2k0wd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprxq2k0wd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    bool is_min\
    \ = true;\n    long min_val = 0;\n    long max_val = 0;\n    int min_index = 0;\n\
    \    int max_index = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n   \
    \     if (is_min)\n        {\n            min_val = lst[0];\n            min_index\
    \ = 0;\n            for (int j = 1; j < lst.length; j++)\n            {\n    \
    \            if (lst[j] < min_val)\n                {\n                    min_val\
    \ = lst[j];\n                    min_index = j;\n                }\n         \
    \   }\n            result[i] = min_val;\n            lst[min_index] = long.max;\n\
    \            is_min = false;\n        }\n        else\n        {\n           \
    \ max_val = lst[0];\n            max_index = 0;\n            for (int j = 1; j\
    \ < lst.length; j++)\n            {\n                if (lst[j] > max_val)\n \
    \               {\n                    max_val = lst[j];\n                   \
    \ max_index = j;\n                }\n            }\n            result[i] = max_val;\n\
    \            lst[max_index] = long.min;\n            is_min = true;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpedc6lcaa.d(68): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a5d]\n??:? void tmpedc6lcaa.__unittest_L64_C1() [0x428186]\n??:?
    void tmpedc6lcaa.__modtest() [0x4287dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431108]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430be5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b9a5]\n??:? runModuleUnitTests [0x42c911]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ea7]\n??:? _d_run_main [0x428e12]\n??:? main [0x4287ef]\n??:?
    __libc_start_main [0xf6cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] sorted = lst.dup;\n\
    \    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    int k =\
    \ 0;\n    while (i <= j)\n    {\n        res[k++] = sorted[i++];\n        if (i\
    \ <= j) res[k++] = sorted[j--];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnq94xgg5.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmpnq94xgg5.d(24):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq94xgg5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    bool inc = true;\n    while (i <= j)\n    {\n     \
    \   if (inc)\n        {\n            res[i] = lst[i];\n            i++;\n    \
    \    }\n        else\n        {\n            res[j] = lst[i];\n            j--;\n\
    \        }\n        inc = !inc;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoon0jalq.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoon0jalq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            result[k] = min(lst[i], lst[j]);\n\
    \            if (lst[i] < lst[j])\n                i++;\n            else\n  \
    \              j--;\n        }\n        else\n        {\n            result[k]\
    \ = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n\
    \            else\n                j--;\n        }\n        k++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4nz5_fpy.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmp4nz5_fpy.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmp4nz5_fpy.d(37): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4nz5_fpy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    if (lst.length == 0)\n        return result;\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++]\
    \ = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp49l0bdst.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp49l0bdst.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] sorted = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    int i = 0;\n    while (lst_copy.length > 0)\n    {\n       \
    \ sorted[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n        if (lst_copy.length\
    \ > 0)\n        {\n            sorted[i+1] = lst_copy[$-1];\n            lst_copy\
    \ = lst_copy[0..$-2];\n        }\n        i += 2;\n    }\n    return sorted;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmwtew99m.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x429ab1]\n??:? void tmpmwtew99m.__unittest_L37_C1() [0x42825e]\n??:?
    void tmpmwtew99m.__modtest() [0x428a28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42973a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b479]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b508]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b405]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429711]\n??:? runModuleUnitTests [0x42e4c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429fc8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429f4f]\n??:? _d_run_main [0x429eba]\n??:? main [0x428a3b]\n??:?
    __libc_start_main [0x61020554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = lst[i];\n         \
    \   i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n \
    \           j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nuahndp.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2nuahndp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool flag = true;\n    while (i < j)\n    {\n\
    \        if (flag)\n        {\n            res[i] = min(lst);\n            lst.remove(res[i]);\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = max(lst);\n\
    \            lst.remove(res[j]);\n            j--;\n        }\n        flag =\
    \ !flag;\n    }\n    res[i] = lst[0];\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_2gghn0.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpz_2gghn0.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpz_2gghn0.d(30): Error:
    no property `remove` for type `long[]`\n/tmp/tmpz_2gghn0.d(35): Error: undefined
    identifier `max`, did you mean function `fmax`?\n/tmp/tmpz_2gghn0.d(36): Error:
    no property `remove` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpz_2gghn0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool asc = true;\n    while (i < lst.length)\n\
    \    {\n        if (asc)\n        {\n            res[i] = lst[j];\n          \
    \  j--;\n        }\n        else\n        {\n            res[i] = lst[j];\n  \
    \          j++;\n        }\n        i++;\n        asc = !asc;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_gluqek.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf_gluqek.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 0; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 0; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp29zhlwij.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp29zhlwij.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_i = 0;\n            for (int k = 1; k < lst.length; k++)\n     \
    \       {\n                if (lst[k] < min)\n                {\n            \
    \        min = lst[k];\n                    min_i = k;\n                }\n  \
    \          }\n            res[i] = min;\n            lst[min_i] = long.max;\n\
    \            i++;\n        }\n        else\n        {\n            long max =\
    \ lst[0];\n            int max_i = 0;\n            for (int k = 1; k < lst.length;\
    \ k++)\n            {\n                if (lst[k] > max)\n                {\n\
    \                    max = lst[k];\n                    max_i = k;\n         \
    \       }\n            }\n            res[j] = max;\n            lst[max_i] =\
    \ long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpas0piwuc.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpas0piwuc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst2\
    \ = lst.dup;\n    int i = 0;\n    while (lst2.length > 0)\n    {\n        res[i]\
    \ = lst2[0];\n        lst2 = lst2[1..$];\n        if (lst2.length == 0)\n    \
    \        break;\n        res[i+1] = lst2[$-1];\n        lst2 = lst2[0..$-1];\n\
    \        i += 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwp5d04g4.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x429ab1]\n??:? void tmpwp5d04g4.__unittest_L36_C1() [0x4284b3]\n??:?
    void tmpwp5d04g4.__modtest() [0x428a28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42973a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b479]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b508]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b405]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429711]\n??:? runModuleUnitTests [0x42e4c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429fc8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429f4f]\n??:? _d_run_main [0x429eba]\n??:? main [0x428a3b]\n??:?
    __libc_start_main [0x30d1c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzbthnc_5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzbthnc_5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool asc = true;\n    while (i <= j)\n    {\n\
    \        if (asc)\n        {\n            res[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            res[j] = lst[i];\n          \
    \  j--;\n        }\n        asc = !asc;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0gzc5cwd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0gzc5cwd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    while (i <= j)\n    {\n        res[i] = lst_copy[i];\n        if (i\
    \ != j)\n            res[j] = lst_copy[j];\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1x8otmn8.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmp1x8otmn8.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1x8otmn8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            result[i] = min(lst);\n    \
    \        lst = remove(lst, result[i]);\n            i++;\n        }\n        else\n\
    \        {\n            result[j] = max(lst);\n            lst = remove(lst, result[j]);\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp85l15pej.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmp85l15pej.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmp85l15pej.d(30): Error:
    undefined identifier `remove`\n/tmp/tmp85l15pej.d(35): Error: undefined identifier
    `max`, did you mean function `fmax`?\n/tmp/tmp85l15pej.d(36): Error: undefined
    identifier `remove`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85l15pej.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            res[i] = min;\n            lst[min_index] =\
    \ long.max;\n            i++;\n        }\n        else\n        {\n          \
    \  long max = lst[0];\n            int max_index = 0;\n            for (int k\
    \ = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            res[j] = max;\n        \
    \    lst[max_index] = long.min;\n            j--;\n        }\n        is_min =\
    \ !is_min;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8zjs5by8.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8zjs5by8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_509oevz.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp_509oevz.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_509oevz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (i == j)\n        {\n            result[k] = lst[i];\n\
    \            break;\n        }\n        result[k] = lst[i];\n        k++;\n  \
    \      result[k] = lst[j];\n        k++;\n        i++;\n        j--;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxlqnqu_.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnxlqnqu_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool asc = true;\n    while (i <= j)\n    {\n\
    \        if (asc)\n        {\n            res[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            res[j] = lst[i];\n          \
    \  j--;\n        }\n        asc = !asc;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0gzc5cwd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0gzc5cwd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j) {\n        res[k++] = lst[i++];\n        if (i <= j) {\n            res[k++]\
    \ = lst[j--];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68ha_t4o.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68ha_t4o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = min(lst);\n       \
    \     lst = remove(lst, res[i]);\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = max(lst);\n            lst = remove(lst, res[j]);\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp46ajs_p9.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmp46ajs_p9.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmp46ajs_p9.d(30): Error:
    undefined identifier `remove`\n/tmp/tmp46ajs_p9.d(35): Error: undefined identifier
    `max`, did you mean function `fmax`?\n/tmp/tmp46ajs_p9.d(36): Error: undefined
    identifier `remove`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp46ajs_p9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n\
    \        if (flag)\n        {\n            result[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            result[j] = lst[i];\n       \
    \     j--;\n        }\n        flag = !flag;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb1td__1e.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpb1td__1e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvxf5csrt.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvxf5csrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfw_7f6_3.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfw_7f6_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    bool is_min = true;\n    while (lst.length > 0)\n    {\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        int min_index = 0;\n        int\
    \ max_index = 0;\n        for (int j = 0; j < lst.length; j++)\n        {\n  \
    \          if (lst[j] < min)\n            {\n                min = lst[j];\n \
    \               min_index = j;\n            }\n            if (lst[j] > max)\n\
    \            {\n                max = lst[j];\n                max_index = j;\n\
    \            }\n        }\n        if (is_min)\n        {\n            res[i]\
    \ = min;\n            lst = lst[0..min_index] ~ lst[min_index+1..$];\n       \
    \ }\n        else\n        {\n            res[i] = max;\n            lst = lst[0..max_index]\
    \ ~ lst[max_index+1..$];\n        }\n        is_min = !is_min;\n        i++;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = min(lst[i++], lst[j--]);\n        if (i <= j)\n           \
    \ result[k++] = max(lst[i++], lst[j--]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhonigct.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmphhonigct.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmphhonigct.d(29): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphhonigct.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    \n    long[] result = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    \n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    \n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvrst2f1.d(24): Error: no property `sort` for type `long[]`\n/tmp/tmphvrst2f1.d(27):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvrst2f1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            res[k] = min(lst[i],\
    \ lst[j]);\n            if (lst[i] < lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        else\n        {\n         \
    \   res[k] = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n        \
    \        i++;\n            else\n                j--;\n        }\n        k++;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpve5fmdeb.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpve5fmdeb.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpve5fmdeb.d(35): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpve5fmdeb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] copy\
    \ = lst.dup;\n    sort(copy);\n    int i = 0;\n    int j = lst.length - 1;\n \
    \   int k = 0;\n    while (i <= j)\n    {\n        result[k++] = copy[i++];\n\
    \        if (i <= j)\n            result[k++] = copy[j--];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1j78b9j.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpx1j78b9j.d(25): Error: cannot implicitly convert
    expression `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx1j78b9j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] sorted = new long[lst.length];\n    long[] lst_copy\
    \ = new long[lst.length];\n    lst_copy = lst.dup;\n    sort(lst_copy);\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n  \
    \  {\n        sorted[k] = lst_copy[i];\n        k++;\n        if (i != j)\n  \
    \      {\n            sorted[k] = lst_copy[j];\n            k++;\n        }\n\
    \        i++;\n        j--;\n    }\n    return sorted;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6g5gwz38.d(24): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmp6g5gwz38.d(26): Error: cannot implicitly convert
    expression `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6g5gwz38.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool is_min = true;\n    foreach (elem; lst_copy)\n    {\n       \
    \ if (is_min)\n        {\n            res[i] = elem;\n            i++;\n     \
    \   }\n        else\n        {\n            res[j] = elem;\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnbv5t37i.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpnbv5t37i.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnbv5t37i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        if (lst[i] < lst[j])\n         \
    \   i++;\n        else\n            j--;\n        if (i <= j)\n            res[k++]\
    \ = max(lst[i], lst[j]);\n        if (lst[i] > lst[j])\n            i++;\n   \
    \     else\n            j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb0zwlaq7.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpb0zwlaq7.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpb0zwlaq7.d(33): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpb0zwlaq7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_509oevz.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp_509oevz.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_509oevz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++]\
    \ = lst[j--];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplrovwk8e.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplrovwk8e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool asc = true;\n    while (i <= j)\n    {\n\
    \        if (asc)\n        {\n            res[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            res[i] = lst[j];\n          \
    \  j--;\n        }\n        asc = !asc;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptdj0a2qm.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptdj0a2qm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            res[k] = min(lst[i], lst[j]);\n \
    \           if (lst[i] < lst[j])\n                i++;\n            else\n   \
    \             j--;\n        }\n        else\n        {\n            res[k] = max(lst[i],\
    \ lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        k++;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdnrd3p0o.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpdnrd3p0o.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpdnrd3p0o.d(37): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdnrd3p0o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    while\
    \ (lst.length > 0)\n    {\n        res[i] = lst[0];\n        lst = lst[1..$];\n\
    \        if (lst.length == 0) break;\n        res[i+1] = lst[$-1];\n        lst\
    \ = lst[0..$-1];\n        i += 2;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L])\
    \ == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L,\
    \ 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L,\
    \ 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkbqttbp_.d(40): unittest failure\n----------------\n??:?
    _d_unittestp [0x42893d]\n??:? void tmpkbqttbp_.__unittest_L33_C1() [0x4282bb]\n??:?
    void tmpkbqttbp_.__modtest() [0x4286bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430fe8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430ac5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b885]\n??:? runModuleUnitTests [0x42c7f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d87]\n??:? _d_run_main [0x428cf2]\n??:? main [0x4286cf]\n??:?
    __libc_start_main [0xdf706554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvxf5csrt.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvxf5csrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = min(lst);\n       \
    \     lst.remove(res[i]);\n            i++;\n        }\n        else\n       \
    \ {\n            res[j] = max(lst);\n            lst.remove(res[j]);\n       \
    \     j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcw53eh0.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmppcw53eh0.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmppcw53eh0.d(30): Error:
    no property `remove` for type `long[]`\n/tmp/tmppcw53eh0.d(35): Error: undefined
    identifier `max`, did you mean function `fmax`?\n/tmp/tmppcw53eh0.d(36): Error:
    no property `remove` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppcw53eh0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n           \
    \ i++;\n        }\n        else\n        {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwd3m563.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprwd3m563.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hsnmbn_.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hsnmbn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hsnmbn_.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hsnmbn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    bool is_min\
    \ = true;\n    while (i <= j)\n    {\n        if (is_min)\n        {\n       \
    \     result[k] = min(lst[i], lst[j]);\n            if (lst[i] < lst[j])\n   \
    \             i++;\n            else\n                j--;\n        }\n      \
    \  else\n        {\n            result[k] = max(lst[i], lst[j]);\n           \
    \ if (lst[i] > lst[j])\n                i++;\n            else\n             \
    \   j--;\n        }\n        is_min = !is_min;\n        k++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogycmlc4.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpogycmlc4.d(28): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpogycmlc4.d(36): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpogycmlc4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] result = new long[lst.length];\n    long[] sorted =\
    \ lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j) result[k++] = sorted[j--];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkileggh.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmpkkileggh.d(24):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkileggh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    result[k++] = lst[i++];\n        if (i <= j)\n            result[k++] = lst[j--];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3poxzyx6.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3poxzyx6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hsnmbn_.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hsnmbn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    bool is_min = true;\n    while\
    \ (i <= j)\n    {\n        if (is_min)\n        {\n            long min = lst[0];\n\
    \            int min_index = 0;\n            for (int k = 0; k < lst.length; k++)\n\
    \            {\n                if (lst[k] < min)\n                {\n       \
    \             min = lst[k];\n                    min_index = k;\n            \
    \    }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 0; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzbguhbnz.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzbguhbnz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int min = 0;\n\
    \    int max = lst.length - 1;\n    int i = 0;\n    while (min <= max)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            res[i] = lst[min];\n        \
    \    min++;\n        }\n        else\n        {\n            res[i] = lst[max];\n\
    \            max--;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov5_j06r.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpov5_j06r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] temp\
    \ = new long[lst.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n  \
    \  int n = lst.length;\n    int m = n;\n    while (n > 0)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            temp[j] = lst[k];\n            j++;\n    \
    \    }\n        else\n        {\n            temp[m - 1] = lst[k];\n         \
    \   m--;\n        }\n        k++;\n        i++;\n        n--;\n    }\n    i =\
    \ 0;\n    while (i < lst.length)\n    {\n        result[i] = temp[i];\n      \
    \  i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8_07kilb.d(26): Error: cannot implicitly convert expression
    `lst.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8_07kilb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n\
    \        if (is_min)\n        {\n            long min = lst[0];\n            int\
    \ min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n         \
    \   {\n                if (lst[k] < min)\n                {\n                \
    \    min = lst[k];\n                    min_index = k;\n                }\n  \
    \          }\n            result[i] = min;\n            lst[min_index] = long.max;\n\
    \            i++;\n        }\n        else\n        {\n            long max =\
    \ lst[0];\n            int max_index = 0;\n            for (int k = 1; k < lst.length;\
    \ k++)\n            {\n                if (lst[k] > max)\n                {\n\
    \                    max = lst[k];\n                    max_index = k;\n     \
    \           }\n            }\n            result[j] = max;\n            lst[max_index]\
    \ = long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplkxlqm7g.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplkxlqm7g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            res[i] = min;\n            lst[min_index] =\
    \ long.max;\n            i++;\n        }\n        else\n        {\n          \
    \  long max = lst[0];\n            int max_index = 0;\n            for (int k\
    \ = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            res[j] = max;\n        \
    \    lst[max_index] = long.min;\n            j--;\n        }\n        is_min =\
    \ !is_min;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8zjs5by8.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8zjs5by8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n\
    \        if (flag)\n        {\n            res[i] = lst[i];\n            i++;\n\
    \        }\n        else\n        {\n            res[j] = lst[i];\n          \
    \  j--;\n        }\n        flag = !flag;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3fjvfui.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp3fjvfui.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            res[k] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            res[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_hv506p.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpg_hv506p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool is_min = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n \
    \       {\n            result[i] = sorted[i];\n            i++;\n        }\n \
    \       else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhyfq0yy.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpuhyfq0yy.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhyfq0yy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n        if (flag)\n\
    \        {\n            res[i] = lst_copy[i];\n            i++;\n        }\n \
    \       else\n        {\n            res[i] = lst_copy[j];\n            j--;\n\
    \        }\n        flag = !flag;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L])\
    \ == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L,\
    \ 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L,\
    \ 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5b9t0hlf.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmp5b9t0hlf.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5b9t0hlf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] ret = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n    long max =\
    \ lst_copy[$ - 1];\n    int i = 0;\n    while (i < lst.length) \n    {\n     \
    \   ret[i] = min;\n        ret[i + 1] = max;\n        i += 2;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmposdhkj73.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmposdhkj73.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (k < lst.length)\n   \
    \ {\n        if (k % 2 == 0)\n        {\n            res[k] = lst[i];\n      \
    \      i++;\n        }\n        else\n        {\n            res[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp244hkne_.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp244hkne_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = lst[i];\n         \
    \   i++;\n        }\n        else\n        {\n            res[j] = lst[i];\n \
    \           j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nuahndp.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2nuahndp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] tmp =\
    \ lst.dup;\n    int i = 0;\n    while (tmp.length > 0)\n    {\n        res[i]\
    \ = tmp[0];\n        tmp = tmp[1..$];\n        if (tmp.length > 0)\n        {\n\
    \            res[i + 1] = tmp[$ - 1];\n            tmp = tmp[0..$ - 2];\n    \
    \    }\n        i += 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxwfja5pi.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x429ab1]\n??:? void tmpxwfja5pi.__unittest_L37_C1() [0x42825e]\n??:?
    void tmpxwfja5pi.__modtest() [0x428a28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42973a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b479]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b508]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b405]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429711]\n??:? runModuleUnitTests [0x42e4c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429fc8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429f4f]\n??:? _d_run_main [0x429eba]\n??:? main [0x428a3b]\n??:?
    __libc_start_main [0x3185a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    while (lst_copy.length\
    \ > 0)\n    {\n        res[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n\
    \        if (lst_copy.length == 0)\n            break;\n        res[i+1] = lst_copy[$-1];\n\
    \        lst_copy = lst_copy[0..$-1];\n        i += 2;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6670v6s2.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6670v6s2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            res[k] = min(lst[i], lst[j]);\n \
    \           if (lst[i] < lst[j])\n                i++;\n            else\n   \
    \             j--;\n        }\n        else\n        {\n            res[k] = max(lst[i],\
    \ lst[j]);\n            if (lst[i] > lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        k++;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdnrd3p0o.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpdnrd3p0o.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpdnrd3p0o.d(37): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdnrd3p0o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n    long max =\
    \ lst_copy[$ - 1];\n    int i = 0;\n    int j = 0;\n    while (i < lst.length)\n\
    \    {\n        result[i] = min;\n        i += 2;\n        if (i < lst.length)\n\
    \        {\n            result[i] = max;\n            i += 2;\n        }\n   \
    \     j++;\n        min = lst_copy[j];\n        max = lst_copy[$ - 1 - j];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpalbx6y_3.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalbx6y_3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy = lst.dup;\n\
    \    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length - 1;\n    foreach\
    \ (idx, _; lst) {\n        if (idx % 2 == 0) {\n            res[idx] = lst_copy[i];\n\
    \            i++;\n        } else {\n            res[idx] = lst_copy[j];\n   \
    \         j--;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8f9rf7z.d(22): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpx8f9rf7z.d(24): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx8f9rf7z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (k < lst.length)\n   \
    \ {\n        if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n   \
    \         i++;\n        }\n        else\n        {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmqk_87q.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgmqk_87q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool asc = true;\n    while (i < lst.length)\n\
    \    {\n        if (asc)\n        {\n            res[i] = lst[j];\n          \
    \  j--;\n        }\n        else\n        {\n            res[i] = lst[j];\n  \
    \          j++;\n        }\n        i++;\n        asc = !asc;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_gluqek.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf_gluqek.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    \n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    bool is_min = true;\n\
    \    while (k < lst.length)\n    {\n        if (is_min)\n        {\n         \
    \   result[k] = lst[i];\n            i++;\n        }\n        else\n        {\n\
    \            result[k] = lst[j];\n            j--;\n        }\n        is_min\
    \ = !is_min;\n        k++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpre6ib549.d(24): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpre6ib549.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    int len = lst.length;\n\
    \    if (len == 0)\n        return lst;\n    long[] res = new long[len];\n   \
    \ int i = 0;\n    int j = len - 1;\n    int k = 0;\n    while (i <= j)\n    {\n\
    \        res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1s7el_of.d(19): Error: cannot implicitly convert expression
    `lst.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1s7el_of.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int[] idx =\
    \ new int[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        idx[i]\
    \ = i;\n    sort(idx, (a, b) => lst[a] < lst[b]);\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[idx[i++]];\n        if (i <= j)\n            res[k++] = lst[idx[j--]];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpft_u1ql_.d(25): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpft_u1ql_.d(27): Error: cannot implicitly convert
    expression `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpft_u1ql_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n    long max =\
    \ lst_copy[$ - 1];\n    int i = 0;\n    int j = 0;\n    while (i < lst.length)\n\
    \    {\n        res[i] = min;\n        i += 2;\n    }\n    while (j < lst.length)\n\
    \    {\n        res[j] = max;\n        j += 2;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj6754r9g.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6754r9g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k] = sorted[i];\n\
    \        k++;\n        if (i != j)\n        {\n            result[k] = sorted[j];\n\
    \            k++;\n        }\n        i++;\n        j--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphg44tqkn.d(21): Error: no property `sort` for type `long[]`\n/tmp/tmphg44tqkn.d(23):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphg44tqkn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu97hxhxc.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpu97hxhxc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    long min = lst_copy[0];\n    long max =\
    \ lst_copy[$ - 1];\n    int i = 0;\n    int j = $ - 1;\n    int k = 0;\n    while\
    \ (k < lst.length)\n    {\n        if (k % 2 == 0)\n        {\n            res[k]\
    \ = lst_copy[i];\n            i++;\n        }\n        else\n        {\n     \
    \       res[k] = lst_copy[j];\n            j--;\n        }\n        k++;\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfw0mekmn.d(27): Error: `$` is valid only inside [] of index
    or slice\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfw0mekmn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] tmp =\
    \ lst.dup;\n    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while\
    \ (i <= j)\n    {\n        res[k++] = tmp[i++];\n        if (i <= j)\n       \
    \     res[k++] = tmp[j--];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphikfhj88.d(24): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphikfhj88.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac\
    \ = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n \
    \   int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al\
    \ = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n \
    \   int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au\
    \ = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n \
    \   int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd\
    \ = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n \
    \   int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm\
    \ = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n \
    \   int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv\
    \ = 0;\n    int bw = 0;\n    int bx = 0;\n    int by =\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcdb7wvvq.d(88): Error: expression expected, not `unittest`\n/tmp/tmpcdb7wvvq.d(89):
    Error: semicolon expected, not `{`\n/tmp/tmpcdb7wvvq.d(102): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpcdb7wvvq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    sort(lst_copy);\n    int i = 0;\n    int j = lst_copy.length\
    \ - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++] = lst_copy[i++];\n\
    \        if (i <= j)\n            res[k++] = lst_copy[j--];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci18zqt7.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpci18zqt7.d(25): Error: cannot implicitly convert
    expression `lst_copy.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpci18zqt7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_509oevz.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp_509oevz.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_509oevz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] result = new long[lst.length];\n    long[] sorted =\
    \ lst.dup;\n    sorted.sort;\n    bool is_min = true;\n    int i = 0;\n    while\
    \ (sorted.length > 0)\n    {\n        if (is_min)\n        {\n            result[i]\
    \ = sorted[0];\n            sorted = sorted[1..$];\n        }\n        else\n\
    \        {\n            result[i] = sorted[$-1];\n            sorted = sorted[0..$-1];\n\
    \        }\n        is_min = !is_min;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqm53bjc7.d(22): Error: no property `sort` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqm53bjc7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu97hxhxc.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpu97hxhxc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool is_min = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n \
    \       {\n            result[i] = sorted[i];\n            i++;\n        }\n \
    \       else\n        {\n            result[j] = sorted[j];\n            j--;\n\
    \        }\n        is_min = !is_min;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhyfq0yy.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpuhyfq0yy.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhyfq0yy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            result[k] =\
    \ lst[j];\n            j--;\n        }\n        k++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44k7zoap.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp44k7zoap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    if (k % 2 == 0)\n        {\n            long min = lst[i];\n            int\
    \ min_index = i;\n            for (int m = i; m <= j; m++)\n            {\n  \
    \              if (lst[m] < min)\n                {\n                    min =\
    \ lst[m];\n                    min_index = m;\n                }\n           \
    \ }\n            result[k] = min;\n            lst[min_index] = lst[i];\n    \
    \        lst[i] = min;\n            i++;\n        }\n        else\n        {\n\
    \            long max = lst[j];\n            int max_index = j;\n            for\
    \ (int m = j; m >= i; m--)\n            {\n                if (lst[m] > max)\n\
    \                {\n                    max = lst[m];\n                    max_index\
    \ = m;\n                }\n            }\n            result[k] = max;\n     \
    \       lst[max_index] = lst[j];\n            lst[j] = max;\n            j--;\n\
    \        }\n        k++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqmu1mkg3.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqmu1mkg3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n          \
    \  result[k++] = lst[j--];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvxf5csrt.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvxf5csrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool asc = true;\n    foreach (e; lst)\n    {\n        if (asc)\n       \
    \ {\n            result[i] = sorted[i];\n            i++;\n        }\n       \
    \ else\n        {\n            result[j] = sorted[j];\n            j--;\n    \
    \    }\n        asc = !asc;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplhd2hhyt.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmplhd2hhyt.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhd2hhyt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    bool flag = true;\n    foreach (e; lst)\n    {\n        if (flag)\n     \
    \   {\n            result[i] = sorted[i];\n            i++;\n        }\n     \
    \   else\n        {\n            result[j] = sorted[j];\n            j--;\n  \
    \      }\n        flag = !flag;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp17m888y3.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp17m888y3.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17m888y3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    bool flag = true;\n    while (i <= j)\n    {\n    \
    \    if (flag)\n        {\n            res[i] = lst[i];\n            i++;\n  \
    \      }\n        else\n        {\n            res[j] = lst[i];\n            j--;\n\
    \        }\n        flag = !flag;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L])\
    \ == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L,\
    \ 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L,\
    \ 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxm_imdb.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnxm_imdb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int index\
    \ = 0;\n    bool is_min = true;\n    while (lst.length > 0)\n    {\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        int min_index = 0;\n    \
    \    int max_index = 0;\n        for (int i = 0; i < lst.length; i++)\n      \
    \  {\n            if (lst[i] < min)\n            {\n                min = lst[i];\n\
    \                min_index = i;\n            }\n            if (lst[i] > max)\n\
    \            {\n                max = lst[i];\n                max_index = i;\n\
    \            }\n        }\n        if (is_min)\n        {\n            result[index]\
    \ = min;\n            lst = lst[0..min_index] ~ lst[min_index + 1..$];\n     \
    \   }\n        else\n        {\n            result[index] = max;\n           \
    \ lst = lst[0..max_index] ~ lst[max_index + 1..$];\n        }\n        is_min\
    \ = !is_min;\n        index++;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L])\
    \ == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L,\
    \ 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L,\
    \ 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    int i = 0;\n    while (lst_copy.length > 0)\n    {\n       \
    \ long min = lst_copy[0];\n        long max = lst_copy[0];\n        int min_index\
    \ = 0;\n        int max_index = 0;\n        for (int j = 0; j < lst_copy.length;\
    \ j++)\n        {\n            if (lst_copy[j] < min)\n            {\n       \
    \         min = lst_copy[j];\n                min_index = j;\n            }\n\
    \            if (lst_copy[j] > max)\n            {\n                max = lst_copy[j];\n\
    \                max_index = j;\n            }\n        }\n        res[i] = min;\n\
    \        i++;\n        lst_copy = lst_copy[0..min_index] ~ lst_copy[min_index+1..$];\n\
    \        if (lst_copy.length == 0)\n            break;\n        res[i] = max;\n\
    \        i++;\n        lst_copy = lst_copy[0..max_index] ~ lst_copy[max_index+1..$];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpamgt79lf.d(50): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x429cea]\n??:? long[] tmpamgt79lf.strange_sort_list(long[])
    [0x4282b3]\n??:? void tmpamgt79lf.__unittest_L54_C1() [0x42836f]\n??:? void tmpamgt79lf.__modtest()
    [0x428bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e877]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4298c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b601]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b690]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b58d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429899]\n??:? runModuleUnitTests [0x42e64d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a150]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a0d7]\n??:? _d_run_main [0x42a042]\n??:? main [0x428bbf]\n??:?
    __libc_start_main [0x33e2e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    while (lst.length > 0)\n    {\n        long min = lst[0];\n\
    \        long max = lst[0];\n        int min_index = 0;\n        int max_index\
    \ = 0;\n        for (int j = 0; j < lst.length; j++)\n        {\n            if\
    \ (lst[j] < min)\n            {\n                min = lst[j];\n             \
    \   min_index = j;\n            }\n            if (lst[j] > max)\n           \
    \ {\n                max = lst[j];\n                max_index = j;\n         \
    \   }\n        }\n        result[i] = min;\n        result[i + 1] = max;\n   \
    \     i += 2;\n        lst = lst[0..min_index] ~ lst[min_index + 1..$];\n    \
    \    if (max_index > min_index)\n            max_index--;\n        lst = lst[0..max_index]\
    \ ~ lst[max_index + 1..$];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp7pczdhe9.d(41): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428b4e]\n??:? long[] tmp7pczdhe9.strange_sort_list(long[])
    [0x427fd5]\n??:? void tmp7pczdhe9.__unittest_L50_C1() [0x428216]\n??:? void tmp7pczdhe9.__modtest()
    [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ccc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bb56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431148]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430c25]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bb2d]\n??:? runModuleUnitTests [0x42ca99]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f60]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ee7]\n??:? _d_run_main [0x428e52]\n??:? main [0x428833]\n??:?
    __libc_start_main [0xdf3e5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hsnmbn_.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hsnmbn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst_copy\
    \ = lst.dup;\n    int i = 0;\n    while (lst_copy.length > 0)\n    {\n       \
    \ res[i] = lst_copy[0];\n        lst_copy = lst_copy[1..$];\n        if (lst_copy.length\
    \ == 0)\n            break;\n        res[i+1] = lst_copy[$-1];\n        lst_copy\
    \ = lst_copy[0..$-1];\n        i += 2;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5ti7tttu.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x429ab1]\n??:? void tmp5ti7tttu.__unittest_L36_C1() [0x4284b3]\n??:?
    void tmp5ti7tttu.__modtest() [0x428a28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42973a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b479]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b508]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b405]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429711]\n??:? runModuleUnitTests [0x42e4c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429fc8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429f4f]\n??:? _d_run_main [0x429eba]\n??:? main [0x428a3b]\n??:?
    __libc_start_main [0xf74d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j)\n    {\n        if (k % 2 == 0)\n        {\n            result[k] = lst[i];\n\
    \            i++;\n        }\n        else\n        {\n            result[k] =\
    \ lst[j];\n            j--;\n        }\n        k++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44k7zoap.d(21): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp44k7zoap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    long[] res = new long[lst.length];\n\
    \    int i = 0;\n    while (i < lst.length)\n    {\n        long min = lst[0];\n\
    \        long max = lst[0];\n        foreach (long x; lst)\n        {\n      \
    \      if (x < min)\n                min = x;\n            if (x > max)\n    \
    \            max = x;\n        }\n        res[i] = min;\n        res[i+1] = max;\n\
    \        lst = lst.remove(min);\n        lst = lst.remove(max);\n        i +=\
    \ 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfyycx_rr.d(34): Error: no property `remove` for type `long[]`\n/tmp/tmpfyycx_rr.d(35):
    Error: no property `remove` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfyycx_rr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            res[i] = min(lst);\n       \
    \     lst = remove(lst, min(lst));\n            i++;\n        }\n        else\n\
    \        {\n            res[j] = max(lst);\n            lst = remove(lst, max(lst));\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegoykps9.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpegoykps9.d(29): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpegoykps9.d(30): Error:
    undefined identifier `remove`\n/tmp/tmpegoykps9.d(35): Error: undefined identifier
    `max`, did you mean function `fmax`?\n/tmp/tmpegoykps9.d(36): Error: undefined
    identifier `remove`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegoykps9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n  \
    \      if (is_min)\n        {\n            long min = lst[0];\n            int\
    \ min_index = 0;\n            for (int k = 0; k < lst.length; k++)\n         \
    \   {\n                if (lst[k] < min)\n                {\n                \
    \    min = lst[k];\n                    min_index = k;\n                }\n  \
    \          }\n            res[i] = min;\n            lst[min_index] = long.max;\n\
    \            i++;\n        }\n        else\n        {\n            long max =\
    \ lst[0];\n            int max_index = 0;\n            for (int k = 0; k < lst.length;\
    \ k++)\n            {\n                if (lst[k] > max)\n                {\n\
    \                    max = lst[k];\n                    max_index = k;\n     \
    \           }\n            }\n            res[j] = max;\n            lst[max_index]\
    \ = long.min;\n            j--;\n        }\n        is_min = !is_min;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk6il4pt9.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpk6il4pt9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    long[] lst2\
    \ = lst.dup;\n    sort(lst2);\n    int i = 0;\n    int j = lst2.length - 1;\n\
    \    bool flag = true;\n    foreach (e; lst2)\n    {\n        if (flag)\n    \
    \    {\n            res[i] = e;\n            i++;\n        }\n        else\n \
    \       {\n            res[j] = e;\n            j--;\n        }\n        flag\
    \ = !flag;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqnej_syb.d(23): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpqnej_syb.d(25): Error: cannot implicitly convert
    expression `lst2.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpqnej_syb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n   \
    \ int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n    {\n\
    \        if (is_min)\n        {\n            result[i] = min(lst);\n         \
    \   lst = remove(lst, min(lst));\n            i++;\n        }\n        else\n\
    \        {\n            result[j] = max(lst);\n            lst = remove(lst, max(lst));\n\
    \            j--;\n        }\n        is_min = !is_min;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyx_78rcz.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpyx_78rcz.d(28): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpyx_78rcz.d(29): Error:
    undefined identifier `remove`\n/tmp/tmpyx_78rcz.d(34): Error: undefined identifier
    `max`, did you mean function `fmax`?\n/tmp/tmpyx_78rcz.d(35): Error: undefined
    identifier `remove`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx_78rcz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    bool flag = true;\n    lst.sort();\n    foreach (var\
    \ item; lst)\n    {\n        if (flag)\n        {\n            res[i] = item;\n\
    \            i++;\n        }\n        else\n        {\n            res[j] = item;\n\
    \            j--;\n        }\n        flag = !flag;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpg40fax.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmplpg40fax.d(24): Error: no
    property `sort` for type `long[]`\n/tmp/tmplpg40fax.d(25): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpg40fax.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        res[k++]\
    \ = lst[i++];\n        if (i <= j) res[k++] = lst[j--];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hsnmbn_.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hsnmbn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    bool is_min = true;\n    while (i <= j)\n  \
    \  {\n        if (is_min)\n        {\n            long min = lst[0];\n       \
    \     int min_index = 0;\n            for (int k = 1; k < lst.length; k++)\n \
    \           {\n                if (lst[k] < min)\n                {\n        \
    \            min = lst[k];\n                    min_index = k;\n             \
    \   }\n            }\n            result[i] = min;\n            lst[min_index]\
    \ = long.max;\n            i++;\n        }\n        else\n        {\n        \
    \    long max = lst[0];\n            int max_index = 0;\n            for (int\
    \ k = 1; k < lst.length; k++)\n            {\n                if (lst[k] > max)\n\
    \                {\n                    max = lst[k];\n                    max_index\
    \ = k;\n                }\n            }\n            result[j] = max;\n     \
    \       lst[max_index] = long.min;\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu97hxhxc.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpu97hxhxc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    bool is_min = true;\n    while\
    \ (k < lst.length)\n    {\n        if (is_min)\n        {\n            res[k]\
    \ = lst[i];\n            i++;\n        }\n        else\n        {\n          \
    \  res[k] = lst[j];\n            j--;\n        }\n        is_min = !is_min;\n\
    \        k++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp47qa6kyj.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp47qa6kyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = lst[i++];\n        if (i <= j)\n            res[k++] = lst[j--];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9l_9bu5.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr9l_9bu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    int min = 0;\n    int max =\
    \ 0;\n    while (i <= j)\n    {\n        min = i;\n        max = i;\n        for\
    \ (int x = i; x <= j; x++)\n        {\n            if (lst[x] < lst[min])\n  \
    \              min = x;\n            if (lst[x] > lst[max])\n                max\
    \ = x;\n        }\n        res[k++] = lst[min];\n        if (min != max)\n   \
    \         res[k++] = lst[max];\n        i = min + 1;\n        j = max - 1;\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8io1och.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_8io1och.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] sorted = lst.dup;\n\
    \    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n    bool is_min\
    \ = true;\n    foreach (e; lst)\n    {\n        if (is_min)\n        {\n     \
    \       res[i] = sorted[i];\n            i++;\n        }\n        else\n     \
    \   {\n            res[j] = sorted[j];\n            j--;\n        }\n        is_min\
    \ = !is_min;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuqb201a9.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmpuqb201a9.d(24):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqb201a9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    long[] lst_ = lst.dup;\n\
    \    sort(lst_);\n    int i = 0;\n    int j = lst_.length - 1;\n    int k = 0;\n\
    \    while (i <= j)\n    {\n        res[k++] = lst_[i++];\n        if (i <= j)\
    \ res[k++] = lst_[j--];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpog3ftzo4.d(22): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpog3ftzo4.d(24): Error: cannot implicitly convert
    expression `lst_.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpog3ftzo4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    int sign = 1;\n    while (i\
    \ <= j)\n    {\n        if (sign > 0)\n        {\n            result[k] = min(lst[i],\
    \ lst[j]);\n            if (lst[i] < lst[j])\n                i++;\n         \
    \   else\n                j--;\n        }\n        else\n        {\n         \
    \   result[k] = max(lst[i], lst[j]);\n            if (lst[i] > lst[j])\n     \
    \           i++;\n            else\n                j--;\n        }\n        sign\
    \ *= -1;\n        k++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L,\
    \ 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L,\
    \ 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeuuy7iza.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpeuuy7iza.d(30): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpeuuy7iza.d(38): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpeuuy7iza.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        if (lst[i] < lst[j])\n         \
    \   i++;\n        else\n            j--;\n        if (i > j)\n            break;\n\
    \        res[k++] = max(lst[i], lst[j]);\n        if (lst[i] > lst[j])\n     \
    \       i++;\n        else\n            j--;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L,\
    \ 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L,\
    \ 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L,\
    \ 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2iy4_op.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpa2iy4_op.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpa2iy4_op.d(34): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpa2iy4_op.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    long[] sorted\
    \ = lst.dup;\n    sorted.sort;\n    int i = 0;\n    int j = sorted.length - 1;\n\
    \    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = sorted[i++];\n\
    \        if (i <= j)\n            result[k++] = sorted[j--];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
    \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
    \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
    \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
    \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_509oevz.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmp_509oevz.d(25):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_509oevz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n    \
    \    res[k++] = min(lst[i], lst[j]);\n        res[k++] = max(lst[i], lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L,\
    \ 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n\
    \    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n\
    \    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L,\
    \ 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L,\
    \ -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
    \ == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuamqvvd.d(23): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\n/tmp/tmpnuamqvvd.d(27): Error: undefined
    identifier `min`, did you mean function `main`?\n/tmp/tmpnuamqvvd.d(28): Error:
    undefined identifier `max`, did you mean function `fmax`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnuamqvvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given array of integers, return array in strange\
    \ order.\n    Strange sorting, is when you start with the minimum value,\n   \
    \ then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n\
    \    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L, 2L, 3L]\n    >>> strange_sort_list([5L,\
    \ 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n    >>> strange_sort_list([])\n    []\n\
    \    \n*/\nlong[] strange_sort_list(long[] lst) \n{\n    if (lst.length == 0)\
    \ return lst;\n    long[] res = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (k < lst.length) {\n        if\
    \ (k % 2 == 0) {\n            res[k] = lst[i];\n            i++;\n        } else\
    \ {\n            res[k] = lst[j];\n            j--;\n        }\n        k++;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = strange_sort_list;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L,\
    \ 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L,\
    \ 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) ==\
    \ [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L,\
    \ 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n   \
    \ assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnnbur02u.d(22): Error: cannot implicitly convert expression
    `lst.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnnbur02u.d", "-I/tmp"]\n'''
  stdout: b''
