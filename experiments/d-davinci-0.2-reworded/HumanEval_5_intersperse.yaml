name: HumanEval_5_intersperse
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
  \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
  \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
  \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n"
tests: "unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
  \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
  \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
  }\nvoid main(){}"
completions: ["{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int\
    \ i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n     \
    \   i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        if (i != 0) \n        {\n            result[i * 2\
    \ - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2 * numbers.length - 1];\n   \
    \ foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n     \
    \   if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n    {\n    \
    \    return numbers;\n    }\n    else\n    {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i,\
    \ number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n\
    \            result[2 * i + 1] = number;\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach\
    \ (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i\
    \ < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n\
    \    {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i != numbers.length - 1)\n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0,\
    \ 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n{\n\
    \    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    double[]\
    \ result = new double[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n\
    \        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/", "{\n    if (numbers.length == 0) \n   \
    \ {\n        return numbers;\n    }\n    else \n    {\n        long[] result =\
    \ new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n       \
    \ foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] result = new long[];\n    foreach(i, number;\
    \ numbers)\n    {\n        result ~= number;\n        if (i < numbers.length -\
    \ 1)\n            result ~= delimeter;\n    }\n    return result;\n}\n/*\n   \
    \ >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n\
    \    false\n    >>> is_prime(34L)\n    false\n    >>> is_", "{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    else \n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n        if (i\
    \ < numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ number; numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n", "{\n    if (numbers.length == 0)\n        return numbers;\n    else\n\
    \    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0]\
    \ = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n   \
    \         result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n\
    \        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i\
    \ * 2] = number;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i\
    \ += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n \
    \   >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n \
    \   [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n\
    \    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n\
    \    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n    \
    \    i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]", "{\n    if (numbers.length == 0)\n        return [];\n   \
    \ long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    if (numbers.length == 0)\n        return\
    \ [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] =\
    \ numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2\
    \ * i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0],\
    \ 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers,\
    \ double delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n  \
    \  double[] result = new double[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], \"a\")\n    []\n    >>> intersperse([\"a\", \"b\"\
    , \"c\"], \"d\")\n    [\"a\", \"d\", \"b\", \"d\", \"c\"]\n*/\nstring[] intersperse(string[]\
    \ strings, string delimeter) \n{\n    if (strings.length == 0)\n        return\
    \ [];\n    string[] result = new string[2 * strings.length - 1];\n    result[0]\
    \ = strings[0];\n    foreach (i, str; strings[1 .. $])\n    {\n        result[2\
    \ * i - 1] = delimeter;\n        result[2 * i] = str;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], true)\n    []\n    >>> intersperse([true, false,\
    \ true], false)\n    [true, false, false, false, true]\n*/", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    size_t i = 0;\n    foreach (n; numbers)\n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    size_t i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n\
    \    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    size_t i = 0;\n\
    \    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n  \
    \  }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] =\
    \ delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L",
  "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n\
    \        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n\
    \    false\n    >>> is_", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    for (size_t i = 0; i < numbers.length; i++) \n    {\n        result[2\
    \ * i] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n      \
    \      result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[2 * i] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    for (size_t i = 0; i < numbers.length; i++) \n    {\n       \
    \ result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n\
    \            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> split_by_delimeter([], 4L)\n    []\n    >>> split_by_delimeter([1L,\
    \ 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split_by_delimeter([1L, 2L, 4L, 3L],\
    \ 4L)\n    [[1L, 2L], [3L]]\n    >>> split_by_delimeter([1L, 2L, 4L, 3L, 4L],\
    \ 4L)\n    [[1L, 2L], [3L], []]\n*/\nlong[][] split_by_delimeter(long[] numbers,\
    \ long delimeter) \n{\n    long[][] result = new long[][]();\n    long[] current_subarray\
    \ = new long[]();\n    foreach (number; numbers) \n    {\n        if (number ==\
    \ delimeter) \n        {\n            result ~= current_subarray;\n          \
    \  current_subarray = new long[]();\n        } \n        else \n        {\n  \
    \          current_subarray ~= number;\n        }\n    }\n    result ~= current_subarray;\n\
    \    return result;\n}\n/*\n    >>> split_by_delimeter([], 4L)\n    []\n    >>>\
    \ split_by_delimeter([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split_by_delimeter([1L,\
    \ 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>> split_by_delimeter([1L, 2L,\
    \ 4L, 3L, 4L], 4L)\n    [[1L, 2L], [3L], []]\n*/", "{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[(i * 2) + 1] = delimeter;\n        }\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime",
  "{\n    long[] result = new long[2 * numbers.length - 1];\n    for (size_t i = 0;\
    \ i < numbers.length; i++) \n    {\n        result[2 * i] = numbers[i];\n    \
    \    if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] =\
    \ delimeter;\n        }\n    }\n    return result;\n}", "{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n    \
    \    if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> split([], 4L)\n    []\n    >>> split([1L,\
    \ 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split([1L, 2L, 4L, 3L], 4L)\n    [[1L,\
    \ 2L], [3L]]\n    >>> split([1L, 2L, 4L, 4L, 3L], 4L)\n    [[1L, 2L], [], [3L]]\n\
    \    >>> split([1L, 2L, 4L, 4L, 4L, 3L], 4L)\n    [[1L, 2L], [], [], [3L]]\n*/\n\
    long[][] split(long[] numbers, long delimeter) \n{\n    long[][] result = new\
    \ long[][];\n    long[] current = new long[];\n    foreach (e; numbers)\n    {\n\
    \        if (e == delimeter)\n        {\n            result ~= current;\n    \
    \        current = new long[];\n        }\n        else\n        {\n         \
    \   current ~= e;\n        }\n    }\n    result ~= current;\n    return result;\n\
    }\n/*\n    >>> split([], 4L)\n    []\n    >>> split([1L, 2L, 3L], 4L)\n    [[1L,\
    \ 2L, 3L]]\n    >>> split([1L, 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>>\
    \ split([1L, 2L, 4L, 4L, 3L], 4L)\n    [[1L, 2L], [], [3L]]\n    >>> split([1L,\
    \ 2L, 4L, 4L, 4L, 3L], 4L)\n    [[1L, 2L], [], [], [3L]]", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    for (long i = 0; i < numbers.length; i++)\n    {\n        result[i * 2] =\
    \ numbers[i];\n        if (i < numbers.length - 1)\n            result[i * 2 +\
    \ 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, ref x; numbers)\n    {\n    \
    \    result[i * 2] = x;\n        if (i < numbers.length - 1)\n            result[i\
    \ * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, ref x; numbers)\n    {\n\
    \        result[i * 2] = x;\n        if (i < numbers.length - 1)\n           \
    \ result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse4(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, ref x; numbers)\n    {\n\
    \        result[i * 2]", "{\n    if (numbers.length == 0) \n    {\n        return\
    \ numbers;\n    }\n    else \n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1\
    \ .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2\
    \ * i + 1] = number;\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ is_prime(0L)\n    false\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>>", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n\
    \    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. $ - 1];\n}", "{\n\tlong[] result\
    \ = new long[2 * numbers.length - 1];\n\tfor (int i = 0; i < numbers.length; i++)\
    \ \n\t{\n\t\tresult[2 * i] = numbers[i];\n\t\tif (i < numbers.length - 1) \n\t\
    \t{\n\t\t\tresult[2 * i + 1] = delimeter;\n\t\t}\n\t}\n\treturn result;\n}", "{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number;\
    \ numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i,\
    \ number; numbers) \n    {\n        if (i != 0) \n        {\n            result[i\
    \ * 2 - 1] = delimeter;\n        }\n        result[i * 2] = number;\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[(numbers.length\
    \ * 2) - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] =\
    \ n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n       \
    \ result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[(numbers.length * 2) - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[(i * 2) + 1] = delimeter;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\n            result[i\
    \ * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    size_t i = 0;\n    foreach (number;\
    \ numbers) \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i\
    \ = 1;\n    foreach (number; numbers) \n    {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n \
    \   >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n \
    \   [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    size_t i = 0;\n\
    \    foreach (number; numbers) \n    {\n        result[i] = number;\n        i\
    \ += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    size_t\
    \ i = 0;\n    foreach (number; numbers) \n    {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n \
    \       result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 ..\
    \ result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i\
    \ != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n    {\n        return\
    \ numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1\
    \ .. $])\n        {\n            result[2 * i] = delimeter;\n            result[2\
    \ * i + 1] = number;\n        }\n        return result;\n    }\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n    else\n\
    \    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0]\
    \ = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n   \
    \         result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n   \
    \ foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n   \
    \ i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n       \
    \ i += 2;\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n \
    \       return [];\n    if (numbers.length == 1)\n        return numbers;\n  \
    \  long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, n; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n\
    \        result[2 * i] = n;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n    {\n  \
    \      result[i * 2] = e;\n        if (i != numbers.length - 1)\n            result[i\
    \ * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n; numbers)\
    \ {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n;\
    \ numbers[1 .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n    {\n        return\
    \ numbers;\n    }\n    long[] result = new long[2 * numbers.length - 1];\n   \
    \ result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n \
    \       result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n    {\n        return\
    \ numbers;\n    }\n    else\n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        for (int i = 1; i < numbers.length;\
    \ i++)\n        {\n            result[2 * i - 1] = delimeter;\n            result[2\
    \ * i] = numbers[i];\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n  \
    \  [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers, double\
    \ delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n\
    \    }\n    else\n    {\n        double[] result = new double[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        for (int i = 1; i < numbers.length;\
    \ i++)\n        {\n            result[2 * i - 1] = delimeter;\n            result[2\
    \ * i] = numbers[i];\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ intersperse([], \"a\")\n    []\n    >>> intersperse([\"a\", \"b\", \"c\"], \"\
    d\")\n    [\"a\", \"d\", \"b\", \"d\", \"c\"]\n*/\nstring[] intersperse(string[]\
    \ strings, string delimeter) \n{\n    if (strings.length == 0)\n    {\n      \
    \  return strings;\n    }\n    else\n    {\n        string[] result = new string[2\
    \ * strings.length - 1];\n        result[0] = strings[0];\n        for (int i\
    \ = 1; i < strings.length; i++)\n        {\n            result[2 * i - 1] = delimeter;\n\
    \            result[2 * i] = strings[i];\n        }\n        return result;\n\
    \    }\n}\n/*\n    >>> intersperse", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\n    {\n        result[i\
    \ * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i\
    \ * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    int i = 0;\n    foreach (n; numbers) \n    {\n        result[2 *\
    \ i] = n;\n        if (i != numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n        i++;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int\
    \ i = 0;\n    foreach (n; numbers) \n    {\n        result[2 * i] = n;\n     \
    \   if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] =\
    \ delimeter;\n        }\n        i++;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long delimeter) \n\
    {\n    long[]", "{\n    if (numbers.length == 0)\n        return [];\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n  \
    \  foreach (i, n; numbers[1 .. $]) {\n        result[2 * i] = delimeter;\n   \
    \     result[2 * i + 1] = n;\n    }\n    return result;\n}", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    else\n    {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i,\
    \ x; numbers[1 .. $])\n        {\n            result[2 * i - 1] = delimeter;\n\
    \            result[2 * i] = x;\n        }\n        return result;\n    }\n}",
  "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach\
    \ (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result[0 .. result.length - 1];\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        result[i * 2] = number;\n        if (i < numbers.length - 1)\n      \
    \      result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n   \
    \ if (numbers.length == 0)\n        return numbers;\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 ..\
    \ $])\n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] =\
    \ number;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i\
    \ * 2] = numbers[i];\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n \
    \       if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result =", "{\n    long[] result =\
    \ new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length -\
    \ 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}",
  "{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, e; numbers[1\
    \ .. $])\n    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1]\
    \ = e;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] =\
    \ number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n\
    \        return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n   \
    \     result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n        return numbers;\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n\
    \        result[2 * i + 1] = number;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $]) {\n        result[2 * i - 1] = delimeter;\n\
    \        result[2 * i] = number;\n    }\n    return result;\n}", "{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}", "{\n    long[] result = new long[(numbers.length\
    \ * 2) - 1];\n    int i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\n    {\n\
    \        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}",
  "{\n    auto result = new long[];\n    foreach (i, n; numbers) \n    {\n       \
    \ if (i > 0) \n        {\n            result ~= delimeter;\n        }\n      \
    \  result ~= n;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i < numbers.length - 1) \n        {\n            result[i\
    \ * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    if\
    \ (numbers.length == 0) \n    {\n        return [];\n    }\n    else \n    {\n\
    \        long[] result = new long[2 * numbers.length - 1];\n        result[0]\
    \ = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n        {\n  \
    \          result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] result = new long[(numbers.length\
    \ * 2) - 1];\n    long i = 0;\n    foreach (number; numbers) \n    {\n       \
    \ result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number;\
    \ numbers) \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n\
    \        if (i != numbers.length - 1) \n        {\n            result[i * 2 +\
    \ 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[i * 2] = number;\n        if (i < numbers.length - 1) \n \
    \       {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[(numbers.length * 2) - 1];\n \
    \   foreach (i, number; numbers) \n    {\n        if (i != 0) \n        {\n  \
    \          result[(i * 2) - 1] = delimeter;\n        }\n        result[i * 2]\
    \ = number;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n        result[2\
    \ * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n\
    \        return numbers;\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n\
    \        result[i * 2] = delimeter;\n        result[i * 2 + 1] = number;\n   \
    \ }\n    return result;\n}", "{\n    if (numbers.length < 2)\n        return numbers;\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    size_t i = 0;\n  \
    \  foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n\
    \    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n        result[2\
    \ * i] = n;\n        if (i < numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> inter", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[2 * i] = number;\n        if (i != numbers.length - 1) \n\
    \        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n        if (i\
    \ != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n  \
    \  []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, e; numbers) \n    {\n        result[2\
    \ * i] = e;\n        if (i != numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\
    \ \n    {\n        result[2 * i] = e;\n        if (i != numbers.length - 1) \n\
    \        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, e; numbers) \n    {\n", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] =\
    \ number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i != numbers.length - 1) \n        {\n         \
    \   result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n        result[i\
    \ * 2] = numbers[i];\n        if (i < numbers.length - 1)\n            result[i\
    \ * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        result[2 * i] = number;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    return numbers.map!(n => [n, delimeter]).flatten[0 .. $ - 1];\n}\n/*\n  \
    \  >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n  \
    \  [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],", "{\n\
    \    if (numbers.length == 0) \n    {\n        return [];\n    }\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach\
    \ (i, number; numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n \
    \       result[2 * i + 1] = number;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    if (numbers.length == 0) \n    {\n        return [];\n    }\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach\
    \ (i, number; numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n \
    \       result[2 * i + 1] = number;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    if (numbers.length == 0) \n    {\n        return [];\n    }\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach\
    \ (i, number; numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n \
    \       result[2 * i + 1] = number;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L", "{\n    long[] result = new long[(numbers.length * 2) - 1];\n\
    \    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n  \
    \      if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    if (numbers.length == 0) return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $]) \n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0) return [];\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number;\
    \ numbers[1 .. $]) \n    {\n        result[2 * i - 1] = delimeter;\n        result[2\
    \ * i] = number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers", "{\n    long[] result = new long[2 *\
    \ numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([])\n    0L\n*/\nlong sum(long[]\
    \ numbers) \n{\n    long result = 0L;\n    foreach (number; numbers) \n    {\n\
    \        result += number;\n    }\n    return result;\n}\n/*\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([])\n    1L\n*/\nlong product(long[] numbers)\
    \ \n{\n    long result = 1L;\n    foreach (number; numbers) \n    {\n        result\
    \ *= number;\n    }\n    return result;\n}\n/*\n    >>> factorial(0L)\n    1L\n\
    \    >>> factorial(1L)\n    1L\n    >>> factorial(2L)\n    2L\n    >>> factorial(3L)\n\
    \    6L\n    >>> factorial(4L)\n    24L\n    >>> factorial(5L)\n    120L\n*/\n\
    long factorial(long n) \n{\n    return product(iota(1L, n + 1L));\n}\n/*\n   \
    \ >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n    1L\n    >>> fibonacci(2L)\n\
    \    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n    3L\n    >>>\
    \ fibonacci(5L)\n    5L\n    >>> fibonacci(6L)\n    8L\n    >>> fibonacci(7L)\n\
    \    13L\n    >>> fibonacci(8L)\n    21L\n    >>> fibonacci(9L)\n    34L\n   \
    \ >>> fibonacci(10L)", "{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n  \
    \      if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] =\
    \ number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n\
    \        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 ..\
    \ result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n       \
    \ result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length\
    \ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n       \
    \ result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length\
    \ - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    int i = 0;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)", "{\n    long[] result = new long[2 *\
    \ numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 *\
    \ i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i\
    \ * 2] = numbers[i];\n        if (i < numbers.length - 1) \n        {\n      \
    \      result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ j = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[j++]\
    \ = numbers[i];\n        if (i < numbers.length - 1) \n        {\n           \
    \ result[j++] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n\
    {\n    long[] result = new long[numbers.length * 2 - 1];\n    int j = 0;\n   \
    \ foreach (i, number; numbers) \n    {\n        result[j++] = number;\n      \
    \  if (i < numbers.length - 1) \n        {\n            result[j++] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n  \
    \  []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[]\
    \ intersperse4(long[] numbers, long delimeter) \n{\n    long[] result", "{\n \
    \   long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n        if\
    \ (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n        return numbers;\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $]) {\n        result[2 * i] = delimeter;\n\
    \        result[2 * i + 1] = number;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. $ - 1];\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n  \
    \      result[2 * i] = e;\n        if (i < numbers.length - 1)\n            result[2\
    \ * i + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n\
    \        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[(numbers.length * 2) -\
    \ 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (num; numbers)\
    \ {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n \
    \   return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n\
    \    int i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n    \
    \    i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse4(long[] numbers, long delimeter)", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n \
    \           result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach\
    \ (number; numbers) {\n        result[i] = number;\n        i += 2;\n    }\n \
    \   i = 1;\n    foreach (number; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}", "{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n\
    \    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n    \
    \        result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n  \
    \  >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n  \
    \  [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result", "{\n    if (numbers.length == 0)\n        return\
    \ numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0]\
    \ = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n        result[2\
    \ * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[(numbers.length * 2) - 1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n\
    \        if (i != numbers.length - 1) \n        {\n            result[i * 2 +\
    \ 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[(numbers.length - 1)\
    \ * 2];\n    size_t j = 0;\n    for (size_t i = 0; i < numbers.length; i++) {\n\
    \        result[j] = numbers[i];\n        j++;\n        if (i != numbers.length\
    \ - 1) {\n            result[j] = delimeter;\n            j++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\n            result[i\
    \ * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_",
  "{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n    {\n\
    \        if (i != 0L) \n        {\n            result ~= delimeter;\n        }\n\
    \        result ~= number;\n    }\n    return result;\n}", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[(numbers.length - 1)\
    \ * 2];\n    size_t i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n\
    \    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new\
    \ long[(numbers.length - 1) * 2];\n    size_t i = 0;\n    foreach (n; numbers)\n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[(numbers.length - 1) * 2];\n    size_t i = 0;\n\
    \    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n  \
    \  }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] =\
    \ delimeter;\n        i += 2;\n    }\n    return result;", "{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] = number;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers)\n    {\n        result[i * 2] =\
    \ number;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (numbers.length == 0)\n        return [];\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n\
    \        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n\
    \        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i\
    \ * 2] = number;\n    }\n    return result;\n}", "{\n    if (numbers.length ==\
    \ 0)\n        return [];\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L",
  "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i,\
    \ number; numbers) \n    {\n        result[i * 2] = number;\n        if (i !=\
    \ numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n\
    \        return numbers;\n    long[] result = new long[(numbers.length - 1) *\
    \ 2];\n    foreach (i, e; numbers) {\n        result[i * 2] = e;\n        if (i\
    \ != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n\
    \    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n\
    \    long[] result = new long[(numbers.length - 1) * 2];\n    foreach (i, e; numbers)\
    \ {\n        result[i * 2] = e;\n        if (i != numbers.length - 1)\n      \
    \      result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    if (numbers.length == 0)\n        return numbers;\n    long[] result = new\
    \ long[(numbers.length - 1) * 2];\n    foreach (i, e; numbers) {\n        result[i\
    \ * 2] = e;\n        if (i != numbers.length - 1)\n            result[i * 2 +\
    \ 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers", "{\n\
    \    if (numbers.length == 0)\n        return numbers;\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i,\
    \ number; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n      \
    \  result[2 * i + 1] = number;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n    >>> is_prime(0L)\n    false\n    >>> is_prime(1L)\n    false\n    >>>\
    \ is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L", "{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, x; numbers) \n \
    \   {\n        result[2 * i] = x;\n        if (i < numbers.length - 1) \n    \
    \    {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (numbers.length == 0)\n        return numbers;\n   \
    \ long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n\
    \        result[2 * i + 1] = number;\n    }\n    return result;\n}\n/*\n    >>>\
    \ is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32L)\n    false\n    >>> is_prime(33", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        result[2 * i] = number;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\
    \ \n    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n\
    \        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        result[2 * i]\
    \ = numbers[i];\n        if (i < numbers.length - 1) \n        {\n           \
    \ result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1)\n            result[2 *\
    \ i + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers)\
    \ {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n;\
    \ numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}", "{\n    if (numbers.length == 0)\n    \
    \    return [];\n    long[] result = new long[2 * numbers.length - 1];\n    foreach\
    \ (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i\
    \ != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n      \
    \  if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[(numbers.length\
    \ * 2) - 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n\
    \        if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n        return\
    \ numbers;\n    long[] result = new long[2 * numbers.length - 1];\n    result[0]\
    \ = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n        result[2\
    \ * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i,\
    \ number; numbers) \n    {\n        result[i * 2] = number;\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    if (numbers.length == 0)\n        return\
    \ [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] =\
    \ numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n        result[2 *\
    \ i - 1] = delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ e; numbers)\n    {\n        result[2 * i] = e;\n        if (i != numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (long i\
    \ = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n\
    \        if (i != numbers.length - 1) \n        {\n            result[i * 2 +\
    \ 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    int j = 0;\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        result[j] = numbers[i];\n        j++;\n\
    \        if (i != numbers.length - 1) \n        {\n            result[j] = delimeter;\n\
    \            j++;\n        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n\
    \    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n \
    \   >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n\
    \    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n\
    \    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n\
    \    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n\
    \    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n\
    \    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n\
    \    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n\
    \    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n\
    \    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n\
    \    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n\
    \    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n\
    \    true\n   ", "{\n    long[] result = new long[2 * numbers.length - 1];\n \
    \   foreach (i, n; numbers)\n    {\n        result[2 * i] = n;\n        if (i\
    \ < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n    }\n \
    \   return result;\n}\n/*\n    >>> split([1L, 2L, 3L, 4L, 5L], 2L)\n    [[1L,\
    \ 2L], [3L, 4L], [5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], 1L)\n    [[1L], [2L],\
    \ [3L], [4L], [5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], 0L)\n    [[1L, 2L, 3L,\
    \ 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], 6L)\n    [[1L, 2L, 3L, 4L, 5L]]\n\
    \    >>> split([1L, 2L, 3L, 4L, 5L], -1L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>>\
    \ split([1L, 2L, 3L, 4L, 5L], -2L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L,\
    \ 2L, 3L, 4L, 5L], -3L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L,\
    \ 4L, 5L], -4L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L],\
    \ -5L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], -6L)\n\
    \    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L,", "{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2\
    \ * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\
    \ \n    {\n        return numbers;\n    }\n    else \n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n\
    \    }\n    else \n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1\
    \ .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2\
    \ * i + 1] = number;\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    if (numbers.length == 0) \n    {\n        return numbers;\n    }\n    else\
    \ \n    {\n        long[] result = new long[2 * numbers.length - 1];\n       \
    \ result[0] = numbers[0];\n        foreach (i, number; numbers[1 .. $]) \n   \
    \     {\n            result[2 * i] = delimeter;\n            result[2 * i + 1]\
    \ = number;\n        }\n        return result;\n    }\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>>", "{\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    int i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n       \
    \ result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length\
    \ - 1];\n}", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n\
    \    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}", "{\n\
    \    if (numbers.length == 0) \n    {\n        return [];\n    }\n    auto result\
    \ = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach\
    \ (i, number; numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n \
    \       result[2 * i + 1] = number;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0;\
    \ i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n    \
    \    if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1] =\
    \ delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        result[i * 2] = number;\n        if (i != numbers.length - 1)\n     \
    \       result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i\
    \ < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n      \
    \  if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n\
    \    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32", "{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n\
    \    {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n    \
    \        result[2 * i + 1] = delimeter;\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[2 * numbers.length - 1];\n    for (size_t i = 0;\
    \ i < numbers.length; i++)\n    {\n        result[2 * i] = numbers[i];\n     \
    \   if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_sorted([])\n    true\n    >>> is_sorted([1L,\
    \ 2L, 3L])\n    true\n    >>> is_sorted([1L, 3L, 2L])\n    false\n*/", "{\n  \
    \  long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[i * 2] = number;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n\
    \    false\n    >>> is_", "{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0],\
    \ 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers,\
    \ double delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n  \
    \  double[] result = new double[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $])\n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], \"a\")\n    []\n    >>> intersperse([\"a\", \"b\"\
    , \"c\"], \"d\")\n    [\"a\", \"d\", \"b\", \"d\", \"c\"]\n*/\nstring[] intersperse(string[]\
    \ strings, string delimeter) \n{\n    if (strings.length == 0)\n        return\
    \ [];\n    string[] result = new string[2 * strings.length - 1];\n    result[0]\
    \ = strings[0];\n    foreach (i, str; strings[1 .. $])\n    {\n        result[2\
    \ * i - 1] = delimeter;\n        result[2 * i] = str;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], [1L, 2L])\n    []\n    >>> intersperse([[1L, 2L],\
    \ [3L, 4L], [5L, 6L]], [7L, 8L])\n    [[1L, 2L], [7L", "{\n    long[] result =\
    \ new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        result[i * 2] = number;\n        if (i != numbers.length - 1)\n     \
    \       result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach\
    \ (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i =\
    \ 1;\n    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n      \
    \  i += 2;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, number;\
    \ numbers) \n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}", "{\n    return numbers.map!((x) => x ~ delimeter).joiner.array;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i,\
    \ number; numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n\
    \    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n\
    \    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n    \
    \    i += 2;\n    }\n    return result[0 .. result.length - 1];\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n\
    \    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L)\n\
    \    false", "{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach\
    \ (i, number; numbers) \n    {\n        result[2 * i] = number;\n        if (i\
    \ != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (numbers.length == 0)\n\
    \        return [];\n    long[] result = new long[2 * numbers.length - 1];\n \
    \   result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n    {\n  \
    \      result[i * 2] = e;\n        if (i != numbers.length - 1)\n            result[i\
    \ * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n\
    \        if (i != 0)\n            result[2 * i - 1] = delimeter;\n        result[2\
    \ * i] = number;\n    }\n    return result;\n}", "{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime",
  "{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0;\
    \ i < numbers.length; i++)\n    {\n        result[i * 2] = numbers[i];\n     \
    \   if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\n            result[i\
    \ * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i, number;\
    \ numbers)\n    {\n        result[i * 2] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0L];\n    foreach (i, number; numbers)\n\
    \    {\n        result ~= number;\n        if (i < numbers.length - 1L)\n    \
    \    {\n            result ~= delimeter;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n\
    \        if (i != numbers.length - 1) \n        {\n            result[i * 2 +\
    \ 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[i * 2] = number;\n        if (i != numbers.length - 1) \n\
    \        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    foreach (i, number; numbers)\n    {\n        result[i * 2] = number;\n  \
    \      if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n\
    \        {\n            result[i * 2 - 1] = delimeter;\n        }\n        result[i\
    \ * 2] = number;\n    }\n    return result;\n}\n/*\n    >>> random_permutation(0L)\n\
    \    []\n    >>> random_permutation(1L)\n    [0L]\n    >>> random_permutation(2L)\n\
    \    [1L, 0L]\n    >>> random_permutation(3L)\n    [2L, 0L, 1L]\n    >>> random_permutation(4L)\n\
    \    [1L, 3L, 0L, 2L]\n    >>> random_permutation(5L)\n    [4L, 0L, 2L, 1L, 3L]\n\
    */\nlong[] random_permutation(long n) \n{\n    long[] result = new long[n];\n\
    \    foreach (i, _; result) \n    {\n        result[i] = i;\n    }\n    foreach\
    \ (i, _; result) \n    {\n        long j = uniform(0L, i + 1L);\n        long\
    \ tmp = result[i];\n        result[i] = result[j];\n        result[j] = tmp;\n\
    \    }\n    return result;\n}\n/*\n    >>> random_subset(0L, 0L)\n    []\n   \
    \ >>> random_subset(1L, 0L)\n    []\n    >>> random_subset(1L, 1L)\n    [0L]\n\
    \    >>> random_subset(2L, 0L)\n    []\n    >>> random_subset(2L, 1L)\n    [0L]\n\
    \    >>> random_subset(2L, 2L)\n    [1L, 0L]\n    >>> random_subset(3L, 0L)\n\
    \    []\n    >>> random_subset(3L, 1L)\n    [0L]\n    >>> random_subset(3L, 2L)\n\
    \    [1L,", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n     \
    \   i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n\
    \    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n \
    \   >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n \
    \   [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n\
    \    foreach (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n\
    \    i = 1;\n    foreach (n; numbers) {\n        result[i] = delimeter;\n    \
    \    i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach\
    \ (n; numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach (i,\
    \ number; numbers)\n    {\n        if (i != 0)\n            result[i * 2 - 1]\
    \ = delimeter;\n        result[i * 2] = number;\n    }\n    return result;\n}",
  "{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1\
    \ .. $]) {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\n            result[i\
    \ * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}", "{\n    if\
    \ (numbers.length == 0)\n        return numbers;\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i - 1] = delimeter;\n            result[2 * i] = number;\n        }\n    \
    \    return result;\n    }\n}", "{\n    if (numbers.length == 0)\n        return\
    \ [];\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] =\
    \ numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n        result[2 *\
    \ i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i,\
    \ n; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n        result[2\
    \ * i + 1] = n;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n   \
    \     if (i != numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number\
    \ 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ e; numbers) \n    {\n        result[2 * i] = e;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n    {\n \
    \       result[2 * i] = e;\n        if (i != numbers.length - 1) \n        {\n\
    \            result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n Insert a number 'delimeter' between every two consecutive elements of\
    \ input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n    \
    \    if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    if (numbers.length == 0) return [];\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, number; numbers[1 .. $]) \n    {\n        result[2 * i - 1] =\
    \ delimeter;\n        result[2 * i] = number;\n    }\n    return result;\n}\n\
    /*\n Insert a number 'delimeter' between every two consecutive elements of input\
    \ array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0) return [];\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n  \
    \  foreach (i, number; numbers[1 .. $]) \n    {\n        result[2 * i - 1] = delimeter;\n\
    \        result[2 * i] = number;\n    }\n    return result;\n}\n/*\n Insert a\
    \ number 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0) return [];\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number;\
    \ numbers[1 .. $]) \n    {\n        result[2 * i - 1] = delimeter;\n        result[2\
    \ * i] = number;\n    }\n    return result;\n}\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n   ", "{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, number; numbers)\n    {\n        result[i * 2] = number;\n        if (i\
    \ != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
